/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 106:
/***/ (function(module) {

"use strict";


module.exports = earcut;
module.exports["default"] = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];

    if (!outerNode || outerNode.next === outerNode.prev) return triangles;

    var minX, minY, maxX, maxY, x, y, invSize;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 32767 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;

    var p = start,
        again;
    do {
        again = false;

        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;

        } else {
            p = p.next;
        }
    } while (again || p !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);

            removeNode(ear);

            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear
    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

    // triangle bbox; min & max are calculated like this for speed
    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);

    var p = c.next;
    while (p !== a) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }

    return true;
}

function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

    // triangle bbox; min & max are calculated like this for speed
    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);

    // z-order range for the current triangle bbox;
    var minZ = zOrder(x0, y0, minX, minY, invSize),
        maxZ = zOrder(x1, y1, minX, minY, invSize);

    var p = ear.prevZ,
        n = ear.nextZ;

    // look for points inside the triangle in both directions
    while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;

        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    // look for remaining points in decreasing z-order
    while (p && p.z >= minZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }

    // look for remaining points in increasing z-order
    while (n && n.z <= maxZ) {
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;

        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

            triangles.push(a.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);

            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);

            p = start = b;
        }
        p = p.next;
    } while (p !== start);

    return filterPoints(p);
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);

                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }

    queue.sort(compareX);

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        outerNode = eliminateHole(queue[i], outerNode);
    }

    return outerNode;
}

function compareX(a, b) {
    return a.x - b.x;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    var bridge = findHoleBridge(hole, outerNode);
    if (!bridge) {
        return outerNode;
    }

    var bridgeReverse = splitPolygon(bridge, hole);

    // filter collinear points around the cuts
    filterPoints(bridgeReverse, bridgeReverse.next);
    return filterPoints(bridge, bridge.next);
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                m = p.x < p.next.x ? p : p.next;
                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint
            }
        }
        p = p.next;
    } while (p !== outerNode);

    if (!m) return null;

    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;

    p = m;

    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if (locallyInside(p, hole) &&
                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
                m = p;
                tanMin = tan;
            }
        }

        p = p.next;
    } while (p !== stop);

    return m;
}

// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}

// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;

    sortLinked(p);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = (x - minX) * invSize | 0;
    y = (y - minY) * invSize | 0;

    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
        p = p.next;
    } while (p !== start);

    return leftmost;
}

// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&
           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&
           (bx - px) * (cy - py) >= (cx - px) * (by - py);
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
}

// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}

// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}

// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    var o1 = sign(area(p1, q1, p2));
    var o2 = sign(area(p1, q1, q2));
    var o3 = sign(area(p2, q2, p1));
    var o4 = sign(area(p2, q2, q1));

    if (o1 !== o2 && o3 !== o4) return true; // general case

    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

    return false;
}

// for collinear points p, q, r, check if point q lies on segment pr
function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}

function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
        p.prev = p;
        p.next = p;

    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}

function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;

    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;

    // vertex coordinates
    this.x = x;
    this.y = y;

    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = 0;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }

    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};

function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}

// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};


/***/ }),

/***/ 659:
/***/ (function(module) {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ 350:
/***/ (function(module) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (Array.isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};


/***/ }),

/***/ 104:
/***/ (function(module) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return Object.keys(obj).map(function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (Array.isArray(obj[k])) {
        return obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};


/***/ }),

/***/ 966:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(350);
exports.encode = exports.stringify = __webpack_require__(104);


/***/ }),

/***/ 884:
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.3.2 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));


/***/ }),

/***/ 760:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
var __webpack_unused_export__;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(884);
var util = __webpack_require__(569);

exports.Qc = urlParse;
exports.DB = urlResolve;
__webpack_unused_export__ = urlResolveObject;
exports.WU = urlFormat;

__webpack_unused_export__ = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(966);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ 569:
/***/ (function(module) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	!function() {
/******/ 		__webpack_require__.nmd = function(module) {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	!function() {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";

;// CONCATENATED MODULE: ./js/dialog.js
const talks = [[''], [], ['Finally! Remind me to take a helicopter for the next trip, Salli.', 'I’d rather avoid meeting pirates and fixing that damn engine every hour.'], ['I’m too old for all this crap, Nath.', 'This time we better get lucky and find something valuable.'], ['Come on guys, we shouldn’t argue and complain.', 'Look how beautiful it is here.'], ['Sorry for that. Just getting sick of pointless adventures.', 'I owe a lot of money to serious people. And they aren’t kidding anymore.'], ['Don’t worry, old man. This campaign will bring us to jackpot for sure.', 'But we gotta hurry. Roman is gonna be here in a couple hours.', 'Let’s go!'], ['I’ve already seen this tree!', 'We are going round and round in circles, Nath!', 'I don’t understand!', 'The entrance is supposed to be right here.', 'I’m kinda tired.', 'You figure out, which direction we should go. I need a rest.'], ['Way to go, girl!', 'I told you, Nath. This lady is a pure diamond!', 'I must admit the truth.', 'Not bad for a journalist, Helena.', 'We are running out of time, boys!', 'I want to see, what’s hidden inside. Let’s roll!']];
/* harmony default export */ var dialog = (talks);
;// CONCATENATED MODULE: ./js/images.js
const preloadImages = ["./assets/media/characters/Helen-sit-scare.webp", "./assets/media/characters/Helen-sit-smile.webp", "./assets/media/characters/drake-surprise-right.webp", "./assets/media/characters/drake-smile-right.webp", "./assets/media/characters/sally-big-surprise.webp", "./assets/media/characters/sally-big-smile.webp"];
/* harmony default export */ var js_images = (preloadImages);
;// CONCATENATED MODULE: ./js/preloadImg.js

const PreloadImg = () => {
  preloadAll();
};
function createImg(src) {
  let body = document.body;
  let img = new Image();
  img.src = src;
  body.appendChild(img);
  removeLoadedImg(body, img);
}
function removeLoadedImg(body, imgEl) {
  imgEl.addEventListener("load", () => {
    body.removeChild(imgEl);
  });
}
function preloadAll() {
  js_images.forEach(img => {
    createImg(img);
  });
}
/* harmony default export */ var preloadImg = (PreloadImg);
;// CONCATENATED MODULE: ./js/onSpine/onSpine.js
let onSpineElements = [];
let onSpineBox = document.querySelector('#onSpine .onSpine__box');
function checkOnSpineScene(nowScene) {
  console.log(nowScene, onSpineElements);
  onSpineElements.forEach(elInfo => {
    if (elInfo.scene == nowScene) {
      showEl(elInfo.el);
    } else {
      hideEl(elInfo.el);
    }
  });
}
function addOnSpineEl(el, scene) {
  onSpineBox.appendChild(el);
  onSpineElements.push({
    el,
    scene
  });
}
function clearOnSpineElements() {
  onSpineElements = [];
  onSpineBox.innerHTML = '';
}
function showEl(el) {
  if (!el.classList.contains('show')) el.classList.add('show');
}
function hideEl(el) {
  if (el.classList.contains('show')) el.classList.remove('show');
}

;// CONCATENATED MODULE: ./js/allScene.js


let sceneCount = 1,
  maxSceneCount = 100;
class Scene {
  scene = null;
  constructor(id) {
    this.id = id;
    sceneCount++;
    this.sceneInitDOM();
  }

  // Создание каркаса сцены
  sceneInitDOM() {
    let container = document.querySelector('#container'),
      scene = document.createElement('div'),
      background = document.createElement('div'),
      characters = document.createElement('div');
    scene.id = `scene${this.id}`;
    scene.classList.add('scene');
    background.classList.add('scene__background', 'background-scene');
    characters.classList.add('scene__characters', 'characters-scene');
    scene.style.zIndex = maxSceneCount - this.id;
    scene.appendChild(background);
    scene.appendChild(characters);
    container.appendChild(scene);
    this.scene = scene;
  }

  // Добавление фона к сцене

  addBackgroud(_ref) {
    let {
      src,
      w = '100%',
      h = '100%',
      t = '0',
      l = '0',
      zIndex,
      objectFit,
      objectPosition,
      name,
      onSpine
    } = _ref;
    let backgroundItem = document.createElement('div'),
      imgBox = document.createElement('div'),
      img = document.createElement('img');
    backgroundItem.classList.add('background-scene__item');
    imgBox.classList.add('img');
    img.src = src;
    backgroundItem.style.width = `${w}`;
    backgroundItem.style.height = `${h}`;
    backgroundItem.style.left = `${l}`;
    backgroundItem.style.top = `${t}`;
    if (zIndex) backgroundItem.style.zIndex = zIndex;
    if (objectFit) img.style.objectFit = objectFit;
    if (objectPosition) img.style.objectPosition = objectPosition;
    if (name) backgroundItem.classList.add(name);
    imgBox.appendChild(img);
    backgroundItem.appendChild(imgBox);
    if (onSpine) {
      addOnSpineEl(backgroundItem, onSpine);
    } else {
      this.scene.querySelector('.background-scene').appendChild(backgroundItem);
    }
  }

  // Добавление персонажей к сцене
  addCharacter(_ref2) {
    let {
      src,
      name,
      w = '100%',
      h = '100%',
      t = '0',
      l = '0',
      zIndex,
      objectFit,
      objectPosition
    } = _ref2;
    let CharacterItem = document.createElement('div'),
      imgBox = document.createElement('div'),
      img = document.createElement('img');
    CharacterItem.classList.add('characters-scene__item');
    imgBox.classList.add('img');
    img.src = src;
    CharacterItem.style.width = `${w}`;
    CharacterItem.style.height = `${h}`;
    CharacterItem.style.left = `${l}`;
    CharacterItem.style.top = `${t}`;
    if (name) CharacterItem.classList.add(name);
    if (zIndex) CharacterItem.style.zIndex = zIndex;
    if (objectFit) img.style.objectFit = objectFit;
    if (objectPosition) img.style.objectPosition = objectPosition;
    imgBox.appendChild(img);
    CharacterItem.appendChild(imgBox);
    this.scene.querySelector('.characters-scene').appendChild(CharacterItem);
  }
  addDiv(className, zIndex, onSpine) {
    let div = document.createElement('div');
    div.classList.add(className);
    if (zIndex) div.style.zIndex = zIndex;
    if (onSpine) {
      addOnSpineEl(div, onSpine);
    } else {
      this.scene.appendChild(div);
    }
  }
}
function resetSceneCount() {
  sceneCount = 1;
}
function setSceneCount(count) {
  sceneCount = count;
}
function allScenesCreate() {
  beach();
  jungle();
}
function jungle() {
  let jungle1 = new Scene(sceneCount);
  jungle1.addBackgroud({
    src: './assets/media/jungle/jungle-bg.webp',
    zIndex: 1,
    objectPosition: 'bottom'
  });
  jungle1.addBackgroud({
    src: './assets/media/jungle/forest.webp',
    zIndex: 5,
    objectPosition: 'bottom',
    onSpine: 8,
    name: 'willShake'
  });
  jungle1.addBackgroud({
    src: './assets/media/jungle/gress.webp',
    h: '20%',
    t: '83%',
    zIndex: 5,
    objectFit: 'contain',
    onSpine: 8,
    name: 'willShake'
  });
  jungle1.addBackgroud({
    src: './assets/media/jungle/wall.webp',
    w: '41%',
    h: '60%',
    t: '13%',
    l: '65%'
  });
  jungle1.addBackgroud({
    src: './assets/media/jungle/stone.webp',
    h: '20%',
    t: '66.5%',
    l: '-10%',
    zIndex: 2,
    objectFit: 'contain'
  });
  jungle1.addBackgroud({
    src: './assets/media/jungle/green.webp',
    w: '18%',
    h: '25%',
    t: '69.5%',
    l: '31%',
    zIndex: 3,
    objectFit: 'contain'
  });
  let jungle2 = new Scene(sceneCount);
  jungle2.addBackgroud({
    src: './assets/media/jungle/jungle-bg.webp',
    zIndex: 1,
    objectPosition: 'bottom'
  });
  jungle2.addBackgroud({
    src: './assets/media/jungle/forest.webp',
    zIndex: 5,
    objectPosition: 'bottom',
    name: 'willShake',
    onSpine: 9
  });
  jungle2.addBackgroud({
    src: './assets/media/jungle/gress.webp',
    h: '20%',
    t: '83%',
    zIndex: 5,
    objectFit: 'contain',
    name: 'willShake',
    onSpine: 9
  });
  jungle2.addBackgroud({
    src: './assets/media/jungle/tonnel.webp',
    w: '32%',
    h: '51%',
    t: '24.5%',
    l: '70%'
  });
  jungle2.addBackgroud({
    src: './assets/media/jungle/wall.webp',
    w: '41%',
    h: '60%',
    t: '13%',
    l: '65%',
    name: 'door-anime'
  });
  jungle2.addBackgroud({
    src: './assets/media/jungle/stone.webp',
    h: '20%',
    t: '66.5%',
    l: '-10%',
    zIndex: 2,
    objectFit: 'contain',
    name: 'stone-anim'
  });
  jungle2.addBackgroud({
    src: './assets/media/jungle/green.webp',
    w: '18%',
    h: '25%',
    t: '69.5%',
    l: '31%',
    zIndex: 3,
    objectFit: 'contain'
  });
  jungle2.addCharacter({
    src: './assets/media/characters/drake-compas.webp',
    name: 'Drake-changeImg',
    w: '21%',
    h: '107%',
    t: '5%',
    l: '53%',
    zIndex: 4,
    objectFit: 'contain'
  });
  jungle2.addCharacter({
    src: './assets/media/characters/Helen-sit.webp',
    name: 'Helena-sit-anim',
    w: '21%',
    h: '107%',
    t: '12%',
    l: '32%',
    zIndex: 4,
    objectFit: 'contain'
  });
}
function beach() {
  let beachStart1 = new Scene(sceneCount);
  beachStart1.addBackgroud({
    src: './assets/media/beach/beach.webp'
  });
  let beachStart2 = new Scene(sceneCount);
  beachStart2.addBackgroud({
    src: './assets/media/beach/beach2.webp'
  });
  beachStart2.addBackgroud({
    src: './assets/media/beach/boating-watercraft.webp',
    w: '121%',
    h: '70%',
    t: '-5%',
    l: '-41%'
  });
  beachStart2.addCharacter({
    src: './assets/media/characters/Drake.webp',
    name: 'Drake',
    w: '35%',
    h: '70%',
    t: '4%',
    l: '30%',
    objectFit: 'contain'
  });
  let beachStart3 = new Scene(sceneCount);
  beachStart3.addBackgroud({
    src: './assets/media/beach/bg1.webp',
    objectPosition: 'bottom'
  });
  beachStart3.addBackgroud({
    src: './assets/media/beach/boating-watercraft.webp',
    w: '145%',
    h: '70%',
    t: '40%',
    l: '-60%'
  });
  let beachStart4 = new Scene(sceneCount);
  beachStart4.addBackgroud({
    src: './assets/media/beach/bg1.webp',
    w: '180%',
    h: '180%',
    t: '-50%',
    l: '-25%'
  });
  beachStart4.addBackgroud({
    src: './assets/media/beach/boating-watercraft.webp',
    w: '200%',
    h: '200%',
    t: '-30%',
    l: '-50%'
  });
  let beachStart5 = new Scene(sceneCount);
  beachStart5.addBackgroud({
    src: './assets/media/beach/bg1.webp',
    w: '158%',
    h: '150%',
    t: '-49%'
  });
  beachStart5.addBackgroud({
    src: './assets/media/beach/boating-watercraft.webp',
    w: '200%',
    h: '200%',
    t: '-30%',
    l: '-11%',
    zIndex: '1',
    onSpine: 5
  });
  let beachStart6 = new Scene(sceneCount);
  beachStart6.addBackgroud({
    src: './assets/media/beach/bg1.webp',
    w: '180%',
    h: '180%',
    t: '-50%',
    l: '-25%'
  });
  beachStart6.addBackgroud({
    src: './assets/media/beach/boating-watercraft.webp',
    w: '200%',
    h: '200%',
    t: '-30%',
    l: '-50%'
  });
  let beachStart7 = new Scene(sceneCount);
  beachStart7.addBackgroud({
    src: './assets/media/beach/bg1.webp',
    objectPosition: 'bottom'
  });
  beachStart7.addBackgroud({
    src: './assets/media/beach/boating-watercraft.webp',
    w: '145%',
    h: '70%',
    t: '40%',
    l: '-60%'
  });
}

;// CONCATENATED MODULE: ./js/spineSceneAdap.js
const adaptive = () => {
  let spineScene = document.querySelector('#spines');
  setScale();
  window.addEventListener('resize', setScale);
  function setScale() {
    spineScene.style.transform = `scale(${(getContainerWidth() / 1350).toFixed(2)})`;
    setTalkSize();
  }
  function getContainerWidth() {
    let containerWidth = document.querySelector('#container').getBoundingClientRect().width;
    return containerWidth;
  }
  function setTalkSize() {
    let talkBlock = document.querySelector('.talk');
    talkBlock.style.fontSize = 30 * (getContainerWidth() / 1920) + 'px';
  }
};
/* harmony default export */ var spineSceneAdap = (adaptive);
;// CONCATENATED MODULE: ./js/scene-creater.js



const SceneCreater = preloader => {
  // Создаем лого предлоадера
  function logoPreloading() {
    let logoWatermark = new Image(),
      logoPreloader = new Image(),
      logoLoadedCount = 0;
    logoWatermark.src = './assets/media/logo.webp';
    logoPreloader.src = './assets/media/logo.webp';
    document.querySelector('#preloader_logo').appendChild(logoPreloader);
    document.querySelector('#watermark-logo').appendChild(logoWatermark);
    [logoWatermark].forEach((logo, i, arr) => {
      logo.addEventListener('load', () => {
        logoLoadedCount++;
        if (logoLoadedCount == arr.length) {
          logoPreloader.classList.add('anim');
          setTimeout(() => {
            let uploadedImages = Array.from(document.querySelectorAll('img'));
            initScene(uploadedImages);
          }, 1000);
        }
      });
    });
  }
  logoPreloading();
  function initScene(uploadedImages) {
    createScenes();
    preloadImg();
    preloader(uploadedImages);
  }
  // Создаем сцены
  function createScenes() {
    allScenesCreate();
    spineSceneAdap();
  }
};

;// CONCATENATED MODULE: ./js/screenResolution.js
let resolution = () => {
  const main = document.querySelector("#container");
  function setResolution() {
    const width = window.innerWidth;
    const height = window.innerHeight;
    if (width / 16 > height / 9) {
      main.style.width = `${height / 9 * 16}px`;
      main.style.height = `${height}px`;
    } else {
      main.style.width = `${width}px`;
      main.style.height = `${width / 16 * 9}px`;
    }
  }
  setResolution();
  window.addEventListener("resize", setResolution);
};
/* harmony default export */ var screenResolution = (resolution);
;// CONCATENATED MODULE: ./js/sound/preloadSounds.js
const allSounds = [];
let allSoundsName = ['вступление', 'Дверь в пещеру', 'Джунгли 1', 'Джунгли 2', 'Джунгли 3', 'Камень вниз', 'море', 'прыжок в песок', 'чайки', 'шаги по песку'];
function preloadSounds() {
  allSoundsName.forEach(soundName => {
    let audio = new Audio(`./assets/audio/${soundName}.mp3`);
    allSounds.push({
      name: soundName,
      audio: audio
    });
  });
}

;// CONCATENATED MODULE: ./js/sound/sound.js

let sound = {
  playAudio,
  pauseAudio,
  onVolumeSound,
  offVolumeSound,
  isPausedAudio
};
let soundsVolume = {};
let off = false;
let audioCtx;
function getSound(audioName) {
  return allSounds.find(sound => sound.name === audioName);
}
function isPausedAudio(audioName) {
  let sound = getSound(audioName);
  return sound.audio.paused;
}
function playAudio(_ref) {
  let {
    audioName,
    isLoop,
    startTime = 0,
    endTime = null,
    volume = 1,
    delay = 0,
    decrease = 0,
    duration
  } = _ref;
  if (!audioCtx) {
    audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    addAllSoundGain();
  }
  let sound = getSound(audioName);
  setVolume(sound, off ? 0 : volume);
  if (volume !== 1) addVolumes(audioName, volume);
  sound.audio.currentTime = startTime;
  if (endTime) {
    setTime(sound.audio, startTime, endTime, isLoop);
  } else if (isLoop) {
    setLoop(sound.audio, startTime);
  }
  setTimeout(() => {
    console.log(sound.audio, 'play');
    sound.audio.play();
    setDurationAndDecrease(sound.audio, audioName, duration, decrease);
  }, delay);
  return sound.audio;
}
function setDurationAndDecrease(audio, audioName, duration, decrease) {
  if (duration) setTimeout(() => pauseAudio({
    audioName,
    decrease
  }), duration);
}
function setLoop(audio, startTime) {
  audio.onended = () => {
    // console.log(audio, 'play')
    audio.currentTime = startTime;
    audio.play();
  };
}
function setTime(audio, startTime, endTime, isLoop) {
  audio.ontimeupdate = () => {
    if (audio.currentTime >= endTime && isLoop) {
      audio.currentTime = startTime;
    } else if (audio.currentTime >= endTime) {
      audio.pause();
    }
  };
}
function pauseAudio(_ref2) {
  let {
    audioName,
    decrease = 0
  } = _ref2;
  let sound = allSounds.find(sound => sound.name === audioName);
  if (decrease) {
    decreaseVolume(decrease, sound);
    return;
  }
  sound.audio.pause();
}
function onVolumeSound() {
  off = false;
  allSounds.forEach(sound => {
    let isHaveVolume = (sound.name in soundsVolume);
    setVolume(sound, isHaveVolume ? soundsVolume[sound.name] : 1);
  });
}
function decreaseVolume(duration, sound) {
  let decreaseStep = sound.gainNode.gain.value / (duration / 1000 * 60);
  let currentVolume = sound.gainNode.gain.value;
  let decreaseInterval = setInterval(() => {
    currentVolume -= decreaseStep;
    if (currentVolume <= 0) {
      clearInterval(decreaseInterval);
      sound.audio.pause();
    } else {
      setVolume(sound, currentVolume);
    }
  }, 1000 / 60);
}
function offVolumeSound() {
  off = true;
  allSounds.forEach(sound => setVolume(sound, 0));
}
function addVolumes(audioName, volume) {
  soundsVolume[audioName] = volume;
}
function setVolume(sound, volume) {
  sound.gainNode.gain.value = volume;
}
function addAllSoundGain() {
  allSounds.forEach(sound => {
    let source = audioCtx.createMediaElementSource(sound.audio);
    let gainNode = audioCtx.createGain();
    source.connect(gainNode);
    gainNode.connect(audioCtx.destination);
    sound.source = source;
    sound.gainNode = gainNode;
  });
}

;// CONCATENATED MODULE: ./js/sound/soundAction.js

let soundAction = () => {
  let soundBlock, soundFlag, iconOff, iconOn;
  soundBlock = document.querySelector('.settings .sound');
  iconOff = document.querySelector('.settings .sound .sound__off object');
  iconOn = document.querySelector('.settings .sound .sound__on object');
  soundFlag = true;
  soundBlock.addEventListener('click', soundModeChange);
  function soundModeChange() {
    soundFlag = !soundFlag;
    if (soundFlag) {
      sound.onVolumeSound();
      soundBlock.classList.add('on');
      iconOn.data = "./assets/media/icons/sound-on.svg";
    } else {
      sound.offVolumeSound();
      soundBlock.classList.remove('on');
      iconOff.data = "./assets/media/icons/sound-off.svg";
    }
  }
};
/* harmony default export */ var sound_soundAction = (soundAction);
;// CONCATENATED MODULE: ./js/fullscreen.js
let fullscreen = () => {
  let fullscreenBlock, fullscreenIcon;
  fullscreenBlock = document.querySelector(".settings .fullscreen");
  fullscreenIcon = document.querySelector(".settings .fullscreen .fullscreen__icon object");
  fullscreenBlock.addEventListener("click", fullscreenModeChange);
  // if (/iPhone/i.test(navigator.userAgent)) {
  //     fullscreenBlock.remove()
  // }

  function fullscreenModeChange() {
    let fullscreenEl = document.fullscreenElement && document.fullscreenElement !== null || document.webkitFullscreenElement && document.webkitFullscreenElement !== null || document.mozFullScreenElement && document.mozFullScreenElement !== null || document.msFullscreenElement && document.msFullscreenElement !== null;
    if (fullscreenEl) {
      exitFullscreen();
      fullscreenIcon.data = './assets/media/icons/goFullScreen.svg';
    } else {
      goFullscreen();
      fullscreenIcon.data = './assets/media/icons/goNormalScreen.svg';
    }
  }
};
function goFullscreen() {
  let docEl = document.documentElement;
  if (docEl.requestFullscreen) {
    docEl.requestFullscreen();
  } else if (docEl.msRequestFullscreen) {
    docEl.msRequestFullscreen();
  } else if (docEl.mozRequestFullScreen) {
    docEl.mozRequestFullScreen();
  } else if (docEl.webkitRequestFullscreen) {
    docEl.webkitRequestFullscreen();
  }
}
function exitFullscreen() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.msexitFullscreen) {
    document.msexitFullscreen();
  } else if (document.mozexitFullscreen) {
    document.mozexitFullscreen();
  } else if (document.webkitexitFullscreen) {
    document.webkitexitFullscreen();
  }
}
/* harmony default export */ var js_fullscreen = (fullscreen);
;// CONCATENATED MODULE: ./js/keyListener.js

let isKeyListener = v => {
  islisten = v;
};
let islisten = true;
window.addEventListener("keydown", keyDown);
function keyDown(e) {
  if (!islisten) return;
  if (e.code == "Space" || e.code == "ArrowRight") {
    change_btns.activeBtn.click();
  }
}
/* harmony default export */ var keyListener = (isKeyListener);
;// CONCATENATED MODULE: ./js/change-btns.js

let continueBtn = document.querySelector('.continue-btn');
let nextBtn = document.querySelector('.next-btn');
const change_btns_button = {
  btnBox: document.querySelector('#change-btn'),
  activeBtn: nextBtn,
  hideBtn,
  showBtn,
  changeBtn,
  clickCallback
};
function hideBtn() {
  keyListener(false);
  change_btns_button.btnBox.classList.add('hide');
  change_btns_button.activeBtn.disabled = true;
}
function showBtn() {
  keyListener(true);
  change_btns_button.btnBox.classList.remove('hide');
  change_btns_button.activeBtn.disabled = false;
}
function changeBtn(btnType) {
  console.log(btnType);
  if (btnType === 'continue' && change_btns_button.activeBtn != continueBtn) {
    change_btns_button.activeBtn = continueBtn;
    change_btns_button.btnBox.classList.remove('next');
    setTimeout(() => change_btns_button.btnBox.classList.add('continue'), 200);
  } else if (btnType === 'next' && change_btns_button.activeBtn != nextBtn) {
    change_btns_button.activeBtn = nextBtn;
    change_btns_button.btnBox.classList.remove('continue');
    setTimeout(() => change_btns_button.btnBox.classList.add('next'), 200);
  }
}
function clickCallback(func) {
  continueBtn.addEventListener('click', () => {
    if (change_btns_button.activeBtn == continueBtn) func();
  });
  nextBtn.addEventListener('click', () => {
    if (change_btns_button.activeBtn == nextBtn) func();
  });
}
/* harmony default export */ var change_btns = (change_btns_button);
;// CONCATENATED MODULE: ./js/preloader.js


const Preloader = uploadedImages => {
  preloadSounds();
  let preloader = document.querySelector('#preloader'),
    preloaderProgressBg = document.querySelector('.preloader__background'),
    media = Array.from(document.querySelectorAll('img , video')),
    audio = allSounds,
    percentEl = document.querySelector('#loadPercent'),
    allElCount = media.length - uploadedImages.length + audio.length,
    loadedElements = 0,
    percentValue = 0;
  function listenLoads() {
    media.forEach(el => {
      el.addEventListener('load', loaded, {
        once: true
      });
      el.addEventListener('error', loaded);
    });
    audio.forEach(el => {
      el.audio.addEventListener('progress', loaded, {
        once: true
      });
      el.audio.addEventListener('error', loaded);
    });
  }
  function loaded() {
    loadedElements++;
    countPercent();
  }
  function removeListener() {
    media.forEach(el => {
      el.removeEventListener('load', loaded);
      el.removeEventListener('error', loaded);
    });
    audio.forEach(el => {
      el.audio.removeEventListener('canplaythrough', loaded, false);
      el.audio.removeEventListener('error', loaded);
    });
  }
  function countPercent() {
    if (allElCount === loadedElements) {
      percentValue = 100;
      setTimeout(hidePreloaderProgress, 500);
      removeListener();
      change_btns.hideBtn();
    } else {
      percentValue = (loadedElements / allElCount * 100).toFixed(0);
    }
    setPercentValue();
  }
  function setPercentValue() {
    if (percentValue > 100) {
      percentValue = 100;
    }
    percentEl.textContent = percentValue;
    preloaderProgressBg.style.width = `${percentValue}%`;
  }
  function hidePreloaderProgress() {
    preloader.classList.add('hideProgress');
  }

  // init
  ;
  (function initPreloader() {
    listenLoads();
  })();
};
/* harmony default export */ var preloader = (Preloader);
;// CONCATENATED MODULE: ../node_modules/typed.js/dist/typed.module.js
function t(){return t=Object.assign?Object.assign.bind():function(t){for(var s=1;s<arguments.length;s++){var e=arguments[s];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])}return t},t.apply(this,arguments)}var s={strings:["These are the default values...","You know what you should do?","Use your own!","Have a great day!"],stringsElement:null,typeSpeed:0,startDelay:0,backSpeed:0,smartBackspace:!0,shuffle:!1,backDelay:700,fadeOut:!1,fadeOutClass:"typed-fade-out",fadeOutDelay:500,loop:!1,loopCount:Infinity,showCursor:!0,cursorChar:"|",autoInsertCss:!0,attr:null,bindInputFocusEvents:!1,contentType:"html",onBegin:function(t){},onComplete:function(t){},preStringTyped:function(t,s){},onStringTyped:function(t,s){},onLastStringBackspaced:function(t){},onTypingPaused:function(t,s){},onTypingResumed:function(t,s){},onReset:function(t){},onStop:function(t,s){},onStart:function(t,s){},onDestroy:function(t){}},e=new(/*#__PURE__*/function(){function e(){}var n=e.prototype;return n.load=function(e,n,i){if(e.el="string"==typeof i?document.querySelector(i):i,e.options=t({},s,n),e.isInput="input"===e.el.tagName.toLowerCase(),e.attr=e.options.attr,e.bindInputFocusEvents=e.options.bindInputFocusEvents,e.showCursor=!e.isInput&&e.options.showCursor,e.cursorChar=e.options.cursorChar,e.cursorBlinking=!0,e.elContent=e.attr?e.el.getAttribute(e.attr):e.el.textContent,e.contentType=e.options.contentType,e.typeSpeed=e.options.typeSpeed,e.startDelay=e.options.startDelay,e.backSpeed=e.options.backSpeed,e.smartBackspace=e.options.smartBackspace,e.backDelay=e.options.backDelay,e.fadeOut=e.options.fadeOut,e.fadeOutClass=e.options.fadeOutClass,e.fadeOutDelay=e.options.fadeOutDelay,e.isPaused=!1,e.strings=e.options.strings.map(function(t){return t.trim()}),e.stringsElement="string"==typeof e.options.stringsElement?document.querySelector(e.options.stringsElement):e.options.stringsElement,e.stringsElement){e.strings=[],e.stringsElement.style.cssText="clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;";var r=Array.prototype.slice.apply(e.stringsElement.children),o=r.length;if(o)for(var a=0;a<o;a+=1)e.strings.push(r[a].innerHTML.trim())}for(var u in e.strPos=0,e.currentElContent=this.getCurrentElContent(e),e.currentElContent&&e.currentElContent.length>0&&(e.strPos=e.currentElContent.length-1,e.strings.unshift(e.currentElContent)),e.sequence=[],e.strings)e.sequence[u]=u;e.arrayPos=0,e.stopNum=0,e.loop=e.options.loop,e.loopCount=e.options.loopCount,e.curLoop=0,e.shuffle=e.options.shuffle,e.pause={status:!1,typewrite:!0,curString:"",curStrPos:0},e.typingComplete=!1,e.autoInsertCss=e.options.autoInsertCss,e.autoInsertCss&&(this.appendCursorAnimationCss(e),this.appendFadeOutAnimationCss(e))},n.getCurrentElContent=function(t){return t.attr?t.el.getAttribute(t.attr):t.isInput?t.el.value:"html"===t.contentType?t.el.innerHTML:t.el.textContent},n.appendCursorAnimationCss=function(t){var s="data-typed-js-cursor-css";if(t.showCursor&&!document.querySelector("["+s+"]")){var e=document.createElement("style");e.setAttribute(s,"true"),e.innerHTML="\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      ",document.body.appendChild(e)}},n.appendFadeOutAnimationCss=function(t){var s="data-typed-fadeout-js-css";if(t.fadeOut&&!document.querySelector("["+s+"]")){var e=document.createElement("style");e.setAttribute(s,"true"),e.innerHTML="\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      ",document.body.appendChild(e)}},e}()),n=new(/*#__PURE__*/function(){function t(){}var s=t.prototype;return s.typeHtmlChars=function(t,s,e){if("html"!==e.contentType)return s;var n=t.substring(s).charAt(0);if("<"===n||"&"===n){var i;for(i="<"===n?">":";";t.substring(s+1).charAt(0)!==i&&!(1+ ++s>t.length););s++}return s},s.backSpaceHtmlChars=function(t,s,e){if("html"!==e.contentType)return s;var n=t.substring(s).charAt(0);if(">"===n||";"===n){var i;for(i=">"===n?"<":"&";t.substring(s-1).charAt(0)!==i&&!(--s<0););s--}return s},t}()),i=/*#__PURE__*/function(){function t(t,s){e.load(this,s,t),this.begin()}var s=t.prototype;return s.toggle=function(){this.pause.status?this.start():this.stop()},s.stop=function(){this.typingComplete||this.pause.status||(this.toggleBlinking(!0),this.pause.status=!0,this.options.onStop(this.arrayPos,this))},s.start=function(){this.typingComplete||this.pause.status&&(this.pause.status=!1,this.pause.typewrite?this.typewrite(this.pause.curString,this.pause.curStrPos):this.backspace(this.pause.curString,this.pause.curStrPos),this.options.onStart(this.arrayPos,this))},s.destroy=function(){this.reset(!1),this.options.onDestroy(this)},s.reset=function(t){void 0===t&&(t=!0),clearInterval(this.timeout),this.replaceText(""),this.cursor&&this.cursor.parentNode&&(this.cursor.parentNode.removeChild(this.cursor),this.cursor=null),this.strPos=0,this.arrayPos=0,this.curLoop=0,t&&(this.insertCursor(),this.options.onReset(this),this.begin())},s.begin=function(){var t=this;this.options.onBegin(this),this.typingComplete=!1,this.shuffleStringsIfNeeded(this),this.insertCursor(),this.bindInputFocusEvents&&this.bindFocusEvents(),this.timeout=setTimeout(function(){0===t.strPos?t.typewrite(t.strings[t.sequence[t.arrayPos]],t.strPos):t.backspace(t.strings[t.sequence[t.arrayPos]],t.strPos)},this.startDelay)},s.typewrite=function(t,s){var e=this;this.fadeOut&&this.el.classList.contains(this.fadeOutClass)&&(this.el.classList.remove(this.fadeOutClass),this.cursor&&this.cursor.classList.remove(this.fadeOutClass));var i=this.humanizer(this.typeSpeed),r=1;!0!==this.pause.status?this.timeout=setTimeout(function(){s=n.typeHtmlChars(t,s,e);var i=0,o=t.substring(s);if("^"===o.charAt(0)&&/^\^\d+/.test(o)){var a=1;a+=(o=/\d+/.exec(o)[0]).length,i=parseInt(o),e.temporaryPause=!0,e.options.onTypingPaused(e.arrayPos,e),t=t.substring(0,s)+t.substring(s+a),e.toggleBlinking(!0)}if("`"===o.charAt(0)){for(;"`"!==t.substring(s+r).charAt(0)&&(r++,!(s+r>t.length)););var u=t.substring(0,s),p=t.substring(u.length+1,s+r),c=t.substring(s+r+1);t=u+p+c,r--}e.timeout=setTimeout(function(){e.toggleBlinking(!1),s>=t.length?e.doneTyping(t,s):e.keepTyping(t,s,r),e.temporaryPause&&(e.temporaryPause=!1,e.options.onTypingResumed(e.arrayPos,e))},i)},i):this.setPauseStatus(t,s,!0)},s.keepTyping=function(t,s,e){0===s&&(this.toggleBlinking(!1),this.options.preStringTyped(this.arrayPos,this));var n=t.substring(0,s+=e);this.replaceText(n),this.typewrite(t,s)},s.doneTyping=function(t,s){var e=this;this.options.onStringTyped(this.arrayPos,this),this.toggleBlinking(!0),this.arrayPos===this.strings.length-1&&(this.complete(),!1===this.loop||this.curLoop===this.loopCount)||(this.timeout=setTimeout(function(){e.backspace(t,s)},this.backDelay))},s.backspace=function(t,s){var e=this;if(!0!==this.pause.status){if(this.fadeOut)return this.initFadeOut();this.toggleBlinking(!1);var i=this.humanizer(this.backSpeed);this.timeout=setTimeout(function(){s=n.backSpaceHtmlChars(t,s,e);var i=t.substring(0,s);if(e.replaceText(i),e.smartBackspace){var r=e.strings[e.arrayPos+1];e.stopNum=r&&i===r.substring(0,s)?s:0}s>e.stopNum?(s--,e.backspace(t,s)):s<=e.stopNum&&(e.arrayPos++,e.arrayPos===e.strings.length?(e.arrayPos=0,e.options.onLastStringBackspaced(),e.shuffleStringsIfNeeded(),e.begin()):e.typewrite(e.strings[e.sequence[e.arrayPos]],s))},i)}else this.setPauseStatus(t,s,!1)},s.complete=function(){this.options.onComplete(this),this.loop?this.curLoop++:this.typingComplete=!0},s.setPauseStatus=function(t,s,e){this.pause.typewrite=e,this.pause.curString=t,this.pause.curStrPos=s},s.toggleBlinking=function(t){this.cursor&&(this.pause.status||this.cursorBlinking!==t&&(this.cursorBlinking=t,t?this.cursor.classList.add("typed-cursor--blink"):this.cursor.classList.remove("typed-cursor--blink")))},s.humanizer=function(t){return Math.round(Math.random()*t/2)+t},s.shuffleStringsIfNeeded=function(){this.shuffle&&(this.sequence=this.sequence.sort(function(){return Math.random()-.5}))},s.initFadeOut=function(){var t=this;return this.el.className+=" "+this.fadeOutClass,this.cursor&&(this.cursor.className+=" "+this.fadeOutClass),setTimeout(function(){t.arrayPos++,t.replaceText(""),t.strings.length>t.arrayPos?t.typewrite(t.strings[t.sequence[t.arrayPos]],0):(t.typewrite(t.strings[0],0),t.arrayPos=0)},this.fadeOutDelay)},s.replaceText=function(t){this.attr?this.el.setAttribute(this.attr,t):this.isInput?this.el.value=t:"html"===this.contentType?this.el.innerHTML=t:this.el.textContent=t},s.bindFocusEvents=function(){var t=this;this.isInput&&(this.el.addEventListener("focus",function(s){t.stop()}),this.el.addEventListener("blur",function(s){t.el.value&&0!==t.el.value.length||t.start()}))},s.insertCursor=function(){this.showCursor&&(this.cursor||(this.cursor=document.createElement("span"),this.cursor.className="typed-cursor",this.cursor.setAttribute("aria-hidden",!0),this.cursor.innerHTML=this.cursorChar,this.el.parentNode&&this.el.parentNode.insertBefore(this.cursor,this.el.nextSibling)))},t}();
//# sourceMappingURL=typed.module.js.map

;// CONCATENATED MODULE: ./js/talk-updateer.js


let typed = new i('.talk .talk__text p', {
  strings: [''],
  typeSpeed: 20,
  showCursor: false,
  fadeOut: true,
  fadeOutDelay: 0,
  onComplete: e => {
    if (e.strings[0] !== '[JS]hide') change_btns.showBtn();
  }
});
let talkElement = document.querySelector('.talk');
let lastType = null;
function TalkUpdate(str, top, left, type) {
  if (talkElement.classList.contains('talking')) talkElement.classList.remove('talking');
  if (lastType) talkElement.classList.remove(`${lastType}`);
  if (str !== '' && str !== '[JS]hide') {
    lastType = type;
    talkElement.classList.add(`${type}`);
    talkElement.style.top = `${top}%`;
    talkElement.style.left = `${left}%`;
    talkElement.classList.add('talking');
  } else {
    talkElement.classList.remove('talking');
  }
  typed.destroy();
  typed.strings = [str];
  typed.begin();
  change_btns.hideBtn();
}
/* harmony default export */ var talk_updateer = (TalkUpdate);
;// CONCATENATED MODULE: ./js/warn-btn.js
let btn = document.querySelector('#warn-btn'),
  warning = document.querySelector('.warning');
const Warning = StartFunction => {
  btn.addEventListener('click', closeWarning, {
    once: true
  });
  function closeWarning() {
    warning.classList.add('hide');
    StartFunction();
  }
};
function showWarnBtn() {
  btn.classList.add('show');
}

;// CONCATENATED MODULE: ./js/sceneSettings.js
const TALKING_POSITIONS = [{
  modifyScene: {
    delayTalk: 2000
  },
  sound: {
    play: [{
      audioName: 'море',
      isLoop: true,
      volume: 0.25,
      startTime: 38
    }, {
      audioName: 'чайки',
      isLoop: true,
      volume: 0.2,
      startTime: 17,
      endTime: 31
    }]
  }
}, {
  modifyScene: {
    fadeStart: 1200,
    fadeNext: 1200,
    next: true,
    delayNext: 10000,
    delayUpdate: 1000,
    delayTalk: 0,
    anim: ['#scene2']
  },
  sound: {
    pause: [{
      audioName: 'вступление',
      decrease: 2000
    }],
    play: [{
      audioName: 'шаги по песку',
      startTime: 7
    }]
  }
}, {
  modifyScene: {
    btn: 'continue'
  },
  talk1: {
    top: 17,
    left: 36,
    type: 'bl'
  },
  talk2: {
    top: 17,
    left: 36,
    type: 'bl'
  }
}, {
  talk1: {
    top: 29,
    left: 60,
    type: 'cl'
  },
  talk2: {
    top: 29,
    left: 60,
    type: 'cl'
  }
}, {
  talk1: {
    top: 7,
    left: 30,
    type: 'bl'
  },
  talk2: {
    top: 7,
    left: 30,
    type: 'bl'
  }
}, {
  talk1: {
    top: 39,
    left: 61,
    type: 'cl'
  },
  talk2: {
    top: 39,
    left: 61,
    type: 'cl'
  }
}, {
  modifyScene: {
    btnEnd: 'next'
  },
  talk1: {
    top: 39,
    left: 47,
    type: 'cl'
  },
  talk2: {
    top: 39,
    left: 47,
    type: 'cl'
  },
  talk3: {
    top: 39,
    left: 47,
    type: 'cl'
  }
}, {
  sound: {
    play: [{
      audioName: 'Джунгли 3',
      isLoop: true,
      volume: 0.2
    }],
    pause: [{
      audioName: 'море'
    }, {
      audioName: 'чайки'
    }]
  },
  modifyScene: {
    fadeStart: 1200,
    delayTalk: 2000,
    delayUpdate: 1000,
    btn: 'continue',
    btnEnd: 'next'
  },
  talk1: {
    top: 22,
    left: 12,
    type: 'cl'
  },
  talk2: {
    top: 22,
    left: 12,
    type: 'cl'
  },
  talk3: {
    top: 22,
    left: 70,
    type: 'cl'
  },
  talk4: {
    top: 22,
    left: 70,
    type: 'cl'
  },
  talk5: {
    top: 24,
    left: 27.5,
    type: 'bc'
  },
  talk6: {
    top: 20,
    left: 27.5,
    type: 'bc'
  }
}, {
  modifyScene: {
    btn: 'continue',
    btnEnd: 'next',
    // отдельно менять еще тайминги в anim.scss для этого слайда
    fadeStart: 2100,
    delayUpdate: 2000,
    delayTalk: 14000,
    anim: ['.Helena-sit-anim', '.stone-anim', '.door-anime', '#scene9'],
    shake: {
      delay: 5000,
      transition: 5000
    },
    imgChange: [{
      target: 'Helena-sit-anim',
      img1: {
        src: './assets/media/characters/Helen-sit-scare.webp',
        delay: 5000
      }
      // img2: {
      // 	src: './assets/media/characters/Helen-sit-smile.webp',
      // 	delay: 14000,
      // },
    }, {
      target: 'Drake-changeImg',
      img1: {
        src: './assets/media/characters/drake-surprise-right.webp',
        delay: 5000
      },
      img2: {
        src: './assets/media/characters/drake-smile-right.webp',
        delay: 14000
      }
    }]
  },
  sound: {
    play: [{
      audioName: 'Камень вниз',
      startTime: 10,
      delay: 5000
    }, {
      audioName: 'Дверь в пещеру',
      delay: 10000,
      endTime: 4
    }]
  },
  talk1: {
    top: 24,
    left: 13,
    type: 'cl'
  },
  talk2: {
    top: 24,
    left: 13,
    type: 'cl'
  },
  talk3: {
    top: 27,
    left: 70,
    type: 'cl'
  },
  talk4: {
    top: 27,
    left: 70,
    type: 'cl'
  },
  talk5: {
    top: 33,
    left: 26,
    type: 'bc'
  },
  talk6: {
    top: 33,
    left: 26,
    type: 'bc'
  }
}];
/* harmony default export */ var sceneSettings = (TALKING_POSITIONS);
;// CONCATENATED MODULE: ../node_modules/@pixi/constants/dist/esm/constants.mjs
/*!
 * @pixi/constants - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/constants is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
/**
 * Different types of environments for WebGL.
 * @static
 * @memberof PIXI
 * @name ENV
 * @enum {number}
 * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility
 *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.
 * @property {number} WEBGL - Version 1 of WebGL
 * @property {number} WEBGL2 - Version 2 of WebGL
 */
var ENV;
(function (ENV) {
    ENV[ENV["WEBGL_LEGACY"] = 0] = "WEBGL_LEGACY";
    ENV[ENV["WEBGL"] = 1] = "WEBGL";
    ENV[ENV["WEBGL2"] = 2] = "WEBGL2";
})(ENV || (ENV = {}));
/**
 * Constant to identify the Renderer Type.
 * @static
 * @memberof PIXI
 * @name RENDERER_TYPE
 * @enum {number}
 * @property {number} UNKNOWN - Unknown render type.
 * @property {number} WEBGL - WebGL render type.
 * @property {number} CANVAS - Canvas render type.
 */
var RENDERER_TYPE;
(function (RENDERER_TYPE) {
    RENDERER_TYPE[RENDERER_TYPE["UNKNOWN"] = 0] = "UNKNOWN";
    RENDERER_TYPE[RENDERER_TYPE["WEBGL"] = 1] = "WEBGL";
    RENDERER_TYPE[RENDERER_TYPE["CANVAS"] = 2] = "CANVAS";
})(RENDERER_TYPE || (RENDERER_TYPE = {}));
/**
 * Bitwise OR of masks that indicate the buffers to be cleared.
 * @static
 * @memberof PIXI
 * @name BUFFER_BITS
 * @enum {number}
 * @property {number} COLOR - Indicates the buffers currently enabled for color writing.
 * @property {number} DEPTH - Indicates the depth buffer.
 * @property {number} STENCIL - Indicates the stencil buffer.
 */
var BUFFER_BITS;
(function (BUFFER_BITS) {
    BUFFER_BITS[BUFFER_BITS["COLOR"] = 16384] = "COLOR";
    BUFFER_BITS[BUFFER_BITS["DEPTH"] = 256] = "DEPTH";
    BUFFER_BITS[BUFFER_BITS["STENCIL"] = 1024] = "STENCIL";
})(BUFFER_BITS || (BUFFER_BITS = {}));
/**
 * Various blend modes supported by PIXI.
 *
 * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.
 * Anything else will silently act like NORMAL.
 * @memberof PIXI
 * @name BLEND_MODES
 * @enum {number}
 * @property {number} NORMAL -
 * @property {number} ADD -
 * @property {number} MULTIPLY -
 * @property {number} SCREEN -
 * @property {number} OVERLAY -
 * @property {number} DARKEN -
 * @property {number} LIGHTEN -
 * @property {number} COLOR_DODGE -
 * @property {number} COLOR_BURN -
 * @property {number} HARD_LIGHT -
 * @property {number} SOFT_LIGHT -
 * @property {number} DIFFERENCE -
 * @property {number} EXCLUSION -
 * @property {number} HUE -
 * @property {number} SATURATION -
 * @property {number} COLOR -
 * @property {number} LUMINOSITY -
 * @property {number} NORMAL_NPM -
 * @property {number} ADD_NPM -
 * @property {number} SCREEN_NPM -
 * @property {number} NONE -
 * @property {number} SRC_IN -
 * @property {number} SRC_OUT -
 * @property {number} SRC_ATOP -
 * @property {number} DST_OVER -
 * @property {number} DST_IN -
 * @property {number} DST_OUT -
 * @property {number} DST_ATOP -
 * @property {number} SUBTRACT -
 * @property {number} SRC_OVER -
 * @property {number} ERASE -
 * @property {number} XOR -
 */
var BLEND_MODES;
(function (BLEND_MODES) {
    BLEND_MODES[BLEND_MODES["NORMAL"] = 0] = "NORMAL";
    BLEND_MODES[BLEND_MODES["ADD"] = 1] = "ADD";
    BLEND_MODES[BLEND_MODES["MULTIPLY"] = 2] = "MULTIPLY";
    BLEND_MODES[BLEND_MODES["SCREEN"] = 3] = "SCREEN";
    BLEND_MODES[BLEND_MODES["OVERLAY"] = 4] = "OVERLAY";
    BLEND_MODES[BLEND_MODES["DARKEN"] = 5] = "DARKEN";
    BLEND_MODES[BLEND_MODES["LIGHTEN"] = 6] = "LIGHTEN";
    BLEND_MODES[BLEND_MODES["COLOR_DODGE"] = 7] = "COLOR_DODGE";
    BLEND_MODES[BLEND_MODES["COLOR_BURN"] = 8] = "COLOR_BURN";
    BLEND_MODES[BLEND_MODES["HARD_LIGHT"] = 9] = "HARD_LIGHT";
    BLEND_MODES[BLEND_MODES["SOFT_LIGHT"] = 10] = "SOFT_LIGHT";
    BLEND_MODES[BLEND_MODES["DIFFERENCE"] = 11] = "DIFFERENCE";
    BLEND_MODES[BLEND_MODES["EXCLUSION"] = 12] = "EXCLUSION";
    BLEND_MODES[BLEND_MODES["HUE"] = 13] = "HUE";
    BLEND_MODES[BLEND_MODES["SATURATION"] = 14] = "SATURATION";
    BLEND_MODES[BLEND_MODES["COLOR"] = 15] = "COLOR";
    BLEND_MODES[BLEND_MODES["LUMINOSITY"] = 16] = "LUMINOSITY";
    BLEND_MODES[BLEND_MODES["NORMAL_NPM"] = 17] = "NORMAL_NPM";
    BLEND_MODES[BLEND_MODES["ADD_NPM"] = 18] = "ADD_NPM";
    BLEND_MODES[BLEND_MODES["SCREEN_NPM"] = 19] = "SCREEN_NPM";
    BLEND_MODES[BLEND_MODES["NONE"] = 20] = "NONE";
    BLEND_MODES[BLEND_MODES["SRC_OVER"] = 0] = "SRC_OVER";
    BLEND_MODES[BLEND_MODES["SRC_IN"] = 21] = "SRC_IN";
    BLEND_MODES[BLEND_MODES["SRC_OUT"] = 22] = "SRC_OUT";
    BLEND_MODES[BLEND_MODES["SRC_ATOP"] = 23] = "SRC_ATOP";
    BLEND_MODES[BLEND_MODES["DST_OVER"] = 24] = "DST_OVER";
    BLEND_MODES[BLEND_MODES["DST_IN"] = 25] = "DST_IN";
    BLEND_MODES[BLEND_MODES["DST_OUT"] = 26] = "DST_OUT";
    BLEND_MODES[BLEND_MODES["DST_ATOP"] = 27] = "DST_ATOP";
    BLEND_MODES[BLEND_MODES["ERASE"] = 26] = "ERASE";
    BLEND_MODES[BLEND_MODES["SUBTRACT"] = 28] = "SUBTRACT";
    BLEND_MODES[BLEND_MODES["XOR"] = 29] = "XOR";
})(BLEND_MODES || (BLEND_MODES = {}));
/**
 * Various webgl draw modes. These can be used to specify which GL drawMode to use
 * under certain situations and renderers.
 * @memberof PIXI
 * @static
 * @name DRAW_MODES
 * @enum {number}
 * @property {number} POINTS -
 * @property {number} LINES -
 * @property {number} LINE_LOOP -
 * @property {number} LINE_STRIP -
 * @property {number} TRIANGLES -
 * @property {number} TRIANGLE_STRIP -
 * @property {number} TRIANGLE_FAN -
 */
var DRAW_MODES;
(function (DRAW_MODES) {
    DRAW_MODES[DRAW_MODES["POINTS"] = 0] = "POINTS";
    DRAW_MODES[DRAW_MODES["LINES"] = 1] = "LINES";
    DRAW_MODES[DRAW_MODES["LINE_LOOP"] = 2] = "LINE_LOOP";
    DRAW_MODES[DRAW_MODES["LINE_STRIP"] = 3] = "LINE_STRIP";
    DRAW_MODES[DRAW_MODES["TRIANGLES"] = 4] = "TRIANGLES";
    DRAW_MODES[DRAW_MODES["TRIANGLE_STRIP"] = 5] = "TRIANGLE_STRIP";
    DRAW_MODES[DRAW_MODES["TRIANGLE_FAN"] = 6] = "TRIANGLE_FAN";
})(DRAW_MODES || (DRAW_MODES = {}));
/**
 * Various GL texture/resources formats.
 * @memberof PIXI
 * @static
 * @name FORMATS
 * @enum {number}
 * @property {number} [RGBA=6408] -
 * @property {number} [RGB=6407] -
 * @property {number} [RG=33319] -
 * @property {number} [RED=6403] -
 * @property {number} [RGBA_INTEGER=36249] -
 * @property {number} [RGB_INTEGER=36248] -
 * @property {number} [RG_INTEGER=33320] -
 * @property {number} [RED_INTEGER=36244] -
 * @property {number} [ALPHA=6406] -
 * @property {number} [LUMINANCE=6409] -
 * @property {number} [LUMINANCE_ALPHA=6410] -
 * @property {number} [DEPTH_COMPONENT=6402] -
 * @property {number} [DEPTH_STENCIL=34041] -
 */
var FORMATS;
(function (FORMATS) {
    FORMATS[FORMATS["RGBA"] = 6408] = "RGBA";
    FORMATS[FORMATS["RGB"] = 6407] = "RGB";
    FORMATS[FORMATS["RG"] = 33319] = "RG";
    FORMATS[FORMATS["RED"] = 6403] = "RED";
    FORMATS[FORMATS["RGBA_INTEGER"] = 36249] = "RGBA_INTEGER";
    FORMATS[FORMATS["RGB_INTEGER"] = 36248] = "RGB_INTEGER";
    FORMATS[FORMATS["RG_INTEGER"] = 33320] = "RG_INTEGER";
    FORMATS[FORMATS["RED_INTEGER"] = 36244] = "RED_INTEGER";
    FORMATS[FORMATS["ALPHA"] = 6406] = "ALPHA";
    FORMATS[FORMATS["LUMINANCE"] = 6409] = "LUMINANCE";
    FORMATS[FORMATS["LUMINANCE_ALPHA"] = 6410] = "LUMINANCE_ALPHA";
    FORMATS[FORMATS["DEPTH_COMPONENT"] = 6402] = "DEPTH_COMPONENT";
    FORMATS[FORMATS["DEPTH_STENCIL"] = 34041] = "DEPTH_STENCIL";
})(FORMATS || (FORMATS = {}));
/**
 * Various GL target types.
 * @memberof PIXI
 * @static
 * @name TARGETS
 * @enum {number}
 * @property {number} [TEXTURE_2D=3553] -
 * @property {number} [TEXTURE_CUBE_MAP=34067] -
 * @property {number} [TEXTURE_2D_ARRAY=35866] -
 * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_X=34069] -
 * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_X=34070] -
 * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Y=34071] -
 * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Y=34072] -
 * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Z=34073] -
 * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Z=34074] -
 */
var TARGETS;
(function (TARGETS) {
    TARGETS[TARGETS["TEXTURE_2D"] = 3553] = "TEXTURE_2D";
    TARGETS[TARGETS["TEXTURE_CUBE_MAP"] = 34067] = "TEXTURE_CUBE_MAP";
    TARGETS[TARGETS["TEXTURE_2D_ARRAY"] = 35866] = "TEXTURE_2D_ARRAY";
    TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
    TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
    TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
    TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
    TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
    TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
})(TARGETS || (TARGETS = {}));
/**
 * Various GL data format types.
 * @memberof PIXI
 * @static
 * @name TYPES
 * @enum {number}
 * @property {number} [UNSIGNED_BYTE=5121] -
 * @property {number} [UNSIGNED_SHORT=5123] -
 * @property {number} [UNSIGNED_SHORT_5_6_5=33635] -
 * @property {number} [UNSIGNED_SHORT_4_4_4_4=32819] -
 * @property {number} [UNSIGNED_SHORT_5_5_5_1=32820] -
 * @property {number} [UNSIGNED_INT=5125] -
 * @property {number} [UNSIGNED_INT_10F_11F_11F_REV=35899] -
 * @property {number} [UNSIGNED_INT_2_10_10_10_REV=33640] -
 * @property {number} [UNSIGNED_INT_24_8=34042] -
 * @property {number} [UNSIGNED_INT_5_9_9_9_REV=35902] -
 * @property {number} [BYTE=5120] -
 * @property {number} [SHORT=5122] -
 * @property {number} [INT=5124] -
 * @property {number} [FLOAT=5126] -
 * @property {number} [FLOAT_32_UNSIGNED_INT_24_8_REV=36269] -
 * @property {number} [HALF_FLOAT=36193] -
 */
var TYPES;
(function (TYPES) {
    TYPES[TYPES["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
    TYPES[TYPES["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
    TYPES[TYPES["UNSIGNED_SHORT_5_6_5"] = 33635] = "UNSIGNED_SHORT_5_6_5";
    TYPES[TYPES["UNSIGNED_SHORT_4_4_4_4"] = 32819] = "UNSIGNED_SHORT_4_4_4_4";
    TYPES[TYPES["UNSIGNED_SHORT_5_5_5_1"] = 32820] = "UNSIGNED_SHORT_5_5_5_1";
    TYPES[TYPES["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
    TYPES[TYPES["UNSIGNED_INT_10F_11F_11F_REV"] = 35899] = "UNSIGNED_INT_10F_11F_11F_REV";
    TYPES[TYPES["UNSIGNED_INT_2_10_10_10_REV"] = 33640] = "UNSIGNED_INT_2_10_10_10_REV";
    TYPES[TYPES["UNSIGNED_INT_24_8"] = 34042] = "UNSIGNED_INT_24_8";
    TYPES[TYPES["UNSIGNED_INT_5_9_9_9_REV"] = 35902] = "UNSIGNED_INT_5_9_9_9_REV";
    TYPES[TYPES["BYTE"] = 5120] = "BYTE";
    TYPES[TYPES["SHORT"] = 5122] = "SHORT";
    TYPES[TYPES["INT"] = 5124] = "INT";
    TYPES[TYPES["FLOAT"] = 5126] = "FLOAT";
    TYPES[TYPES["FLOAT_32_UNSIGNED_INT_24_8_REV"] = 36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";
    TYPES[TYPES["HALF_FLOAT"] = 36193] = "HALF_FLOAT";
})(TYPES || (TYPES = {}));
/**
 * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.
 * WebGL1 works only with FLOAT.
 * @memberof PIXI
 * @static
 * @name SAMPLER_TYPES
 * @enum {number}
 * @property {number} [FLOAT=0] -
 * @property {number} [INT=1] -
 * @property {number} [UINT=2] -
 */
var SAMPLER_TYPES;
(function (SAMPLER_TYPES) {
    SAMPLER_TYPES[SAMPLER_TYPES["FLOAT"] = 0] = "FLOAT";
    SAMPLER_TYPES[SAMPLER_TYPES["INT"] = 1] = "INT";
    SAMPLER_TYPES[SAMPLER_TYPES["UINT"] = 2] = "UINT";
})(SAMPLER_TYPES || (SAMPLER_TYPES = {}));
/**
 * The scale modes that are supported by pixi.
 *
 * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.
 * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
 * @memberof PIXI
 * @static
 * @name SCALE_MODES
 * @enum {number}
 * @property {number} LINEAR Smooth scaling
 * @property {number} NEAREST Pixelating scaling
 */
var SCALE_MODES;
(function (SCALE_MODES) {
    SCALE_MODES[SCALE_MODES["NEAREST"] = 0] = "NEAREST";
    SCALE_MODES[SCALE_MODES["LINEAR"] = 1] = "LINEAR";
})(SCALE_MODES || (SCALE_MODES = {}));
/**
 * The wrap modes that are supported by pixi.
 *
 * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.
 * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.
 * If the texture is non power of two then clamp will be used regardless as WebGL can
 * only use REPEAT if the texture is po2.
 *
 * This property only affects WebGL.
 * @name WRAP_MODES
 * @memberof PIXI
 * @static
 * @enum {number}
 * @property {number} CLAMP - The textures uvs are clamped
 * @property {number} REPEAT - The texture uvs tile and repeat
 * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring
 */
var WRAP_MODES;
(function (WRAP_MODES) {
    WRAP_MODES[WRAP_MODES["CLAMP"] = 33071] = "CLAMP";
    WRAP_MODES[WRAP_MODES["REPEAT"] = 10497] = "REPEAT";
    WRAP_MODES[WRAP_MODES["MIRRORED_REPEAT"] = 33648] = "MIRRORED_REPEAT";
})(WRAP_MODES || (WRAP_MODES = {}));
/**
 * Mipmap filtering modes that are supported by pixi.
 *
 * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.
 * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,
 * or its `POW2` and texture dimensions are powers of 2.
 * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.
 *
 * This property only affects WebGL.
 * @name MIPMAP_MODES
 * @memberof PIXI
 * @static
 * @enum {number}
 * @property {number} OFF - No mipmaps
 * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2
 * @property {number} ON - Always generate mipmaps
 * @property {number} ON_MANUAL - Use mipmaps, but do not auto-generate them; this is used with a resource
 *   that supports buffering each level-of-detail.
 */
var MIPMAP_MODES;
(function (MIPMAP_MODES) {
    MIPMAP_MODES[MIPMAP_MODES["OFF"] = 0] = "OFF";
    MIPMAP_MODES[MIPMAP_MODES["POW2"] = 1] = "POW2";
    MIPMAP_MODES[MIPMAP_MODES["ON"] = 2] = "ON";
    MIPMAP_MODES[MIPMAP_MODES["ON_MANUAL"] = 3] = "ON_MANUAL";
})(MIPMAP_MODES || (MIPMAP_MODES = {}));
/**
 * How to treat textures with premultiplied alpha
 * @name ALPHA_MODES
 * @memberof PIXI
 * @static
 * @enum {number}
 * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.
 *  Option for compressed and data textures that are created from typed arrays.
 * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.
 *  Default option, used for all loaded images.
 * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied
 *  Example: spine atlases with `_pma` suffix.
 * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.
 * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.
 * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.
 */
var ALPHA_MODES;
(function (ALPHA_MODES) {
    ALPHA_MODES[ALPHA_MODES["NPM"] = 0] = "NPM";
    ALPHA_MODES[ALPHA_MODES["UNPACK"] = 1] = "UNPACK";
    ALPHA_MODES[ALPHA_MODES["PMA"] = 2] = "PMA";
    ALPHA_MODES[ALPHA_MODES["NO_PREMULTIPLIED_ALPHA"] = 0] = "NO_PREMULTIPLIED_ALPHA";
    ALPHA_MODES[ALPHA_MODES["PREMULTIPLY_ON_UPLOAD"] = 1] = "PREMULTIPLY_ON_UPLOAD";
    ALPHA_MODES[ALPHA_MODES["PREMULTIPLY_ALPHA"] = 2] = "PREMULTIPLY_ALPHA";
    ALPHA_MODES[ALPHA_MODES["PREMULTIPLIED_ALPHA"] = 2] = "PREMULTIPLIED_ALPHA";
})(ALPHA_MODES || (ALPHA_MODES = {}));
/**
 * Configure whether filter textures are cleared after binding.
 *
 * Filter textures need not be cleared if the filter does not use pixel blending. {@link CLEAR_MODES.BLIT} will detect
 * this and skip clearing as an optimization.
 * @name CLEAR_MODES
 * @memberof PIXI
 * @static
 * @enum {number}
 * @property {number} BLEND - Do not clear the filter texture. The filter's output will blend on top of the output texture.
 * @property {number} CLEAR - Always clear the filter texture.
 * @property {number} BLIT - Clear only if {@link FilterSystem.forceClear} is set or if the filter uses pixel blending.
 * @property {number} NO - Alias for BLEND, same as `false` in earlier versions
 * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions
 * @property {number} AUTO - Alias for BLIT
 */
var CLEAR_MODES;
(function (CLEAR_MODES) {
    CLEAR_MODES[CLEAR_MODES["NO"] = 0] = "NO";
    CLEAR_MODES[CLEAR_MODES["YES"] = 1] = "YES";
    CLEAR_MODES[CLEAR_MODES["AUTO"] = 2] = "AUTO";
    CLEAR_MODES[CLEAR_MODES["BLEND"] = 0] = "BLEND";
    CLEAR_MODES[CLEAR_MODES["CLEAR"] = 1] = "CLEAR";
    CLEAR_MODES[CLEAR_MODES["BLIT"] = 2] = "BLIT";
})(CLEAR_MODES || (CLEAR_MODES = {}));
/**
 * The gc modes that are supported by pixi.
 *
 * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO
 * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not
 * used for a specified period of time they will be removed from the GPU. They will of course
 * be uploaded again when they are required. This is a silent behind the scenes process that
 * should ensure that the GPU does not  get filled up.
 *
 * Handy for mobile devices!
 * This property only affects WebGL.
 * @name GC_MODES
 * @enum {number}
 * @static
 * @memberof PIXI
 * @property {number} AUTO - Garbage collection will happen periodically automatically
 * @property {number} MANUAL - Garbage collection will need to be called manually
 */
var GC_MODES;
(function (GC_MODES) {
    GC_MODES[GC_MODES["AUTO"] = 0] = "AUTO";
    GC_MODES[GC_MODES["MANUAL"] = 1] = "MANUAL";
})(GC_MODES || (GC_MODES = {}));
/**
 * Constants that specify float precision in shaders.
 * @name PRECISION
 * @memberof PIXI
 * @constant
 * @static
 * @enum {string}
 * @property {string} [LOW='lowp'] -
 * @property {string} [MEDIUM='mediump'] -
 * @property {string} [HIGH='highp'] -
 */
var PRECISION;
(function (PRECISION) {
    PRECISION["LOW"] = "lowp";
    PRECISION["MEDIUM"] = "mediump";
    PRECISION["HIGH"] = "highp";
})(PRECISION || (PRECISION = {}));
/**
 * Constants for mask implementations.
 * We use `type` suffix because it leads to very different behaviours
 * @name MASK_TYPES
 * @memberof PIXI
 * @static
 * @enum {number}
 * @property {number} NONE - Mask is ignored
 * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap
 * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil
 * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture
 * @property {number} COLOR - Color mask (RGBA)
 */
var MASK_TYPES;
(function (MASK_TYPES) {
    MASK_TYPES[MASK_TYPES["NONE"] = 0] = "NONE";
    MASK_TYPES[MASK_TYPES["SCISSOR"] = 1] = "SCISSOR";
    MASK_TYPES[MASK_TYPES["STENCIL"] = 2] = "STENCIL";
    MASK_TYPES[MASK_TYPES["SPRITE"] = 3] = "SPRITE";
    MASK_TYPES[MASK_TYPES["COLOR"] = 4] = "COLOR";
})(MASK_TYPES || (MASK_TYPES = {}));
/**
 * Bitwise OR of masks that indicate the color channels that are rendered to.
 * @static
 * @memberof PIXI
 * @name COLOR_MASK_BITS
 * @enum {number}
 * @property {number} RED - Red channel.
 * @property {number} GREEN - Green channel
 * @property {number} BLUE - Blue channel.
 * @property {number} ALPHA - Alpha channel.
 */
var COLOR_MASK_BITS;
(function (COLOR_MASK_BITS) {
    COLOR_MASK_BITS[COLOR_MASK_BITS["RED"] = 1] = "RED";
    COLOR_MASK_BITS[COLOR_MASK_BITS["GREEN"] = 2] = "GREEN";
    COLOR_MASK_BITS[COLOR_MASK_BITS["BLUE"] = 4] = "BLUE";
    COLOR_MASK_BITS[COLOR_MASK_BITS["ALPHA"] = 8] = "ALPHA";
})(COLOR_MASK_BITS || (COLOR_MASK_BITS = {}));
/**
 * Constants for multi-sampling antialiasing.
 * @see PIXI.Framebuffer#multisample
 * @name MSAA_QUALITY
 * @memberof PIXI
 * @static
 * @enum {number}
 * @property {number} NONE - No multisampling for this renderTexture
 * @property {number} LOW - Try 2 samples
 * @property {number} MEDIUM - Try 4 samples
 * @property {number} HIGH - Try 8 samples
 */
var MSAA_QUALITY;
(function (MSAA_QUALITY) {
    MSAA_QUALITY[MSAA_QUALITY["NONE"] = 0] = "NONE";
    MSAA_QUALITY[MSAA_QUALITY["LOW"] = 2] = "LOW";
    MSAA_QUALITY[MSAA_QUALITY["MEDIUM"] = 4] = "MEDIUM";
    MSAA_QUALITY[MSAA_QUALITY["HIGH"] = 8] = "HIGH";
})(MSAA_QUALITY || (MSAA_QUALITY = {}));
/**
 * Constants for various buffer types in Pixi
 * @see PIXI.BUFFER_TYPE
 * @name BUFFER_TYPE
 * @memberof PIXI
 * @static
 * @enum {number}
 * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer
 * @property {number} ARRAY_BUFFER - buffer type for using attribute data
 * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects
 */
var BUFFER_TYPE;
(function (BUFFER_TYPE) {
    BUFFER_TYPE[BUFFER_TYPE["ELEMENT_ARRAY_BUFFER"] = 34963] = "ELEMENT_ARRAY_BUFFER";
    BUFFER_TYPE[BUFFER_TYPE["ARRAY_BUFFER"] = 34962] = "ARRAY_BUFFER";
    // NOT YET SUPPORTED
    BUFFER_TYPE[BUFFER_TYPE["UNIFORM_BUFFER"] = 35345] = "UNIFORM_BUFFER";
})(BUFFER_TYPE || (BUFFER_TYPE = {}));


//# sourceMappingURL=constants.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/settings/dist/esm/settings.mjs
/*!
 * @pixi/settings - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/settings is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */


var BrowserAdapter = {
    /**
     * Creates a canvas element of the given size.
     * This canvas is created using the browser's native canvas element.
     * @param width - width of the canvas
     * @param height - height of the canvas
     */
    createCanvas: function (width, height) {
        var canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        return canvas;
    },
    getWebGLRenderingContext: function () { return WebGLRenderingContext; },
    getNavigator: function () { return navigator; },
    getBaseUrl: function () { var _a; return ((_a = document.baseURI) !== null && _a !== void 0 ? _a : window.location.href); },
    fetch: function (url, options) { return fetch(url, options); },
};

var appleIphone = /iPhone/i;
var appleIpod = /iPod/i;
var appleTablet = /iPad/i;
var appleUniversal = /\biOS-universal(?:.+)Mac\b/i;
var androidPhone = /\bAndroid(?:.+)Mobile\b/i;
var androidTablet = /Android/i;
var amazonPhone = /(?:SD4930UR|\bSilk(?:.+)Mobile\b)/i;
var amazonTablet = /Silk/i;
var windowsPhone = /Windows Phone/i;
var windowsTablet = /\bWindows(?:.+)ARM\b/i;
var otherBlackBerry = /BlackBerry/i;
var otherBlackBerry10 = /BB10/i;
var otherOpera = /Opera Mini/i;
var otherChrome = /\b(CriOS|Chrome)(?:.+)Mobile/i;
var otherFirefox = /Mobile(?:.+)Firefox\b/i;
var isAppleTabletOnIos13 = function (navigator) {
    return (typeof navigator !== 'undefined' &&
        navigator.platform === 'MacIntel' &&
        typeof navigator.maxTouchPoints === 'number' &&
        navigator.maxTouchPoints > 1 &&
        typeof MSStream === 'undefined');
};
function createMatch(userAgent) {
    return function (regex) { return regex.test(userAgent); };
}
function isMobile$1(param) {
    var nav = {
        userAgent: '',
        platform: '',
        maxTouchPoints: 0
    };
    if (!param && typeof navigator !== 'undefined') {
        nav = {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            maxTouchPoints: navigator.maxTouchPoints || 0
        };
    }
    else if (typeof param === 'string') {
        nav.userAgent = param;
    }
    else if (param && param.userAgent) {
        nav = {
            userAgent: param.userAgent,
            platform: param.platform,
            maxTouchPoints: param.maxTouchPoints || 0
        };
    }
    var userAgent = nav.userAgent;
    var tmp = userAgent.split('[FBAN');
    if (typeof tmp[1] !== 'undefined') {
        userAgent = tmp[0];
    }
    tmp = userAgent.split('Twitter');
    if (typeof tmp[1] !== 'undefined') {
        userAgent = tmp[0];
    }
    var match = createMatch(userAgent);
    var result = {
        apple: {
            phone: match(appleIphone) && !match(windowsPhone),
            ipod: match(appleIpod),
            tablet: !match(appleIphone) &&
                (match(appleTablet) || isAppleTabletOnIos13(nav)) &&
                !match(windowsPhone),
            universal: match(appleUniversal),
            device: (match(appleIphone) ||
                match(appleIpod) ||
                match(appleTablet) ||
                match(appleUniversal) ||
                isAppleTabletOnIos13(nav)) &&
                !match(windowsPhone)
        },
        amazon: {
            phone: match(amazonPhone),
            tablet: !match(amazonPhone) && match(amazonTablet),
            device: match(amazonPhone) || match(amazonTablet)
        },
        android: {
            phone: (!match(windowsPhone) && match(amazonPhone)) ||
                (!match(windowsPhone) && match(androidPhone)),
            tablet: !match(windowsPhone) &&
                !match(amazonPhone) &&
                !match(androidPhone) &&
                (match(amazonTablet) || match(androidTablet)),
            device: (!match(windowsPhone) &&
                (match(amazonPhone) ||
                    match(amazonTablet) ||
                    match(androidPhone) ||
                    match(androidTablet))) ||
                match(/\bokhttp\b/i)
        },
        windows: {
            phone: match(windowsPhone),
            tablet: match(windowsTablet),
            device: match(windowsPhone) || match(windowsTablet)
        },
        other: {
            blackberry: match(otherBlackBerry),
            blackberry10: match(otherBlackBerry10),
            opera: match(otherOpera),
            firefox: match(otherFirefox),
            chrome: match(otherChrome),
            device: match(otherBlackBerry) ||
                match(otherBlackBerry10) ||
                match(otherOpera) ||
                match(otherFirefox) ||
                match(otherChrome)
        },
        any: false,
        phone: false,
        tablet: false
    };
    result.any =
        result.apple.device ||
            result.android.device ||
            result.windows.device ||
            result.other.device;
    result.phone =
        result.apple.phone || result.android.phone || result.windows.phone;
    result.tablet =
        result.apple.tablet || result.android.tablet || result.windows.tablet;
    return result;
}

var isMobile = isMobile$1(globalThis.navigator);

/**
 * Uploading the same buffer multiple times in a single frame can cause performance issues.
 * Apparent on iOS so only check for that at the moment
 * This check may become more complex if this issue pops up elsewhere.
 * @private
 * @returns {boolean} `true` if the same buffer may be uploaded more than once.
 */
function canUploadSameBuffer() {
    return !isMobile.apple.device;
}

/**
 * The maximum recommended texture units to use.
 * In theory the bigger the better, and for desktop we'll use as many as we can.
 * But some mobile devices slow down if there is to many branches in the shader.
 * So in practice there seems to be a sweet spot size that varies depending on the device.
 *
 * In v4, all mobile devices were limited to 4 texture units because for this.
 * In v5, we allow all texture units to be used on modern Apple or Android devices.
 * @private
 * @param {number} max
 * @returns {number} The maximum recommended texture units to use.
 */
function maxRecommendedTextures(max) {
    var allowMax = true;
    if (isMobile.tablet || isMobile.phone) {
        if (isMobile.apple.device) {
            var match = (navigator.userAgent).match(/OS (\d+)_(\d+)?/);
            if (match) {
                var majorVersion = parseInt(match[1], 10);
                // Limit texture units on devices below iOS 11, which will be older hardware
                if (majorVersion < 11) {
                    allowMax = false;
                }
            }
        }
        if (isMobile.android.device) {
            var match = (navigator.userAgent).match(/Android\s([0-9.]*)/);
            if (match) {
                var majorVersion = parseInt(match[1], 10);
                // Limit texture units on devices below Android 7 (Nougat), which will be older hardware
                if (majorVersion < 7) {
                    allowMax = false;
                }
            }
        }
    }
    return allowMax ? max : 4;
}

/**
 * User's customizable globals for overriding the default PIXI settings, such
 * as a renderer's default resolution, framerate, float precision, etc.
 * @example
 * // Use the native window resolution as the default resolution
 * // will support high-density displays when rendering
 * PIXI.settings.RESOLUTION = window.devicePixelRatio;
 *
 * // Disable interpolation when scaling, will make texture be pixelated
 * PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;
 * @namespace PIXI.settings
 */
var settings = {
    /**
     * This adapter is used to call methods that are platform dependent.
     * For example `document.createElement` only runs on the web but fails in node environments.
     * This allows us to support more platforms by abstracting away specific implementations per platform.
     *
     * By default the adapter is set to work in the browser. However you can create your own
     * by implementing the `IAdapter` interface. See `IAdapter` for more information.
     * @name ADAPTER
     * @memberof PIXI.settings
     * @type {PIXI.IAdapter}
     * @default PIXI.BrowserAdapter
     */
    ADAPTER: BrowserAdapter,
    /**
     * If set to true WebGL will attempt make textures mimpaped by default.
     * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.
     * @static
     * @name MIPMAP_TEXTURES
     * @memberof PIXI.settings
     * @type {PIXI.MIPMAP_MODES}
     * @default PIXI.MIPMAP_MODES.POW2
     */
    MIPMAP_TEXTURES: MIPMAP_MODES.POW2,
    /**
     * Default anisotropic filtering level of textures.
     * Usually from 0 to 16
     * @static
     * @name ANISOTROPIC_LEVEL
     * @memberof PIXI.settings
     * @type {number}
     * @default 0
     */
    ANISOTROPIC_LEVEL: 0,
    /**
     * Default resolution / device pixel ratio of the renderer.
     * @static
     * @name RESOLUTION
     * @memberof PIXI.settings
     * @type {number}
     * @default 1
     */
    RESOLUTION: 1,
    /**
     * Default filter resolution.
     * @static
     * @name FILTER_RESOLUTION
     * @memberof PIXI.settings
     * @type {number}
     * @default 1
     */
    FILTER_RESOLUTION: 1,
    /**
     * Default filter samples.
     * @static
     * @name FILTER_MULTISAMPLE
     * @memberof PIXI.settings
     * @type {PIXI.MSAA_QUALITY}
     * @default PIXI.MSAA_QUALITY.NONE
     */
    FILTER_MULTISAMPLE: MSAA_QUALITY.NONE,
    /**
     * The maximum textures that this device supports.
     * @static
     * @name SPRITE_MAX_TEXTURES
     * @memberof PIXI.settings
     * @type {number}
     * @default 32
     */
    SPRITE_MAX_TEXTURES: maxRecommendedTextures(32),
    // TODO: maybe change to SPRITE.BATCH_SIZE: 2000
    // TODO: maybe add PARTICLE.BATCH_SIZE: 15000
    /**
     * The default sprite batch size.
     *
     * The default aims to balance desktop and mobile devices.
     * @static
     * @name SPRITE_BATCH_SIZE
     * @memberof PIXI.settings
     * @type {number}
     * @default 4096
     */
    SPRITE_BATCH_SIZE: 4096,
    /**
     * The default render options if none are supplied to {@link PIXI.Renderer}
     * or {@link PIXI.CanvasRenderer}.
     * @static
     * @name RENDER_OPTIONS
     * @memberof PIXI.settings
     * @type {object}
     * @property {HTMLCanvasElement} [view=null] -
     * @property {boolean} [antialias=false] -
     * @property {boolean} [autoDensity=false] -
     * @property {boolean} [useContextAlpha=true]  -
     * @property {number} [backgroundColor=0x000000] -
     * @property {number} [backgroundAlpha=1] -
     * @property {boolean} [clearBeforeRender=true] -
     * @property {boolean} [preserveDrawingBuffer=false] -
     * @property {number} [width=800] -
     * @property {number} [height=600] -
     * @property {boolean} [legacy=false] -
     */
    RENDER_OPTIONS: {
        view: null,
        antialias: false,
        autoDensity: false,
        backgroundColor: 0x000000,
        backgroundAlpha: 1,
        useContextAlpha: true,
        clearBeforeRender: true,
        preserveDrawingBuffer: false,
        width: 800,
        height: 600,
        legacy: false,
    },
    /**
     * Default Garbage Collection mode.
     * @static
     * @name GC_MODE
     * @memberof PIXI.settings
     * @type {PIXI.GC_MODES}
     * @default PIXI.GC_MODES.AUTO
     */
    GC_MODE: GC_MODES.AUTO,
    /**
     * Default Garbage Collection max idle.
     * @static
     * @name GC_MAX_IDLE
     * @memberof PIXI.settings
     * @type {number}
     * @default 3600
     */
    GC_MAX_IDLE: 60 * 60,
    /**
     * Default Garbage Collection maximum check count.
     * @static
     * @name GC_MAX_CHECK_COUNT
     * @memberof PIXI.settings
     * @type {number}
     * @default 600
     */
    GC_MAX_CHECK_COUNT: 60 * 10,
    /**
     * Default wrap modes that are supported by pixi.
     * @static
     * @name WRAP_MODE
     * @memberof PIXI.settings
     * @type {PIXI.WRAP_MODES}
     * @default PIXI.WRAP_MODES.CLAMP
     */
    WRAP_MODE: WRAP_MODES.CLAMP,
    /**
     * Default scale mode for textures.
     * @static
     * @name SCALE_MODE
     * @memberof PIXI.settings
     * @type {PIXI.SCALE_MODES}
     * @default PIXI.SCALE_MODES.LINEAR
     */
    SCALE_MODE: SCALE_MODES.LINEAR,
    /**
     * Default specify float precision in vertex shader.
     * @static
     * @name PRECISION_VERTEX
     * @memberof PIXI.settings
     * @type {PIXI.PRECISION}
     * @default PIXI.PRECISION.HIGH
     */
    PRECISION_VERTEX: PRECISION.HIGH,
    /**
     * Default specify float precision in fragment shader.
     * iOS is best set at highp due to https://github.com/pixijs/pixi.js/issues/3742
     * @static
     * @name PRECISION_FRAGMENT
     * @memberof PIXI.settings
     * @type {PIXI.PRECISION}
     * @default PIXI.PRECISION.MEDIUM
     */
    PRECISION_FRAGMENT: isMobile.apple.device ? PRECISION.HIGH : PRECISION.MEDIUM,
    /**
     * Can we upload the same buffer in a single frame?
     * @static
     * @name CAN_UPLOAD_SAME_BUFFER
     * @memberof PIXI.settings
     * @type {boolean}
     */
    CAN_UPLOAD_SAME_BUFFER: canUploadSameBuffer(),
    /**
     * Enables bitmap creation before image load. This feature is experimental.
     * @static
     * @name CREATE_IMAGE_BITMAP
     * @memberof PIXI.settings
     * @type {boolean}
     * @default false
     */
    CREATE_IMAGE_BITMAP: false,
    /**
     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
     * Advantages can include sharper image quality (like text) and faster rendering on canvas.
     * The main disadvantage is movement of objects may appear less smooth.
     * @static
     * @constant
     * @memberof PIXI.settings
     * @type {boolean}
     * @default false
     */
    ROUND_PIXELS: false,
};


//# sourceMappingURL=settings.mjs.map

// EXTERNAL MODULE: ../node_modules/eventemitter3/index.js
var eventemitter3 = __webpack_require__(659);
// EXTERNAL MODULE: ../node_modules/earcut/src/earcut.js
var earcut = __webpack_require__(106);
// EXTERNAL MODULE: ../node_modules/url/url.js
var url = __webpack_require__(760);
;// CONCATENATED MODULE: ../node_modules/@pixi/utils/dist/esm/utils.mjs
/*!
 * @pixi/utils - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/utils is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */







/**
 * This file contains redeclared types for Node `url` and `querystring` modules. These modules
 * don't provide their own typings but instead are a part of the full Node typings. The purpose of
 * this file is to redeclare the required types to avoid having the whole Node types as a
 * dependency.
 */
var utils_url = {
    parse: url/* parse */.Qc,
    format: url/* format */.WU,
    resolve: url/* resolve */.DB,
};

function assertPath(path) {
    if (typeof path !== 'string') {
        throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
    }
}
function removeUrlParams(url) {
    var re = url.split('?')[0];
    return re.split('#')[0];
}
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
function replaceAll(str, find, replace) {
    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
}
// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
    var res = '';
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
    for (var i = 0; i <= path.length; ++i) {
        if (i < path.length) {
            code = path.charCodeAt(i);
        }
        else if (code === 47) {
            break;
        }
        else {
            code = 47;
        }
        if (code === 47) {
            if (lastSlash === i - 1 || dots === 1) ;
            else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2
                    || lastSegmentLength !== 2
                    || res.charCodeAt(res.length - 1) !== 46
                    || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        var lastSlashIndex = res.lastIndexOf('/');
                        if (lastSlashIndex !== res.length - 1) {
                            if (lastSlashIndex === -1) {
                                res = '';
                                lastSegmentLength = 0;
                            }
                            else {
                                res = res.slice(0, lastSlashIndex);
                                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
                            }
                            lastSlash = i;
                            dots = 0;
                            continue;
                        }
                    }
                    else if (res.length === 2 || res.length === 1) {
                        res = '';
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) {
                        res += '/..';
                    }
                    else {
                        res = '..';
                    }
                    lastSegmentLength = 2;
                }
            }
            else {
                if (res.length > 0) {
                    res += "/" + path.slice(lastSlash + 1, i);
                }
                else {
                    res = path.slice(lastSlash + 1, i);
                }
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        }
        else if (code === 46 && dots !== -1) {
            ++dots;
        }
        else {
            dots = -1;
        }
    }
    return res;
}
var path = {
    /**
     * Converts a path to posix format.
     * @param path - The path to convert to posix
     */
    toPosix: function (path) { return replaceAll(path, '\\', '/'); },
    /**
     * Checks if the path is a URL
     * @param path - The path to check
     */
    isUrl: function (path) { return (/^https?:/).test(this.toPosix(path)); },
    /**
     * Checks if the path is a data URL
     * @param path - The path to check
     */
    isDataUrl: function (path) {
        // eslint-disable-next-line max-len
        return (/^data:([a-z]+\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s<>]*?)$/i)
            .test(path);
    },
    /**
     * Checks if the path has a protocol e.g. http://
     * This will return true for windows file paths
     * @param path - The path to check
     */
    hasProtocol: function (path) { return (/^[^/:]+:\//).test(this.toPosix(path)); },
    /**
     * Returns the protocol of the path e.g. http://, C:/, file:///
     * @param path - The path to get the protocol from
     */
    getProtocol: function (path) {
        assertPath(path);
        path = this.toPosix(path);
        var protocol = '';
        var isFile = (/^file:\/\/\//).exec(path);
        var isHttp = (/^[^/:]+:\/\//).exec(path);
        var isWindows = (/^[^/:]+:\//).exec(path);
        if (isFile || isHttp || isWindows) {
            var arr = (isFile === null || isFile === void 0 ? void 0 : isFile[0]) || (isHttp === null || isHttp === void 0 ? void 0 : isHttp[0]) || (isWindows === null || isWindows === void 0 ? void 0 : isWindows[0]);
            protocol = arr;
            path = path.slice(arr.length);
        }
        return protocol;
    },
    /**
     * Converts URL to an absolute path.
     * When loading from a Web Worker, we must use absolute paths.
     * If the URL is already absolute we return it as is
     * If it's not, we convert it
     * @param url - The URL to test
     * @param customBaseUrl - The base URL to use
     * @param customRootUrl - The root URL to use
     */
    toAbsolute: function (url, customBaseUrl, customRootUrl) {
        if (this.isDataUrl(url))
            { return url; }
        var baseUrl = removeUrlParams(this.toPosix(customBaseUrl !== null && customBaseUrl !== void 0 ? customBaseUrl : settings.ADAPTER.getBaseUrl()));
        var rootUrl = removeUrlParams(this.toPosix(customRootUrl !== null && customRootUrl !== void 0 ? customRootUrl : this.rootname(baseUrl)));
        assertPath(url);
        url = this.toPosix(url);
        // root relative url
        if (url.startsWith('/')) {
            return path.join(rootUrl, url.slice(1));
        }
        var absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);
        return absolutePath;
    },
    /**
     * Normalizes the given path, resolving '..' and '.' segments
     * @param path - The path to normalize
     */
    normalize: function (path) {
        path = this.toPosix(path);
        assertPath(path);
        if (path.length === 0)
            { return '.'; }
        var protocol = '';
        var isAbsolute = path.startsWith('/');
        if (this.hasProtocol(path)) {
            protocol = this.rootname(path);
            path = path.slice(protocol.length);
        }
        var trailingSeparator = path.endsWith('/');
        // Normalize the path
        path = normalizeStringPosix(path, false);
        if (path.length > 0 && trailingSeparator)
            { path += '/'; }
        if (isAbsolute)
            { return "/" + path; }
        return protocol + path;
    },
    /**
     * Determines if path is an absolute path.
     * Absolute paths can be urls, data urls, or paths on disk
     * @param path - The path to test
     */
    isAbsolute: function (path) {
        assertPath(path);
        path = this.toPosix(path);
        if (this.hasProtocol(path))
            { return true; }
        return path.startsWith('/');
    },
    /**
     * Joins all given path segments together using the platform-specific separator as a delimiter,
     * then normalizes the resulting path
     * @param segments - The segments of the path to join
     */
    join: function () {
        var arguments$1 = arguments;

        var _a;
        var segments = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            segments[_i] = arguments$1[_i];
        }
        if (segments.length === 0) {
            return '.';
        }
        var joined;
        for (var i = 0; i < segments.length; ++i) {
            var arg = segments[i];
            assertPath(arg);
            if (arg.length > 0) {
                if (joined === undefined)
                    { joined = arg; }
                else {
                    var prevArg = (_a = segments[i - 1]) !== null && _a !== void 0 ? _a : '';
                    if (this.extname(prevArg)) {
                        joined += "/../" + arg;
                    }
                    else {
                        joined += "/" + arg;
                    }
                }
            }
        }
        if (joined === undefined) {
            return '.';
        }
        return this.normalize(joined);
    },
    /**
     * Returns the directory name of a path
     * @param path - The path to parse
     */
    dirname: function (path) {
        assertPath(path);
        if (path.length === 0)
            { return '.'; }
        path = this.toPosix(path);
        var code = path.charCodeAt(0);
        var hasRoot = code === 47;
        var end = -1;
        var matchedSlash = true;
        var proto = this.getProtocol(path);
        var origpath = path;
        path = path.slice(proto.length);
        for (var i = path.length - 1; i >= 1; --i) {
            code = path.charCodeAt(i);
            if (code === 47) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            }
            else {
                // We saw the first non-path separator
                matchedSlash = false;
            }
        }
        // if end is -1 and its a url then we need to add the path back
        // eslint-disable-next-line no-nested-ternary
        if (end === -1)
            { return hasRoot ? '/' : this.isUrl(origpath) ? proto + path : proto; }
        if (hasRoot && end === 1)
            { return '//'; }
        return proto + path.slice(0, end);
    },
    /**
     * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/
     * @param path - The path to parse
     */
    rootname: function (path) {
        assertPath(path);
        path = this.toPosix(path);
        var root = '';
        if (path.startsWith('/'))
            { root = '/'; }
        else {
            root = this.getProtocol(path);
        }
        if (this.isUrl(path)) {
            // need to find the first path separator
            var index = path.indexOf('/', root.length);
            if (index !== -1) {
                root = path.slice(0, index);
            }
            else
                { root = path; }
            if (!root.endsWith('/'))
                { root += '/'; }
        }
        return root;
    },
    /**
     * Returns the last portion of a path
     * @param path - The path to test
     * @param ext - Optional extension to remove
     */
    basename: function (path, ext) {
        assertPath(path);
        if (ext)
            { assertPath(ext); }
        path = this.toPosix(path);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
            if (ext.length === path.length && ext === path)
                { return ''; }
            var extIdx = ext.length - 1;
            var firstNonSlashEnd = -1;
            for (i = path.length - 1; i >= 0; --i) {
                var code = path.charCodeAt(i);
                if (code === 47) {
                    // If we reached a path separator that was not part of a set of path
                    // separators at the end of the string, stop now
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                }
                else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === ext.charCodeAt(extIdx)) {
                            if (--extIdx === -1) {
                                // We matched the extension, so mark this as the end of our path
                                // component
                                end = i;
                            }
                        }
                        else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end)
                { end = firstNonSlashEnd; }
            else if (end === -1)
                { end = path.length; }
            return path.slice(start, end);
        }
        for (i = path.length - 1; i >= 0; --i) {
            if (path.charCodeAt(i) === 47) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            }
            else if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // path component
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1)
            { return ''; }
        return path.slice(start, end);
    },
    /**
     * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last
     * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than
     * the first character of the basename of path, an empty string is returned.
     * @param path - The path to parse
     */
    extname: function (path) {
        assertPath(path);
        path = this.toPosix(path);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        for (var i = path.length - 1; i >= 0; --i) {
            var code = path.charCodeAt(i);
            if (code === 47) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1)
                    { startDot = i; }
                else if (preDotState !== 1)
                    { preDotState = 1; }
            }
            else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (startDot === -1 || end === -1
            // We saw a non-dot character immediately before the dot
            || preDotState === 0
            // The (right-most) trimmed path component is exactly '..'
            // eslint-disable-next-line no-mixed-operators
            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            return '';
        }
        return path.slice(startDot, end);
    },
    /**
     * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.
     * @param path - The path to parse
     */
    parse: function (path) {
        assertPath(path);
        var ret = { root: '', dir: '', base: '', ext: '', name: '' };
        if (path.length === 0)
            { return ret; }
        path = this.toPosix(path);
        var code = path.charCodeAt(0);
        var isAbsolute = this.isAbsolute(path);
        var start;
        ret.root = this.rootname(path);
        if (isAbsolute || this.hasProtocol(path)) {
            start = 1;
        }
        else {
            start = 0;
        }
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        // Get non-dir info
        for (; i >= start; --i) {
            code = path.charCodeAt(i);
            if (code === 47) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1)
                    { startDot = i; }
                else if (preDotState !== 1)
                    { preDotState = 1; }
            }
            else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (startDot === -1 || end === -1
            // We saw a non-dot character immediately before the dot
            || preDotState === 0
            // The (right-most) trimmed path component is exactly '..'
            // eslint-disable-next-line no-mixed-operators
            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            if (end !== -1) {
                if (startPart === 0 && isAbsolute)
                    { ret.base = ret.name = path.slice(1, end); }
                else
                    { ret.base = ret.name = path.slice(startPart, end); }
            }
        }
        else {
            if (startPart === 0 && isAbsolute) {
                ret.name = path.slice(1, startDot);
                ret.base = path.slice(1, end);
            }
            else {
                ret.name = path.slice(startPart, startDot);
                ret.base = path.slice(startPart, end);
            }
            ret.ext = path.slice(startDot, end);
        }
        ret.dir = this.dirname(path);
        return ret;
    },
    sep: '/',
    delimiter: ':'
};

/**
 * The prefix that denotes a URL is for a retina asset.
 * @static
 * @name RETINA_PREFIX
 * @memberof PIXI.settings
 * @type {RegExp}
 * @default /@([0-9\.]+)x/
 * @example `@2x`
 */
settings.RETINA_PREFIX = /@([0-9\.]+)x/;
/**
 * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported` function.
 * If set to true, a WebGL renderer can fail to be created if the browser thinks there could be performance issues when
 * using WebGL.
 *
 * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many scenarios as possible.
 * However, some users may have a poor experience, for example, if a user has a gpu or driver version blacklisted by the
 * browser.
 *
 * If your application requires high performance rendering, you may wish to set this to false.
 * We recommend one of two options if you decide to set this flag to false:
 *
 * 1: Use the `pixi.js-legacy` package, which includes a Canvas renderer as a fallback in case high performance WebGL is
 *    not supported.
 *
 * 2: Call `isWebGLSupported` (which if found in the PIXI.utils package) in your code before attempting to create a PixiJS
 *    renderer, and show an error message to the user if the function returns false, explaining that their device & browser
 *    combination does not support high performance WebGL.
 *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.
 * @static
 * @name FAIL_IF_MAJOR_PERFORMANCE_CAVEAT
 * @memberof PIXI.settings
 * @type {boolean}
 * @default false
 */
settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = false;

var saidHello = false;
var VERSION = '6.5.9';
/**
 * Skips the hello message of renderers that are created after this is run.
 * @function skipHello
 * @memberof PIXI.utils
 */
function skipHello() {
    saidHello = true;
}
/**
 * Logs out the version and renderer information for this running instance of PIXI.
 * If you don't want to see this message you can run `PIXI.utils.skipHello()` before
 * creating your renderer. Keep in mind that doing that will forever make you a jerk face.
 * @static
 * @function sayHello
 * @memberof PIXI.utils
 * @param {string} type - The string renderer type to log.
 */
function sayHello(type) {
    var _a;
    if (saidHello) {
        return;
    }
    if (settings.ADAPTER.getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1) {
        var args = [
            "\n %c %c %c PixiJS " + VERSION + " - \u2730 " + type + " \u2730  %c  %c  http://www.pixijs.com/  %c %c \u2665%c\u2665%c\u2665 \n\n",
            'background: #ff66a5; padding:5px 0;',
            'background: #ff66a5; padding:5px 0;',
            'color: #ff66a5; background: #030307; padding:5px 0;',
            'background: #ff66a5; padding:5px 0;',
            'background: #ffc3dc; padding:5px 0;',
            'background: #ff66a5; padding:5px 0;',
            'color: #ff2424; background: #fff; padding:5px 0;',
            'color: #ff2424; background: #fff; padding:5px 0;',
            'color: #ff2424; background: #fff; padding:5px 0;' ];
        (_a = globalThis.console).log.apply(_a, args);
    }
    else if (globalThis.console) {
        globalThis.console.log("PixiJS " + VERSION + " - " + type + " - http://www.pixijs.com/");
    }
    saidHello = true;
}

var supported;
/**
 * Helper for checking for WebGL support.
 * @memberof PIXI.utils
 * @function isWebGLSupported
 * @returns {boolean} Is WebGL supported.
 */
function isWebGLSupported() {
    if (typeof supported === 'undefined') {
        supported = (function supported() {
            var contextOptions = {
                stencil: true,
                failIfMajorPerformanceCaveat: settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT,
            };
            try {
                if (!settings.ADAPTER.getWebGLRenderingContext()) {
                    return false;
                }
                var canvas = settings.ADAPTER.createCanvas();
                var gl = (canvas.getContext('webgl', contextOptions)
                    || canvas.getContext('experimental-webgl', contextOptions));
                var success = !!(gl && gl.getContextAttributes().stencil);
                if (gl) {
                    var loseContext = gl.getExtension('WEBGL_lose_context');
                    if (loseContext) {
                        loseContext.loseContext();
                    }
                }
                gl = null;
                return success;
            }
            catch (e) {
                return false;
            }
        })();
    }
    return supported;
}

var aliceblue = "#f0f8ff";
var antiquewhite = "#faebd7";
var aqua = "#00ffff";
var aquamarine = "#7fffd4";
var azure = "#f0ffff";
var beige = "#f5f5dc";
var bisque = "#ffe4c4";
var black = "#000000";
var blanchedalmond = "#ffebcd";
var blue = "#0000ff";
var blueviolet = "#8a2be2";
var brown = "#a52a2a";
var burlywood = "#deb887";
var cadetblue = "#5f9ea0";
var chartreuse = "#7fff00";
var chocolate = "#d2691e";
var coral = "#ff7f50";
var cornflowerblue = "#6495ed";
var cornsilk = "#fff8dc";
var crimson = "#dc143c";
var cyan = "#00ffff";
var darkblue = "#00008b";
var darkcyan = "#008b8b";
var darkgoldenrod = "#b8860b";
var darkgray = "#a9a9a9";
var darkgreen = "#006400";
var darkgrey = "#a9a9a9";
var darkkhaki = "#bdb76b";
var darkmagenta = "#8b008b";
var darkolivegreen = "#556b2f";
var darkorange = "#ff8c00";
var darkorchid = "#9932cc";
var darkred = "#8b0000";
var darksalmon = "#e9967a";
var darkseagreen = "#8fbc8f";
var darkslateblue = "#483d8b";
var darkslategray = "#2f4f4f";
var darkslategrey = "#2f4f4f";
var darkturquoise = "#00ced1";
var darkviolet = "#9400d3";
var deeppink = "#ff1493";
var deepskyblue = "#00bfff";
var dimgray = "#696969";
var dimgrey = "#696969";
var dodgerblue = "#1e90ff";
var firebrick = "#b22222";
var floralwhite = "#fffaf0";
var forestgreen = "#228b22";
var fuchsia = "#ff00ff";
var gainsboro = "#dcdcdc";
var ghostwhite = "#f8f8ff";
var goldenrod = "#daa520";
var gold = "#ffd700";
var gray = "#808080";
var green = "#008000";
var greenyellow = "#adff2f";
var grey = "#808080";
var honeydew = "#f0fff0";
var hotpink = "#ff69b4";
var indianred = "#cd5c5c";
var indigo = "#4b0082";
var ivory = "#fffff0";
var khaki = "#f0e68c";
var lavenderblush = "#fff0f5";
var lavender = "#e6e6fa";
var lawngreen = "#7cfc00";
var lemonchiffon = "#fffacd";
var lightblue = "#add8e6";
var lightcoral = "#f08080";
var lightcyan = "#e0ffff";
var lightgoldenrodyellow = "#fafad2";
var lightgray = "#d3d3d3";
var lightgreen = "#90ee90";
var lightgrey = "#d3d3d3";
var lightpink = "#ffb6c1";
var lightsalmon = "#ffa07a";
var lightseagreen = "#20b2aa";
var lightskyblue = "#87cefa";
var lightslategray = "#778899";
var lightslategrey = "#778899";
var lightsteelblue = "#b0c4de";
var lightyellow = "#ffffe0";
var lime = "#00ff00";
var limegreen = "#32cd32";
var linen = "#faf0e6";
var magenta = "#ff00ff";
var maroon = "#800000";
var mediumaquamarine = "#66cdaa";
var mediumblue = "#0000cd";
var mediumorchid = "#ba55d3";
var mediumpurple = "#9370db";
var mediumseagreen = "#3cb371";
var mediumslateblue = "#7b68ee";
var mediumspringgreen = "#00fa9a";
var mediumturquoise = "#48d1cc";
var mediumvioletred = "#c71585";
var midnightblue = "#191970";
var mintcream = "#f5fffa";
var mistyrose = "#ffe4e1";
var moccasin = "#ffe4b5";
var navajowhite = "#ffdead";
var navy = "#000080";
var oldlace = "#fdf5e6";
var olive = "#808000";
var olivedrab = "#6b8e23";
var orange = "#ffa500";
var orangered = "#ff4500";
var orchid = "#da70d6";
var palegoldenrod = "#eee8aa";
var palegreen = "#98fb98";
var paleturquoise = "#afeeee";
var palevioletred = "#db7093";
var papayawhip = "#ffefd5";
var peachpuff = "#ffdab9";
var peru = "#cd853f";
var pink = "#ffc0cb";
var plum = "#dda0dd";
var powderblue = "#b0e0e6";
var purple = "#800080";
var rebeccapurple = "#663399";
var red = "#ff0000";
var rosybrown = "#bc8f8f";
var royalblue = "#4169e1";
var saddlebrown = "#8b4513";
var salmon = "#fa8072";
var sandybrown = "#f4a460";
var seagreen = "#2e8b57";
var seashell = "#fff5ee";
var sienna = "#a0522d";
var silver = "#c0c0c0";
var skyblue = "#87ceeb";
var slateblue = "#6a5acd";
var slategray = "#708090";
var slategrey = "#708090";
var snow = "#fffafa";
var springgreen = "#00ff7f";
var steelblue = "#4682b4";
var tan = "#d2b48c";
var teal = "#008080";
var thistle = "#d8bfd8";
var tomato = "#ff6347";
var turquoise = "#40e0d0";
var violet = "#ee82ee";
var wheat = "#f5deb3";
var white = "#ffffff";
var whitesmoke = "#f5f5f5";
var yellow = "#ffff00";
var yellowgreen = "#9acd32";
var cssColorNames = {
	aliceblue: aliceblue,
	antiquewhite: antiquewhite,
	aqua: aqua,
	aquamarine: aquamarine,
	azure: azure,
	beige: beige,
	bisque: bisque,
	black: black,
	blanchedalmond: blanchedalmond,
	blue: blue,
	blueviolet: blueviolet,
	brown: brown,
	burlywood: burlywood,
	cadetblue: cadetblue,
	chartreuse: chartreuse,
	chocolate: chocolate,
	coral: coral,
	cornflowerblue: cornflowerblue,
	cornsilk: cornsilk,
	crimson: crimson,
	cyan: cyan,
	darkblue: darkblue,
	darkcyan: darkcyan,
	darkgoldenrod: darkgoldenrod,
	darkgray: darkgray,
	darkgreen: darkgreen,
	darkgrey: darkgrey,
	darkkhaki: darkkhaki,
	darkmagenta: darkmagenta,
	darkolivegreen: darkolivegreen,
	darkorange: darkorange,
	darkorchid: darkorchid,
	darkred: darkred,
	darksalmon: darksalmon,
	darkseagreen: darkseagreen,
	darkslateblue: darkslateblue,
	darkslategray: darkslategray,
	darkslategrey: darkslategrey,
	darkturquoise: darkturquoise,
	darkviolet: darkviolet,
	deeppink: deeppink,
	deepskyblue: deepskyblue,
	dimgray: dimgray,
	dimgrey: dimgrey,
	dodgerblue: dodgerblue,
	firebrick: firebrick,
	floralwhite: floralwhite,
	forestgreen: forestgreen,
	fuchsia: fuchsia,
	gainsboro: gainsboro,
	ghostwhite: ghostwhite,
	goldenrod: goldenrod,
	gold: gold,
	gray: gray,
	green: green,
	greenyellow: greenyellow,
	grey: grey,
	honeydew: honeydew,
	hotpink: hotpink,
	indianred: indianred,
	indigo: indigo,
	ivory: ivory,
	khaki: khaki,
	lavenderblush: lavenderblush,
	lavender: lavender,
	lawngreen: lawngreen,
	lemonchiffon: lemonchiffon,
	lightblue: lightblue,
	lightcoral: lightcoral,
	lightcyan: lightcyan,
	lightgoldenrodyellow: lightgoldenrodyellow,
	lightgray: lightgray,
	lightgreen: lightgreen,
	lightgrey: lightgrey,
	lightpink: lightpink,
	lightsalmon: lightsalmon,
	lightseagreen: lightseagreen,
	lightskyblue: lightskyblue,
	lightslategray: lightslategray,
	lightslategrey: lightslategrey,
	lightsteelblue: lightsteelblue,
	lightyellow: lightyellow,
	lime: lime,
	limegreen: limegreen,
	linen: linen,
	magenta: magenta,
	maroon: maroon,
	mediumaquamarine: mediumaquamarine,
	mediumblue: mediumblue,
	mediumorchid: mediumorchid,
	mediumpurple: mediumpurple,
	mediumseagreen: mediumseagreen,
	mediumslateblue: mediumslateblue,
	mediumspringgreen: mediumspringgreen,
	mediumturquoise: mediumturquoise,
	mediumvioletred: mediumvioletred,
	midnightblue: midnightblue,
	mintcream: mintcream,
	mistyrose: mistyrose,
	moccasin: moccasin,
	navajowhite: navajowhite,
	navy: navy,
	oldlace: oldlace,
	olive: olive,
	olivedrab: olivedrab,
	orange: orange,
	orangered: orangered,
	orchid: orchid,
	palegoldenrod: palegoldenrod,
	palegreen: palegreen,
	paleturquoise: paleturquoise,
	palevioletred: palevioletred,
	papayawhip: papayawhip,
	peachpuff: peachpuff,
	peru: peru,
	pink: pink,
	plum: plum,
	powderblue: powderblue,
	purple: purple,
	rebeccapurple: rebeccapurple,
	red: red,
	rosybrown: rosybrown,
	royalblue: royalblue,
	saddlebrown: saddlebrown,
	salmon: salmon,
	sandybrown: sandybrown,
	seagreen: seagreen,
	seashell: seashell,
	sienna: sienna,
	silver: silver,
	skyblue: skyblue,
	slateblue: slateblue,
	slategray: slategray,
	slategrey: slategrey,
	snow: snow,
	springgreen: springgreen,
	steelblue: steelblue,
	tan: tan,
	teal: teal,
	thistle: thistle,
	tomato: tomato,
	turquoise: turquoise,
	violet: violet,
	wheat: wheat,
	white: white,
	whitesmoke: whitesmoke,
	yellow: yellow,
	yellowgreen: yellowgreen
};

/**
 * Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).
 * @example
 * PIXI.utils.hex2rgb(0xffffff); // returns [1, 1, 1]
 * @memberof PIXI.utils
 * @function hex2rgb
 * @param {number} hex - The hexadecimal number to convert
 * @param  {number[]} [out=[]] - If supplied, this array will be used rather than returning a new one
 * @returns {number[]} An array representing the [R, G, B] of the color where all values are floats.
 */
function hex2rgb(hex, out) {
    if (out === void 0) { out = []; }
    out[0] = ((hex >> 16) & 0xFF) / 255;
    out[1] = ((hex >> 8) & 0xFF) / 255;
    out[2] = (hex & 0xFF) / 255;
    return out;
}
/**
 * Converts a hexadecimal color number to a string.
 * @example
 * PIXI.utils.hex2string(0xffffff); // returns "#ffffff"
 * @memberof PIXI.utils
 * @function hex2string
 * @param {number} hex - Number in hex (e.g., `0xffffff`)
 * @returns {string} The string color (e.g., `"#ffffff"`).
 */
function hex2string(hex) {
    var hexString = hex.toString(16);
    hexString = '000000'.substring(0, 6 - hexString.length) + hexString;
    return "#" + hexString;
}
/**
 * Converts a string to a hexadecimal color number.
 * It can handle:
 *  hex strings starting with #: "#ffffff"
 *  hex strings starting with 0x: "0xffffff"
 *  hex strings without prefix: "ffffff"
 *  css colors: "black"
 * @example
 * PIXI.utils.string2hex("#ffffff"); // returns 0xffffff, which is 16777215 as an integer
 * @memberof PIXI.utils
 * @function string2hex
 * @param {string} string - The string color (e.g., `"#ffffff"`)
 * @returns {number} Number in hexadecimal.
 */
function string2hex(string) {
    if (typeof string === 'string') {
        string = cssColorNames[string.toLowerCase()] || string;
        if (string[0] === '#') {
            string = string.slice(1);
        }
    }
    return parseInt(string, 16);
}
/**
 * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.
 * @example
 * PIXI.utils.rgb2hex([1, 1, 1]); // returns 0xffffff, which is 16777215 as an integer
 * @memberof PIXI.utils
 * @function rgb2hex
 * @param {number[]} rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.
 * @returns {number} Number in hexadecimal.
 */
function rgb2hex(rgb) {
    return (((rgb[0] * 255) << 16) + ((rgb[1] * 255) << 8) + (rgb[2] * 255 | 0));
}

/**
 * Corrects PixiJS blend, takes premultiplied alpha into account
 * @memberof PIXI.utils
 * @function mapPremultipliedBlendModes
 * @private
 * @returns {Array<number[]>} Mapped modes.
 */
function mapPremultipliedBlendModes() {
    var pm = [];
    var npm = [];
    for (var i = 0; i < 32; i++) {
        pm[i] = i;
        npm[i] = i;
    }
    pm[BLEND_MODES.NORMAL_NPM] = BLEND_MODES.NORMAL;
    pm[BLEND_MODES.ADD_NPM] = BLEND_MODES.ADD;
    pm[BLEND_MODES.SCREEN_NPM] = BLEND_MODES.SCREEN;
    npm[BLEND_MODES.NORMAL] = BLEND_MODES.NORMAL_NPM;
    npm[BLEND_MODES.ADD] = BLEND_MODES.ADD_NPM;
    npm[BLEND_MODES.SCREEN] = BLEND_MODES.SCREEN_NPM;
    var array = [];
    array.push(npm);
    array.push(pm);
    return array;
}
/**
 * maps premultiply flag and blendMode to adjusted blendMode
 * @memberof PIXI.utils
 * @constant premultiplyBlendMode
 * @type {Array<number[]>}
 */
var premultiplyBlendMode = mapPremultipliedBlendModes();
/**
 * changes blendMode according to texture format
 * @memberof PIXI.utils
 * @function correctBlendMode
 * @param {number} blendMode - supposed blend mode
 * @param {boolean} premultiplied - whether source is premultiplied
 * @returns {number} true blend mode for this texture
 */
function correctBlendMode(blendMode, premultiplied) {
    return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];
}
/**
 * combines rgb and alpha to out array
 * @memberof PIXI.utils
 * @function premultiplyRgba
 * @param {Float32Array|number[]} rgb - input rgb
 * @param {number} alpha - alpha param
 * @param {Float32Array} [out] - output
 * @param {boolean} [premultiply=true] - do premultiply it
 * @returns {Float32Array} vec4 rgba
 */
function premultiplyRgba(rgb, alpha, out, premultiply) {
    out = out || new Float32Array(4);
    if (premultiply || premultiply === undefined) {
        out[0] = rgb[0] * alpha;
        out[1] = rgb[1] * alpha;
        out[2] = rgb[2] * alpha;
    }
    else {
        out[0] = rgb[0];
        out[1] = rgb[1];
        out[2] = rgb[2];
    }
    out[3] = alpha;
    return out;
}
/**
 * premultiplies tint
 * @memberof PIXI.utils
 * @function premultiplyTint
 * @param {number} tint - integer RGB
 * @param {number} alpha - floating point alpha (0.0-1.0)
 * @returns {number} tint multiplied by alpha
 */
function premultiplyTint(tint, alpha) {
    if (alpha === 1.0) {
        return (alpha * 255 << 24) + tint;
    }
    if (alpha === 0.0) {
        return 0;
    }
    var R = ((tint >> 16) & 0xFF);
    var G = ((tint >> 8) & 0xFF);
    var B = (tint & 0xFF);
    R = ((R * alpha) + 0.5) | 0;
    G = ((G * alpha) + 0.5) | 0;
    B = ((B * alpha) + 0.5) | 0;
    return (alpha * 255 << 24) + (R << 16) + (G << 8) + B;
}
/**
 * converts integer tint and float alpha to vec4 form, premultiplies by default
 * @memberof PIXI.utils
 * @function premultiplyTintToRgba
 * @param {number} tint - input tint
 * @param {number} alpha - alpha param
 * @param {Float32Array} [out] - output
 * @param {boolean} [premultiply=true] - do premultiply it
 * @returns {Float32Array} vec4 rgba
 */
function premultiplyTintToRgba(tint, alpha, out, premultiply) {
    out = out || new Float32Array(4);
    out[0] = ((tint >> 16) & 0xFF) / 255.0;
    out[1] = ((tint >> 8) & 0xFF) / 255.0;
    out[2] = (tint & 0xFF) / 255.0;
    if (premultiply || premultiply === undefined) {
        out[0] *= alpha;
        out[1] *= alpha;
        out[2] *= alpha;
    }
    out[3] = alpha;
    return out;
}

/**
 * Generic Mask Stack data structure
 * @memberof PIXI.utils
 * @function createIndicesForQuads
 * @param {number} size - Number of quads
 * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`
 * @returns {Uint16Array|Uint32Array} - Resulting index buffer
 */
function createIndicesForQuads(size, outBuffer) {
    if (outBuffer === void 0) { outBuffer = null; }
    // the total number of indices in our array, there are 6 points per quad.
    var totalIndices = size * 6;
    outBuffer = outBuffer || new Uint16Array(totalIndices);
    if (outBuffer.length !== totalIndices) {
        throw new Error("Out buffer length is incorrect, got " + outBuffer.length + " and expected " + totalIndices);
    }
    // fill the indices with the quads to draw
    for (var i = 0, j = 0; i < totalIndices; i += 6, j += 4) {
        outBuffer[i + 0] = j + 0;
        outBuffer[i + 1] = j + 1;
        outBuffer[i + 2] = j + 2;
        outBuffer[i + 3] = j + 0;
        outBuffer[i + 4] = j + 2;
        outBuffer[i + 5] = j + 3;
    }
    return outBuffer;
}

function getBufferType(array) {
    if (array.BYTES_PER_ELEMENT === 4) {
        if (array instanceof Float32Array) {
            return 'Float32Array';
        }
        else if (array instanceof Uint32Array) {
            return 'Uint32Array';
        }
        return 'Int32Array';
    }
    else if (array.BYTES_PER_ELEMENT === 2) {
        if (array instanceof Uint16Array) {
            return 'Uint16Array';
        }
    }
    else if (array.BYTES_PER_ELEMENT === 1) {
        if (array instanceof Uint8Array) {
            return 'Uint8Array';
        }
    }
    // TODO map out the rest of the array elements!
    return null;
}

/* eslint-disable object-shorthand */
var map = { Float32Array: Float32Array, Uint32Array: Uint32Array, Int32Array: Int32Array, Uint8Array: Uint8Array };
function interleaveTypedArrays(arrays, sizes) {
    var outSize = 0;
    var stride = 0;
    var views = {};
    for (var i = 0; i < arrays.length; i++) {
        stride += sizes[i];
        outSize += arrays[i].length;
    }
    var buffer = new ArrayBuffer(outSize * 4);
    var out = null;
    var littleOffset = 0;
    for (var i = 0; i < arrays.length; i++) {
        var size = sizes[i];
        var array = arrays[i];
        /*
        @todo This is unsafe casting but consistent with how the code worked previously. Should it stay this way
              or should and `getBufferTypeUnsafe` function be exposed that throws an Error if unsupported type is passed?
         */
        var type = getBufferType(array);
        if (!views[type]) {
            views[type] = new map[type](buffer);
        }
        out = views[type];
        for (var j = 0; j < array.length; j++) {
            var indexStart = ((j / size | 0) * stride) + littleOffset;
            var index = j % size;
            out[indexStart + index] = array[j];
        }
        littleOffset += size;
    }
    return new Float32Array(buffer);
}

// Taken from the bit-twiddle package
/**
 * Rounds to next power of two.
 * @function nextPow2
 * @memberof PIXI.utils
 * @param {number} v - input value
 * @returns {number} - next rounded power of two
 */
function nextPow2(v) {
    v += v === 0 ? 1 : 0;
    --v;
    v |= v >>> 1;
    v |= v >>> 2;
    v |= v >>> 4;
    v |= v >>> 8;
    v |= v >>> 16;
    return v + 1;
}
/**
 * Checks if a number is a power of two.
 * @function isPow2
 * @memberof PIXI.utils
 * @param {number} v - input value
 * @returns {boolean} `true` if value is power of two
 */
function isPow2(v) {
    return !(v & (v - 1)) && (!!v);
}
/**
 * Computes ceil of log base 2
 * @function log2
 * @memberof PIXI.utils
 * @param {number} v - input value
 * @returns {number} logarithm base 2
 */
function log2(v) {
    var r = (v > 0xFFFF ? 1 : 0) << 4;
    v >>>= r;
    var shift = (v > 0xFF ? 1 : 0) << 3;
    v >>>= shift;
    r |= shift;
    shift = (v > 0xF ? 1 : 0) << 2;
    v >>>= shift;
    r |= shift;
    shift = (v > 0x3 ? 1 : 0) << 1;
    v >>>= shift;
    r |= shift;
    return r | (v >> 1);
}

/**
 * Remove items from a javascript array without generating garbage
 * @function removeItems
 * @memberof PIXI.utils
 * @param {Array<any>} arr - Array to remove elements from
 * @param {number} startIdx - starting index
 * @param {number} removeCount - how many to remove
 */
function removeItems(arr, startIdx, removeCount) {
    var length = arr.length;
    var i;
    if (startIdx >= length || removeCount === 0) {
        return;
    }
    removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount);
    var len = length - removeCount;
    for (i = startIdx; i < len; ++i) {
        arr[i] = arr[i + removeCount];
    }
    arr.length = len;
}

/**
 * Returns sign of number
 * @memberof PIXI.utils
 * @function sign
 * @param {number} n - the number to check the sign of
 * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive
 */
function sign(n) {
    if (n === 0)
        { return 0; }
    return n < 0 ? -1 : 1;
}

var nextUid = 0;
/**
 * Gets the next unique identifier
 * @memberof PIXI.utils
 * @function uid
 * @returns {number} The next unique identifier to use.
 */
function uid() {
    return ++nextUid;
}

// A map of warning messages already fired
var warnings = {};
/**
 * Helper for warning developers about deprecated features & settings.
 * A stack track for warnings is given; useful for tracking-down where
 * deprecated methods/properties/classes are being used within the code.
 * @memberof PIXI.utils
 * @function deprecation
 * @param {string} version - The version where the feature became deprecated
 * @param {string} message - Message should include what is deprecated, where, and the new solution
 * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack
 *        this is mostly to ignore internal deprecation calls.
 */
function deprecation(version, message, ignoreDepth) {
    if (ignoreDepth === void 0) { ignoreDepth = 3; }
    // Ignore duplicat
    if (warnings[message]) {
        return;
    }
    /* eslint-disable no-console */
    var stack = new Error().stack;
    // Handle IE < 10 and Safari < 6
    if (typeof stack === 'undefined') {
        console.warn('PixiJS Deprecation Warning: ', message + "\nDeprecated since v" + version);
    }
    else {
        // chop off the stack trace which includes PixiJS internal calls
        stack = stack.split('\n').splice(ignoreDepth).join('\n');
        if (console.groupCollapsed) {
            console.groupCollapsed('%cPixiJS Deprecation Warning: %c%s', 'color:#614108;background:#fffbe6', 'font-weight:normal;color:#614108;background:#fffbe6', message + "\nDeprecated since v" + version);
            console.warn(stack);
            console.groupEnd();
        }
        else {
            console.warn('PixiJS Deprecation Warning: ', message + "\nDeprecated since v" + version);
            console.warn(stack);
        }
    }
    /* eslint-enable no-console */
    warnings[message] = true;
}

/**
 * @todo Describe property usage
 * @static
 * @name ProgramCache
 * @memberof PIXI.utils
 * @type {object}
 */
var ProgramCache = {};
/**
 * @todo Describe property usage
 * @static
 * @name TextureCache
 * @memberof PIXI.utils
 * @type {object}
 */
var TextureCache = Object.create(null);
/**
 * @todo Describe property usage
 * @static
 * @name BaseTextureCache
 * @memberof PIXI.utils
 * @type {object}
 */
var BaseTextureCache = Object.create(null);
/**
 * Destroys all texture in the cache
 * @memberof PIXI.utils
 * @function destroyTextureCache
 */
function destroyTextureCache() {
    var key;
    for (key in TextureCache) {
        TextureCache[key].destroy();
    }
    for (key in BaseTextureCache) {
        BaseTextureCache[key].destroy();
    }
}
/**
 * Removes all textures from cache, but does not destroy them
 * @memberof PIXI.utils
 * @function clearTextureCache
 */
function clearTextureCache() {
    var key;
    for (key in TextureCache) {
        delete TextureCache[key];
    }
    for (key in BaseTextureCache) {
        delete BaseTextureCache[key];
    }
}

/**
 * Creates a Canvas element of the given size to be used as a target for rendering to.
 * @class
 * @memberof PIXI.utils
 */
var CanvasRenderTarget = /** @class */ (function () {
    /**
     * @param width - the width for the newly created canvas
     * @param height - the height for the newly created canvas
     * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas
     */
    function CanvasRenderTarget(width, height, resolution) {
        this.canvas = settings.ADAPTER.createCanvas();
        this.context = this.canvas.getContext('2d');
        this.resolution = resolution || settings.RESOLUTION;
        this.resize(width, height);
    }
    /**
     * Clears the canvas that was created by the CanvasRenderTarget class.
     * @private
     */
    CanvasRenderTarget.prototype.clear = function () {
        this.context.setTransform(1, 0, 0, 1, 0, 0);
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };
    /**
     * Resizes the canvas to the specified width and height.
     * @param desiredWidth - the desired width of the canvas
     * @param desiredHeight - the desired height of the canvas
     */
    CanvasRenderTarget.prototype.resize = function (desiredWidth, desiredHeight) {
        this.canvas.width = Math.round(desiredWidth * this.resolution);
        this.canvas.height = Math.round(desiredHeight * this.resolution);
    };
    /** Destroys this canvas. */
    CanvasRenderTarget.prototype.destroy = function () {
        this.context = null;
        this.canvas = null;
    };
    Object.defineProperty(CanvasRenderTarget.prototype, "width", {
        /**
         * The width of the canvas buffer in pixels.
         * @member {number}
         */
        get: function () {
            return this.canvas.width;
        },
        set: function (val) {
            this.canvas.width = Math.round(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CanvasRenderTarget.prototype, "height", {
        /**
         * The height of the canvas buffer in pixels.
         * @member {number}
         */
        get: function () {
            return this.canvas.height;
        },
        set: function (val) {
            this.canvas.height = Math.round(val);
        },
        enumerable: false,
        configurable: true
    });
    return CanvasRenderTarget;
}());

/**
 * Trim transparent borders from a canvas
 * @memberof PIXI.utils
 * @function trimCanvas
 * @param {HTMLCanvasElement} canvas - the canvas to trim
 * @returns {object} Trim data
 */
function trimCanvas(canvas) {
    // https://gist.github.com/remy/784508
    var width = canvas.width;
    var height = canvas.height;
    var context = canvas.getContext('2d', {
        willReadFrequently: true,
    });
    var imageData = context.getImageData(0, 0, width, height);
    var pixels = imageData.data;
    var len = pixels.length;
    var bound = {
        top: null,
        left: null,
        right: null,
        bottom: null,
    };
    var data = null;
    var i;
    var x;
    var y;
    for (i = 0; i < len; i += 4) {
        if (pixels[i + 3] !== 0) {
            x = (i / 4) % width;
            y = ~~((i / 4) / width);
            if (bound.top === null) {
                bound.top = y;
            }
            if (bound.left === null) {
                bound.left = x;
            }
            else if (x < bound.left) {
                bound.left = x;
            }
            if (bound.right === null) {
                bound.right = x + 1;
            }
            else if (bound.right < x) {
                bound.right = x + 1;
            }
            if (bound.bottom === null) {
                bound.bottom = y;
            }
            else if (bound.bottom < y) {
                bound.bottom = y;
            }
        }
    }
    if (bound.top !== null) {
        width = bound.right - bound.left;
        height = bound.bottom - bound.top + 1;
        data = context.getImageData(bound.left, bound.top, width, height);
    }
    return {
        height: height,
        width: width,
        data: data,
    };
}

/**
 * Regexp for data URI.
 * Based on: {@link https://github.com/ragingwind/data-uri-regex}
 * @static
 * @constant {RegExp|string} DATA_URI
 * @memberof PIXI
 * @example data:image/png;base64
 */
var DATA_URI = /^\s*data:(?:([\w-]+)\/([\w+.-]+))?(?:;charset=([\w-]+))?(?:;(base64))?,(.*)/i;

/**
 * @memberof PIXI.utils
 * @interface DecomposedDataUri
 */
/**
 * type, eg. `image`
 * @memberof PIXI.utils.DecomposedDataUri#
 * @member {string} mediaType
 */
/**
 * Sub type, eg. `png`
 * @memberof PIXI.utils.DecomposedDataUri#
 * @member {string} subType
 */
/**
 * @memberof PIXI.utils.DecomposedDataUri#
 * @member {string} charset
 */
/**
 * Data encoding, eg. `base64`
 * @memberof PIXI.utils.DecomposedDataUri#
 * @member {string} encoding
 */
/**
 * The actual data
 * @memberof PIXI.utils.DecomposedDataUri#
 * @member {string} data
 */
/**
 * Split a data URI into components. Returns undefined if
 * parameter `dataUri` is not a valid data URI.
 * @memberof PIXI.utils
 * @function decomposeDataUri
 * @param {string} dataUri - the data URI to check
 * @returns {PIXI.utils.DecomposedDataUri|undefined} The decomposed data uri or undefined
 */
function decomposeDataUri(dataUri) {
    var dataUriMatch = DATA_URI.exec(dataUri);
    if (dataUriMatch) {
        return {
            mediaType: dataUriMatch[1] ? dataUriMatch[1].toLowerCase() : undefined,
            subType: dataUriMatch[2] ? dataUriMatch[2].toLowerCase() : undefined,
            charset: dataUriMatch[3] ? dataUriMatch[3].toLowerCase() : undefined,
            encoding: dataUriMatch[4] ? dataUriMatch[4].toLowerCase() : undefined,
            data: dataUriMatch[5],
        };
    }
    return undefined;
}

var tempAnchor;
/**
 * Sets the `crossOrigin` property for this resource based on if the url
 * for this resource is cross-origin. If crossOrigin was manually set, this
 * function does nothing.
 * Nipped from the resource loader!
 * @ignore
 * @param {string} url - The url to test.
 * @param {object} [loc=window.location] - The location object to test against.
 * @returns {string} The crossOrigin value to use (or empty string for none).
 */
function determineCrossOrigin(url$1, loc) {
    if (loc === void 0) { loc = globalThis.location; }
    // data: and javascript: urls are considered same-origin
    if (url$1.indexOf('data:') === 0) {
        return '';
    }
    // default is window.location
    loc = loc || globalThis.location;
    if (!tempAnchor) {
        tempAnchor = document.createElement('a');
    }
    // let the browser determine the full href for the url of this resource and then
    // parse with the node url lib, we can't use the properties of the anchor element
    // because they don't work in IE9 :(
    tempAnchor.href = url$1;
    var parsedUrl = utils_url.parse(tempAnchor.href);
    var samePort = (!parsedUrl.port && loc.port === '') || (parsedUrl.port === loc.port);
    // if cross origin
    if (parsedUrl.hostname !== loc.hostname || !samePort || parsedUrl.protocol !== loc.protocol) {
        return 'anonymous';
    }
    return '';
}

/**
 * get the resolution / device pixel ratio of an asset by looking for the prefix
 * used by spritesheets and image urls
 * @memberof PIXI.utils
 * @function getResolutionOfUrl
 * @param {string} url - the image path
 * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.
 * @returns {number} resolution / device pixel ratio of an asset
 */
function getResolutionOfUrl(url, defaultValue) {
    var resolution = settings.RETINA_PREFIX.exec(url);
    if (resolution) {
        return parseFloat(resolution[1]);
    }
    return defaultValue !== undefined ? defaultValue : 1;
}


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/extensions/dist/esm/extensions.mjs
/*!
 * @pixi/extensions - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/extensions is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        var arguments$1 = arguments;

        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments$1[i];
            for (var p in s) { if (Object.prototype.hasOwnProperty.call(s, p)) { t[p] = s[p]; } }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/**
 * Collection of valid extension types.
 * @memberof PIXI
 * @property {string} Application - Application plugins
 * @property {string} RendererPlugin - Plugins for Renderer
 * @property {string} CanvasRendererPlugin - Plugins for CanvasRenderer
 * @property {string} Loader - Plugins to use with Loader
 * @property {string} LoadParser - Parsers for Assets loader.
 * @property {string} ResolveParser - Parsers for Assets resolvers.
 * @property {string} CacheParser - Parsers for Assets cache.
 */
var ExtensionType;
(function (ExtensionType) {
    ExtensionType["Application"] = "application";
    ExtensionType["RendererPlugin"] = "renderer-webgl-plugin";
    ExtensionType["CanvasRendererPlugin"] = "renderer-canvas-plugin";
    ExtensionType["Loader"] = "loader";
    ExtensionType["LoadParser"] = "load-parser";
    ExtensionType["ResolveParser"] = "resolve-parser";
    ExtensionType["CacheParser"] = "cache-parser";
    ExtensionType["DetectionParser"] = "detection-parser";
})(ExtensionType || (ExtensionType = {}));
/**
 * Convert input into extension format data.
 * @ignore
 */
var normalizeExtension = function (ext) {
    // Class/Object submission, use extension object
    if (typeof ext === 'function' || (typeof ext === 'object' && ext.extension)) {
        if (!ext.extension) {
            throw new Error('Extension class must have an extension object');
        }
        var metadata = (typeof ext.extension !== 'object')
            ? { type: ext.extension }
            : ext.extension;
        ext = __assign(__assign({}, metadata), { ref: ext });
    }
    if (typeof ext === 'object') {
        ext = __assign({}, ext);
    }
    else {
        throw new Error('Invalid extension type');
    }
    if (typeof ext.type === 'string') {
        ext.type = [ext.type];
    }
    return ext;
};
/**
 * Global registration of all PixiJS extensions. One-stop-shop for extensibility.
 * @memberof PIXI
 * @namespace extensions
 */
var extensions = {
    /** @ignore */
    _addHandlers: null,
    /** @ignore */
    _removeHandlers: null,
    /** @ignore */
    _queue: {},
    /**
     * Remove extensions from PixiJS.
     * @param extensions - Extensions to be removed.
     * @returns {PIXI.extensions} For chaining.
     */
    remove: function () {
        var arguments$1 = arguments;

        var _this = this;
        var extensions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extensions[_i] = arguments$1[_i];
        }
        extensions.map(normalizeExtension).forEach(function (ext) {
            ext.type.forEach(function (type) { var _a, _b; return (_b = (_a = _this._removeHandlers)[type]) === null || _b === void 0 ? void 0 : _b.call(_a, ext); });
        });
        return this;
    },
    /**
     * Register new extensions with PixiJS.
     * @param extensions - The spread of extensions to add to PixiJS.
     * @returns {PIXI.extensions} For chaining.
     */
    add: function () {
        var arguments$1 = arguments;

        var _this = this;
        var extensions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extensions[_i] = arguments$1[_i];
        }
        // Handle any extensions either passed as class w/ data or as data
        extensions.map(normalizeExtension).forEach(function (ext) {
            ext.type.forEach(function (type) {
                var handlers = _this._addHandlers;
                var queue = _this._queue;
                if (!handlers[type]) {
                    queue[type] = queue[type] || [];
                    queue[type].push(ext);
                }
                else {
                    handlers[type](ext);
                }
            });
        });
        return this;
    },
    /**
     * Internal method to handle extensions by name.
     * @param type - The extension type.
     * @param onAdd  - Function for handling when extensions are added/registered passes {@link PIXI.ExtensionFormat}.
     * @param onRemove  - Function for handling when extensions are removed/unregistered passes {@link PIXI.ExtensionFormat}.
     * @returns {PIXI.extensions} For chaining.
     */
    handle: function (type, onAdd, onRemove) {
        var addHandlers = this._addHandlers = this._addHandlers || {};
        var removeHandlers = this._removeHandlers = this._removeHandlers || {};
        if (addHandlers[type] || removeHandlers[type]) {
            throw new Error("Extension type " + type + " already has a handler");
        }
        addHandlers[type] = onAdd;
        removeHandlers[type] = onRemove;
        // Process the queue
        var queue = this._queue;
        // Process any plugins that have been registered before the handler
        if (queue[type]) {
            queue[type].forEach(function (ext) { return onAdd(ext); });
            delete queue[type];
        }
        return this;
    },
    /**
     * Handle a type, but using a map by `name` property.
     * @param type - Type of extension to handle.
     * @param map - The object map of named extensions.
     * @returns {PIXI.extensions} For chaining.
     */
    handleByMap: function (type, map) {
        return this.handle(type, function (extension) {
            map[extension.name] = extension.ref;
        }, function (extension) {
            delete map[extension.name];
        });
    },
    /**
     * Handle a type, but using a list of extensions.
     * @param type - Type of extension to handle.
     * @param list - The list of extensions.
     * @returns {PIXI.extensions} For chaining.
     */
    handleByList: function (type, list) {
        return this.handle(type, function (extension) {
            var _a, _b;
            if (list.includes(extension.ref)) {
                return;
            }
            list.push(extension.ref);
            // TODO: remove me later, only added for @pixi/loaders
            if (type === ExtensionType.Loader) {
                (_b = (_a = extension.ref).add) === null || _b === void 0 ? void 0 : _b.call(_a);
            }
        }, function (extension) {
            var index = list.indexOf(extension.ref);
            if (index !== -1) {
                list.splice(index, 1);
            }
        });
    },
};


//# sourceMappingURL=extensions.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/runner/dist/esm/runner.mjs
/*!
 * @pixi/runner - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/runner is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
/**
 * A Runner is a highly performant and simple alternative to signals. Best used in situations
 * where events are dispatched to many objects at high frequency (say every frame!)
 *
 *
 * like a signal..
 * ```
 * import { Runner } from '@pixi/runner';
 *
 * const myObject = {
 *     loaded: new Runner('loaded')
 * }
 *
 * const listener = {
 *     loaded: function(){
 *         // thin
 *     }
 * }
 *
 * myObject.loaded.add(listener);
 *
 * myObject.loaded.emit();
 * ```
 *
 * Or for handling calling the same function on many items
 * ```
 * import { Runner } from '@pixi/runner';
 *
 * const myGame = {
 *     update: new Runner('update')
 * }
 *
 * const gameObject = {
 *     update: function(time){
 *         // update my gamey state
 *     }
 * }
 *
 * myGame.update.add(gameObject);
 *
 * myGame.update.emit(time);
 * ```
 * @memberof PIXI
 */
var Runner = /** @class */ (function () {
    /**
     * @param name - The function name that will be executed on the listeners added to this Runner.
     */
    function Runner(name) {
        this.items = [];
        this._name = name;
        this._aliasCount = 0;
    }
    /* eslint-disable jsdoc/require-param, jsdoc/check-param-names */
    /**
     * Dispatch/Broadcast Runner to all listeners added to the queue.
     * @param {...any} params - (optional) parameters to pass to each listener
     */
    /*  eslint-enable jsdoc/require-param, jsdoc/check-param-names */
    Runner.prototype.emit = function (a0, a1, a2, a3, a4, a5, a6, a7) {
        if (arguments.length > 8) {
            throw new Error('max arguments reached');
        }
        var _a = this, name = _a.name, items = _a.items;
        this._aliasCount++;
        for (var i = 0, len = items.length; i < len; i++) {
            items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);
        }
        if (items === this.items) {
            this._aliasCount--;
        }
        return this;
    };
    Runner.prototype.ensureNonAliasedItems = function () {
        if (this._aliasCount > 0 && this.items.length > 1) {
            this._aliasCount = 0;
            this.items = this.items.slice(0);
        }
    };
    /**
     * Add a listener to the Runner
     *
     * Runners do not need to have scope or functions passed to them.
     * All that is required is to pass the listening object and ensure that it has contains a function that has the same name
     * as the name provided to the Runner when it was created.
     *
     * Eg A listener passed to this Runner will require a 'complete' function.
     *
     * ```
     * import { Runner } from '@pixi/runner';
     *
     * const complete = new Runner('complete');
     * ```
     *
     * The scope used will be the object itself.
     * @param {any} item - The object that will be listening.
     */
    Runner.prototype.add = function (item) {
        if (item[this._name]) {
            this.ensureNonAliasedItems();
            this.remove(item);
            this.items.push(item);
        }
        return this;
    };
    /**
     * Remove a single listener from the dispatch queue.
     * @param {any} item - The listener that you would like to remove.
     */
    Runner.prototype.remove = function (item) {
        var index = this.items.indexOf(item);
        if (index !== -1) {
            this.ensureNonAliasedItems();
            this.items.splice(index, 1);
        }
        return this;
    };
    /**
     * Check to see if the listener is already in the Runner
     * @param {any} item - The listener that you would like to check.
     */
    Runner.prototype.contains = function (item) {
        return this.items.indexOf(item) !== -1;
    };
    /** Remove all listeners from the Runner */
    Runner.prototype.removeAll = function () {
        this.ensureNonAliasedItems();
        this.items.length = 0;
        return this;
    };
    /** Remove all references, don't use after this. */
    Runner.prototype.destroy = function () {
        this.removeAll();
        this.items = null;
        this._name = null;
    };
    Object.defineProperty(Runner.prototype, "empty", {
        /**
         * `true` if there are no this Runner contains no listeners
         * @readonly
         */
        get: function () {
            return this.items.length === 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Runner.prototype, "name", {
        /**
         * The name of the runner.
         * @readonly
         */
        get: function () {
            return this._name;
        },
        enumerable: false,
        configurable: true
    });
    return Runner;
}());
Object.defineProperties(Runner.prototype, {
    /**
     * Alias for `emit`
     * @memberof PIXI.Runner#
     * @method dispatch
     * @see PIXI.Runner#emit
     */
    dispatch: { value: Runner.prototype.emit },
    /**
     * Alias for `emit`
     * @memberof PIXI.Runner#
     * @method run
     * @see PIXI.Runner#emit
     */
    run: { value: Runner.prototype.emit },
});


//# sourceMappingURL=runner.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/ticker/dist/esm/ticker.mjs
/*!
 * @pixi/ticker - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/ticker is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */



/**
 * Target frames per millisecond.
 * @static
 * @name TARGET_FPMS
 * @memberof PIXI.settings
 * @type {number}
 * @default 0.06
 */
settings.TARGET_FPMS = 0.06;

/**
 * Represents the update priorities used by internal PIXI classes when registered with
 * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower
 * priority items, such as render, should go later.
 * @static
 * @constant
 * @name UPDATE_PRIORITY
 * @memberof PIXI
 * @enum {number}
 * @property {number} [INTERACTION=50] Highest priority, used for {@link PIXI.InteractionManager}
 * @property {number} [HIGH=25] High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}
 * @property {number} [NORMAL=0] Default priority for ticker events, see {@link PIXI.Ticker#add}.
 * @property {number} [LOW=-25] Low priority used for {@link PIXI.Application} rendering.
 * @property {number} [UTILITY=-50] Lowest priority used for {@link PIXI.BasePrepare} utility.
 */
var UPDATE_PRIORITY;
(function (UPDATE_PRIORITY) {
    UPDATE_PRIORITY[UPDATE_PRIORITY["INTERACTION"] = 50] = "INTERACTION";
    UPDATE_PRIORITY[UPDATE_PRIORITY["HIGH"] = 25] = "HIGH";
    UPDATE_PRIORITY[UPDATE_PRIORITY["NORMAL"] = 0] = "NORMAL";
    UPDATE_PRIORITY[UPDATE_PRIORITY["LOW"] = -25] = "LOW";
    UPDATE_PRIORITY[UPDATE_PRIORITY["UTILITY"] = -50] = "UTILITY";
})(UPDATE_PRIORITY || (UPDATE_PRIORITY = {}));

/**
 * Internal class for handling the priority sorting of ticker handlers.
 * @private
 * @class
 * @memberof PIXI
 */
var TickerListener = /** @class */ (function () {
    /**
     * Constructor
     * @private
     * @param fn - The listener function to be added for one update
     * @param context - The listener context
     * @param priority - The priority for emitting
     * @param once - If the handler should fire once
     */
    function TickerListener(fn, context, priority, once) {
        if (context === void 0) { context = null; }
        if (priority === void 0) { priority = 0; }
        if (once === void 0) { once = false; }
        /** The next item in chain. */
        this.next = null;
        /** The previous item in chain. */
        this.previous = null;
        /** `true` if this listener has been destroyed already. */
        this._destroyed = false;
        this.fn = fn;
        this.context = context;
        this.priority = priority;
        this.once = once;
    }
    /**
     * Simple compare function to figure out if a function and context match.
     * @private
     * @param fn - The listener function to be added for one update
     * @param context - The listener context
     * @returns `true` if the listener match the arguments
     */
    TickerListener.prototype.match = function (fn, context) {
        if (context === void 0) { context = null; }
        return this.fn === fn && this.context === context;
    };
    /**
     * Emit by calling the current function.
     * @private
     * @param deltaTime - time since the last emit.
     * @returns Next ticker
     */
    TickerListener.prototype.emit = function (deltaTime) {
        if (this.fn) {
            if (this.context) {
                this.fn.call(this.context, deltaTime);
            }
            else {
                this.fn(deltaTime);
            }
        }
        var redirect = this.next;
        if (this.once) {
            this.destroy(true);
        }
        // Soft-destroying should remove
        // the next reference
        if (this._destroyed) {
            this.next = null;
        }
        return redirect;
    };
    /**
     * Connect to the list.
     * @private
     * @param previous - Input node, previous listener
     */
    TickerListener.prototype.connect = function (previous) {
        this.previous = previous;
        if (previous.next) {
            previous.next.previous = this;
        }
        this.next = previous.next;
        previous.next = this;
    };
    /**
     * Destroy and don't use after this.
     * @private
     * @param hard - `true` to remove the `next` reference, this
     *        is considered a hard destroy. Soft destroy maintains the next reference.
     * @returns The listener to redirect while emitting or removing.
     */
    TickerListener.prototype.destroy = function (hard) {
        if (hard === void 0) { hard = false; }
        this._destroyed = true;
        this.fn = null;
        this.context = null;
        // Disconnect, hook up next and previous
        if (this.previous) {
            this.previous.next = this.next;
        }
        if (this.next) {
            this.next.previous = this.previous;
        }
        // Redirect to the next item
        var redirect = this.next;
        // Remove references
        this.next = hard ? null : redirect;
        this.previous = null;
        return redirect;
    };
    return TickerListener;
}());

/**
 * A Ticker class that runs an update loop that other objects listen to.
 *
 * This class is composed around listeners meant for execution on the next requested animation frame.
 * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.
 * @class
 * @memberof PIXI
 */
var Ticker = /** @class */ (function () {
    function Ticker() {
        var _this = this;
        /**
         * Whether or not this ticker should invoke the method
         * {@link PIXI.Ticker#start} automatically
         * when a listener is added.
         */
        this.autoStart = false;
        /**
         * Scalar time value from last frame to this frame.
         * This value is capped by setting {@link PIXI.Ticker#minFPS}
         * and is scaled with {@link PIXI.Ticker#speed}.
         * **Note:** The cap may be exceeded by scaling.
         */
        this.deltaTime = 1;
        /**
         * The last time {@link PIXI.Ticker#update} was invoked.
         * This value is also reset internally outside of invoking
         * update, but only when a new animation frame is requested.
         * If the platform supports DOMHighResTimeStamp,
         * this value will have a precision of 1 µs.
         */
        this.lastTime = -1;
        /**
         * Factor of current {@link PIXI.Ticker#deltaTime}.
         * @example
         * // Scales ticker.deltaTime to what would be
         * // the equivalent of approximately 120 FPS
         * ticker.speed = 2;
         */
        this.speed = 1;
        /**
         * Whether or not this ticker has been started.
         * `true` if {@link PIXI.Ticker#start} has been called.
         * `false` if {@link PIXI.Ticker#stop} has been called.
         * While `false`, this value may change to `true` in the
         * event of {@link PIXI.Ticker#autoStart} being `true`
         * and a listener is added.
         */
        this.started = false;
        /** Internal current frame request ID */
        this._requestId = null;
        /**
         * Internal value managed by minFPS property setter and getter.
         * This is the maximum allowed milliseconds between updates.
         */
        this._maxElapsedMS = 100;
        /**
         * Internal value managed by minFPS property setter and getter.
         * This is the minimum allowed milliseconds between updates.
         */
        this._minElapsedMS = 0;
        /** If enabled, deleting is disabled.*/
        this._protected = false;
        /** The last time keyframe was executed. Maintains a relatively fixed interval with the previous value. */
        this._lastFrame = -1;
        this._head = new TickerListener(null, null, Infinity);
        this.deltaMS = 1 / settings.TARGET_FPMS;
        this.elapsedMS = 1 / settings.TARGET_FPMS;
        this._tick = function (time) {
            _this._requestId = null;
            if (_this.started) {
                // Invoke listeners now
                _this.update(time);
                // Listener side effects may have modified ticker state.
                if (_this.started && _this._requestId === null && _this._head.next) {
                    _this._requestId = requestAnimationFrame(_this._tick);
                }
            }
        };
    }
    /**
     * Conditionally requests a new animation frame.
     * If a frame has not already been requested, and if the internal
     * emitter has listeners, a new frame is requested.
     * @private
     */
    Ticker.prototype._requestIfNeeded = function () {
        if (this._requestId === null && this._head.next) {
            // ensure callbacks get correct delta
            this.lastTime = performance.now();
            this._lastFrame = this.lastTime;
            this._requestId = requestAnimationFrame(this._tick);
        }
    };
    /**
     * Conditionally cancels a pending animation frame.
     * @private
     */
    Ticker.prototype._cancelIfNeeded = function () {
        if (this._requestId !== null) {
            cancelAnimationFrame(this._requestId);
            this._requestId = null;
        }
    };
    /**
     * Conditionally requests a new animation frame.
     * If the ticker has been started it checks if a frame has not already
     * been requested, and if the internal emitter has listeners. If these
     * conditions are met, a new frame is requested. If the ticker has not
     * been started, but autoStart is `true`, then the ticker starts now,
     * and continues with the previous conditions to request a new frame.
     * @private
     */
    Ticker.prototype._startIfPossible = function () {
        if (this.started) {
            this._requestIfNeeded();
        }
        else if (this.autoStart) {
            this.start();
        }
    };
    /**
     * Register a handler for tick events. Calls continuously unless
     * it is removed or the ticker is stopped.
     * @param fn - The listener function to be added for updates
     * @param context - The listener context
     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting
     * @returns This instance of a ticker
     */
    Ticker.prototype.add = function (fn, context, priority) {
        if (priority === void 0) { priority = UPDATE_PRIORITY.NORMAL; }
        return this._addListener(new TickerListener(fn, context, priority));
    };
    /**
     * Add a handler for the tick event which is only execute once.
     * @param fn - The listener function to be added for one update
     * @param context - The listener context
     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting
     * @returns This instance of a ticker
     */
    Ticker.prototype.addOnce = function (fn, context, priority) {
        if (priority === void 0) { priority = UPDATE_PRIORITY.NORMAL; }
        return this._addListener(new TickerListener(fn, context, priority, true));
    };
    /**
     * Internally adds the event handler so that it can be sorted by priority.
     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run
     * before the rendering.
     * @private
     * @param listener - Current listener being added.
     * @returns This instance of a ticker
     */
    Ticker.prototype._addListener = function (listener) {
        // For attaching to head
        var current = this._head.next;
        var previous = this._head;
        // Add the first item
        if (!current) {
            listener.connect(previous);
        }
        else {
            // Go from highest to lowest priority
            while (current) {
                if (listener.priority > current.priority) {
                    listener.connect(previous);
                    break;
                }
                previous = current;
                current = current.next;
            }
            // Not yet connected
            if (!listener.previous) {
                listener.connect(previous);
            }
        }
        this._startIfPossible();
        return this;
    };
    /**
     * Removes any handlers matching the function and context parameters.
     * If no handlers are left after removing, then it cancels the animation frame.
     * @param fn - The listener function to be removed
     * @param context - The listener context to be removed
     * @returns This instance of a ticker
     */
    Ticker.prototype.remove = function (fn, context) {
        var listener = this._head.next;
        while (listener) {
            // We found a match, lets remove it
            // no break to delete all possible matches
            // incase a listener was added 2+ times
            if (listener.match(fn, context)) {
                listener = listener.destroy();
            }
            else {
                listener = listener.next;
            }
        }
        if (!this._head.next) {
            this._cancelIfNeeded();
        }
        return this;
    };
    Object.defineProperty(Ticker.prototype, "count", {
        /**
         * The number of listeners on this ticker, calculated by walking through linked list
         * @readonly
         * @member {number}
         */
        get: function () {
            if (!this._head) {
                return 0;
            }
            var count = 0;
            var current = this._head;
            while ((current = current.next)) {
                count++;
            }
            return count;
        },
        enumerable: false,
        configurable: true
    });
    /** Starts the ticker. If the ticker has listeners a new animation frame is requested at this point. */
    Ticker.prototype.start = function () {
        if (!this.started) {
            this.started = true;
            this._requestIfNeeded();
        }
    };
    /** Stops the ticker. If the ticker has requested an animation frame it is canceled at this point. */
    Ticker.prototype.stop = function () {
        if (this.started) {
            this.started = false;
            this._cancelIfNeeded();
        }
    };
    /** Destroy the ticker and don't use after this. Calling this method removes all references to internal events. */
    Ticker.prototype.destroy = function () {
        if (!this._protected) {
            this.stop();
            var listener = this._head.next;
            while (listener) {
                listener = listener.destroy(true);
            }
            this._head.destroy();
            this._head = null;
        }
    };
    /**
     * Triggers an update. An update entails setting the
     * current {@link PIXI.Ticker#elapsedMS},
     * the current {@link PIXI.Ticker#deltaTime},
     * invoking all listeners with current deltaTime,
     * and then finally setting {@link PIXI.Ticker#lastTime}
     * with the value of currentTime that was provided.
     * This method will be called automatically by animation
     * frame callbacks if the ticker instance has been started
     * and listeners are added.
     * @param {number} [currentTime=performance.now()] - the current time of execution
     */
    Ticker.prototype.update = function (currentTime) {
        if (currentTime === void 0) { currentTime = performance.now(); }
        var elapsedMS;
        // If the difference in time is zero or negative, we ignore most of the work done here.
        // If there is no valid difference, then should be no reason to let anyone know about it.
        // A zero delta, is exactly that, nothing should update.
        //
        // The difference in time can be negative, and no this does not mean time traveling.
        // This can be the result of a race condition between when an animation frame is requested
        // on the current JavaScript engine event loop, and when the ticker's start method is invoked
        // (which invokes the internal _requestIfNeeded method). If a frame is requested before
        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,
        // can receive a time argument that can be less than the lastTime value that was set within
        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.
        //
        // This check covers this browser engine timing issue, as well as if consumers pass an invalid
        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.
        if (currentTime > this.lastTime) {
            // Save uncapped elapsedMS for measurement
            elapsedMS = this.elapsedMS = currentTime - this.lastTime;
            // cap the milliseconds elapsed used for deltaTime
            if (elapsedMS > this._maxElapsedMS) {
                elapsedMS = this._maxElapsedMS;
            }
            elapsedMS *= this.speed;
            // If not enough time has passed, exit the function.
            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS
            // adjustment to ensure a relatively stable interval.
            if (this._minElapsedMS) {
                var delta = currentTime - this._lastFrame | 0;
                if (delta < this._minElapsedMS) {
                    return;
                }
                this._lastFrame = currentTime - (delta % this._minElapsedMS);
            }
            this.deltaMS = elapsedMS;
            this.deltaTime = this.deltaMS * settings.TARGET_FPMS;
            // Cache a local reference, in-case ticker is destroyed
            // during the emit, we can still check for head.next
            var head = this._head;
            // Invoke listeners added to internal emitter
            var listener = head.next;
            while (listener) {
                listener = listener.emit(this.deltaTime);
            }
            if (!head.next) {
                this._cancelIfNeeded();
            }
        }
        else {
            this.deltaTime = this.deltaMS = this.elapsedMS = 0;
        }
        this.lastTime = currentTime;
    };
    Object.defineProperty(Ticker.prototype, "FPS", {
        /**
         * The frames per second at which this ticker is running.
         * The default is approximately 60 in most modern browsers.
         * **Note:** This does not factor in the value of
         * {@link PIXI.Ticker#speed}, which is specific
         * to scaling {@link PIXI.Ticker#deltaTime}.
         * @member {number}
         * @readonly
         */
        get: function () {
            return 1000 / this.elapsedMS;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Ticker.prototype, "minFPS", {
        /**
         * Manages the maximum amount of milliseconds allowed to
         * elapse between invoking {@link PIXI.Ticker#update}.
         * This value is used to cap {@link PIXI.Ticker#deltaTime},
         * but does not effect the measured value of {@link PIXI.Ticker#FPS}.
         * When setting this property it is clamped to a value between
         * `0` and `PIXI.settings.TARGET_FPMS * 1000`.
         * @member {number}
         * @default 10
         */
        get: function () {
            return 1000 / this._maxElapsedMS;
        },
        set: function (fps) {
            // Minimum must be below the maxFPS
            var minFPS = Math.min(this.maxFPS, fps);
            // Must be at least 0, but below 1 / settings.TARGET_FPMS
            var minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);
            this._maxElapsedMS = 1 / minFPMS;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Ticker.prototype, "maxFPS", {
        /**
         * Manages the minimum amount of milliseconds required to
         * elapse between invoking {@link PIXI.Ticker#update}.
         * This will effect the measured value of {@link PIXI.Ticker#FPS}.
         * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.
         * Otherwise it will be at least `minFPS`
         * @member {number}
         * @default 0
         */
        get: function () {
            if (this._minElapsedMS) {
                return Math.round(1000 / this._minElapsedMS);
            }
            return 0;
        },
        set: function (fps) {
            if (fps === 0) {
                this._minElapsedMS = 0;
            }
            else {
                // Max must be at least the minFPS
                var maxFPS = Math.max(this.minFPS, fps);
                this._minElapsedMS = 1 / (maxFPS / 1000);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Ticker, "shared", {
        /**
         * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by
         * {@link PIXI.VideoResource} to update animation frames / video textures.
         *
         * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.
         *
         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.
         * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.
         * @example
         * let ticker = PIXI.Ticker.shared;
         * // Set this to prevent starting this ticker when listeners are added.
         * // By default this is true only for the PIXI.Ticker.shared instance.
         * ticker.autoStart = false;
         * // FYI, call this to ensure the ticker is stopped. It should be stopped
         * // if you have not attempted to render anything yet.
         * ticker.stop();
         * // Call this when you are ready for a running shared ticker.
         * ticker.start();
         * @example
         * // You may use the shared ticker to render...
         * let renderer = PIXI.autoDetectRenderer();
         * let stage = new PIXI.Container();
         * document.body.appendChild(renderer.view);
         * ticker.add(function (time) {
         *     renderer.render(stage);
         * });
         * @example
         * // Or you can just update it manually.
         * ticker.autoStart = false;
         * ticker.stop();
         * function animate(time) {
         *     ticker.update(time);
         *     renderer.render(stage);
         *     requestAnimationFrame(animate);
         * }
         * animate(performance.now());
         * @member {PIXI.Ticker}
         * @static
         */
        get: function () {
            if (!Ticker._shared) {
                var shared = Ticker._shared = new Ticker();
                shared.autoStart = true;
                shared._protected = true;
            }
            return Ticker._shared;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Ticker, "system", {
        /**
         * The system ticker instance used by {@link PIXI.InteractionManager} and by
         * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,
         * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.
         *
         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.
         * @member {PIXI.Ticker}
         * @static
         */
        get: function () {
            if (!Ticker._system) {
                var system = Ticker._system = new Ticker();
                system.autoStart = true;
                system._protected = true;
            }
            return Ticker._system;
        },
        enumerable: false,
        configurable: true
    });
    return Ticker;
}());

/**
 * Middleware for for Application Ticker.
 * @example
 * import {TickerPlugin} from '@pixi/ticker';
 * import {Application} from '@pixi/app';
 * import {extensions} from '@pixi/extensions';
 * extensions.add(TickerPlugin);
 * @class
 * @memberof PIXI
 */
var TickerPlugin = /** @class */ (function () {
    function TickerPlugin() {
    }
    /**
     * Initialize the plugin with scope of application instance
     * @static
     * @private
     * @param {object} [options] - See application options
     */
    TickerPlugin.init = function (options) {
        var _this = this;
        // Set default
        options = Object.assign({
            autoStart: true,
            sharedTicker: false,
        }, options);
        // Create ticker setter
        Object.defineProperty(this, 'ticker', {
            set: function (ticker) {
                if (this._ticker) {
                    this._ticker.remove(this.render, this);
                }
                this._ticker = ticker;
                if (ticker) {
                    ticker.add(this.render, this, UPDATE_PRIORITY.LOW);
                }
            },
            get: function () {
                return this._ticker;
            },
        });
        /**
         * Convenience method for stopping the render.
         * @method
         * @memberof PIXI.Application
         * @instance
         */
        this.stop = function () {
            _this._ticker.stop();
        };
        /**
         * Convenience method for starting the render.
         * @method
         * @memberof PIXI.Application
         * @instance
         */
        this.start = function () {
            _this._ticker.start();
        };
        /**
         * Internal reference to the ticker.
         * @type {PIXI.Ticker}
         * @name _ticker
         * @memberof PIXI.Application#
         * @private
         */
        this._ticker = null;
        /**
         * Ticker for doing render updates.
         * @type {PIXI.Ticker}
         * @name ticker
         * @memberof PIXI.Application#
         * @default PIXI.Ticker.shared
         */
        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();
        // Start the rendering
        if (options.autoStart) {
            this.start();
        }
    };
    /**
     * Clean up the ticker, scoped to application.
     * @static
     * @private
     */
    TickerPlugin.destroy = function () {
        if (this._ticker) {
            var oldTicker = this._ticker;
            this.ticker = null;
            oldTicker.destroy();
        }
    };
    /** @ignore */
    TickerPlugin.extension = ExtensionType.Application;
    return TickerPlugin;
}());


//# sourceMappingURL=ticker.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/math/dist/esm/math.mjs
/*!
 * @pixi/math - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/math is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
/**
 * Two Pi.
 * @static
 * @member {number}
 * @memberof PIXI
 */
var PI_2 = Math.PI * 2;
/**
 * Conversion factor for converting radians to degrees.
 * @static
 * @member {number} RAD_TO_DEG
 * @memberof PIXI
 */
var RAD_TO_DEG = 180 / Math.PI;
/**
 * Conversion factor for converting degrees to radians.
 * @static
 * @member {number}
 * @memberof PIXI
 */
var DEG_TO_RAD = Math.PI / 180;
/**
 * Constants that identify shapes, mainly to prevent `instanceof` calls.
 * @static
 * @memberof PIXI
 * @enum {number}
 * @property {number} POLY Polygon
 * @property {number} RECT Rectangle
 * @property {number} CIRC Circle
 * @property {number} ELIP Ellipse
 * @property {number} RREC Rounded Rectangle
 */
var SHAPES;
(function (SHAPES) {
    SHAPES[SHAPES["POLY"] = 0] = "POLY";
    SHAPES[SHAPES["RECT"] = 1] = "RECT";
    SHAPES[SHAPES["CIRC"] = 2] = "CIRC";
    SHAPES[SHAPES["ELIP"] = 3] = "ELIP";
    SHAPES[SHAPES["RREC"] = 4] = "RREC";
})(SHAPES || (SHAPES = {}));

/**
 * The Point object represents a location in a two-dimensional coordinate system, where `x` represents
 * the position on the horizontal axis and `y` represents the position on the vertical axis
 * @class
 * @memberof PIXI
 * @implements {IPoint}
 */
var Point = /** @class */ (function () {
    /**
     * Creates a new `Point`
     * @param {number} [x=0] - position of the point on the x axis
     * @param {number} [y=0] - position of the point on the y axis
     */
    function Point(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        /** Position of the point on the x axis */
        this.x = 0;
        /** Position of the point on the y axis */
        this.y = 0;
        this.x = x;
        this.y = y;
    }
    /**
     * Creates a clone of this point
     * @returns A clone of this point
     */
    Point.prototype.clone = function () {
        return new Point(this.x, this.y);
    };
    /**
     * Copies `x` and `y` from the given point into this point
     * @param p - The point to copy from
     * @returns The point instance itself
     */
    Point.prototype.copyFrom = function (p) {
        this.set(p.x, p.y);
        return this;
    };
    /**
     * Copies this point's x and y into the given point (`p`).
     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`
     * @returns The point (`p`) with values updated
     */
    Point.prototype.copyTo = function (p) {
        p.set(this.x, this.y);
        return p;
    };
    /**
     * Accepts another point (`p`) and returns `true` if the given point is equal to this point
     * @param p - The point to check
     * @returns Returns `true` if both `x` and `y` are equal
     */
    Point.prototype.equals = function (p) {
        return (p.x === this.x) && (p.y === this.y);
    };
    /**
     * Sets the point to a new `x` and `y` position.
     * If `y` is omitted, both `x` and `y` will be set to `x`.
     * @param {number} [x=0] - position of the point on the `x` axis
     * @param {number} [y=x] - position of the point on the `y` axis
     * @returns The point instance itself
     */
    Point.prototype.set = function (x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = x; }
        this.x = x;
        this.y = y;
        return this;
    };
    Point.prototype.toString = function () {
        return "[@pixi/math:Point x=" + this.x + " y=" + this.y + "]";
    };
    return Point;
}());

var tempPoints = [new Point(), new Point(), new Point(), new Point()];
/**
 * Size object, contains width and height
 * @memberof PIXI
 * @typedef {object} ISize
 * @property {number} width - Width component
 * @property {number} height - Height component
 */
/**
 * Rectangle object is an area defined by its position, as indicated by its top-left corner
 * point (x, y) and by its width and its height.
 * @memberof PIXI
 */
var Rectangle = /** @class */ (function () {
    /**
     * @param x - The X coordinate of the upper-left corner of the rectangle
     * @param y - The Y coordinate of the upper-left corner of the rectangle
     * @param width - The overall width of the rectangle
     * @param height - The overall height of the rectangle
     */
    function Rectangle(x, y, width, height) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        this.x = Number(x);
        this.y = Number(y);
        this.width = Number(width);
        this.height = Number(height);
        this.type = SHAPES.RECT;
    }
    Object.defineProperty(Rectangle.prototype, "left", {
        /** Returns the left edge of the rectangle. */
        get: function () {
            return this.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "right", {
        /** Returns the right edge of the rectangle. */
        get: function () {
            return this.x + this.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "top", {
        /** Returns the top edge of the rectangle. */
        get: function () {
            return this.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "bottom", {
        /** Returns the bottom edge of the rectangle. */
        get: function () {
            return this.y + this.height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle, "EMPTY", {
        /** A constant empty rectangle. */
        get: function () {
            return new Rectangle(0, 0, 0, 0);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a clone of this Rectangle
     * @returns a copy of the rectangle
     */
    Rectangle.prototype.clone = function () {
        return new Rectangle(this.x, this.y, this.width, this.height);
    };
    /**
     * Copies another rectangle to this one.
     * @param rectangle - The rectangle to copy from.
     * @returns Returns itself.
     */
    Rectangle.prototype.copyFrom = function (rectangle) {
        this.x = rectangle.x;
        this.y = rectangle.y;
        this.width = rectangle.width;
        this.height = rectangle.height;
        return this;
    };
    /**
     * Copies this rectangle to another one.
     * @param rectangle - The rectangle to copy to.
     * @returns Returns given parameter.
     */
    Rectangle.prototype.copyTo = function (rectangle) {
        rectangle.x = this.x;
        rectangle.y = this.y;
        rectangle.width = this.width;
        rectangle.height = this.height;
        return rectangle;
    };
    /**
     * Checks whether the x and y coordinates given are contained within this Rectangle
     * @param x - The X coordinate of the point to test
     * @param y - The Y coordinate of the point to test
     * @returns Whether the x/y coordinates are within this Rectangle
     */
    Rectangle.prototype.contains = function (x, y) {
        if (this.width <= 0 || this.height <= 0) {
            return false;
        }
        if (x >= this.x && x < this.x + this.width) {
            if (y >= this.y && y < this.y + this.height) {
                return true;
            }
        }
        return false;
    };
    /**
     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.
     * Returns true only if the area of the intersection is >0, this means that Rectangles
     * sharing a side are not overlapping. Another side effect is that an arealess rectangle
     * (width or height equal to zero) can't intersect any other rectangle.
     * @param {Rectangle} other - The Rectangle to intersect with `this`.
     * @param {Matrix} transform - The transformation matrix of `other`.
     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.
     */
    Rectangle.prototype.intersects = function (other, transform) {
        if (!transform) {
            var x0_1 = this.x < other.x ? other.x : this.x;
            var x1_1 = this.right > other.right ? other.right : this.right;
            if (x1_1 <= x0_1) {
                return false;
            }
            var y0_1 = this.y < other.y ? other.y : this.y;
            var y1_1 = this.bottom > other.bottom ? other.bottom : this.bottom;
            return y1_1 > y0_1;
        }
        var x0 = this.left;
        var x1 = this.right;
        var y0 = this.top;
        var y1 = this.bottom;
        if (x1 <= x0 || y1 <= y0) {
            return false;
        }
        var lt = tempPoints[0].set(other.left, other.top);
        var lb = tempPoints[1].set(other.left, other.bottom);
        var rt = tempPoints[2].set(other.right, other.top);
        var rb = tempPoints[3].set(other.right, other.bottom);
        if (rt.x <= lt.x || lb.y <= lt.y) {
            return false;
        }
        var s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));
        if (s === 0) {
            return false;
        }
        transform.apply(lt, lt);
        transform.apply(lb, lb);
        transform.apply(rt, rt);
        transform.apply(rb, rb);
        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0
            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1
            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0
            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {
            return false;
        }
        var nx = s * (lb.y - lt.y);
        var ny = s * (lt.x - lb.x);
        var n00 = (nx * x0) + (ny * y0);
        var n10 = (nx * x1) + (ny * y0);
        var n01 = (nx * x0) + (ny * y1);
        var n11 = (nx * x1) + (ny * y1);
        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)
            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y)) {
            return false;
        }
        var mx = s * (lt.y - rt.y);
        var my = s * (rt.x - lt.x);
        var m00 = (mx * x0) + (my * y0);
        var m10 = (mx * x1) + (my * y0);
        var m01 = (mx * x0) + (my * y1);
        var m11 = (mx * x1) + (my * y1);
        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)
            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y)) {
            return false;
        }
        return true;
    };
    /**
     * Pads the rectangle making it grow in all directions.
     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.
     * @param paddingX - The horizontal padding amount.
     * @param paddingY - The vertical padding amount.
     * @returns Returns itself.
     */
    Rectangle.prototype.pad = function (paddingX, paddingY) {
        if (paddingX === void 0) { paddingX = 0; }
        if (paddingY === void 0) { paddingY = paddingX; }
        this.x -= paddingX;
        this.y -= paddingY;
        this.width += paddingX * 2;
        this.height += paddingY * 2;
        return this;
    };
    /**
     * Fits this rectangle around the passed one.
     * @param rectangle - The rectangle to fit.
     * @returns Returns itself.
     */
    Rectangle.prototype.fit = function (rectangle) {
        var x1 = Math.max(this.x, rectangle.x);
        var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);
        var y1 = Math.max(this.y, rectangle.y);
        var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);
        this.x = x1;
        this.width = Math.max(x2 - x1, 0);
        this.y = y1;
        this.height = Math.max(y2 - y1, 0);
        return this;
    };
    /**
     * Enlarges rectangle that way its corners lie on grid
     * @param resolution - resolution
     * @param eps - precision
     * @returns Returns itself.
     */
    Rectangle.prototype.ceil = function (resolution, eps) {
        if (resolution === void 0) { resolution = 1; }
        if (eps === void 0) { eps = 0.001; }
        var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;
        var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;
        this.x = Math.floor((this.x + eps) * resolution) / resolution;
        this.y = Math.floor((this.y + eps) * resolution) / resolution;
        this.width = x2 - this.x;
        this.height = y2 - this.y;
        return this;
    };
    /**
     * Enlarges this rectangle to include the passed rectangle.
     * @param rectangle - The rectangle to include.
     * @returns Returns itself.
     */
    Rectangle.prototype.enlarge = function (rectangle) {
        var x1 = Math.min(this.x, rectangle.x);
        var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);
        var y1 = Math.min(this.y, rectangle.y);
        var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);
        this.x = x1;
        this.width = x2 - x1;
        this.y = y1;
        this.height = y2 - y1;
        return this;
    };
    Rectangle.prototype.toString = function () {
        return "[@pixi/math:Rectangle x=" + this.x + " y=" + this.y + " width=" + this.width + " height=" + this.height + "]";
    };
    return Rectangle;
}());

/**
 * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.
 * @memberof PIXI
 */
var Circle = /** @class */ (function () {
    /**
     * @param x - The X coordinate of the center of this circle
     * @param y - The Y coordinate of the center of this circle
     * @param radius - The radius of the circle
     */
    function Circle(x, y, radius) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (radius === void 0) { radius = 0; }
        this.x = x;
        this.y = y;
        this.radius = radius;
        this.type = SHAPES.CIRC;
    }
    /**
     * Creates a clone of this Circle instance
     * @returns A copy of the Circle
     */
    Circle.prototype.clone = function () {
        return new Circle(this.x, this.y, this.radius);
    };
    /**
     * Checks whether the x and y coordinates given are contained within this circle
     * @param x - The X coordinate of the point to test
     * @param y - The Y coordinate of the point to test
     * @returns Whether the x/y coordinates are within this Circle
     */
    Circle.prototype.contains = function (x, y) {
        if (this.radius <= 0) {
            return false;
        }
        var r2 = this.radius * this.radius;
        var dx = (this.x - x);
        var dy = (this.y - y);
        dx *= dx;
        dy *= dy;
        return (dx + dy <= r2);
    };
    /**
     * Returns the framing rectangle of the circle as a Rectangle object
     * @returns The framing rectangle
     */
    Circle.prototype.getBounds = function () {
        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);
    };
    Circle.prototype.toString = function () {
        return "[@pixi/math:Circle x=" + this.x + " y=" + this.y + " radius=" + this.radius + "]";
    };
    return Circle;
}());

/**
 * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.
 * @memberof PIXI
 */
var Ellipse = /** @class */ (function () {
    /**
     * @param x - The X coordinate of the center of this ellipse
     * @param y - The Y coordinate of the center of this ellipse
     * @param halfWidth - The half width of this ellipse
     * @param halfHeight - The half height of this ellipse
     */
    function Ellipse(x, y, halfWidth, halfHeight) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (halfWidth === void 0) { halfWidth = 0; }
        if (halfHeight === void 0) { halfHeight = 0; }
        this.x = x;
        this.y = y;
        this.width = halfWidth;
        this.height = halfHeight;
        this.type = SHAPES.ELIP;
    }
    /**
     * Creates a clone of this Ellipse instance
     * @returns {PIXI.Ellipse} A copy of the ellipse
     */
    Ellipse.prototype.clone = function () {
        return new Ellipse(this.x, this.y, this.width, this.height);
    };
    /**
     * Checks whether the x and y coordinates given are contained within this ellipse
     * @param x - The X coordinate of the point to test
     * @param y - The Y coordinate of the point to test
     * @returns Whether the x/y coords are within this ellipse
     */
    Ellipse.prototype.contains = function (x, y) {
        if (this.width <= 0 || this.height <= 0) {
            return false;
        }
        // normalize the coords to an ellipse with center 0,0
        var normx = ((x - this.x) / this.width);
        var normy = ((y - this.y) / this.height);
        normx *= normx;
        normy *= normy;
        return (normx + normy <= 1);
    };
    /**
     * Returns the framing rectangle of the ellipse as a Rectangle object
     * @returns The framing rectangle
     */
    Ellipse.prototype.getBounds = function () {
        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);
    };
    Ellipse.prototype.toString = function () {
        return "[@pixi/math:Ellipse x=" + this.x + " y=" + this.y + " width=" + this.width + " height=" + this.height + "]";
    };
    return Ellipse;
}());

/**
 * A class to define a shape via user defined coordinates.
 * @memberof PIXI
 */
var Polygon = /** @class */ (function () {
    /**
     * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points
     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or
     *  the arguments passed can be all the points of the polygon e.g.
     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat
     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.
     */
    function Polygon() {
        var arguments$1 = arguments;

        var points = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            points[_i] = arguments$1[_i];
        }
        var flat = Array.isArray(points[0]) ? points[0] : points;
        // if this is an array of points, convert it to a flat array of numbers
        if (typeof flat[0] !== 'number') {
            var p = [];
            for (var i = 0, il = flat.length; i < il; i++) {
                p.push(flat[i].x, flat[i].y);
            }
            flat = p;
        }
        this.points = flat;
        this.type = SHAPES.POLY;
        this.closeStroke = true;
    }
    /**
     * Creates a clone of this polygon.
     * @returns - A copy of the polygon.
     */
    Polygon.prototype.clone = function () {
        var points = this.points.slice();
        var polygon = new Polygon(points);
        polygon.closeStroke = this.closeStroke;
        return polygon;
    };
    /**
     * Checks whether the x and y coordinates passed to this function are contained within this polygon.
     * @param x - The X coordinate of the point to test.
     * @param y - The Y coordinate of the point to test.
     * @returns - Whether the x/y coordinates are within this polygon.
     */
    Polygon.prototype.contains = function (x, y) {
        var inside = false;
        // use some raycasting to test hits
        // https://github.com/substack/point-in-polygon/blob/master/index.js
        var length = this.points.length / 2;
        for (var i = 0, j = length - 1; i < length; j = i++) {
            var xi = this.points[i * 2];
            var yi = this.points[(i * 2) + 1];
            var xj = this.points[j * 2];
            var yj = this.points[(j * 2) + 1];
            var intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);
            if (intersect) {
                inside = !inside;
            }
        }
        return inside;
    };
    Polygon.prototype.toString = function () {
        return "[@pixi/math:Polygon"
            + ("closeStroke=" + this.closeStroke)
            + ("points=" + this.points.reduce(function (pointsDesc, currentPoint) { return pointsDesc + ", " + currentPoint; }, '') + "]");
    };
    return Polygon;
}());

/**
 * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its
 * top-left corner point (x, y) and by its width and its height and its radius.
 * @memberof PIXI
 */
var RoundedRectangle = /** @class */ (function () {
    /**
     * @param x - The X coordinate of the upper-left corner of the rounded rectangle
     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle
     * @param width - The overall width of this rounded rectangle
     * @param height - The overall height of this rounded rectangle
     * @param radius - Controls the radius of the rounded corners
     */
    function RoundedRectangle(x, y, width, height, radius) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        if (radius === void 0) { radius = 20; }
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.radius = radius;
        this.type = SHAPES.RREC;
    }
    /**
     * Creates a clone of this Rounded Rectangle.
     * @returns - A copy of the rounded rectangle.
     */
    RoundedRectangle.prototype.clone = function () {
        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);
    };
    /**
     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle
     * @param x - The X coordinate of the point to test.
     * @param y - The Y coordinate of the point to test.
     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.
     */
    RoundedRectangle.prototype.contains = function (x, y) {
        if (this.width <= 0 || this.height <= 0) {
            return false;
        }
        if (x >= this.x && x <= this.x + this.width) {
            if (y >= this.y && y <= this.y + this.height) {
                var radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));
                if ((y >= this.y + radius && y <= this.y + this.height - radius)
                    || (x >= this.x + radius && x <= this.x + this.width - radius)) {
                    return true;
                }
                var dx = x - (this.x + radius);
                var dy = y - (this.y + radius);
                var radius2 = radius * radius;
                if ((dx * dx) + (dy * dy) <= radius2) {
                    return true;
                }
                dx = x - (this.x + this.width - radius);
                if ((dx * dx) + (dy * dy) <= radius2) {
                    return true;
                }
                dy = y - (this.y + this.height - radius);
                if ((dx * dx) + (dy * dy) <= radius2) {
                    return true;
                }
                dx = x - (this.x + radius);
                if ((dx * dx) + (dy * dy) <= radius2) {
                    return true;
                }
            }
        }
        return false;
    };
    RoundedRectangle.prototype.toString = function () {
        return "[@pixi/math:RoundedRectangle x=" + this.x + " y=" + this.y
            + ("width=" + this.width + " height=" + this.height + " radius=" + this.radius + "]");
    };
    return RoundedRectangle;
}());

/**
 * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents
 * the position on the horizontal axis and `y` represents the position on the vertical axis.
 *
 * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.
 * @memberof PIXI
 */
var ObservablePoint = /** @class */ (function () {
    /**
     * Creates a new `ObservablePoint`
     * @param cb - callback function triggered when `x` and/or `y` are changed
     * @param scope - owner of callback
     * @param {number} [x=0] - position of the point on the x axis
     * @param {number} [y=0] - position of the point on the y axis
     */
    function ObservablePoint(cb, scope, x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this._x = x;
        this._y = y;
        this.cb = cb;
        this.scope = scope;
    }
    /**
     * Creates a clone of this point.
     * The callback and scope params can be overridden otherwise they will default
     * to the clone object's values.
     * @override
     * @param cb - The callback function triggered when `x` and/or `y` are changed
     * @param scope - The owner of the callback
     * @returns a copy of this observable point
     */
    ObservablePoint.prototype.clone = function (cb, scope) {
        if (cb === void 0) { cb = this.cb; }
        if (scope === void 0) { scope = this.scope; }
        return new ObservablePoint(cb, scope, this._x, this._y);
    };
    /**
     * Sets the point to a new `x` and `y` position.
     * If `y` is omitted, both `x` and `y` will be set to `x`.
     * @param {number} [x=0] - position of the point on the x axis
     * @param {number} [y=x] - position of the point on the y axis
     * @returns The observable point instance itself
     */
    ObservablePoint.prototype.set = function (x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = x; }
        if (this._x !== x || this._y !== y) {
            this._x = x;
            this._y = y;
            this.cb.call(this.scope);
        }
        return this;
    };
    /**
     * Copies x and y from the given point (`p`)
     * @param p - The point to copy from. Can be any of type that is or extends `IPointData`
     * @returns The observable point instance itself
     */
    ObservablePoint.prototype.copyFrom = function (p) {
        if (this._x !== p.x || this._y !== p.y) {
            this._x = p.x;
            this._y = p.y;
            this.cb.call(this.scope);
        }
        return this;
    };
    /**
     * Copies this point's x and y into that of the given point (`p`)
     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`
     * @returns The point (`p`) with values updated
     */
    ObservablePoint.prototype.copyTo = function (p) {
        p.set(this._x, this._y);
        return p;
    };
    /**
     * Accepts another point (`p`) and returns `true` if the given point is equal to this point
     * @param p - The point to check
     * @returns Returns `true` if both `x` and `y` are equal
     */
    ObservablePoint.prototype.equals = function (p) {
        return (p.x === this._x) && (p.y === this._y);
    };
    ObservablePoint.prototype.toString = function () {
        return "[@pixi/math:ObservablePoint x=" + 0 + " y=" + 0 + " scope=" + this.scope + "]";
    };
    Object.defineProperty(ObservablePoint.prototype, "x", {
        /** Position of the observable point on the x axis. */
        get: function () {
            return this._x;
        },
        set: function (value) {
            if (this._x !== value) {
                this._x = value;
                this.cb.call(this.scope);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObservablePoint.prototype, "y", {
        /** Position of the observable point on the y axis. */
        get: function () {
            return this._y;
        },
        set: function (value) {
            if (this._y !== value) {
                this._y = value;
                this.cb.call(this.scope);
            }
        },
        enumerable: false,
        configurable: true
    });
    return ObservablePoint;
}());

/**
 * The PixiJS Matrix as a class makes it a lot faster.
 *
 * Here is a representation of it:
 * ```js
 * | a | c | tx|
 * | b | d | ty|
 * | 0 | 0 | 1 |
 * ```
 * @memberof PIXI
 */
var Matrix = /** @class */ (function () {
    /**
     * @param a - x scale
     * @param b - y skew
     * @param c - x skew
     * @param d - y scale
     * @param tx - x translation
     * @param ty - y translation
     */
    function Matrix(a, b, c, d, tx, ty) {
        if (a === void 0) { a = 1; }
        if (b === void 0) { b = 0; }
        if (c === void 0) { c = 0; }
        if (d === void 0) { d = 1; }
        if (tx === void 0) { tx = 0; }
        if (ty === void 0) { ty = 0; }
        this.array = null;
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = tx;
        this.ty = ty;
    }
    /**
     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:
     *
     * a = array[0]
     * b = array[1]
     * c = array[3]
     * d = array[4]
     * tx = array[2]
     * ty = array[5]
     * @param array - The array that the matrix will be populated from.
     */
    Matrix.prototype.fromArray = function (array) {
        this.a = array[0];
        this.b = array[1];
        this.c = array[3];
        this.d = array[4];
        this.tx = array[2];
        this.ty = array[5];
    };
    /**
     * Sets the matrix properties.
     * @param a - Matrix component
     * @param b - Matrix component
     * @param c - Matrix component
     * @param d - Matrix component
     * @param tx - Matrix component
     * @param ty - Matrix component
     * @returns This matrix. Good for chaining method calls.
     */
    Matrix.prototype.set = function (a, b, c, d, tx, ty) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = tx;
        this.ty = ty;
        return this;
    };
    /**
     * Creates an array from the current Matrix object.
     * @param transpose - Whether we need to transpose the matrix or not
     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out
     * @returns The newly created array which contains the matrix
     */
    Matrix.prototype.toArray = function (transpose, out) {
        if (!this.array) {
            this.array = new Float32Array(9);
        }
        var array = out || this.array;
        if (transpose) {
            array[0] = this.a;
            array[1] = this.b;
            array[2] = 0;
            array[3] = this.c;
            array[4] = this.d;
            array[5] = 0;
            array[6] = this.tx;
            array[7] = this.ty;
            array[8] = 1;
        }
        else {
            array[0] = this.a;
            array[1] = this.c;
            array[2] = this.tx;
            array[3] = this.b;
            array[4] = this.d;
            array[5] = this.ty;
            array[6] = 0;
            array[7] = 0;
            array[8] = 1;
        }
        return array;
    };
    /**
     * Get a new position with the current transformation applied.
     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
     * @param pos - The origin
     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
     * @returns {PIXI.Point} The new point, transformed through this matrix
     */
    Matrix.prototype.apply = function (pos, newPos) {
        newPos = (newPos || new Point());
        var x = pos.x;
        var y = pos.y;
        newPos.x = (this.a * x) + (this.c * y) + this.tx;
        newPos.y = (this.b * x) + (this.d * y) + this.ty;
        return newPos;
    };
    /**
     * Get a new position with the inverse of the current transformation applied.
     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
     * @param pos - The origin
     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
     * @returns {PIXI.Point} The new point, inverse-transformed through this matrix
     */
    Matrix.prototype.applyInverse = function (pos, newPos) {
        newPos = (newPos || new Point());
        var id = 1 / ((this.a * this.d) + (this.c * -this.b));
        var x = pos.x;
        var y = pos.y;
        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);
        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);
        return newPos;
    };
    /**
     * Translates the matrix on the x and y.
     * @param x - How much to translate x by
     * @param y - How much to translate y by
     * @returns This matrix. Good for chaining method calls.
     */
    Matrix.prototype.translate = function (x, y) {
        this.tx += x;
        this.ty += y;
        return this;
    };
    /**
     * Applies a scale transformation to the matrix.
     * @param x - The amount to scale horizontally
     * @param y - The amount to scale vertically
     * @returns This matrix. Good for chaining method calls.
     */
    Matrix.prototype.scale = function (x, y) {
        this.a *= x;
        this.d *= y;
        this.c *= x;
        this.b *= y;
        this.tx *= x;
        this.ty *= y;
        return this;
    };
    /**
     * Applies a rotation transformation to the matrix.
     * @param angle - The angle in radians.
     * @returns This matrix. Good for chaining method calls.
     */
    Matrix.prototype.rotate = function (angle) {
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);
        var a1 = this.a;
        var c1 = this.c;
        var tx1 = this.tx;
        this.a = (a1 * cos) - (this.b * sin);
        this.b = (a1 * sin) + (this.b * cos);
        this.c = (c1 * cos) - (this.d * sin);
        this.d = (c1 * sin) + (this.d * cos);
        this.tx = (tx1 * cos) - (this.ty * sin);
        this.ty = (tx1 * sin) + (this.ty * cos);
        return this;
    };
    /**
     * Appends the given Matrix to this Matrix.
     * @param matrix - The matrix to append.
     * @returns This matrix. Good for chaining method calls.
     */
    Matrix.prototype.append = function (matrix) {
        var a1 = this.a;
        var b1 = this.b;
        var c1 = this.c;
        var d1 = this.d;
        this.a = (matrix.a * a1) + (matrix.b * c1);
        this.b = (matrix.a * b1) + (matrix.b * d1);
        this.c = (matrix.c * a1) + (matrix.d * c1);
        this.d = (matrix.c * b1) + (matrix.d * d1);
        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;
        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;
        return this;
    };
    /**
     * Sets the matrix based on all the available properties
     * @param x - Position on the x axis
     * @param y - Position on the y axis
     * @param pivotX - Pivot on the x axis
     * @param pivotY - Pivot on the y axis
     * @param scaleX - Scale on the x axis
     * @param scaleY - Scale on the y axis
     * @param rotation - Rotation in radians
     * @param skewX - Skew on the x axis
     * @param skewY - Skew on the y axis
     * @returns This matrix. Good for chaining method calls.
     */
    Matrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {
        this.a = Math.cos(rotation + skewY) * scaleX;
        this.b = Math.sin(rotation + skewY) * scaleX;
        this.c = -Math.sin(rotation - skewX) * scaleY;
        this.d = Math.cos(rotation - skewX) * scaleY;
        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));
        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));
        return this;
    };
    /**
     * Prepends the given Matrix to this Matrix.
     * @param matrix - The matrix to prepend
     * @returns This matrix. Good for chaining method calls.
     */
    Matrix.prototype.prepend = function (matrix) {
        var tx1 = this.tx;
        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
            var a1 = this.a;
            var c1 = this.c;
            this.a = (a1 * matrix.a) + (this.b * matrix.c);
            this.b = (a1 * matrix.b) + (this.b * matrix.d);
            this.c = (c1 * matrix.a) + (this.d * matrix.c);
            this.d = (c1 * matrix.b) + (this.d * matrix.d);
        }
        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;
        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;
        return this;
    };
    /**
     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.
     * @param transform - The transform to apply the properties to.
     * @returns The transform with the newly applied properties
     */
    Matrix.prototype.decompose = function (transform) {
        // sort out rotation / skew..
        var a = this.a;
        var b = this.b;
        var c = this.c;
        var d = this.d;
        var pivot = transform.pivot;
        var skewX = -Math.atan2(-c, d);
        var skewY = Math.atan2(b, a);
        var delta = Math.abs(skewX + skewY);
        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001) {
            transform.rotation = skewY;
            transform.skew.x = transform.skew.y = 0;
        }
        else {
            transform.rotation = 0;
            transform.skew.x = skewX;
            transform.skew.y = skewY;
        }
        // next set scale
        transform.scale.x = Math.sqrt((a * a) + (b * b));
        transform.scale.y = Math.sqrt((c * c) + (d * d));
        // next set position
        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));
        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));
        return transform;
    };
    /**
     * Inverts this matrix
     * @returns This matrix. Good for chaining method calls.
     */
    Matrix.prototype.invert = function () {
        var a1 = this.a;
        var b1 = this.b;
        var c1 = this.c;
        var d1 = this.d;
        var tx1 = this.tx;
        var n = (a1 * d1) - (b1 * c1);
        this.a = d1 / n;
        this.b = -b1 / n;
        this.c = -c1 / n;
        this.d = a1 / n;
        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;
        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;
        return this;
    };
    /**
     * Resets this Matrix to an identity (default) matrix.
     * @returns This matrix. Good for chaining method calls.
     */
    Matrix.prototype.identity = function () {
        this.a = 1;
        this.b = 0;
        this.c = 0;
        this.d = 1;
        this.tx = 0;
        this.ty = 0;
        return this;
    };
    /**
     * Creates a new Matrix object with the same values as this one.
     * @returns A copy of this matrix. Good for chaining method calls.
     */
    Matrix.prototype.clone = function () {
        var matrix = new Matrix();
        matrix.a = this.a;
        matrix.b = this.b;
        matrix.c = this.c;
        matrix.d = this.d;
        matrix.tx = this.tx;
        matrix.ty = this.ty;
        return matrix;
    };
    /**
     * Changes the values of the given matrix to be the same as the ones in this matrix
     * @param matrix - The matrix to copy to.
     * @returns The matrix given in parameter with its values updated.
     */
    Matrix.prototype.copyTo = function (matrix) {
        matrix.a = this.a;
        matrix.b = this.b;
        matrix.c = this.c;
        matrix.d = this.d;
        matrix.tx = this.tx;
        matrix.ty = this.ty;
        return matrix;
    };
    /**
     * Changes the values of the matrix to be the same as the ones in given matrix
     * @param {PIXI.Matrix} matrix - The matrix to copy from.
     * @returns {PIXI.Matrix} this
     */
    Matrix.prototype.copyFrom = function (matrix) {
        this.a = matrix.a;
        this.b = matrix.b;
        this.c = matrix.c;
        this.d = matrix.d;
        this.tx = matrix.tx;
        this.ty = matrix.ty;
        return this;
    };
    Matrix.prototype.toString = function () {
        return "[@pixi/math:Matrix a=" + this.a + " b=" + this.b + " c=" + this.c + " d=" + this.d + " tx=" + this.tx + " ty=" + this.ty + "]";
    };
    Object.defineProperty(Matrix, "IDENTITY", {
        /**
         * A default (identity) matrix
         * @readonly
         */
        get: function () {
            return new Matrix();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Matrix, "TEMP_MATRIX", {
        /**
         * A temp matrix
         * @readonly
         */
        get: function () {
            return new Matrix();
        },
        enumerable: false,
        configurable: true
    });
    return Matrix;
}());

// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group
/*
 * Transform matrix for operation n is:
 * | ux | vx |
 * | uy | vy |
 */
var ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];
var uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];
var vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];
var vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];
/**
 * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}
 * for the composition of each rotation in the dihederal group D8.
 * @type {number[][]}
 * @private
 */
var rotationCayley = [];
/**
 * Matrices for each `GD8Symmetry` rotation.
 * @type {PIXI.Matrix[]}
 * @private
 */
var rotationMatrices = [];
/*
 * Alias for {@code Math.sign}.
 */
var signum = Math.sign;
/*
 * Initializes `rotationCayley` and `rotationMatrices`. It is called
 * only once below.
 */
function init() {
    for (var i = 0; i < 16; i++) {
        var row = [];
        rotationCayley.push(row);
        for (var j = 0; j < 16; j++) {
            /* Multiplies rotation matrices i and j. */
            var _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));
            var _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));
            var _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));
            var _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));
            /* Finds rotation matrix matching the product and pushes it. */
            for (var k = 0; k < 16; k++) {
                if (ux[k] === _ux && uy[k] === _uy
                    && vx[k] === _vx && vy[k] === _vy) {
                    row.push(k);
                    break;
                }
            }
        }
    }
    for (var i = 0; i < 16; i++) {
        var mat = new Matrix();
        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);
        rotationMatrices.push(mat);
    }
}
init();
/**
 * @memberof PIXI
 * @typedef {number} GD8Symmetry
 * @see PIXI.groupD8
 */
/**
 * Implements the dihedral group D8, which is similar to
 * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};
 * D8 is the same but with diagonals, and it is used for texture
 * rotations.
 *
 * The directions the U- and V- axes after rotation
 * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`
 * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.
 *
 * **Origin:**<br>
 *  This is the small part of gameofbombs.com portal system. It works.
 * @see PIXI.groupD8.E
 * @see PIXI.groupD8.SE
 * @see PIXI.groupD8.S
 * @see PIXI.groupD8.SW
 * @see PIXI.groupD8.W
 * @see PIXI.groupD8.NW
 * @see PIXI.groupD8.N
 * @see PIXI.groupD8.NE
 * @author Ivan @ivanpopelyshev
 * @namespace PIXI.groupD8
 * @memberof PIXI
 */
var groupD8 = {
    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 0°       | East      |
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    E: 0,
    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 45°↻     | Southeast |
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    SE: 1,
    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 90°↻     | South     |
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    S: 2,
    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 135°↻    | Southwest |
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    SW: 3,
    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 180°     | West      |
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    W: 4,
    /**
     * | Rotation    | Direction    |
     * |-------------|--------------|
     * | -135°/225°↻ | Northwest    |
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    NW: 5,
    /**
     * | Rotation    | Direction    |
     * |-------------|--------------|
     * | -90°/270°↻  | North        |
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    N: 6,
    /**
     * | Rotation    | Direction    |
     * |-------------|--------------|
     * | -45°/315°↻  | Northeast    |
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    NE: 7,
    /**
     * Reflection about Y-axis.
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    MIRROR_VERTICAL: 8,
    /**
     * Reflection about the main diagonal.
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    MAIN_DIAGONAL: 10,
    /**
     * Reflection about X-axis.
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    MIRROR_HORIZONTAL: 12,
    /**
     * Reflection about reverse diagonal.
     * @memberof PIXI.groupD8
     * @constant {PIXI.GD8Symmetry}
     */
    REVERSE_DIAGONAL: 14,
    /**
     * @memberof PIXI.groupD8
     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
     * @returns {PIXI.GD8Symmetry} The X-component of the U-axis
     *    after rotating the axes.
     */
    uX: function (ind) { return ux[ind]; },
    /**
     * @memberof PIXI.groupD8
     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
     * @returns {PIXI.GD8Symmetry} The Y-component of the U-axis
     *    after rotating the axes.
     */
    uY: function (ind) { return uy[ind]; },
    /**
     * @memberof PIXI.groupD8
     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
     * @returns {PIXI.GD8Symmetry} The X-component of the V-axis
     *    after rotating the axes.
     */
    vX: function (ind) { return vx[ind]; },
    /**
     * @memberof PIXI.groupD8
     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
     * @returns {PIXI.GD8Symmetry} The Y-component of the V-axis
     *    after rotating the axes.
     */
    vY: function (ind) { return vy[ind]; },
    /**
     * @memberof PIXI.groupD8
     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite
     *   is needed. Only rotations have opposite symmetries while
     *   reflections don't.
     * @returns {PIXI.GD8Symmetry} The opposite symmetry of `rotation`
     */
    inv: function (rotation) {
        if (rotation & 8) // true only if between 8 & 15 (reflections)
         {
            return rotation & 15; // or rotation % 16
        }
        return (-rotation) & 7; // or (8 - rotation) % 8
    },
    /**
     * Composes the two D8 operations.
     *
     * Taking `^` as reflection:
     *
     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |
     * |-------|-----|-----|-----|-----|------|-------|-------|-------|
     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |
     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |
     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |
     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |
     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |
     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |
     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |
     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |
     *
     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}
     * @memberof PIXI.groupD8
     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which
     *   is the row in the above cayley table.
     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which
     *   is the column in the above cayley table.
     * @returns {PIXI.GD8Symmetry} Composed operation
     */
    add: function (rotationSecond, rotationFirst) { return (rotationCayley[rotationSecond][rotationFirst]); },
    /**
     * Reverse of `add`.
     * @memberof PIXI.groupD8
     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation
     * @param {PIXI.GD8Symmetry} rotationFirst - First operation
     * @returns {PIXI.GD8Symmetry} Result
     */
    sub: function (rotationSecond, rotationFirst) { return (rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]); },
    /**
     * Adds 180 degrees to rotation, which is a commutative
     * operation.
     * @memberof PIXI.groupD8
     * @param {number} rotation - The number to rotate.
     * @returns {number} Rotated number
     */
    rotate180: function (rotation) { return rotation ^ 4; },
    /**
     * Checks if the rotation angle is vertical, i.e. south
     * or north. It doesn't work for reflections.
     * @memberof PIXI.groupD8
     * @param {PIXI.GD8Symmetry} rotation - The number to check.
     * @returns {boolean} Whether or not the direction is vertical
     */
    isVertical: function (rotation) { return (rotation & 3) === 2; },
    /**
     * Approximates the vector `V(dx,dy)` into one of the
     * eight directions provided by `groupD8`.
     * @memberof PIXI.groupD8
     * @param {number} dx - X-component of the vector
     * @param {number} dy - Y-component of the vector
     * @returns {PIXI.GD8Symmetry} Approximation of the vector into
     *  one of the eight symmetries.
     */
    byDirection: function (dx, dy) {
        if (Math.abs(dx) * 2 <= Math.abs(dy)) {
            if (dy >= 0) {
                return groupD8.S;
            }
            return groupD8.N;
        }
        else if (Math.abs(dy) * 2 <= Math.abs(dx)) {
            if (dx > 0) {
                return groupD8.E;
            }
            return groupD8.W;
        }
        else if (dy > 0) {
            if (dx > 0) {
                return groupD8.SE;
            }
            return groupD8.SW;
        }
        else if (dx > 0) {
            return groupD8.NE;
        }
        return groupD8.NW;
    },
    /**
     * Helps sprite to compensate texture packer rotation.
     * @memberof PIXI.groupD8
     * @param {PIXI.Matrix} matrix - sprite world matrix
     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.
     * @param {number} tx - sprite anchoring
     * @param {number} ty - sprite anchoring
     */
    matrixAppendRotationInv: function (matrix, rotation, tx, ty) {
        if (tx === void 0) { tx = 0; }
        if (ty === void 0) { ty = 0; }
        // Packer used "rotation", we use "inv(rotation)"
        var mat = rotationMatrices[groupD8.inv(rotation)];
        mat.tx = tx;
        mat.ty = ty;
        matrix.append(mat);
    },
};

/**
 * Transform that takes care about its versions.
 * @memberof PIXI
 */
var Transform = /** @class */ (function () {
    function Transform() {
        this.worldTransform = new Matrix();
        this.localTransform = new Matrix();
        this.position = new ObservablePoint(this.onChange, this, 0, 0);
        this.scale = new ObservablePoint(this.onChange, this, 1, 1);
        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);
        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);
        this._rotation = 0;
        this._cx = 1;
        this._sx = 0;
        this._cy = 0;
        this._sy = 1;
        this._localID = 0;
        this._currentLocalID = 0;
        this._worldID = 0;
        this._parentID = 0;
    }
    /** Called when a value changes. */
    Transform.prototype.onChange = function () {
        this._localID++;
    };
    /** Called when the skew or the rotation changes. */
    Transform.prototype.updateSkew = function () {
        this._cx = Math.cos(this._rotation + this.skew.y);
        this._sx = Math.sin(this._rotation + this.skew.y);
        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2
        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2
        this._localID++;
    };
    Transform.prototype.toString = function () {
        return "[@pixi/math:Transform "
            + ("position=(" + this.position.x + ", " + this.position.y + ") ")
            + ("rotation=" + this.rotation + " ")
            + ("scale=(" + this.scale.x + ", " + this.scale.y + ") ")
            + ("skew=(" + this.skew.x + ", " + this.skew.y + ") ")
            + "]";
    };
    /** Updates the local transformation matrix. */
    Transform.prototype.updateLocalTransform = function () {
        var lt = this.localTransform;
        if (this._localID !== this._currentLocalID) {
            // get the matrix values of the displayobject based on its transform properties..
            lt.a = this._cx * this.scale.x;
            lt.b = this._sx * this.scale.x;
            lt.c = this._cy * this.scale.y;
            lt.d = this._sy * this.scale.y;
            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));
            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));
            this._currentLocalID = this._localID;
            // force an update..
            this._parentID = -1;
        }
    };
    /**
     * Updates the local and the world transformation matrices.
     * @param parentTransform - The parent transform
     */
    Transform.prototype.updateTransform = function (parentTransform) {
        var lt = this.localTransform;
        if (this._localID !== this._currentLocalID) {
            // get the matrix values of the displayobject based on its transform properties..
            lt.a = this._cx * this.scale.x;
            lt.b = this._sx * this.scale.x;
            lt.c = this._cy * this.scale.y;
            lt.d = this._sy * this.scale.y;
            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));
            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));
            this._currentLocalID = this._localID;
            // force an update..
            this._parentID = -1;
        }
        if (this._parentID !== parentTransform._worldID) {
            // concat the parent matrix with the objects transform.
            var pt = parentTransform.worldTransform;
            var wt = this.worldTransform;
            wt.a = (lt.a * pt.a) + (lt.b * pt.c);
            wt.b = (lt.a * pt.b) + (lt.b * pt.d);
            wt.c = (lt.c * pt.a) + (lt.d * pt.c);
            wt.d = (lt.c * pt.b) + (lt.d * pt.d);
            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;
            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;
            this._parentID = parentTransform._worldID;
            // update the id of the transform..
            this._worldID++;
        }
    };
    /**
     * Decomposes a matrix and sets the transforms properties based on it.
     * @param matrix - The matrix to decompose
     */
    Transform.prototype.setFromMatrix = function (matrix) {
        matrix.decompose(this);
        this._localID++;
    };
    Object.defineProperty(Transform.prototype, "rotation", {
        /** The rotation of the object in radians. */
        get: function () {
            return this._rotation;
        },
        set: function (value) {
            if (this._rotation !== value) {
                this._rotation = value;
                this.updateSkew();
            }
        },
        enumerable: false,
        configurable: true
    });
    /** A default (identity) transform. */
    Transform.IDENTITY = new Transform();
    return Transform;
}());


//# sourceMappingURL=math.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/core/dist/esm/core.mjs
/*!
 * @pixi/core - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/core is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */









/**
 * The maximum support for using WebGL. If a device does not
 * support WebGL version, for instance WebGL 2, it will still
 * attempt to fallback support to WebGL 1. If you want to
 * explicitly remove feature support to target a more stable
 * baseline, prefer a lower environment.
 *
 * Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}
 * we disable webgl2 by default for all non-apple mobile devices.
 * @static
 * @name PREFER_ENV
 * @memberof PIXI.settings
 * @type {number}
 * @default PIXI.ENV.WEBGL2
 */
settings.PREFER_ENV = isMobile.any ? ENV.WEBGL : ENV.WEBGL2;
/**
 * If set to `true`, *only* Textures and BaseTexture objects stored
 * in the caches ({@link PIXI.utils.TextureCache TextureCache} and
 * {@link PIXI.utils.BaseTextureCache BaseTextureCache}) can be
 * used when calling {@link PIXI.Texture.from Texture.from} or
 * {@link PIXI.BaseTexture.from BaseTexture.from}.
 * Otherwise, these `from` calls throw an exception. Using this property
 * can be useful if you want to enforce preloading all assets with
 * {@link PIXI.Loader Loader}.
 * @static
 * @name STRICT_TEXTURE_CACHE
 * @memberof PIXI.settings
 * @type {boolean}
 * @default false
 */
settings.STRICT_TEXTURE_CACHE = false;

/**
 * Collection of installed resource types, class must extend {@link PIXI.Resource}.
 * @example
 * class CustomResource extends PIXI.Resource {
 *   // MUST have source, options constructor signature
 *   // for auto-detected resources to be created.
 *   constructor(source, options) {
 *     super();
 *   }
 *   upload(renderer, baseTexture, glTexture) {
 *     // upload with GL
 *     return true;
 *   }
 *   // used to auto-detect resource
 *   static test(source, extension) {
 *     return extension === 'xyz'|| source instanceof SomeClass;
 *   }
 * }
 * // Install the new resource type
 * PIXI.INSTALLED.push(CustomResource);
 * @memberof PIXI
 * @type {Array<PIXI.IResourcePlugin>}
 * @static
 * @readonly
 */
var INSTALLED = [];
/**
 * Create a resource element from a single source element. This
 * auto-detects which type of resource to create. All resources that
 * are auto-detectable must have a static `test` method and a constructor
 * with the arguments `(source, options?)`. Currently, the supported
 * resources for auto-detection include:
 *  - {@link PIXI.ImageResource}
 *  - {@link PIXI.CanvasResource}
 *  - {@link PIXI.VideoResource}
 *  - {@link PIXI.SVGResource}
 *  - {@link PIXI.BufferResource}
 * @static
 * @memberof PIXI
 * @function autoDetectResource
 * @param {string|*} source - Resource source, this can be the URL to the resource,
 *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri
 *        or any other resource that can be auto-detected. If not resource is
 *        detected, it's assumed to be an ImageResource.
 * @param {object} [options] - Pass-through options to use for Resource
 * @param {number} [options.width] - Width of BufferResource or SVG rasterization
 * @param {number} [options.height] - Height of BufferResource or SVG rasterization
 * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading
 * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height
 * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object
 * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin
 * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately
 * @param {number} [options.updateFPS=0] - Video option to update how many times a second the
 *        texture should be updated from the video. Leave at 0 to update at every render
 * @returns {PIXI.Resource} The created resource.
 */
function autoDetectResource(source, options) {
    if (!source) {
        return null;
    }
    var extension = '';
    if (typeof source === 'string') {
        // search for file extension: period, 3-4 chars, then ?, # or EOL
        var result = (/\.(\w{3,4})(?:$|\?|#)/i).exec(source);
        if (result) {
            extension = result[1].toLowerCase();
        }
    }
    for (var i = INSTALLED.length - 1; i >= 0; --i) {
        var ResourcePlugin = INSTALLED[i];
        if (ResourcePlugin.test && ResourcePlugin.test(source, extension)) {
            return new ResourcePlugin(source, options);
        }
    }
    throw new Error('Unrecognized source type to auto-detect Resource');
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var core_assign = function() {
    core_assign = Object.assign || function __assign(t) {
        var arguments$1 = arguments;

        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments$1[i];
            for (var p in s) { if (Object.prototype.hasOwnProperty.call(s, p)) { t[p] = s[p]; } }
        }
        return t;
    };
    return core_assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) { if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        { t[p] = s[p]; } }
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        { for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                { t[p[i]] = s[p[i]]; }
        } }
    return t;
}

/**
 * Base resource class for textures that manages validation and uploading, depending on its type.
 *
 * Uploading of a base texture to the GPU is required.
 * @memberof PIXI
 */
var Resource = /** @class */ (function () {
    /**
     * @param width - Width of the resource
     * @param height - Height of the resource
     */
    function Resource(width, height) {
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        this._width = width;
        this._height = height;
        this.destroyed = false;
        this.internal = false;
        this.onResize = new Runner('setRealSize');
        this.onUpdate = new Runner('update');
        this.onError = new Runner('onError');
    }
    /**
     * Bind to a parent BaseTexture
     * @param baseTexture - Parent texture
     */
    Resource.prototype.bind = function (baseTexture) {
        this.onResize.add(baseTexture);
        this.onUpdate.add(baseTexture);
        this.onError.add(baseTexture);
        // Call a resize immediate if we already
        // have the width and height of the resource
        if (this._width || this._height) {
            this.onResize.emit(this._width, this._height);
        }
    };
    /**
     * Unbind to a parent BaseTexture
     * @param baseTexture - Parent texture
     */
    Resource.prototype.unbind = function (baseTexture) {
        this.onResize.remove(baseTexture);
        this.onUpdate.remove(baseTexture);
        this.onError.remove(baseTexture);
    };
    /**
     * Trigger a resize event
     * @param width - X dimension
     * @param height - Y dimension
     */
    Resource.prototype.resize = function (width, height) {
        if (width !== this._width || height !== this._height) {
            this._width = width;
            this._height = height;
            this.onResize.emit(width, height);
        }
    };
    Object.defineProperty(Resource.prototype, "valid", {
        /**
         * Has been validated
         * @readonly
         */
        get: function () {
            return !!this._width && !!this._height;
        },
        enumerable: false,
        configurable: true
    });
    /** Has been updated trigger event. */
    Resource.prototype.update = function () {
        if (!this.destroyed) {
            this.onUpdate.emit();
        }
    };
    /**
     * This can be overridden to start preloading a resource
     * or do any other prepare step.
     * @protected
     * @returns Handle the validate event
     */
    Resource.prototype.load = function () {
        return Promise.resolve(this);
    };
    Object.defineProperty(Resource.prototype, "width", {
        /**
         * The width of the resource.
         * @readonly
         */
        get: function () {
            return this._width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "height", {
        /**
         * The height of the resource.
         * @readonly
         */
        get: function () {
            return this._height;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Set the style, optional to override
     * @param _renderer - yeah, renderer!
     * @param _baseTexture - the texture
     * @param _glTexture - texture instance for this webgl context
     * @returns - `true` is success
     */
    Resource.prototype.style = function (_renderer, _baseTexture, _glTexture) {
        return false;
    };
    /** Clean up anything, this happens when destroying is ready. */
    Resource.prototype.dispose = function () {
        // override
    };
    /**
     * Call when destroying resource, unbind any BaseTexture object
     * before calling this method, as reference counts are maintained
     * internally.
     */
    Resource.prototype.destroy = function () {
        if (!this.destroyed) {
            this.destroyed = true;
            this.dispose();
            this.onError.removeAll();
            this.onError = null;
            this.onResize.removeAll();
            this.onResize = null;
            this.onUpdate.removeAll();
            this.onUpdate = null;
        }
    };
    /**
     * Abstract, used to auto-detect resource type.
     * @param {*} _source - The source object
     * @param {string} _extension - The extension of source, if set
     */
    Resource.test = function (_source, _extension) {
        return false;
    };
    return Resource;
}());

/**
 * @interface SharedArrayBuffer
 */
/**
 * Buffer resource with data of typed array.
 * @memberof PIXI
 */
var BufferResource = /** @class */ (function (_super) {
    __extends(BufferResource, _super);
    /**
     * @param source - Source buffer
     * @param options - Options
     * @param {number} options.width - Width of the texture
     * @param {number} options.height - Height of the texture
     */
    function BufferResource(source, options) {
        var _this = this;
        var _a = options || {}, width = _a.width, height = _a.height;
        if (!width || !height) {
            throw new Error('BufferResource width or height invalid');
        }
        _this = _super.call(this, width, height) || this;
        _this.data = source;
        return _this;
    }
    /**
     * Upload the texture to the GPU.
     * @param renderer - Upload to the renderer
     * @param baseTexture - Reference to parent texture
     * @param glTexture - glTexture
     * @returns - true is success
     */
    BufferResource.prototype.upload = function (renderer, baseTexture, glTexture) {
        var gl = renderer.gl;
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);
        var width = baseTexture.realWidth;
        var height = baseTexture.realHeight;
        if (glTexture.width === width && glTexture.height === height) {
            gl.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data);
        }
        else {
            glTexture.width = width;
            glTexture.height = height;
            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data);
        }
        return true;
    };
    /** Destroy and don't use after this. */
    BufferResource.prototype.dispose = function () {
        this.data = null;
    };
    /**
     * Used to auto-detect the type of resource.
     * @param {*} source - The source object
     * @returns {boolean} `true` if <canvas>
     */
    BufferResource.test = function (source) {
        return source instanceof Float32Array
            || source instanceof Uint8Array
            || source instanceof Uint32Array;
    };
    return BufferResource;
}(Resource));

var defaultBufferOptions = {
    scaleMode: SCALE_MODES.NEAREST,
    format: FORMATS.RGBA,
    alphaMode: ALPHA_MODES.NPM,
};
/**
 * A Texture stores the information that represents an image.
 * All textures have a base texture, which contains information about the source.
 * Therefore you can have many textures all using a single BaseTexture
 * @memberof PIXI
 * @typeParam R - The BaseTexture's Resource type.
 * @typeParam RO - The options for constructing resource.
 */
var BaseTexture = /** @class */ (function (_super) {
    __extends(BaseTexture, _super);
    /**
     * @param {PIXI.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null] -
     *        The current resource to use, for things that aren't Resource objects, will be converted
     *        into a Resource.
     * @param options - Collection of options
     * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture
     * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture
     * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures
     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest
     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type
     * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type
     * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target
     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Pre multiply the image alpha
     * @param {number} [options.width=0] - Width of the texture
     * @param {number} [options.height=0] - Height of the texture
     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - Resolution of the base texture
     * @param {object} [options.resourceOptions] - Optional resource options,
     *        see {@link PIXI.autoDetectResource autoDetectResource}
     */
    function BaseTexture(resource, options) {
        if (resource === void 0) { resource = null; }
        if (options === void 0) { options = null; }
        var _this = _super.call(this) || this;
        options = options || {};
        var alphaMode = options.alphaMode, mipmap = options.mipmap, anisotropicLevel = options.anisotropicLevel, scaleMode = options.scaleMode, width = options.width, height = options.height, wrapMode = options.wrapMode, format = options.format, type = options.type, target = options.target, resolution = options.resolution, resourceOptions = options.resourceOptions;
        // Convert the resource to a Resource object
        if (resource && !(resource instanceof Resource)) {
            resource = autoDetectResource(resource, resourceOptions);
            resource.internal = true;
        }
        _this.resolution = resolution || settings.RESOLUTION;
        _this.width = Math.round((width || 0) * _this.resolution) / _this.resolution;
        _this.height = Math.round((height || 0) * _this.resolution) / _this.resolution;
        _this._mipmap = mipmap !== undefined ? mipmap : settings.MIPMAP_TEXTURES;
        _this.anisotropicLevel = anisotropicLevel !== undefined ? anisotropicLevel : settings.ANISOTROPIC_LEVEL;
        _this._wrapMode = wrapMode || settings.WRAP_MODE;
        _this._scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;
        _this.format = format || FORMATS.RGBA;
        _this.type = type || TYPES.UNSIGNED_BYTE;
        _this.target = target || TARGETS.TEXTURE_2D;
        _this.alphaMode = alphaMode !== undefined ? alphaMode : ALPHA_MODES.UNPACK;
        _this.uid = uid();
        _this.touched = 0;
        _this.isPowerOfTwo = false;
        _this._refreshPOT();
        _this._glTextures = {};
        _this.dirtyId = 0;
        _this.dirtyStyleId = 0;
        _this.cacheId = null;
        _this.valid = width > 0 && height > 0;
        _this.textureCacheIds = [];
        _this.destroyed = false;
        _this.resource = null;
        _this._batchEnabled = 0;
        _this._batchLocation = 0;
        _this.parentTextureArray = null;
        /**
         * Fired when a not-immediately-available source finishes loading.
         * @protected
         * @event PIXI.BaseTexture#loaded
         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.
         */
        /**
         * Fired when a not-immediately-available source fails to load.
         * @protected
         * @event PIXI.BaseTexture#error
         * @param {PIXI.BaseTexture} baseTexture - Resource errored.
         * @param {ErrorEvent} event - Load error event.
         */
        /**
         * Fired when BaseTexture is updated.
         * @protected
         * @event PIXI.BaseTexture#loaded
         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.
         */
        /**
         * Fired when BaseTexture is updated.
         * @protected
         * @event PIXI.BaseTexture#update
         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.
         */
        /**
         * Fired when BaseTexture is destroyed.
         * @protected
         * @event PIXI.BaseTexture#dispose
         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.
         */
        // Set the resource
        _this.setResource(resource);
        return _this;
    }
    Object.defineProperty(BaseTexture.prototype, "realWidth", {
        /**
         * Pixel width of the source of this texture
         * @readonly
         */
        get: function () {
            return Math.round(this.width * this.resolution);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseTexture.prototype, "realHeight", {
        /**
         * Pixel height of the source of this texture
         * @readonly
         */
        get: function () {
            return Math.round(this.height * this.resolution);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseTexture.prototype, "mipmap", {
        /**
         * Mipmap mode of the texture, affects downscaled images
         * @default PIXI.settings.MIPMAP_TEXTURES
         */
        get: function () {
            return this._mipmap;
        },
        set: function (value) {
            if (this._mipmap !== value) {
                this._mipmap = value;
                this.dirtyStyleId++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseTexture.prototype, "scaleMode", {
        /**
         * The scale mode to apply when scaling this texture
         * @default PIXI.settings.SCALE_MODE
         */
        get: function () {
            return this._scaleMode;
        },
        set: function (value) {
            if (this._scaleMode !== value) {
                this._scaleMode = value;
                this.dirtyStyleId++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseTexture.prototype, "wrapMode", {
        /**
         * How the texture wraps
         * @default PIXI.settings.WRAP_MODE
         */
        get: function () {
            return this._wrapMode;
        },
        set: function (value) {
            if (this._wrapMode !== value) {
                this._wrapMode = value;
                this.dirtyStyleId++;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Changes style options of BaseTexture
     * @param scaleMode - Pixi scalemode
     * @param mipmap - enable mipmaps
     * @returns - this
     */
    BaseTexture.prototype.setStyle = function (scaleMode, mipmap) {
        var dirty;
        if (scaleMode !== undefined && scaleMode !== this.scaleMode) {
            this.scaleMode = scaleMode;
            dirty = true;
        }
        if (mipmap !== undefined && mipmap !== this.mipmap) {
            this.mipmap = mipmap;
            dirty = true;
        }
        if (dirty) {
            this.dirtyStyleId++;
        }
        return this;
    };
    /**
     * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.
     * @param desiredWidth - Desired visual width
     * @param desiredHeight - Desired visual height
     * @param resolution - Optionally set resolution
     * @returns - this
     */
    BaseTexture.prototype.setSize = function (desiredWidth, desiredHeight, resolution) {
        resolution = resolution || this.resolution;
        return this.setRealSize(desiredWidth * resolution, desiredHeight * resolution, resolution);
    };
    /**
     * Sets real size of baseTexture, preserves current resolution.
     * @param realWidth - Full rendered width
     * @param realHeight - Full rendered height
     * @param resolution - Optionally set resolution
     * @returns - this
     */
    BaseTexture.prototype.setRealSize = function (realWidth, realHeight, resolution) {
        this.resolution = resolution || this.resolution;
        this.width = Math.round(realWidth) / this.resolution;
        this.height = Math.round(realHeight) / this.resolution;
        this._refreshPOT();
        this.update();
        return this;
    };
    /**
     * Refresh check for isPowerOfTwo texture based on size
     * @private
     */
    BaseTexture.prototype._refreshPOT = function () {
        this.isPowerOfTwo = isPow2(this.realWidth) && isPow2(this.realHeight);
    };
    /**
     * Changes resolution
     * @param resolution - res
     * @returns - this
     */
    BaseTexture.prototype.setResolution = function (resolution) {
        var oldResolution = this.resolution;
        if (oldResolution === resolution) {
            return this;
        }
        this.resolution = resolution;
        if (this.valid) {
            this.width = Math.round(this.width * oldResolution) / resolution;
            this.height = Math.round(this.height * oldResolution) / resolution;
            this.emit('update', this);
        }
        this._refreshPOT();
        return this;
    };
    /**
     * Sets the resource if it wasn't set. Throws error if resource already present
     * @param resource - that is managing this BaseTexture
     * @returns - this
     */
    BaseTexture.prototype.setResource = function (resource) {
        if (this.resource === resource) {
            return this;
        }
        if (this.resource) {
            throw new Error('Resource can be set only once');
        }
        resource.bind(this);
        this.resource = resource;
        return this;
    };
    /** Invalidates the object. Texture becomes valid if width and height are greater than zero. */
    BaseTexture.prototype.update = function () {
        if (!this.valid) {
            if (this.width > 0 && this.height > 0) {
                this.valid = true;
                this.emit('loaded', this);
                this.emit('update', this);
            }
        }
        else {
            this.dirtyId++;
            this.dirtyStyleId++;
            this.emit('update', this);
        }
    };
    /**
     * Handle errors with resources.
     * @private
     * @param event - Error event emitted.
     */
    BaseTexture.prototype.onError = function (event) {
        this.emit('error', this, event);
    };
    /**
     * Destroys this base texture.
     * The method stops if resource doesn't want this texture to be destroyed.
     * Removes texture from all caches.
     */
    BaseTexture.prototype.destroy = function () {
        // remove and destroy the resource
        if (this.resource) {
            this.resource.unbind(this);
            // only destroy resourced created internally
            if (this.resource.internal) {
                this.resource.destroy();
            }
            this.resource = null;
        }
        if (this.cacheId) {
            delete BaseTextureCache[this.cacheId];
            delete TextureCache[this.cacheId];
            this.cacheId = null;
        }
        // finally let the WebGL renderer know..
        this.dispose();
        BaseTexture.removeFromCache(this);
        this.textureCacheIds = null;
        this.destroyed = true;
    };
    /**
     * Frees the texture from WebGL memory without destroying this texture object.
     * This means you can still use the texture later which will upload it to GPU
     * memory again.
     * @fires PIXI.BaseTexture#dispose
     */
    BaseTexture.prototype.dispose = function () {
        this.emit('dispose', this);
    };
    /** Utility function for BaseTexture|Texture cast. */
    BaseTexture.prototype.castToBaseTexture = function () {
        return this;
    };
    /**
     * Helper function that creates a base texture based on the source you provide.
     * The source can be - image url, image element, canvas element. If the
     * source is an image url or an image element and not in the base texture
     * cache, it will be created and loaded.
     * @static
     * @param {string|string[]|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The
     *        source to create base texture from.
     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.
     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id
     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.
     * @returns {PIXI.BaseTexture} The new base texture.
     */
    BaseTexture.from = function (source, options, strict) {
        if (strict === void 0) { strict = settings.STRICT_TEXTURE_CACHE; }
        var isFrame = typeof source === 'string';
        var cacheId = null;
        if (isFrame) {
            cacheId = source;
        }
        else {
            if (!source._pixiId) {
                var prefix = (options && options.pixiIdPrefix) || 'pixiid';
                source._pixiId = prefix + "_" + uid();
            }
            cacheId = source._pixiId;
        }
        var baseTexture = BaseTextureCache[cacheId];
        // Strict-mode rejects invalid cacheIds
        if (isFrame && strict && !baseTexture) {
            throw new Error("The cacheId \"" + cacheId + "\" does not exist in BaseTextureCache.");
        }
        if (!baseTexture) {
            baseTexture = new BaseTexture(source, options);
            baseTexture.cacheId = cacheId;
            BaseTexture.addToCache(baseTexture, cacheId);
        }
        return baseTexture;
    };
    /**
     * Create a new BaseTexture with a BufferResource from a Float32Array.
     * RGBA values are floats from 0 to 1.
     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data
     *        is provided, a new Float32Array is created.
     * @param width - Width of the resource
     * @param height - Height of the resource
     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.
     *        Default properties are different from the constructor's defaults.
     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type
     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.NPM] - Image alpha, not premultiplied by default
     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.SCALE_MODES.NEAREST] - Scale mode, pixelating by default
     * @returns - The resulting new BaseTexture
     */
    BaseTexture.fromBuffer = function (buffer, width, height, options) {
        buffer = buffer || new Float32Array(width * height * 4);
        var resource = new BufferResource(buffer, { width: width, height: height });
        var type = buffer instanceof Float32Array ? TYPES.FLOAT : TYPES.UNSIGNED_BYTE;
        return new BaseTexture(resource, Object.assign({}, defaultBufferOptions, options || { width: width, height: height, type: type }));
    };
    /**
     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.
     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.
     * @param {string} id - The id that the BaseTexture will be stored against.
     */
    BaseTexture.addToCache = function (baseTexture, id) {
        if (id) {
            if (baseTexture.textureCacheIds.indexOf(id) === -1) {
                baseTexture.textureCacheIds.push(id);
            }
            if (BaseTextureCache[id]) {
                // eslint-disable-next-line no-console
                console.warn("BaseTexture added to the cache with an id [" + id + "] that already had an entry");
            }
            BaseTextureCache[id] = baseTexture;
        }
    };
    /**
     * Remove a BaseTexture from the global BaseTextureCache.
     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.
     * @returns {PIXI.BaseTexture|null} The BaseTexture that was removed.
     */
    BaseTexture.removeFromCache = function (baseTexture) {
        if (typeof baseTexture === 'string') {
            var baseTextureFromCache = BaseTextureCache[baseTexture];
            if (baseTextureFromCache) {
                var index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);
                if (index > -1) {
                    baseTextureFromCache.textureCacheIds.splice(index, 1);
                }
                delete BaseTextureCache[baseTexture];
                return baseTextureFromCache;
            }
        }
        else if (baseTexture && baseTexture.textureCacheIds) {
            for (var i = 0; i < baseTexture.textureCacheIds.length; ++i) {
                delete BaseTextureCache[baseTexture.textureCacheIds[i]];
            }
            baseTexture.textureCacheIds.length = 0;
            return baseTexture;
        }
        return null;
    };
    /** Global number of the texture batch, used by multi-texture renderers. */
    BaseTexture._globalBatch = 0;
    return BaseTexture;
}(eventemitter3));

/**
 * Resource that can manage several resource (items) inside.
 * All resources need to have the same pixel size.
 * Parent class for CubeResource and ArrayResource
 * @memberof PIXI
 */
var AbstractMultiResource = /** @class */ (function (_super) {
    __extends(AbstractMultiResource, _super);
    /**
     * @param length
     * @param options - Options to for Resource constructor
     * @param {number} [options.width] - Width of the resource
     * @param {number} [options.height] - Height of the resource
     */
    function AbstractMultiResource(length, options) {
        var _this = this;
        var _a = options || {}, width = _a.width, height = _a.height;
        _this = _super.call(this, width, height) || this;
        _this.items = [];
        _this.itemDirtyIds = [];
        for (var i = 0; i < length; i++) {
            var partTexture = new BaseTexture();
            _this.items.push(partTexture);
            // -2 - first run of texture array upload
            // -1 - texture item was allocated
            // >=0 - texture item uploaded , in sync with items[i].dirtyId
            _this.itemDirtyIds.push(-2);
        }
        _this.length = length;
        _this._load = null;
        _this.baseTexture = null;
        return _this;
    }
    /**
     * Used from ArrayResource and CubeResource constructors.
     * @param resources - Can be resources, image elements, canvas, etc. ,
     *  length should be same as constructor length
     * @param options - Detect options for resources
     */
    AbstractMultiResource.prototype.initFromArray = function (resources, options) {
        for (var i = 0; i < this.length; i++) {
            if (!resources[i]) {
                continue;
            }
            if (resources[i].castToBaseTexture) {
                this.addBaseTextureAt(resources[i].castToBaseTexture(), i);
            }
            else if (resources[i] instanceof Resource) {
                this.addResourceAt(resources[i], i);
            }
            else {
                this.addResourceAt(autoDetectResource(resources[i], options), i);
            }
        }
    };
    /** Destroy this BaseImageResource. */
    AbstractMultiResource.prototype.dispose = function () {
        for (var i = 0, len = this.length; i < len; i++) {
            this.items[i].destroy();
        }
        this.items = null;
        this.itemDirtyIds = null;
        this._load = null;
    };
    /**
     * Set a resource by ID
     * @param resource
     * @param index - Zero-based index of resource to set
     * @returns - Instance for chaining
     */
    AbstractMultiResource.prototype.addResourceAt = function (resource, index) {
        if (!this.items[index]) {
            throw new Error("Index " + index + " is out of bounds");
        }
        // Inherit the first resource dimensions
        if (resource.valid && !this.valid) {
            this.resize(resource.width, resource.height);
        }
        this.items[index].setResource(resource);
        return this;
    };
    /**
     * Set the parent base texture.
     * @param baseTexture
     */
    AbstractMultiResource.prototype.bind = function (baseTexture) {
        if (this.baseTexture !== null) {
            throw new Error('Only one base texture per TextureArray is allowed');
        }
        _super.prototype.bind.call(this, baseTexture);
        for (var i = 0; i < this.length; i++) {
            this.items[i].parentTextureArray = baseTexture;
            this.items[i].on('update', baseTexture.update, baseTexture);
        }
    };
    /**
     * Unset the parent base texture.
     * @param baseTexture
     */
    AbstractMultiResource.prototype.unbind = function (baseTexture) {
        _super.prototype.unbind.call(this, baseTexture);
        for (var i = 0; i < this.length; i++) {
            this.items[i].parentTextureArray = null;
            this.items[i].off('update', baseTexture.update, baseTexture);
        }
    };
    /**
     * Load all the resources simultaneously
     * @returns - When load is resolved
     */
    AbstractMultiResource.prototype.load = function () {
        var _this = this;
        if (this._load) {
            return this._load;
        }
        var resources = this.items.map(function (item) { return item.resource; }).filter(function (item) { return item; });
        // TODO: also implement load part-by-part strategy
        var promises = resources.map(function (item) { return item.load(); });
        this._load = Promise.all(promises)
            .then(function () {
            var _a = _this.items[0], realWidth = _a.realWidth, realHeight = _a.realHeight;
            _this.resize(realWidth, realHeight);
            return Promise.resolve(_this);
        });
        return this._load;
    };
    return AbstractMultiResource;
}(Resource));

/**
 * A resource that contains a number of sources.
 * @memberof PIXI
 */
var ArrayResource = /** @class */ (function (_super) {
    __extends(ArrayResource, _super);
    /**
     * @param source - Number of items in array or the collection
     *        of image URLs to use. Can also be resources, image elements, canvas, etc.
     * @param options - Options to apply to {@link PIXI.autoDetectResource}
     * @param {number} [options.width] - Width of the resource
     * @param {number} [options.height] - Height of the resource
     */
    function ArrayResource(source, options) {
        var _this = this;
        var _a = options || {}, width = _a.width, height = _a.height;
        var urls;
        var length;
        if (Array.isArray(source)) {
            urls = source;
            length = source.length;
        }
        else {
            length = source;
        }
        _this = _super.call(this, length, { width: width, height: height }) || this;
        if (urls) {
            _this.initFromArray(urls, options);
        }
        return _this;
    }
    /**
     * Set a baseTexture by ID,
     * ArrayResource just takes resource from it, nothing more
     * @param baseTexture
     * @param index - Zero-based index of resource to set
     * @returns - Instance for chaining
     */
    ArrayResource.prototype.addBaseTextureAt = function (baseTexture, index) {
        if (baseTexture.resource) {
            this.addResourceAt(baseTexture.resource, index);
        }
        else {
            throw new Error('ArrayResource does not support RenderTexture');
        }
        return this;
    };
    /**
     * Add binding
     * @param baseTexture
     */
    ArrayResource.prototype.bind = function (baseTexture) {
        _super.prototype.bind.call(this, baseTexture);
        baseTexture.target = TARGETS.TEXTURE_2D_ARRAY;
    };
    /**
     * Upload the resources to the GPU.
     * @param renderer
     * @param texture
     * @param glTexture
     * @returns - whether texture was uploaded
     */
    ArrayResource.prototype.upload = function (renderer, texture, glTexture) {
        var _a = this, length = _a.length, itemDirtyIds = _a.itemDirtyIds, items = _a.items;
        var gl = renderer.gl;
        if (glTexture.dirtyId < 0) {
            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, glTexture.internalFormat, this._width, this._height, length, 0, texture.format, glTexture.type, null);
        }
        for (var i = 0; i < length; i++) {
            var item = items[i];
            if (itemDirtyIds[i] < item.dirtyId) {
                itemDirtyIds[i] = item.dirtyId;
                if (item.valid) {
                    gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, // xoffset
                    0, // yoffset
                    i, // zoffset
                    item.resource.width, item.resource.height, 1, texture.format, glTexture.type, item.resource.source);
                }
            }
        }
        return true;
    };
    return ArrayResource;
}(AbstractMultiResource));

/**
 * Base for all the image/canvas resources.
 * @memberof PIXI
 */
var BaseImageResource = /** @class */ (function (_super) {
    __extends(BaseImageResource, _super);
    /**
     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} source
     */
    function BaseImageResource(source) {
        var _this = this;
        var sourceAny = source;
        var width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.width;
        var height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.height;
        _this = _super.call(this, width, height) || this;
        _this.source = source;
        _this.noSubImage = false;
        return _this;
    }
    /**
     * Set cross origin based detecting the url and the crossorigin
     * @param element - Element to apply crossOrigin
     * @param url - URL to check
     * @param crossorigin - Cross origin value to use
     */
    BaseImageResource.crossOrigin = function (element, url, crossorigin) {
        if (crossorigin === undefined && url.indexOf('data:') !== 0) {
            element.crossOrigin = determineCrossOrigin(url);
        }
        else if (crossorigin !== false) {
            element.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';
        }
    };
    /**
     * Upload the texture to the GPU.
     * @param renderer - Upload to the renderer
     * @param baseTexture - Reference to parent texture
     * @param glTexture
     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] - (optional)
     * @returns - true is success
     */
    BaseImageResource.prototype.upload = function (renderer, baseTexture, glTexture, source) {
        var gl = renderer.gl;
        var width = baseTexture.realWidth;
        var height = baseTexture.realHeight;
        source = source || this.source;
        if (source instanceof HTMLImageElement) {
            if (!source.complete || source.naturalWidth === 0) {
                return false;
            }
        }
        else if (source instanceof HTMLVideoElement) {
            if (source.readyState <= 1) {
                return false;
            }
        }
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);
        if (!this.noSubImage
            && baseTexture.target === gl.TEXTURE_2D
            && glTexture.width === width
            && glTexture.height === height) {
            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, source);
        }
        else {
            glTexture.width = width;
            glTexture.height = height;
            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source);
        }
        return true;
    };
    /**
     * Checks if source width/height was changed, resize can cause extra baseTexture update.
     * Triggers one update in any case.
     */
    BaseImageResource.prototype.update = function () {
        if (this.destroyed) {
            return;
        }
        var source = this.source;
        var width = source.naturalWidth || source.videoWidth || source.width;
        var height = source.naturalHeight || source.videoHeight || source.height;
        this.resize(width, height);
        _super.prototype.update.call(this);
    };
    /** Destroy this {@link BaseImageResource} */
    BaseImageResource.prototype.dispose = function () {
        this.source = null;
    };
    return BaseImageResource;
}(Resource));

/**
 * @interface OffscreenCanvas
 */
/**
 * Resource type for HTMLCanvasElement.
 * @memberof PIXI
 */
var CanvasResource = /** @class */ (function (_super) {
    __extends(CanvasResource, _super);
    /**
     * @param source - Canvas element to use
     */
    // eslint-disable-next-line @typescript-eslint/no-useless-constructor
    function CanvasResource(source) {
        return _super.call(this, source) || this;
    }
    /**
     * Used to auto-detect the type of resource.
     * @param {*} source - The source object
     * @returns {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas
     */
    CanvasResource.test = function (source) {
        var OffscreenCanvas = globalThis.OffscreenCanvas;
        // Check for browsers that don't yet support OffscreenCanvas
        if (OffscreenCanvas && source instanceof OffscreenCanvas) {
            return true;
        }
        return globalThis.HTMLCanvasElement && source instanceof HTMLCanvasElement;
    };
    return CanvasResource;
}(BaseImageResource));

/**
 * Resource for a CubeTexture which contains six resources.
 * @memberof PIXI
 */
var CubeResource = /** @class */ (function (_super) {
    __extends(CubeResource, _super);
    /**
     * @param {Array<string|PIXI.Resource>} [source] - Collection of URLs or resources
     *        to use as the sides of the cube.
     * @param options - ImageResource options
     * @param {number} [options.width] - Width of resource
     * @param {number} [options.height] - Height of resource
     * @param {number} [options.autoLoad=true] - Whether to auto-load resources
     * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,
     *   whether to copy them or use
     */
    function CubeResource(source, options) {
        var _this = this;
        var _a = options || {}, width = _a.width, height = _a.height, autoLoad = _a.autoLoad, linkBaseTexture = _a.linkBaseTexture;
        if (source && source.length !== CubeResource.SIDES) {
            throw new Error("Invalid length. Got " + source.length + ", expected 6");
        }
        _this = _super.call(this, 6, { width: width, height: height }) || this;
        for (var i = 0; i < CubeResource.SIDES; i++) {
            _this.items[i].target = TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + i;
        }
        _this.linkBaseTexture = linkBaseTexture !== false;
        if (source) {
            _this.initFromArray(source, options);
        }
        if (autoLoad !== false) {
            _this.load();
        }
        return _this;
    }
    /**
     * Add binding.
     * @param baseTexture - parent base texture
     */
    CubeResource.prototype.bind = function (baseTexture) {
        _super.prototype.bind.call(this, baseTexture);
        baseTexture.target = TARGETS.TEXTURE_CUBE_MAP;
    };
    CubeResource.prototype.addBaseTextureAt = function (baseTexture, index, linkBaseTexture) {
        if (!this.items[index]) {
            throw new Error("Index " + index + " is out of bounds");
        }
        if (!this.linkBaseTexture
            || baseTexture.parentTextureArray
            || Object.keys(baseTexture._glTextures).length > 0) {
            // copy mode
            if (baseTexture.resource) {
                this.addResourceAt(baseTexture.resource, index);
            }
            else {
                throw new Error("CubeResource does not support copying of renderTexture.");
            }
        }
        else {
            // link mode, the difficult one!
            baseTexture.target = TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + index;
            baseTexture.parentTextureArray = this.baseTexture;
            this.items[index] = baseTexture;
        }
        if (baseTexture.valid && !this.valid) {
            this.resize(baseTexture.realWidth, baseTexture.realHeight);
        }
        this.items[index] = baseTexture;
        return this;
    };
    /**
     * Upload the resource
     * @param renderer
     * @param _baseTexture
     * @param glTexture
     * @returns {boolean} true is success
     */
    CubeResource.prototype.upload = function (renderer, _baseTexture, glTexture) {
        var dirty = this.itemDirtyIds;
        for (var i = 0; i < CubeResource.SIDES; i++) {
            var side = this.items[i];
            if (dirty[i] < side.dirtyId || glTexture.dirtyId < _baseTexture.dirtyId) {
                if (side.valid && side.resource) {
                    side.resource.upload(renderer, side, glTexture);
                    dirty[i] = side.dirtyId;
                }
                else if (dirty[i] < -1) {
                    // either item is not valid yet, either its a renderTexture
                    // allocate the memory
                    renderer.gl.texImage2D(side.target, 0, glTexture.internalFormat, _baseTexture.realWidth, _baseTexture.realHeight, 0, _baseTexture.format, glTexture.type, null);
                    dirty[i] = -1;
                }
            }
        }
        return true;
    };
    /**
     * Used to auto-detect the type of resource.
     * @param {*} source - The source object
     * @returns {boolean} `true` if source is an array of 6 elements
     */
    CubeResource.test = function (source) {
        return Array.isArray(source) && source.length === CubeResource.SIDES;
    };
    /** Number of texture sides to store for CubeResources. */
    CubeResource.SIDES = 6;
    return CubeResource;
}(AbstractMultiResource));

/**
 * Resource type for HTMLImageElement.
 * @memberof PIXI
 */
var ImageResource = /** @class */ (function (_super) {
    __extends(ImageResource, _super);
    /**
     * @param source - image source or URL
     * @param options
     * @param {boolean} [options.autoLoad=true] - start loading process
     * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - whether its required to create
     *        a bitmap before upload
     * @param {boolean} [options.crossorigin=true] - Load image using cross origin
     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Premultiply image alpha in bitmap
     */
    function ImageResource(source, options) {
        var _this = this;
        options = options || {};
        if (!(source instanceof HTMLImageElement)) {
            var imageElement = new Image();
            BaseImageResource.crossOrigin(imageElement, source, options.crossorigin);
            imageElement.src = source;
            source = imageElement;
        }
        _this = _super.call(this, source) || this;
        // FireFox 68, and possibly other versions, seems like setting the HTMLImageElement#width and #height
        // to non-zero values before its loading completes if images are in a cache.
        // Because of this, need to set the `_width` and the `_height` to zero to avoid uploading incomplete images.
        // Please refer to the issue #5968 (https://github.com/pixijs/pixi.js/issues/5968).
        if (!source.complete && !!_this._width && !!_this._height) {
            _this._width = 0;
            _this._height = 0;
        }
        _this.url = source.src;
        _this._process = null;
        _this.preserveBitmap = false;
        _this.createBitmap = (options.createBitmap !== undefined
            ? options.createBitmap : settings.CREATE_IMAGE_BITMAP) && !!globalThis.createImageBitmap;
        _this.alphaMode = typeof options.alphaMode === 'number' ? options.alphaMode : null;
        _this.bitmap = null;
        _this._load = null;
        if (options.autoLoad !== false) {
            _this.load();
        }
        return _this;
    }
    /**
     * Returns a promise when image will be loaded and processed.
     * @param createBitmap - whether process image into bitmap
     */
    ImageResource.prototype.load = function (createBitmap) {
        var _this = this;
        if (this._load) {
            return this._load;
        }
        if (createBitmap !== undefined) {
            this.createBitmap = createBitmap;
        }
        this._load = new Promise(function (resolve, reject) {
            var source = _this.source;
            _this.url = source.src;
            var completed = function () {
                if (_this.destroyed) {
                    return;
                }
                source.onload = null;
                source.onerror = null;
                _this.resize(source.width, source.height);
                _this._load = null;
                if (_this.createBitmap) {
                    resolve(_this.process());
                }
                else {
                    resolve(_this);
                }
            };
            if (source.complete && source.src) {
                completed();
            }
            else {
                source.onload = completed;
                source.onerror = function (event) {
                    // Avoids Promise freezing when resource broken
                    reject(event);
                    _this.onError.emit(event);
                };
            }
        });
        return this._load;
    };
    /**
     * Called when we need to convert image into BitmapImage.
     * Can be called multiple times, real promise is cached inside.
     * @returns - Cached promise to fill that bitmap
     */
    ImageResource.prototype.process = function () {
        var _this = this;
        var source = this.source;
        if (this._process !== null) {
            return this._process;
        }
        if (this.bitmap !== null || !globalThis.createImageBitmap) {
            return Promise.resolve(this);
        }
        var createImageBitmap = globalThis.createImageBitmap;
        var cors = !source.crossOrigin || source.crossOrigin === 'anonymous';
        this._process = fetch(source.src, {
            mode: cors ? 'cors' : 'no-cors'
        })
            .then(function (r) { return r.blob(); })
            .then(function (blob) { return createImageBitmap(blob, 0, 0, source.width, source.height, {
            premultiplyAlpha: _this.alphaMode === null || _this.alphaMode === ALPHA_MODES.UNPACK
                ? 'premultiply' : 'none',
        }); })
            .then(function (bitmap) {
            if (_this.destroyed) {
                return Promise.reject();
            }
            _this.bitmap = bitmap;
            _this.update();
            _this._process = null;
            return Promise.resolve(_this);
        });
        return this._process;
    };
    /**
     * Upload the image resource to GPU.
     * @param renderer - Renderer to upload to
     * @param baseTexture - BaseTexture for this resource
     * @param glTexture - GLTexture to use
     * @returns {boolean} true is success
     */
    ImageResource.prototype.upload = function (renderer, baseTexture, glTexture) {
        if (typeof this.alphaMode === 'number') {
            // bitmap stores unpack premultiply flag, we dont have to notify texImage2D about it
            baseTexture.alphaMode = this.alphaMode;
        }
        if (!this.createBitmap) {
            return _super.prototype.upload.call(this, renderer, baseTexture, glTexture);
        }
        if (!this.bitmap) {
            // yeah, ignore the output
            this.process();
            if (!this.bitmap) {
                return false;
            }
        }
        _super.prototype.upload.call(this, renderer, baseTexture, glTexture, this.bitmap);
        if (!this.preserveBitmap) {
            // checks if there are other renderers that possibly need this bitmap
            var flag = true;
            var glTextures = baseTexture._glTextures;
            for (var key in glTextures) {
                var otherTex = glTextures[key];
                if (otherTex !== glTexture && otherTex.dirtyId !== baseTexture.dirtyId) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                if (this.bitmap.close) {
                    this.bitmap.close();
                }
                this.bitmap = null;
            }
        }
        return true;
    };
    /** Destroys this resource. */
    ImageResource.prototype.dispose = function () {
        this.source.onload = null;
        this.source.onerror = null;
        _super.prototype.dispose.call(this);
        if (this.bitmap) {
            this.bitmap.close();
            this.bitmap = null;
        }
        this._process = null;
        this._load = null;
    };
    /**
     * Used to auto-detect the type of resource.
     * @param {*} source - The source object
     * @returns {boolean} `true` if source is string or HTMLImageElement
     */
    ImageResource.test = function (source) {
        return typeof source === 'string' || source instanceof HTMLImageElement;
    };
    return ImageResource;
}(BaseImageResource));

/**
 * Resource type for SVG elements and graphics.
 * @memberof PIXI
 */
var SVGResource = /** @class */ (function (_super) {
    __extends(SVGResource, _super);
    /**
     * @param sourceBase64 - Base64 encoded SVG element or URL for SVG file.
     * @param {object} [options] - Options to use
     * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...
     * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.
     * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.
     * @param {boolean} [options.autoLoad=true] - Start loading right away.
     */
    function SVGResource(sourceBase64, options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, settings.ADAPTER.createCanvas()) || this;
        _this._width = 0;
        _this._height = 0;
        _this.svg = sourceBase64;
        _this.scale = options.scale || 1;
        _this._overrideWidth = options.width;
        _this._overrideHeight = options.height;
        _this._resolve = null;
        _this._crossorigin = options.crossorigin;
        _this._load = null;
        if (options.autoLoad !== false) {
            _this.load();
        }
        return _this;
    }
    SVGResource.prototype.load = function () {
        var _this = this;
        if (this._load) {
            return this._load;
        }
        this._load = new Promise(function (resolve) {
            // Save this until after load is finished
            _this._resolve = function () {
                _this.resize(_this.source.width, _this.source.height);
                resolve(_this);
            };
            // Convert SVG inline string to data-uri
            if (SVGResource.SVG_XML.test(_this.svg.trim())) {
                if (!btoa) {
                    throw new Error('Your browser doesn\'t support base64 conversions.');
                }
                _this.svg = "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(_this.svg)));
            }
            _this._loadSvg();
        });
        return this._load;
    };
    /** Loads an SVG image from `imageUrl` or `data URL`. */
    SVGResource.prototype._loadSvg = function () {
        var _this = this;
        var tempImage = new Image();
        BaseImageResource.crossOrigin(tempImage, this.svg, this._crossorigin);
        tempImage.src = this.svg;
        tempImage.onerror = function (event) {
            if (!_this._resolve) {
                return;
            }
            tempImage.onerror = null;
            _this.onError.emit(event);
        };
        tempImage.onload = function () {
            if (!_this._resolve) {
                return;
            }
            var svgWidth = tempImage.width;
            var svgHeight = tempImage.height;
            if (!svgWidth || !svgHeight) {
                throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');
            }
            // Set render size
            var width = svgWidth * _this.scale;
            var height = svgHeight * _this.scale;
            if (_this._overrideWidth || _this._overrideHeight) {
                width = _this._overrideWidth || _this._overrideHeight / svgHeight * svgWidth;
                height = _this._overrideHeight || _this._overrideWidth / svgWidth * svgHeight;
            }
            width = Math.round(width);
            height = Math.round(height);
            // Create a canvas element
            var canvas = _this.source;
            canvas.width = width;
            canvas.height = height;
            canvas._pixiId = "canvas_" + uid();
            // Draw the Svg to the canvas
            canvas
                .getContext('2d')
                .drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, width, height);
            _this._resolve();
            _this._resolve = null;
        };
    };
    /**
     * Get size from an svg string using a regular expression.
     * @param svgString - a serialized svg element
     * @returns - image extension
     */
    SVGResource.getSize = function (svgString) {
        var sizeMatch = SVGResource.SVG_SIZE.exec(svgString);
        var size = {};
        if (sizeMatch) {
            size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));
            size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));
        }
        return size;
    };
    /** Destroys this texture. */
    SVGResource.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._resolve = null;
        this._crossorigin = null;
    };
    /**
     * Used to auto-detect the type of resource.
     * @param {*} source - The source object
     * @param {string} extension - The extension of source, if set
     * @returns {boolean} - If the source is a SVG source or data file
     */
    SVGResource.test = function (source, extension) {
        // url file extension is SVG
        return extension === 'svg'
            // source is SVG data-uri
            || (typeof source === 'string' && source.startsWith('data:image/svg+xml'))
            // source is SVG inline
            || (typeof source === 'string' && SVGResource.SVG_XML.test(source));
    };
    /**
     * Regular expression for SVG XML document.
     * @example &lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;!-- image/svg --&gt;&lt;svg
     * @readonly
     */
    SVGResource.SVG_XML = /^(<\?xml[^?]+\?>)?\s*(<!--[^(-->)]*-->)?\s*\<svg/m;
    /**
     * Regular expression for SVG size.
     * @example &lt;svg width="100" height="100"&gt;&lt;/svg&gt;
     * @readonly
     */
    SVGResource.SVG_SIZE = /<svg[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*>/i; // eslint-disable-line max-len
    return SVGResource;
}(BaseImageResource));

/**
 * Resource type for {@code HTMLVideoElement}.
 * @memberof PIXI
 */
var VideoResource = /** @class */ (function (_super) {
    __extends(VideoResource, _super);
    /**
     * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.
     * @param {object} [options] - Options to use
     * @param {boolean} [options.autoLoad=true] - Start loading the video immediately
     * @param {boolean} [options.autoPlay=true] - Start playing video immediately
     * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.
     * Leave at 0 to update at every render.
     * @param {boolean} [options.crossorigin=true] - Load image using cross origin
     */
    function VideoResource(source, options) {
        var _this = this;
        options = options || {};
        if (!(source instanceof HTMLVideoElement)) {
            var videoElement = document.createElement('video');
            // workaround for https://github.com/pixijs/pixi.js/issues/5996
            videoElement.setAttribute('preload', 'auto');
            videoElement.setAttribute('webkit-playsinline', '');
            videoElement.setAttribute('playsinline', '');
            if (typeof source === 'string') {
                source = [source];
            }
            var firstSrc = source[0].src || source[0];
            BaseImageResource.crossOrigin(videoElement, firstSrc, options.crossorigin);
            // array of objects or strings
            for (var i = 0; i < source.length; ++i) {
                var sourceElement = document.createElement('source');
                var _a = source[i], src = _a.src, mime = _a.mime;
                src = src || source[i];
                var baseSrc = src.split('?').shift().toLowerCase();
                var ext = baseSrc.slice(baseSrc.lastIndexOf('.') + 1);
                mime = mime || VideoResource.MIME_TYPES[ext] || "video/" + ext;
                sourceElement.src = src;
                sourceElement.type = mime;
                videoElement.appendChild(sourceElement);
            }
            // Override the source
            source = videoElement;
        }
        _this = _super.call(this, source) || this;
        _this.noSubImage = true;
        _this._autoUpdate = true;
        _this._isConnectedToTicker = false;
        _this._updateFPS = options.updateFPS || 0;
        _this._msToNextUpdate = 0;
        _this.autoPlay = options.autoPlay !== false;
        _this._load = null;
        _this._resolve = null;
        // Bind for listeners
        _this._onCanPlay = _this._onCanPlay.bind(_this);
        _this._onError = _this._onError.bind(_this);
        if (options.autoLoad !== false) {
            _this.load();
        }
        return _this;
    }
    /**
     * Trigger updating of the texture.
     * @param _deltaTime - time delta since last tick
     */
    VideoResource.prototype.update = function (_deltaTime) {
        if (!this.destroyed) {
            // account for if video has had its playbackRate changed
            var elapsedMS = Ticker.shared.elapsedMS * this.source.playbackRate;
            this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);
            if (!this._updateFPS || this._msToNextUpdate <= 0) {
                _super.prototype.update.call(this);
                this._msToNextUpdate = this._updateFPS ? Math.floor(1000 / this._updateFPS) : 0;
            }
        }
    };
    /**
     * Start preloading the video resource.
     * @returns {Promise<void>} Handle the validate event
     */
    VideoResource.prototype.load = function () {
        var _this = this;
        if (this._load) {
            return this._load;
        }
        var source = this.source;
        if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA)
            && source.width && source.height) {
            source.complete = true;
        }
        source.addEventListener('play', this._onPlayStart.bind(this));
        source.addEventListener('pause', this._onPlayStop.bind(this));
        if (!this._isSourceReady()) {
            source.addEventListener('canplay', this._onCanPlay);
            source.addEventListener('canplaythrough', this._onCanPlay);
            source.addEventListener('error', this._onError, true);
        }
        else {
            this._onCanPlay();
        }
        this._load = new Promise(function (resolve) {
            if (_this.valid) {
                resolve(_this);
            }
            else {
                _this._resolve = resolve;
                source.load();
            }
        });
        return this._load;
    };
    /**
     * Handle video error events.
     * @param event
     */
    VideoResource.prototype._onError = function (event) {
        this.source.removeEventListener('error', this._onError, true);
        this.onError.emit(event);
    };
    /**
     * Returns true if the underlying source is playing.
     * @returns - True if playing.
     */
    VideoResource.prototype._isSourcePlaying = function () {
        var source = this.source;
        return (!source.paused && !source.ended && this._isSourceReady());
    };
    /**
     * Returns true if the underlying source is ready for playing.
     * @returns - True if ready.
     */
    VideoResource.prototype._isSourceReady = function () {
        var source = this.source;
        return source.readyState > 2;
    };
    /** Runs the update loop when the video is ready to play. */
    VideoResource.prototype._onPlayStart = function () {
        // Just in case the video has not received its can play even yet..
        if (!this.valid) {
            this._onCanPlay();
        }
        if (this.autoUpdate && !this._isConnectedToTicker) {
            Ticker.shared.add(this.update, this);
            this._isConnectedToTicker = true;
        }
    };
    /** Fired when a pause event is triggered, stops the update loop. */
    VideoResource.prototype._onPlayStop = function () {
        if (this._isConnectedToTicker) {
            Ticker.shared.remove(this.update, this);
            this._isConnectedToTicker = false;
        }
    };
    /** Fired when the video is loaded and ready to play. */
    VideoResource.prototype._onCanPlay = function () {
        var source = this.source;
        source.removeEventListener('canplay', this._onCanPlay);
        source.removeEventListener('canplaythrough', this._onCanPlay);
        var valid = this.valid;
        this.resize(source.videoWidth, source.videoHeight);
        // prevent multiple loaded dispatches..
        if (!valid && this._resolve) {
            this._resolve(this);
            this._resolve = null;
        }
        if (this._isSourcePlaying()) {
            this._onPlayStart();
        }
        else if (this.autoPlay) {
            source.play();
        }
    };
    /** Destroys this texture. */
    VideoResource.prototype.dispose = function () {
        if (this._isConnectedToTicker) {
            Ticker.shared.remove(this.update, this);
            this._isConnectedToTicker = false;
        }
        var source = this.source;
        if (source) {
            source.removeEventListener('error', this._onError, true);
            source.pause();
            source.src = '';
            source.load();
        }
        _super.prototype.dispose.call(this);
    };
    Object.defineProperty(VideoResource.prototype, "autoUpdate", {
        /** Should the base texture automatically update itself, set to true by default. */
        get: function () {
            return this._autoUpdate;
        },
        set: function (value) {
            if (value !== this._autoUpdate) {
                this._autoUpdate = value;
                if (!this._autoUpdate && this._isConnectedToTicker) {
                    Ticker.shared.remove(this.update, this);
                    this._isConnectedToTicker = false;
                }
                else if (this._autoUpdate && !this._isConnectedToTicker && this._isSourcePlaying()) {
                    Ticker.shared.add(this.update, this);
                    this._isConnectedToTicker = true;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VideoResource.prototype, "updateFPS", {
        /**
         * How many times a second to update the texture from the video. Leave at 0 to update at every render.
         * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.
         */
        get: function () {
            return this._updateFPS;
        },
        set: function (value) {
            if (value !== this._updateFPS) {
                this._updateFPS = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Used to auto-detect the type of resource.
     * @param {*} source - The source object
     * @param {string} extension - The extension of source, if set
     * @returns {boolean} `true` if video source
     */
    VideoResource.test = function (source, extension) {
        return (globalThis.HTMLVideoElement && source instanceof HTMLVideoElement)
            || VideoResource.TYPES.indexOf(extension) > -1;
    };
    /**
     * List of common video file extensions supported by VideoResource.
     * @readonly
     */
    VideoResource.TYPES = ['mp4', 'm4v', 'webm', 'ogg', 'ogv', 'h264', 'avi', 'mov'];
    /**
     * Map of video MIME types that can't be directly derived from file extensions.
     * @readonly
     */
    VideoResource.MIME_TYPES = {
        ogv: 'video/ogg',
        mov: 'video/quicktime',
        m4v: 'video/mp4',
    };
    return VideoResource;
}(BaseImageResource));

/**
 * Resource type for ImageBitmap.
 * @memberof PIXI
 */
var ImageBitmapResource = /** @class */ (function (_super) {
    __extends(ImageBitmapResource, _super);
    /**
     * @param source - Image element to use
     */
    // eslint-disable-next-line @typescript-eslint/no-useless-constructor
    function ImageBitmapResource(source) {
        return _super.call(this, source) || this;
    }
    /**
     * Used to auto-detect the type of resource.
     * @param {*} source - The source object
     * @returns {boolean} `true` if source is an ImageBitmap
     */
    ImageBitmapResource.test = function (source) {
        return !!globalThis.createImageBitmap && typeof ImageBitmap !== 'undefined' && source instanceof ImageBitmap;
    };
    return ImageBitmapResource;
}(BaseImageResource));

INSTALLED.push(ImageResource, ImageBitmapResource, CanvasResource, VideoResource, SVGResource, BufferResource, CubeResource, ArrayResource);

var _resources = {
    __proto__: null,
    Resource: Resource,
    BaseImageResource: BaseImageResource,
    INSTALLED: INSTALLED,
    autoDetectResource: autoDetectResource,
    AbstractMultiResource: AbstractMultiResource,
    ArrayResource: ArrayResource,
    BufferResource: BufferResource,
    CanvasResource: CanvasResource,
    CubeResource: CubeResource,
    ImageResource: ImageResource,
    SVGResource: SVGResource,
    VideoResource: VideoResource,
    ImageBitmapResource: ImageBitmapResource
};

/**
 * Resource type for DepthTexture.
 * @memberof PIXI
 */
var DepthResource = /** @class */ (function (_super) {
    __extends(DepthResource, _super);
    function DepthResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Upload the texture to the GPU.
     * @param renderer - Upload to the renderer
     * @param baseTexture - Reference to parent texture
     * @param glTexture - glTexture
     * @returns - true is success
     */
    DepthResource.prototype.upload = function (renderer, baseTexture, glTexture) {
        var gl = renderer.gl;
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);
        var width = baseTexture.realWidth;
        var height = baseTexture.realHeight;
        if (glTexture.width === width && glTexture.height === height) {
            gl.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data);
        }
        else {
            glTexture.width = width;
            glTexture.height = height;
            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data);
        }
        return true;
    };
    return DepthResource;
}(BufferResource));

/**
 * A framebuffer can be used to render contents off of the screen. {@link PIXI.BaseRenderTexture} uses
 * one internally to render into itself. You can attach a depth or stencil buffer to a framebuffer.
 *
 * On WebGL 2 machines, shaders can output to multiple textures simultaneously with GLSL 300 ES.
 * @memberof PIXI
 */
var Framebuffer = /** @class */ (function () {
    /**
     * @param width - Width of the frame buffer
     * @param height - Height of the frame buffer
     */
    function Framebuffer(width, height) {
        this.width = Math.round(width || 100);
        this.height = Math.round(height || 100);
        this.stencil = false;
        this.depth = false;
        this.dirtyId = 0;
        this.dirtyFormat = 0;
        this.dirtySize = 0;
        this.depthTexture = null;
        this.colorTextures = [];
        this.glFramebuffers = {};
        this.disposeRunner = new Runner('disposeFramebuffer');
        this.multisample = MSAA_QUALITY.NONE;
    }
    Object.defineProperty(Framebuffer.prototype, "colorTexture", {
        /**
         * Reference to the colorTexture.
         * @readonly
         */
        get: function () {
            return this.colorTextures[0];
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Add texture to the colorTexture array.
     * @param index - Index of the array to add the texture to
     * @param texture - Texture to add to the array
     */
    Framebuffer.prototype.addColorTexture = function (index, texture) {
        if (index === void 0) { index = 0; }
        // TODO add some validation to the texture - same width / height etc?
        this.colorTextures[index] = texture || new BaseTexture(null, {
            scaleMode: SCALE_MODES.NEAREST,
            resolution: 1,
            mipmap: MIPMAP_MODES.OFF,
            width: this.width,
            height: this.height,
        });
        this.dirtyId++;
        this.dirtyFormat++;
        return this;
    };
    /**
     * Add a depth texture to the frame buffer.
     * @param texture - Texture to add.
     */
    Framebuffer.prototype.addDepthTexture = function (texture) {
        /* eslint-disable max-len */
        this.depthTexture = texture || new BaseTexture(new DepthResource(null, { width: this.width, height: this.height }), {
            scaleMode: SCALE_MODES.NEAREST,
            resolution: 1,
            width: this.width,
            height: this.height,
            mipmap: MIPMAP_MODES.OFF,
            format: FORMATS.DEPTH_COMPONENT,
            type: TYPES.UNSIGNED_SHORT,
        });
        this.dirtyId++;
        this.dirtyFormat++;
        return this;
    };
    /** Enable depth on the frame buffer. */
    Framebuffer.prototype.enableDepth = function () {
        this.depth = true;
        this.dirtyId++;
        this.dirtyFormat++;
        return this;
    };
    /** Enable stencil on the frame buffer. */
    Framebuffer.prototype.enableStencil = function () {
        this.stencil = true;
        this.dirtyId++;
        this.dirtyFormat++;
        return this;
    };
    /**
     * Resize the frame buffer
     * @param width - Width of the frame buffer to resize to
     * @param height - Height of the frame buffer to resize to
     */
    Framebuffer.prototype.resize = function (width, height) {
        width = Math.round(width);
        height = Math.round(height);
        if (width === this.width && height === this.height)
            { return; }
        this.width = width;
        this.height = height;
        this.dirtyId++;
        this.dirtySize++;
        for (var i = 0; i < this.colorTextures.length; i++) {
            var texture = this.colorTextures[i];
            var resolution = texture.resolution;
            // take into account the fact the texture may have a different resolution..
            texture.setSize(width / resolution, height / resolution);
        }
        if (this.depthTexture) {
            var resolution = this.depthTexture.resolution;
            this.depthTexture.setSize(width / resolution, height / resolution);
        }
    };
    /** Disposes WebGL resources that are connected to this geometry. */
    Framebuffer.prototype.dispose = function () {
        this.disposeRunner.emit(this, false);
    };
    /** Destroys and removes the depth texture added to this framebuffer. */
    Framebuffer.prototype.destroyDepthTexture = function () {
        if (this.depthTexture) {
            this.depthTexture.destroy();
            this.depthTexture = null;
            ++this.dirtyId;
            ++this.dirtyFormat;
        }
    };
    return Framebuffer;
}());

/**
 * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.
 *
 * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded
 * otherwise black rectangles will be drawn instead.
 *
 * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position
 * and rotation of the given Display Objects is ignored. For example:
 *
 * ```js
 * let renderer = PIXI.autoDetectRenderer();
 * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });
 * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);
 * let sprite = PIXI.Sprite.from("spinObj_01.png");
 *
 * sprite.position.x = 800/2;
 * sprite.position.y = 600/2;
 * sprite.anchor.x = 0.5;
 * sprite.anchor.y = 0.5;
 *
 * renderer.render(sprite, {renderTexture});
 * ```
 *
 * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0
 * you can clear the transform
 *
 * ```js
 *
 * sprite.setTransform()
 *
 * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });
 * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);
 *
 * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture
 * ```
 * @memberof PIXI
 */
var BaseRenderTexture = /** @class */ (function (_super) {
    __extends(BaseRenderTexture, _super);
    /**
     * @param options
     * @param {number} [options.width=100] - The width of the base render texture.
     * @param {number} [options.height=100] - The height of the base render texture.
     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}
     *   for possible values.
     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio
     *   of the texture being generated.
     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.
     */
    function BaseRenderTexture(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        if (typeof options === 'number') {
            /* eslint-disable prefer-rest-params */
            // Backward compatibility of signature
            var width = arguments[0];
            var height = arguments[1];
            var scaleMode = arguments[2];
            var resolution = arguments[3];
            options = { width: width, height: height, scaleMode: scaleMode, resolution: resolution };
            /* eslint-enable prefer-rest-params */
        }
        options.width = options.width || 100;
        options.height = options.height || 100;
        options.multisample = options.multisample !== undefined ? options.multisample : MSAA_QUALITY.NONE;
        _this = _super.call(this, null, options) || this;
        // Set defaults
        _this.mipmap = MIPMAP_MODES.OFF;
        _this.valid = true;
        _this.clearColor = [0, 0, 0, 0];
        _this.framebuffer = new Framebuffer(_this.realWidth, _this.realHeight)
            .addColorTexture(0, _this);
        _this.framebuffer.multisample = options.multisample;
        // TODO - could this be added the systems?
        _this.maskStack = [];
        _this.filterStack = [{}];
        return _this;
    }
    /**
     * Resizes the BaseRenderTexture.
     * @param desiredWidth - The desired width to resize to.
     * @param desiredHeight - The desired height to resize to.
     */
    BaseRenderTexture.prototype.resize = function (desiredWidth, desiredHeight) {
        this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution);
        this.setRealSize(this.framebuffer.width, this.framebuffer.height);
    };
    /**
     * Frees the texture and framebuffer from WebGL memory without destroying this texture object.
     * This means you can still use the texture later which will upload it to GPU
     * memory again.
     * @fires PIXI.BaseTexture#dispose
     */
    BaseRenderTexture.prototype.dispose = function () {
        this.framebuffer.dispose();
        _super.prototype.dispose.call(this);
    };
    /** Destroys this texture. */
    BaseRenderTexture.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.framebuffer.destroyDepthTexture();
        this.framebuffer = null;
    };
    return BaseRenderTexture;
}(BaseTexture));

/**
 * Stores a texture's frame in UV coordinates, in
 * which everything lies in the rectangle `[(0,0), (1,0),
 * (1,1), (0,1)]`.
 *
 * | Corner       | Coordinates |
 * |--------------|-------------|
 * | Top-Left     | `(x0,y0)`   |
 * | Top-Right    | `(x1,y1)`   |
 * | Bottom-Right | `(x2,y2)`   |
 * | Bottom-Left  | `(x3,y3)`   |
 * @protected
 * @memberof PIXI
 */
var TextureUvs = /** @class */ (function () {
    function TextureUvs() {
        this.x0 = 0;
        this.y0 = 0;
        this.x1 = 1;
        this.y1 = 0;
        this.x2 = 1;
        this.y2 = 1;
        this.x3 = 0;
        this.y3 = 1;
        this.uvsFloat32 = new Float32Array(8);
    }
    /**
     * Sets the texture Uvs based on the given frame information.
     * @protected
     * @param frame - The frame of the texture
     * @param baseFrame - The base frame of the texture
     * @param rotate - Rotation of frame, see {@link PIXI.groupD8}
     */
    TextureUvs.prototype.set = function (frame, baseFrame, rotate) {
        var tw = baseFrame.width;
        var th = baseFrame.height;
        if (rotate) {
            // width and height div 2 div baseFrame size
            var w2 = frame.width / 2 / tw;
            var h2 = frame.height / 2 / th;
            // coordinates of center
            var cX = (frame.x / tw) + w2;
            var cY = (frame.y / th) + h2;
            rotate = groupD8.add(rotate, groupD8.NW); // NW is top-left corner
            this.x0 = cX + (w2 * groupD8.uX(rotate));
            this.y0 = cY + (h2 * groupD8.uY(rotate));
            rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise
            this.x1 = cX + (w2 * groupD8.uX(rotate));
            this.y1 = cY + (h2 * groupD8.uY(rotate));
            rotate = groupD8.add(rotate, 2);
            this.x2 = cX + (w2 * groupD8.uX(rotate));
            this.y2 = cY + (h2 * groupD8.uY(rotate));
            rotate = groupD8.add(rotate, 2);
            this.x3 = cX + (w2 * groupD8.uX(rotate));
            this.y3 = cY + (h2 * groupD8.uY(rotate));
        }
        else {
            this.x0 = frame.x / tw;
            this.y0 = frame.y / th;
            this.x1 = (frame.x + frame.width) / tw;
            this.y1 = frame.y / th;
            this.x2 = (frame.x + frame.width) / tw;
            this.y2 = (frame.y + frame.height) / th;
            this.x3 = frame.x / tw;
            this.y3 = (frame.y + frame.height) / th;
        }
        this.uvsFloat32[0] = this.x0;
        this.uvsFloat32[1] = this.y0;
        this.uvsFloat32[2] = this.x1;
        this.uvsFloat32[3] = this.y1;
        this.uvsFloat32[4] = this.x2;
        this.uvsFloat32[5] = this.y2;
        this.uvsFloat32[6] = this.x3;
        this.uvsFloat32[7] = this.y3;
    };
    TextureUvs.prototype.toString = function () {
        return "[@pixi/core:TextureUvs "
            + ("x0=" + this.x0 + " y0=" + this.y0 + " ")
            + ("x1=" + this.x1 + " y1=" + this.y1 + " x2=" + this.x2 + " ")
            + ("y2=" + this.y2 + " x3=" + this.x3 + " y3=" + this.y3)
            + "]";
    };
    return TextureUvs;
}());

var DEFAULT_UVS = new TextureUvs();
/**
 * Used to remove listeners from WHITE and EMPTY Textures
 * @ignore
 */
function removeAllHandlers(tex) {
    tex.destroy = function _emptyDestroy() { };
    tex.on = function _emptyOn() { };
    tex.once = function _emptyOnce() { };
    tex.emit = function _emptyEmit() { };
}
/**
 * A texture stores the information that represents an image or part of an image.
 *
 * It cannot be added to the display list directly; instead use it as the texture for a Sprite.
 * If no frame is provided for a texture, then the whole image is used.
 *
 * You can directly create a texture from an image and then reuse it multiple times like this :
 *
 * ```js
 * let texture = PIXI.Texture.from('assets/image.png');
 * let sprite1 = new PIXI.Sprite(texture);
 * let sprite2 = new PIXI.Sprite(texture);
 * ```
 *
 * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:
 * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.
 *
 * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.
 * You can check for this by checking the sprite's _textureID property.
 * ```js
 * var texture = PIXI.Texture.from('assets/image.svg');
 * var sprite1 = new PIXI.Sprite(texture);
 * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file
 * ```
 * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.
 * @memberof PIXI
 * @typeParam R - The BaseTexture's Resource type.
 */
var Texture = /** @class */ (function (_super) {
    __extends(Texture, _super);
    /**
     * @param baseTexture - The base texture source to create the texture from
     * @param frame - The rectangle frame of the texture to show
     * @param orig - The area of original texture
     * @param trim - Trimmed rectangle of original texture
     * @param rotate - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}
     * @param anchor - Default anchor point used for sprite placement / rotation
     */
    function Texture(baseTexture, frame, orig, trim, rotate, anchor) {
        var _this = _super.call(this) || this;
        _this.noFrame = false;
        if (!frame) {
            _this.noFrame = true;
            frame = new Rectangle(0, 0, 1, 1);
        }
        if (baseTexture instanceof Texture) {
            baseTexture = baseTexture.baseTexture;
        }
        _this.baseTexture = baseTexture;
        _this._frame = frame;
        _this.trim = trim;
        _this.valid = false;
        _this._uvs = DEFAULT_UVS;
        _this.uvMatrix = null;
        _this.orig = orig || frame; // new Rectangle(0, 0, 1, 1);
        _this._rotate = Number(rotate || 0);
        if (rotate === true) {
            // this is old texturepacker legacy, some games/libraries are passing "true" for rotated textures
            _this._rotate = 2;
        }
        else if (_this._rotate % 2 !== 0) {
            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');
        }
        _this.defaultAnchor = anchor ? new Point(anchor.x, anchor.y) : new Point(0, 0);
        _this._updateID = 0;
        _this.textureCacheIds = [];
        if (!baseTexture.valid) {
            baseTexture.once('loaded', _this.onBaseTextureUpdated, _this);
        }
        else if (_this.noFrame) {
            // if there is no frame we should monitor for any base texture changes..
            if (baseTexture.valid) {
                _this.onBaseTextureUpdated(baseTexture);
            }
        }
        else {
            _this.frame = frame;
        }
        if (_this.noFrame) {
            baseTexture.on('update', _this.onBaseTextureUpdated, _this);
        }
        return _this;
    }
    /**
     * Updates this texture on the gpu.
     *
     * Calls the TextureResource update.
     *
     * If you adjusted `frame` manually, please call `updateUvs()` instead.
     */
    Texture.prototype.update = function () {
        if (this.baseTexture.resource) {
            this.baseTexture.resource.update();
        }
    };
    /**
     * Called when the base texture is updated
     * @protected
     * @param baseTexture - The base texture.
     */
    Texture.prototype.onBaseTextureUpdated = function (baseTexture) {
        if (this.noFrame) {
            if (!this.baseTexture.valid) {
                return;
            }
            this._frame.width = baseTexture.width;
            this._frame.height = baseTexture.height;
            this.valid = true;
            this.updateUvs();
        }
        else {
            // TODO this code looks confusing.. boo to abusing getters and setters!
            // if user gave us frame that has bigger size than resized texture it can be a problem
            this.frame = this._frame;
        }
        this.emit('update', this);
    };
    /**
     * Destroys this texture
     * @param [destroyBase=false] - Whether to destroy the base texture as well
     */
    Texture.prototype.destroy = function (destroyBase) {
        if (this.baseTexture) {
            if (destroyBase) {
                var resource = this.baseTexture.resource;
                // delete the texture if it exists in the texture cache..
                // this only needs to be removed if the base texture is actually destroyed too..
                if (resource && resource.url && TextureCache[resource.url]) {
                    Texture.removeFromCache(resource.url);
                }
                this.baseTexture.destroy();
            }
            this.baseTexture.off('loaded', this.onBaseTextureUpdated, this);
            this.baseTexture.off('update', this.onBaseTextureUpdated, this);
            this.baseTexture = null;
        }
        this._frame = null;
        this._uvs = null;
        this.trim = null;
        this.orig = null;
        this.valid = false;
        Texture.removeFromCache(this);
        this.textureCacheIds = null;
    };
    /**
     * Creates a new texture object that acts the same as this one.
     * @returns - The new texture
     */
    Texture.prototype.clone = function () {
        var clonedFrame = this._frame.clone();
        var clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone();
        var clonedTexture = new Texture(this.baseTexture, !this.noFrame && clonedFrame, clonedOrig, this.trim && this.trim.clone(), this.rotate, this.defaultAnchor);
        if (this.noFrame) {
            clonedTexture._frame = clonedFrame;
        }
        return clonedTexture;
    };
    /**
     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.
     * Call it after changing the frame
     */
    Texture.prototype.updateUvs = function () {
        if (this._uvs === DEFAULT_UVS) {
            this._uvs = new TextureUvs();
        }
        this._uvs.set(this._frame, this.baseTexture, this.rotate);
        this._updateID++;
    };
    /**
     * Helper function that creates a new Texture based on the source you provide.
     * The source can be - frame id, image url, video url, canvas element, video element, base texture
     * @param {string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source -
     *        Source or array of sources to create texture from
     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.
     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id
     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.
     * @returns {PIXI.Texture} The newly created texture
     */
    Texture.from = function (source, options, strict) {
        if (options === void 0) { options = {}; }
        if (strict === void 0) { strict = settings.STRICT_TEXTURE_CACHE; }
        var isFrame = typeof source === 'string';
        var cacheId = null;
        if (isFrame) {
            cacheId = source;
        }
        else if (source instanceof BaseTexture) {
            if (!source.cacheId) {
                var prefix = (options && options.pixiIdPrefix) || 'pixiid';
                source.cacheId = prefix + "-" + uid();
                BaseTexture.addToCache(source, source.cacheId);
            }
            cacheId = source.cacheId;
        }
        else {
            if (!source._pixiId) {
                var prefix = (options && options.pixiIdPrefix) || 'pixiid';
                source._pixiId = prefix + "_" + uid();
            }
            cacheId = source._pixiId;
        }
        var texture = TextureCache[cacheId];
        // Strict-mode rejects invalid cacheIds
        if (isFrame && strict && !texture) {
            throw new Error("The cacheId \"" + cacheId + "\" does not exist in TextureCache.");
        }
        if (!texture && !(source instanceof BaseTexture)) {
            if (!options.resolution) {
                options.resolution = getResolutionOfUrl(source);
            }
            texture = new Texture(new BaseTexture(source, options));
            texture.baseTexture.cacheId = cacheId;
            BaseTexture.addToCache(texture.baseTexture, cacheId);
            Texture.addToCache(texture, cacheId);
        }
        else if (!texture && (source instanceof BaseTexture)) {
            texture = new Texture(source);
            Texture.addToCache(texture, cacheId);
        }
        // lets assume its a base texture!
        return texture;
    };
    /**
     * Useful for loading textures via URLs. Use instead of `Texture.from` because
     * it does a better job of handling failed URLs more effectively. This also ignores
     * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.
     * @param url - The remote URL or array of URLs to load.
     * @param options - Optional options to include
     * @returns - A Promise that resolves to a Texture.
     */
    Texture.fromURL = function (url, options) {
        var resourceOptions = Object.assign({ autoLoad: false }, options === null || options === void 0 ? void 0 : options.resourceOptions);
        var texture = Texture.from(url, Object.assign({ resourceOptions: resourceOptions }, options), false);
        var resource = texture.baseTexture.resource;
        // The texture was already loaded
        if (texture.baseTexture.valid) {
            return Promise.resolve(texture);
        }
        // Manually load the texture, this should allow users to handle load errors
        return resource.load().then(function () { return Promise.resolve(texture); });
    };
    /**
     * Create a new Texture with a BufferResource from a Float32Array.
     * RGBA values are floats from 0 to 1.
     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data
     *        is provided, a new Float32Array is created.
     * @param width - Width of the resource
     * @param height - Height of the resource
     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.
     * @returns - The resulting new BaseTexture
     */
    Texture.fromBuffer = function (buffer, width, height, options) {
        return new Texture(BaseTexture.fromBuffer(buffer, width, height, options));
    };
    /**
     * Create a texture from a source and add to the cache.
     * @param {HTMLImageElement|HTMLCanvasElement|string} source - The input source.
     * @param imageUrl - File name of texture, for cache and resolving resolution.
     * @param name - Human readable name for the texture cache. If no name is
     *        specified, only `imageUrl` will be used as the cache ID.
     * @param options
     * @returns - Output texture
     */
    Texture.fromLoader = function (source, imageUrl, name, options) {
        var baseTexture = new BaseTexture(source, Object.assign({
            scaleMode: settings.SCALE_MODE,
            resolution: getResolutionOfUrl(imageUrl),
        }, options));
        var resource = baseTexture.resource;
        if (resource instanceof ImageResource) {
            resource.url = imageUrl;
        }
        var texture = new Texture(baseTexture);
        // No name, use imageUrl instead
        if (!name) {
            name = imageUrl;
        }
        // lets also add the frame to pixi's global cache for 'fromLoader' function
        BaseTexture.addToCache(texture.baseTexture, name);
        Texture.addToCache(texture, name);
        // also add references by url if they are different.
        if (name !== imageUrl) {
            BaseTexture.addToCache(texture.baseTexture, imageUrl);
            Texture.addToCache(texture, imageUrl);
        }
        // Generally images are valid right away
        if (texture.baseTexture.valid) {
            return Promise.resolve(texture);
        }
        // SVG assets need to be parsed async, let's wait
        return new Promise(function (resolve) {
            texture.baseTexture.once('loaded', function () { return resolve(texture); });
        });
    };
    /**
     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.
     * @param texture - The Texture to add to the cache.
     * @param id - The id that the Texture will be stored against.
     */
    Texture.addToCache = function (texture, id) {
        if (id) {
            if (texture.textureCacheIds.indexOf(id) === -1) {
                texture.textureCacheIds.push(id);
            }
            if (TextureCache[id]) {
                // eslint-disable-next-line no-console
                console.warn("Texture added to the cache with an id [" + id + "] that already had an entry");
            }
            TextureCache[id] = texture;
        }
    };
    /**
     * Remove a Texture from the global TextureCache.
     * @param texture - id of a Texture to be removed, or a Texture instance itself
     * @returns - The Texture that was removed
     */
    Texture.removeFromCache = function (texture) {
        if (typeof texture === 'string') {
            var textureFromCache = TextureCache[texture];
            if (textureFromCache) {
                var index = textureFromCache.textureCacheIds.indexOf(texture);
                if (index > -1) {
                    textureFromCache.textureCacheIds.splice(index, 1);
                }
                delete TextureCache[texture];
                return textureFromCache;
            }
        }
        else if (texture && texture.textureCacheIds) {
            for (var i = 0; i < texture.textureCacheIds.length; ++i) {
                // Check that texture matches the one being passed in before deleting it from the cache.
                if (TextureCache[texture.textureCacheIds[i]] === texture) {
                    delete TextureCache[texture.textureCacheIds[i]];
                }
            }
            texture.textureCacheIds.length = 0;
            return texture;
        }
        return null;
    };
    Object.defineProperty(Texture.prototype, "resolution", {
        /**
         * Returns resolution of baseTexture
         * @readonly
         */
        get: function () {
            return this.baseTexture.resolution;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Texture.prototype, "frame", {
        /**
         * The frame specifies the region of the base texture that this texture uses.
         * Please call `updateUvs()` after you change coordinates of `frame` manually.
         */
        get: function () {
            return this._frame;
        },
        set: function (frame) {
            this._frame = frame;
            this.noFrame = false;
            var x = frame.x, y = frame.y, width = frame.width, height = frame.height;
            var xNotFit = x + width > this.baseTexture.width;
            var yNotFit = y + height > this.baseTexture.height;
            if (xNotFit || yNotFit) {
                var relationship = xNotFit && yNotFit ? 'and' : 'or';
                var errorX = "X: " + x + " + " + width + " = " + (x + width) + " > " + this.baseTexture.width;
                var errorY = "Y: " + y + " + " + height + " = " + (y + height) + " > " + this.baseTexture.height;
                throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '
                    + (errorX + " " + relationship + " " + errorY));
            }
            this.valid = width && height && this.baseTexture.valid;
            if (!this.trim && !this.rotate) {
                this.orig = frame;
            }
            if (this.valid) {
                this.updateUvs();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Texture.prototype, "rotate", {
        /**
         * Indicates whether the texture is rotated inside the atlas
         * set to 2 to compensate for texture packer rotation
         * set to 6 to compensate for spine packer rotation
         * can be used to rotate or mirror sprites
         * See {@link PIXI.groupD8} for explanation
         */
        get: function () {
            return this._rotate;
        },
        set: function (rotate) {
            this._rotate = rotate;
            if (this.valid) {
                this.updateUvs();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Texture.prototype, "width", {
        /** The width of the Texture in pixels. */
        get: function () {
            return this.orig.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Texture.prototype, "height", {
        /** The height of the Texture in pixels. */
        get: function () {
            return this.orig.height;
        },
        enumerable: false,
        configurable: true
    });
    /** Utility function for BaseTexture|Texture cast. */
    Texture.prototype.castToBaseTexture = function () {
        return this.baseTexture;
    };
    Object.defineProperty(Texture, "EMPTY", {
        /** An empty texture, used often to not have to create multiple empty textures. Can not be destroyed. */
        get: function () {
            if (!Texture._EMPTY) {
                Texture._EMPTY = new Texture(new BaseTexture());
                removeAllHandlers(Texture._EMPTY);
                removeAllHandlers(Texture._EMPTY.baseTexture);
            }
            return Texture._EMPTY;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Texture, "WHITE", {
        /** A white texture of 16x16 size, used for graphics and other things Can not be destroyed. */
        get: function () {
            if (!Texture._WHITE) {
                var canvas = settings.ADAPTER.createCanvas(16, 16);
                var context = canvas.getContext('2d');
                canvas.width = 16;
                canvas.height = 16;
                context.fillStyle = 'white';
                context.fillRect(0, 0, 16, 16);
                Texture._WHITE = new Texture(BaseTexture.from(canvas));
                removeAllHandlers(Texture._WHITE);
                removeAllHandlers(Texture._WHITE.baseTexture);
            }
            return Texture._WHITE;
        },
        enumerable: false,
        configurable: true
    });
    return Texture;
}(eventemitter3));

/**
 * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.
 *
 * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded
 * otherwise black rectangles will be drawn instead.
 *
 * __Hint-2__: The actual memory allocation will happen on first render.
 * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.
 *
 * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:
 *
 * ```js
 * let renderer = PIXI.autoDetectRenderer();
 * let renderTexture = PIXI.RenderTexture.create({ width: 800, height: 600 });
 * let sprite = PIXI.Sprite.from("spinObj_01.png");
 *
 * sprite.position.x = 800/2;
 * sprite.position.y = 600/2;
 * sprite.anchor.x = 0.5;
 * sprite.anchor.y = 0.5;
 *
 * renderer.render(sprite, {renderTexture});
 * ```
 * Note that you should not create a new renderer, but reuse the same one as the rest of the application.
 *
 * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0
 * you can clear the transform
 *
 * ```js
 *
 * sprite.setTransform()
 *
 * let renderTexture = new PIXI.RenderTexture.create({ width: 100, height: 100 });
 *
 * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture
 * ```
 * @memberof PIXI
 */
var RenderTexture = /** @class */ (function (_super) {
    __extends(RenderTexture, _super);
    /**
     * @param baseRenderTexture - The base texture object that this texture uses.
     * @param frame - The rectangle frame of the texture to show.
     */
    function RenderTexture(baseRenderTexture, frame) {
        var _this = _super.call(this, baseRenderTexture, frame) || this;
        _this.valid = true;
        _this.filterFrame = null;
        _this.filterPoolKey = null;
        _this.updateUvs();
        return _this;
    }
    Object.defineProperty(RenderTexture.prototype, "framebuffer", {
        /**
         * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.
         * @readonly
         */
        get: function () {
            return this.baseTexture.framebuffer;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RenderTexture.prototype, "multisample", {
        /**
         * Shortcut to `this.framebuffer.multisample`.
         * @default PIXI.MSAA_QUALITY.NONE
         */
        get: function () {
            return this.framebuffer.multisample;
        },
        set: function (value) {
            this.framebuffer.multisample = value;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Resizes the RenderTexture.
     * @param desiredWidth - The desired width to resize to.
     * @param desiredHeight - The desired height to resize to.
     * @param resizeBaseTexture - Should the baseTexture.width and height values be resized as well?
     */
    RenderTexture.prototype.resize = function (desiredWidth, desiredHeight, resizeBaseTexture) {
        if (resizeBaseTexture === void 0) { resizeBaseTexture = true; }
        var resolution = this.baseTexture.resolution;
        var width = Math.round(desiredWidth * resolution) / resolution;
        var height = Math.round(desiredHeight * resolution) / resolution;
        // TODO - could be not required..
        this.valid = (width > 0 && height > 0);
        this._frame.width = this.orig.width = width;
        this._frame.height = this.orig.height = height;
        if (resizeBaseTexture) {
            this.baseTexture.resize(width, height);
        }
        this.updateUvs();
    };
    /**
     * Changes the resolution of baseTexture, but does not change framebuffer size.
     * @param resolution - The new resolution to apply to RenderTexture
     */
    RenderTexture.prototype.setResolution = function (resolution) {
        var baseTexture = this.baseTexture;
        if (baseTexture.resolution === resolution) {
            return;
        }
        baseTexture.setResolution(resolution);
        this.resize(baseTexture.width, baseTexture.height, false);
    };
    RenderTexture.create = function (options) {
        var arguments$1 = arguments;

        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments$1[_i];
        }
        // @deprecated fallback, old-style: create(width, height, scaleMode, resolution)
        if (typeof options === 'number') {
            deprecation('6.0.0', 'Arguments (width, height, scaleMode, resolution) have been deprecated.');
            /* eslint-disable prefer-rest-params */
            options = {
                width: options,
                height: rest[0],
                scaleMode: rest[1],
                resolution: rest[2],
            };
            /* eslint-enable prefer-rest-params */
        }
        return new RenderTexture(new BaseRenderTexture(options));
    };
    return RenderTexture;
}(Texture));

/**
 * Texture pool, used by FilterSystem and plugins.
 *
 * Stores collection of temporary pow2 or screen-sized renderTextures
 *
 * If you use custom RenderTexturePool for your filters, you can use methods
 * `getFilterTexture` and `returnFilterTexture` same as in
 * @memberof PIXI
 */
var RenderTexturePool = /** @class */ (function () {
    /**
     * @param textureOptions - options that will be passed to BaseRenderTexture constructor
     * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.
     */
    function RenderTexturePool(textureOptions) {
        this.texturePool = {};
        this.textureOptions = textureOptions || {};
        this.enableFullScreen = false;
        this._pixelsWidth = 0;
        this._pixelsHeight = 0;
    }
    /**
     * Creates texture with params that were specified in pool constructor.
     * @param realWidth - Width of texture in pixels.
     * @param realHeight - Height of texture in pixels.
     * @param multisample - Number of samples of the framebuffer.
     */
    RenderTexturePool.prototype.createTexture = function (realWidth, realHeight, multisample) {
        if (multisample === void 0) { multisample = MSAA_QUALITY.NONE; }
        var baseRenderTexture = new BaseRenderTexture(Object.assign({
            width: realWidth,
            height: realHeight,
            resolution: 1,
            multisample: multisample,
        }, this.textureOptions));
        return new RenderTexture(baseRenderTexture);
    };
    /**
     * Gets a Power-of-Two render texture or fullScreen texture
     * @param minWidth - The minimum width of the render texture.
     * @param minHeight - The minimum height of the render texture.
     * @param resolution - The resolution of the render texture.
     * @param multisample - Number of samples of the render texture.
     * @returns The new render texture.
     */
    RenderTexturePool.prototype.getOptimalTexture = function (minWidth, minHeight, resolution, multisample) {
        if (resolution === void 0) { resolution = 1; }
        if (multisample === void 0) { multisample = MSAA_QUALITY.NONE; }
        var key;
        minWidth = Math.ceil((minWidth * resolution) - 1e-6);
        minHeight = Math.ceil((minHeight * resolution) - 1e-6);
        if (!this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight) {
            minWidth = nextPow2(minWidth);
            minHeight = nextPow2(minHeight);
            key = (((minWidth & 0xFFFF) << 16) | (minHeight & 0xFFFF)) >>> 0;
            if (multisample > 1) {
                key += multisample * 0x100000000;
            }
        }
        else {
            key = multisample > 1 ? -multisample : -1;
        }
        if (!this.texturePool[key]) {
            this.texturePool[key] = [];
        }
        var renderTexture = this.texturePool[key].pop();
        if (!renderTexture) {
            renderTexture = this.createTexture(minWidth, minHeight, multisample);
        }
        renderTexture.filterPoolKey = key;
        renderTexture.setResolution(resolution);
        return renderTexture;
    };
    /**
     * Gets extra texture of the same size as input renderTexture
     *
     * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`
     * @param input - renderTexture from which size and resolution will be copied
     * @param resolution - override resolution of the renderTexture
     *  It overrides, it does not multiply
     * @param multisample - number of samples of the renderTexture
     */
    RenderTexturePool.prototype.getFilterTexture = function (input, resolution, multisample) {
        var filterTexture = this.getOptimalTexture(input.width, input.height, resolution || input.resolution, multisample || MSAA_QUALITY.NONE);
        filterTexture.filterFrame = input.filterFrame;
        return filterTexture;
    };
    /**
     * Place a render texture back into the pool.
     * @param renderTexture - The renderTexture to free
     */
    RenderTexturePool.prototype.returnTexture = function (renderTexture) {
        var key = renderTexture.filterPoolKey;
        renderTexture.filterFrame = null;
        this.texturePool[key].push(renderTexture);
    };
    /**
     * Alias for returnTexture, to be compliant with FilterSystem interface.
     * @param renderTexture - The renderTexture to free
     */
    RenderTexturePool.prototype.returnFilterTexture = function (renderTexture) {
        this.returnTexture(renderTexture);
    };
    /**
     * Clears the pool.
     * @param destroyTextures - Destroy all stored textures.
     */
    RenderTexturePool.prototype.clear = function (destroyTextures) {
        destroyTextures = destroyTextures !== false;
        if (destroyTextures) {
            for (var i in this.texturePool) {
                var textures = this.texturePool[i];
                if (textures) {
                    for (var j = 0; j < textures.length; j++) {
                        textures[j].destroy(true);
                    }
                }
            }
        }
        this.texturePool = {};
    };
    /**
     * If screen size was changed, drops all screen-sized textures,
     * sets new screen size, sets `enableFullScreen` to true
     *
     * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`
     * @param size - Initial size of screen.
     */
    RenderTexturePool.prototype.setScreenSize = function (size) {
        if (size.width === this._pixelsWidth
            && size.height === this._pixelsHeight) {
            return;
        }
        this.enableFullScreen = size.width > 0 && size.height > 0;
        for (var i in this.texturePool) {
            if (!(Number(i) < 0)) {
                continue;
            }
            var textures = this.texturePool[i];
            if (textures) {
                for (var j = 0; j < textures.length; j++) {
                    textures[j].destroy(true);
                }
            }
            this.texturePool[i] = [];
        }
        this._pixelsWidth = size.width;
        this._pixelsHeight = size.height;
    };
    /**
     * Key that is used to store fullscreen renderTextures in a pool
     * @constant
     */
    RenderTexturePool.SCREEN_KEY = -1;
    return RenderTexturePool;
}());

/* eslint-disable max-len */
/**
 * Holds the information for a single attribute structure required to render geometry.
 *
 * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}
 * This can include anything from positions, uvs, normals, colors etc.
 * @memberof PIXI
 */
var Attribute = /** @class */ (function () {
    /**
     * @param buffer - the id of the buffer that this attribute will look for
     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.
     * @param normalized - should the data be normalized.
     * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available
     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)
     * @param [start=0] - How far into the array to start reading values (used for interleaving data)
     * @param [instance=false] - Whether the geometry is instanced.
     */
    function Attribute(buffer, size, normalized, type, stride, start, instance) {
        if (size === void 0) { size = 0; }
        if (normalized === void 0) { normalized = false; }
        if (type === void 0) { type = TYPES.FLOAT; }
        this.buffer = buffer;
        this.size = size;
        this.normalized = normalized;
        this.type = type;
        this.stride = stride;
        this.start = start;
        this.instance = instance;
    }
    /** Destroys the Attribute. */
    Attribute.prototype.destroy = function () {
        this.buffer = null;
    };
    /**
     * Helper function that creates an Attribute based on the information provided
     * @param buffer - the id of the buffer that this attribute will look for
     * @param [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
     * @param [normalized=false] - should the data be normalized.
     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available
     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)
     * @returns - A new {@link PIXI.Attribute} based on the information provided
     */
    Attribute.from = function (buffer, size, normalized, type, stride) {
        return new Attribute(buffer, size, normalized, type, stride);
    };
    return Attribute;
}());

var UID$4 = 0;
/**
 * A wrapper for data so that it can be used and uploaded by WebGL
 * @memberof PIXI
 */
var Buffer = /** @class */ (function () {
    /**
     * @param {PIXI.IArrayBuffer} data - the data to store in the buffer.
     * @param _static - `true` for static buffer
     * @param index - `true` for index buffer
     */
    function Buffer(data, _static, index) {
        if (_static === void 0) { _static = true; }
        if (index === void 0) { index = false; }
        this.data = (data || new Float32Array(1));
        this._glBuffers = {};
        this._updateID = 0;
        this.index = index;
        this.static = _static;
        this.id = UID$4++;
        this.disposeRunner = new Runner('disposeBuffer');
    }
    // TODO could explore flagging only a partial upload?
    /**
     * Flags this buffer as requiring an upload to the GPU.
     * @param {PIXI.IArrayBuffer|number[]} [data] - the data to update in the buffer.
     */
    Buffer.prototype.update = function (data) {
        if (data instanceof Array) {
            data = new Float32Array(data);
        }
        this.data = data || this.data;
        this._updateID++;
    };
    /** Disposes WebGL resources that are connected to this geometry. */
    Buffer.prototype.dispose = function () {
        this.disposeRunner.emit(this, false);
    };
    /** Destroys the buffer. */
    Buffer.prototype.destroy = function () {
        this.dispose();
        this.data = null;
    };
    Object.defineProperty(Buffer.prototype, "index", {
        get: function () {
            return this.type === BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;
        },
        /**
         * Flags whether this is an index buffer.
         *
         * Index buffers are of type `ELEMENT_ARRAY_BUFFER`. Note that setting this property to false will make
         * the buffer of type `ARRAY_BUFFER`.
         *
         * For backwards compatibility.
         */
        set: function (value) {
            this.type = value ? BUFFER_TYPE.ELEMENT_ARRAY_BUFFER : BUFFER_TYPE.ARRAY_BUFFER;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Helper function that creates a buffer based on an array or TypedArray
     * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.
     * @returns - A new Buffer based on the data provided.
     */
    Buffer.from = function (data) {
        if (data instanceof Array) {
            data = new Float32Array(data);
        }
        return new Buffer(data);
    };
    return Buffer;
}());

/* eslint-disable object-shorthand */
var map$1 = {
    Float32Array: Float32Array,
    Uint32Array: Uint32Array,
    Int32Array: Int32Array,
    Uint8Array: Uint8Array,
};
function core_interleaveTypedArrays(arrays, sizes) {
    var outSize = 0;
    var stride = 0;
    var views = {};
    for (var i = 0; i < arrays.length; i++) {
        stride += sizes[i];
        outSize += arrays[i].length;
    }
    var buffer = new ArrayBuffer(outSize * 4);
    var out = null;
    var littleOffset = 0;
    for (var i = 0; i < arrays.length; i++) {
        var size = sizes[i];
        var array = arrays[i];
        var type = getBufferType(array);
        if (!views[type]) {
            views[type] = new map$1[type](buffer);
        }
        out = views[type];
        for (var j = 0; j < array.length; j++) {
            var indexStart = ((j / size | 0) * stride) + littleOffset;
            var index = j % size;
            out[indexStart + index] = array[j];
        }
        littleOffset += size;
    }
    return new Float32Array(buffer);
}

var byteSizeMap$1 = { 5126: 4, 5123: 2, 5121: 1 };
var UID$3 = 0;
/* eslint-disable object-shorthand */
var core_map = {
    Float32Array: Float32Array,
    Uint32Array: Uint32Array,
    Int32Array: Int32Array,
    Uint8Array: Uint8Array,
    Uint16Array: Uint16Array,
};
/* eslint-disable max-len */
/**
 * The Geometry represents a model. It consists of two components:
 * - GeometryStyle - The structure of the model such as the attributes layout
 * - GeometryData - the data of the model - this consists of buffers.
 * This can include anything from positions, uvs, normals, colors etc.
 *
 * Geometry can be defined without passing in a style or data if required (thats how I prefer!)
 *
 * ```js
 * let geometry = new PIXI.Geometry();
 *
 * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);
 * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)
 * geometry.addIndex([0,1,2,1,3,2])
 * ```
 * @memberof PIXI
 */
var Geometry = /** @class */ (function () {
    /**
     * @param buffers - An array of buffers. optional.
     * @param attributes - Of the geometry, optional structure of the attributes layout
     */
    function Geometry(buffers, attributes) {
        if (buffers === void 0) { buffers = []; }
        if (attributes === void 0) { attributes = {}; }
        this.buffers = buffers;
        this.indexBuffer = null;
        this.attributes = attributes;
        this.glVertexArrayObjects = {};
        this.id = UID$3++;
        this.instanced = false;
        this.instanceCount = 1;
        this.disposeRunner = new Runner('disposeGeometry');
        this.refCount = 0;
    }
    /**
     *
     * Adds an attribute to the geometry
     * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!
     * @param id - the name of the attribute (matching up to a shader)
     * @param {PIXI.Buffer|number[]} buffer - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.
     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
     * @param normalized - should the data be normalized.
     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available
     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)
     * @param [start=0] - How far into the array to start reading values (used for interleaving data)
     * @param instance - Instancing flag
     * @returns - Returns self, useful for chaining.
     */
    Geometry.prototype.addAttribute = function (id, buffer, size, normalized, type, stride, start, instance) {
        if (size === void 0) { size = 0; }
        if (normalized === void 0) { normalized = false; }
        if (instance === void 0) { instance = false; }
        if (!buffer) {
            throw new Error('You must pass a buffer when creating an attribute');
        }
        // check if this is a buffer!
        if (!(buffer instanceof Buffer)) {
            // its an array!
            if (buffer instanceof Array) {
                buffer = new Float32Array(buffer);
            }
            buffer = new Buffer(buffer);
        }
        var ids = id.split('|');
        if (ids.length > 1) {
            for (var i = 0; i < ids.length; i++) {
                this.addAttribute(ids[i], buffer, size, normalized, type);
            }
            return this;
        }
        var bufferIndex = this.buffers.indexOf(buffer);
        if (bufferIndex === -1) {
            this.buffers.push(buffer);
            bufferIndex = this.buffers.length - 1;
        }
        this.attributes[id] = new Attribute(bufferIndex, size, normalized, type, stride, start, instance);
        // assuming that if there is instanced data then this will be drawn with instancing!
        this.instanced = this.instanced || instance;
        return this;
    };
    /**
     * Returns the requested attribute.
     * @param id - The name of the attribute required
     * @returns - The attribute requested.
     */
    Geometry.prototype.getAttribute = function (id) {
        return this.attributes[id];
    };
    /**
     * Returns the requested buffer.
     * @param id - The name of the buffer required.
     * @returns - The buffer requested.
     */
    Geometry.prototype.getBuffer = function (id) {
        return this.buffers[this.getAttribute(id).buffer];
    };
    /**
     *
     * Adds an index buffer to the geometry
     * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.
     * @param {PIXI.Buffer|number[]} [buffer] - The buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.
     * @returns - Returns self, useful for chaining.
     */
    Geometry.prototype.addIndex = function (buffer) {
        if (!(buffer instanceof Buffer)) {
            // its an array!
            if (buffer instanceof Array) {
                buffer = new Uint16Array(buffer);
            }
            buffer = new Buffer(buffer);
        }
        buffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;
        this.indexBuffer = buffer;
        if (this.buffers.indexOf(buffer) === -1) {
            this.buffers.push(buffer);
        }
        return this;
    };
    /**
     * Returns the index buffer
     * @returns - The index buffer.
     */
    Geometry.prototype.getIndex = function () {
        return this.indexBuffer;
    };
    /**
     * This function modifies the structure so that all current attributes become interleaved into a single buffer
     * This can be useful if your model remains static as it offers a little performance boost
     * @returns - Returns self, useful for chaining.
     */
    Geometry.prototype.interleave = function () {
        // a simple check to see if buffers are already interleaved..
        if (this.buffers.length === 1 || (this.buffers.length === 2 && this.indexBuffer))
            { return this; }
        // assume already that no buffers are interleaved
        var arrays = [];
        var sizes = [];
        var interleavedBuffer = new Buffer();
        var i;
        for (i in this.attributes) {
            var attribute = this.attributes[i];
            var buffer = this.buffers[attribute.buffer];
            arrays.push(buffer.data);
            sizes.push((attribute.size * byteSizeMap$1[attribute.type]) / 4);
            attribute.buffer = 0;
        }
        interleavedBuffer.data = core_interleaveTypedArrays(arrays, sizes);
        for (i = 0; i < this.buffers.length; i++) {
            if (this.buffers[i] !== this.indexBuffer) {
                this.buffers[i].destroy();
            }
        }
        this.buffers = [interleavedBuffer];
        if (this.indexBuffer) {
            this.buffers.push(this.indexBuffer);
        }
        return this;
    };
    /** Get the size of the geometries, in vertices. */
    Geometry.prototype.getSize = function () {
        for (var i in this.attributes) {
            var attribute = this.attributes[i];
            var buffer = this.buffers[attribute.buffer];
            return buffer.data.length / ((attribute.stride / 4) || attribute.size);
        }
        return 0;
    };
    /** Disposes WebGL resources that are connected to this geometry. */
    Geometry.prototype.dispose = function () {
        this.disposeRunner.emit(this, false);
    };
    /** Destroys the geometry. */
    Geometry.prototype.destroy = function () {
        this.dispose();
        this.buffers = null;
        this.indexBuffer = null;
        this.attributes = null;
    };
    /**
     * Returns a clone of the geometry.
     * @returns - A new clone of this geometry.
     */
    Geometry.prototype.clone = function () {
        var geometry = new Geometry();
        for (var i = 0; i < this.buffers.length; i++) {
            geometry.buffers[i] = new Buffer(this.buffers[i].data.slice(0));
        }
        for (var i in this.attributes) {
            var attrib = this.attributes[i];
            geometry.attributes[i] = new Attribute(attrib.buffer, attrib.size, attrib.normalized, attrib.type, attrib.stride, attrib.start, attrib.instance);
        }
        if (this.indexBuffer) {
            geometry.indexBuffer = geometry.buffers[this.buffers.indexOf(this.indexBuffer)];
            geometry.indexBuffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;
        }
        return geometry;
    };
    /**
     * Merges an array of geometries into a new single one.
     *
     * Geometry attribute styles must match for this operation to work.
     * @param geometries - array of geometries to merge
     * @returns - Shiny new geometry!
     */
    Geometry.merge = function (geometries) {
        // todo add a geometry check!
        // also a size check.. cant be too big!]
        var geometryOut = new Geometry();
        var arrays = [];
        var sizes = [];
        var offsets = [];
        var geometry;
        // pass one.. get sizes..
        for (var i = 0; i < geometries.length; i++) {
            geometry = geometries[i];
            for (var j = 0; j < geometry.buffers.length; j++) {
                sizes[j] = sizes[j] || 0;
                sizes[j] += geometry.buffers[j].data.length;
                offsets[j] = 0;
            }
        }
        // build the correct size arrays..
        for (var i = 0; i < geometry.buffers.length; i++) {
            // TODO types!
            arrays[i] = new core_map[getBufferType(geometry.buffers[i].data)](sizes[i]);
            geometryOut.buffers[i] = new Buffer(arrays[i]);
        }
        // pass to set data..
        for (var i = 0; i < geometries.length; i++) {
            geometry = geometries[i];
            for (var j = 0; j < geometry.buffers.length; j++) {
                arrays[j].set(geometry.buffers[j].data, offsets[j]);
                offsets[j] += geometry.buffers[j].data.length;
            }
        }
        geometryOut.attributes = geometry.attributes;
        if (geometry.indexBuffer) {
            geometryOut.indexBuffer = geometryOut.buffers[geometry.buffers.indexOf(geometry.indexBuffer)];
            geometryOut.indexBuffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;
            var offset = 0;
            var stride = 0;
            var offset2 = 0;
            var bufferIndexToCount = 0;
            // get a buffer
            for (var i = 0; i < geometry.buffers.length; i++) {
                if (geometry.buffers[i] !== geometry.indexBuffer) {
                    bufferIndexToCount = i;
                    break;
                }
            }
            // figure out the stride of one buffer..
            for (var i in geometry.attributes) {
                var attribute = geometry.attributes[i];
                if ((attribute.buffer | 0) === bufferIndexToCount) {
                    stride += ((attribute.size * byteSizeMap$1[attribute.type]) / 4);
                }
            }
            // time to off set all indexes..
            for (var i = 0; i < geometries.length; i++) {
                var indexBufferData = geometries[i].indexBuffer.data;
                for (var j = 0; j < indexBufferData.length; j++) {
                    geometryOut.indexBuffer.data[j + offset2] += offset;
                }
                offset += geometries[i].buffers[bufferIndexToCount].data.length / (stride);
                offset2 += indexBufferData.length;
            }
        }
        return geometryOut;
    };
    return Geometry;
}());

/**
 * Helper class to create a quad
 * @memberof PIXI
 */
var Quad = /** @class */ (function (_super) {
    __extends(Quad, _super);
    function Quad() {
        var _this = _super.call(this) || this;
        _this.addAttribute('aVertexPosition', new Float32Array([
            0, 0,
            1, 0,
            1, 1,
            0, 1 ]))
            .addIndex([0, 1, 3, 2]);
        return _this;
    }
    return Quad;
}(Geometry));

/**
 * Helper class to create a quad with uvs like in v4
 * @memberof PIXI
 */
var QuadUv = /** @class */ (function (_super) {
    __extends(QuadUv, _super);
    function QuadUv() {
        var _this = _super.call(this) || this;
        _this.vertices = new Float32Array([
            -1, -1,
            1, -1,
            1, 1,
            -1, 1 ]);
        _this.uvs = new Float32Array([
            0, 0,
            1, 0,
            1, 1,
            0, 1 ]);
        _this.vertexBuffer = new Buffer(_this.vertices);
        _this.uvBuffer = new Buffer(_this.uvs);
        _this.addAttribute('aVertexPosition', _this.vertexBuffer)
            .addAttribute('aTextureCoord', _this.uvBuffer)
            .addIndex([0, 1, 2, 0, 2, 3]);
        return _this;
    }
    /**
     * Maps two Rectangle to the quad.
     * @param targetTextureFrame - The first rectangle
     * @param destinationFrame - The second rectangle
     * @returns - Returns itself.
     */
    QuadUv.prototype.map = function (targetTextureFrame, destinationFrame) {
        var x = 0; // destinationFrame.x / targetTextureFrame.width;
        var y = 0; // destinationFrame.y / targetTextureFrame.height;
        this.uvs[0] = x;
        this.uvs[1] = y;
        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);
        this.uvs[3] = y;
        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);
        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);
        this.uvs[6] = x;
        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);
        x = destinationFrame.x;
        y = destinationFrame.y;
        this.vertices[0] = x;
        this.vertices[1] = y;
        this.vertices[2] = x + destinationFrame.width;
        this.vertices[3] = y;
        this.vertices[4] = x + destinationFrame.width;
        this.vertices[5] = y + destinationFrame.height;
        this.vertices[6] = x;
        this.vertices[7] = y + destinationFrame.height;
        this.invalidate();
        return this;
    };
    /**
     * Legacy upload method, just marks buffers dirty.
     * @returns - Returns itself.
     */
    QuadUv.prototype.invalidate = function () {
        this.vertexBuffer._updateID++;
        this.uvBuffer._updateID++;
        return this;
    };
    return QuadUv;
}(Geometry));

var UID$2 = 0;
/**
 * Uniform group holds uniform map and some ID's for work
 *
 * `UniformGroup` has two modes:
 *
 * 1: Normal mode
 * Normal mode will upload the uniforms with individual function calls as required
 *
 * 2: Uniform buffer mode
 * This mode will treat the uniforms as a uniform buffer. You can pass in either a buffer that you manually handle, or
 * or a generic object that PixiJS will automatically map to a buffer for you.
 * For maximum benefits, make Ubo UniformGroups static, and only update them each frame.
 *
 * Rules of UBOs:
 * - UBOs only work with WebGL2, so make sure you have a fallback!
 * - Only floats are supported (including vec[2,3,4], mat[2,3,4])
 * - Samplers cannot be used in ubo's (a GPU limitation)
 * - You must ensure that the object you pass in exactly matches in the shader ubo structure.
 * Otherwise, weirdness will ensue!
 * - The name of the ubo object added to the group must match exactly the name of the ubo in the shader.
 *
 * ```
 * // ubo in shader:
 * uniform myCoolData { // declaring a ubo..
 * mat4 uCoolMatrix;
 * float uFloatyMcFloatFace
 *
 *
 * // a new uniform buffer object..
 * const myCoolData = new UniformBufferGroup({
 *   uCoolMatrix: new Matrix(),
 *   uFloatyMcFloatFace: 23,
 * }}
 *
 * // build a shader...
 * const shader = Shader.from(srcVert, srcFrag, {
 *   myCoolData // name matches the ubo name in the shader. will be processed accordingly.
 * })
 *
 *  ```
 * @memberof PIXI
 */
var UniformGroup = /** @class */ (function () {
    /**
     * @param {object | Buffer} [uniforms] - Custom uniforms to use to augment the built-in ones. Or a pixi buffer.
     * @param isStatic - Uniforms wont be changed after creation.
     * @param isUbo - If true, will treat this uniform group as a uniform buffer object.
     */
    function UniformGroup(uniforms, isStatic, isUbo) {
        this.group = true;
        // lets generate this when the shader ?
        this.syncUniforms = {};
        this.dirtyId = 0;
        this.id = UID$2++;
        this.static = !!isStatic;
        this.ubo = !!isUbo;
        if (uniforms instanceof Buffer) {
            this.buffer = uniforms;
            this.buffer.type = BUFFER_TYPE.UNIFORM_BUFFER;
            this.autoManage = false;
            this.ubo = true;
        }
        else {
            this.uniforms = uniforms;
            if (this.ubo) {
                this.buffer = new Buffer(new Float32Array(1));
                this.buffer.type = BUFFER_TYPE.UNIFORM_BUFFER;
                this.autoManage = true;
            }
        }
    }
    UniformGroup.prototype.update = function () {
        this.dirtyId++;
        if (!this.autoManage && this.buffer) {
            this.buffer.update();
        }
    };
    UniformGroup.prototype.add = function (name, uniforms, _static) {
        if (!this.ubo) {
            this.uniforms[name] = new UniformGroup(uniforms, _static);
        }
        else {
            // eslint-disable-next-line max-len
            throw new Error('[UniformGroup] uniform groups in ubo mode cannot be modified, or have uniform groups nested in them');
        }
    };
    UniformGroup.from = function (uniforms, _static, _ubo) {
        return new UniformGroup(uniforms, _static, _ubo);
    };
    /**
     * A short hand function for creating a static UBO UniformGroup.
     * @param uniforms - the ubo item
     * @param _static - should this be updated each time it is used? defaults to true here!
     */
    UniformGroup.uboFrom = function (uniforms, _static) {
        return new UniformGroup(uniforms, _static !== null && _static !== void 0 ? _static : true, true);
    };
    return UniformGroup;
}());

/**
 * System plugin to the renderer to manage filter states.
 * @ignore
 */
var FilterState = /** @class */ (function () {
    function FilterState() {
        this.renderTexture = null;
        this.target = null;
        this.legacy = false;
        this.resolution = 1;
        this.multisample = MSAA_QUALITY.NONE;
        // next three fields are created only for root
        // re-assigned for everything else
        this.sourceFrame = new Rectangle();
        this.destinationFrame = new Rectangle();
        this.bindingSourceFrame = new Rectangle();
        this.bindingDestinationFrame = new Rectangle();
        this.filters = [];
        this.transform = null;
    }
    /** Clears the state */
    FilterState.prototype.clear = function () {
        this.target = null;
        this.filters = null;
        this.renderTexture = null;
    };
    return FilterState;
}());

var core_tempPoints = [new Point(), new Point(), new Point(), new Point()];
var tempMatrix$2 = new Matrix();
/**
 * System plugin to the renderer to manage filters.
 *
 * ## Pipeline
 *
 * The FilterSystem executes the filtering pipeline by rendering the display-object into a texture, applying its
 * [filters]{@link PIXI.Filter} in series, and the last filter outputs into the final render-target.
 *
 * The filter-frame is the rectangle in world space being filtered, and those contents are mapped into
 * `(0, 0, filterFrame.width, filterFrame.height)` into the filter render-texture. The filter-frame is also called
 * the source-frame, as it is used to bind the filter render-textures. The last filter outputs to the `filterFrame`
 * in the final render-target.
 *
 * ## Usage
 *
 * {@link PIXI.Container#renderAdvanced} is an example of how to use the filter system. It is a 3 step process:
 *
 * **push**: Use {@link PIXI.FilterSystem#push} to push the set of filters to be applied on a filter-target.
 * **render**: Render the contents to be filtered using the renderer. The filter-system will only capture the contents
 *      inside the bounds of the filter-target. NOTE: Using {@link PIXI.Renderer#render} is
 *      illegal during an existing render cycle, and it may reset the filter system.
 * **pop**: Use {@link PIXI.FilterSystem#pop} to pop & execute the filters you initially pushed. It will apply them
 *      serially and output to the bounds of the filter-target.
 * @memberof PIXI
 */
var FilterSystem = /** @class */ (function () {
    /**
     * @param renderer - The renderer this System works for.
     */
    function FilterSystem(renderer) {
        this.renderer = renderer;
        this.defaultFilterStack = [{}];
        this.texturePool = new RenderTexturePool();
        this.texturePool.setScreenSize(renderer.view);
        this.statePool = [];
        this.quad = new Quad();
        this.quadUv = new QuadUv();
        this.tempRect = new Rectangle();
        this.activeState = {};
        this.globalUniforms = new UniformGroup({
            outputFrame: new Rectangle(),
            inputSize: new Float32Array(4),
            inputPixel: new Float32Array(4),
            inputClamp: new Float32Array(4),
            resolution: 1,
            // legacy variables
            filterArea: new Float32Array(4),
            filterClamp: new Float32Array(4),
        }, true);
        this.forceClear = false;
        this.useMaxPadding = false;
    }
    /**
     * Pushes a set of filters to be applied later to the system. This will redirect further rendering into an
     * input render-texture for the rest of the filtering pipeline.
     * @param {PIXI.DisplayObject} target - The target of the filter to render.
     * @param filters - The filters to apply.
     */
    FilterSystem.prototype.push = function (target, filters) {
        var _a, _b;
        var renderer = this.renderer;
        var filterStack = this.defaultFilterStack;
        var state = this.statePool.pop() || new FilterState();
        var renderTextureSystem = this.renderer.renderTexture;
        var resolution = filters[0].resolution;
        var multisample = filters[0].multisample;
        var padding = filters[0].padding;
        var autoFit = filters[0].autoFit;
        // We don't know whether it's a legacy filter until it was bound for the first time,
        // therefore we have to assume that it is if legacy is undefined.
        var legacy = (_a = filters[0].legacy) !== null && _a !== void 0 ? _a : true;
        for (var i = 1; i < filters.length; i++) {
            var filter = filters[i];
            // let's use the lowest resolution
            resolution = Math.min(resolution, filter.resolution);
            // let's use the lowest number of samples
            multisample = Math.min(multisample, filter.multisample);
            // figure out the padding required for filters
            padding = this.useMaxPadding
                // old behavior: use largest amount of padding!
                ? Math.max(padding, filter.padding)
                // new behavior: sum the padding
                : padding + filter.padding;
            // only auto fit if all filters are autofit
            autoFit = autoFit && filter.autoFit;
            legacy = legacy || ((_b = filter.legacy) !== null && _b !== void 0 ? _b : true);
        }
        if (filterStack.length === 1) {
            this.defaultFilterStack[0].renderTexture = renderTextureSystem.current;
        }
        filterStack.push(state);
        state.resolution = resolution;
        state.multisample = multisample;
        state.legacy = legacy;
        state.target = target;
        state.sourceFrame.copyFrom(target.filterArea || target.getBounds(true));
        state.sourceFrame.pad(padding);
        var sourceFrameProjected = this.tempRect.copyFrom(renderTextureSystem.sourceFrame);
        // Project source frame into world space (if projection is applied)
        if (renderer.projection.transform) {
            this.transformAABB(tempMatrix$2.copyFrom(renderer.projection.transform).invert(), sourceFrameProjected);
        }
        if (autoFit) {
            state.sourceFrame.fit(sourceFrameProjected);
            if (state.sourceFrame.width <= 0 || state.sourceFrame.height <= 0) {
                state.sourceFrame.width = 0;
                state.sourceFrame.height = 0;
            }
        }
        else if (!state.sourceFrame.intersects(sourceFrameProjected)) {
            state.sourceFrame.width = 0;
            state.sourceFrame.height = 0;
        }
        // Round sourceFrame in screen space based on render-texture.
        this.roundFrame(state.sourceFrame, renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution, renderTextureSystem.sourceFrame, renderTextureSystem.destinationFrame, renderer.projection.transform);
        state.renderTexture = this.getOptimalFilterTexture(state.sourceFrame.width, state.sourceFrame.height, resolution, multisample);
        state.filters = filters;
        state.destinationFrame.width = state.renderTexture.width;
        state.destinationFrame.height = state.renderTexture.height;
        var destinationFrame = this.tempRect;
        destinationFrame.x = 0;
        destinationFrame.y = 0;
        destinationFrame.width = state.sourceFrame.width;
        destinationFrame.height = state.sourceFrame.height;
        state.renderTexture.filterFrame = state.sourceFrame;
        state.bindingSourceFrame.copyFrom(renderTextureSystem.sourceFrame);
        state.bindingDestinationFrame.copyFrom(renderTextureSystem.destinationFrame);
        state.transform = renderer.projection.transform;
        renderer.projection.transform = null;
        renderTextureSystem.bind(state.renderTexture, state.sourceFrame, destinationFrame);
        renderer.framebuffer.clear(0, 0, 0, 0);
    };
    /** Pops off the filter and applies it. */
    FilterSystem.prototype.pop = function () {
        var filterStack = this.defaultFilterStack;
        var state = filterStack.pop();
        var filters = state.filters;
        this.activeState = state;
        var globalUniforms = this.globalUniforms.uniforms;
        globalUniforms.outputFrame = state.sourceFrame;
        globalUniforms.resolution = state.resolution;
        var inputSize = globalUniforms.inputSize;
        var inputPixel = globalUniforms.inputPixel;
        var inputClamp = globalUniforms.inputClamp;
        inputSize[0] = state.destinationFrame.width;
        inputSize[1] = state.destinationFrame.height;
        inputSize[2] = 1.0 / inputSize[0];
        inputSize[3] = 1.0 / inputSize[1];
        inputPixel[0] = Math.round(inputSize[0] * state.resolution);
        inputPixel[1] = Math.round(inputSize[1] * state.resolution);
        inputPixel[2] = 1.0 / inputPixel[0];
        inputPixel[3] = 1.0 / inputPixel[1];
        inputClamp[0] = 0.5 * inputPixel[2];
        inputClamp[1] = 0.5 * inputPixel[3];
        inputClamp[2] = (state.sourceFrame.width * inputSize[2]) - (0.5 * inputPixel[2]);
        inputClamp[3] = (state.sourceFrame.height * inputSize[3]) - (0.5 * inputPixel[3]);
        // only update the rect if its legacy..
        if (state.legacy) {
            var filterArea = globalUniforms.filterArea;
            filterArea[0] = state.destinationFrame.width;
            filterArea[1] = state.destinationFrame.height;
            filterArea[2] = state.sourceFrame.x;
            filterArea[3] = state.sourceFrame.y;
            globalUniforms.filterClamp = globalUniforms.inputClamp;
        }
        this.globalUniforms.update();
        var lastState = filterStack[filterStack.length - 1];
        this.renderer.framebuffer.blit();
        if (filters.length === 1) {
            filters[0].apply(this, state.renderTexture, lastState.renderTexture, CLEAR_MODES.BLEND, state);
            this.returnFilterTexture(state.renderTexture);
        }
        else {
            var flip = state.renderTexture;
            var flop = this.getOptimalFilterTexture(flip.width, flip.height, state.resolution);
            flop.filterFrame = flip.filterFrame;
            var i = 0;
            for (i = 0; i < filters.length - 1; ++i) {
                if (i === 1 && state.multisample > 1) {
                    flop = this.getOptimalFilterTexture(flip.width, flip.height, state.resolution);
                    flop.filterFrame = flip.filterFrame;
                }
                filters[i].apply(this, flip, flop, CLEAR_MODES.CLEAR, state);
                var t = flip;
                flip = flop;
                flop = t;
            }
            filters[i].apply(this, flip, lastState.renderTexture, CLEAR_MODES.BLEND, state);
            if (i > 1 && state.multisample > 1) {
                this.returnFilterTexture(state.renderTexture);
            }
            this.returnFilterTexture(flip);
            this.returnFilterTexture(flop);
        }
        // lastState.renderTexture is blitted when lastState is popped
        state.clear();
        this.statePool.push(state);
    };
    /**
     * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.
     * @param filterTexture - renderTexture to bind, should belong to filter pool or filter stack
     * @param clearMode - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}
     */
    FilterSystem.prototype.bindAndClear = function (filterTexture, clearMode) {
        if (clearMode === void 0) { clearMode = CLEAR_MODES.CLEAR; }
        var _a = this.renderer, renderTextureSystem = _a.renderTexture, stateSystem = _a.state;
        if (filterTexture === this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture) {
            // Restore projection transform if rendering into the output render-target.
            this.renderer.projection.transform = this.activeState.transform;
        }
        else {
            // Prevent projection within filtering pipeline.
            this.renderer.projection.transform = null;
        }
        if (filterTexture && filterTexture.filterFrame) {
            var destinationFrame = this.tempRect;
            destinationFrame.x = 0;
            destinationFrame.y = 0;
            destinationFrame.width = filterTexture.filterFrame.width;
            destinationFrame.height = filterTexture.filterFrame.height;
            renderTextureSystem.bind(filterTexture, filterTexture.filterFrame, destinationFrame);
        }
        else if (filterTexture !== this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture) {
            renderTextureSystem.bind(filterTexture);
        }
        else {
            // Restore binding for output render-target.
            this.renderer.renderTexture.bind(filterTexture, this.activeState.bindingSourceFrame, this.activeState.bindingDestinationFrame);
        }
        // Clear the texture in BLIT mode if blending is disabled or the forceClear flag is set. The blending
        // is stored in the 0th bit of the state.
        var autoClear = (stateSystem.stateId & 1) || this.forceClear;
        if (clearMode === CLEAR_MODES.CLEAR
            || (clearMode === CLEAR_MODES.BLIT && autoClear)) {
            // Use framebuffer.clear because we want to clear the whole filter texture, not just the filtering
            // area over which the shaders are run. This is because filters may sampling outside of it (e.g. blur)
            // instead of clamping their arithmetic.
            this.renderer.framebuffer.clear(0, 0, 0, 0);
        }
    };
    /**
     * Draws a filter using the default rendering process.
     *
     * This should be called only by {@link Filter#apply}.
     * @param filter - The filter to draw.
     * @param input - The input render target.
     * @param output - The target to output to.
     * @param clearMode - Should the output be cleared before rendering to it
     */
    FilterSystem.prototype.applyFilter = function (filter, input, output, clearMode) {
        var renderer = this.renderer;
        // Set state before binding, so bindAndClear gets the blend mode.
        renderer.state.set(filter.state);
        this.bindAndClear(output, clearMode);
        // set the uniforms..
        filter.uniforms.uSampler = input;
        filter.uniforms.filterGlobals = this.globalUniforms;
        // TODO make it so that the order of this does not matter..
        // because it does at the moment cos of global uniforms.
        // they need to get resynced
        renderer.shader.bind(filter);
        // check to see if the filter is a legacy one..
        filter.legacy = !!filter.program.attributeData.aTextureCoord;
        if (filter.legacy) {
            this.quadUv.map(input._frame, input.filterFrame);
            renderer.geometry.bind(this.quadUv);
            renderer.geometry.draw(DRAW_MODES.TRIANGLES);
        }
        else {
            renderer.geometry.bind(this.quad);
            renderer.geometry.draw(DRAW_MODES.TRIANGLE_STRIP);
        }
    };
    /**
     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.
     *
     * Use `outputMatrix * vTextureCoord` in the shader.
     * @param outputMatrix - The matrix to output to.
     * @param {PIXI.Sprite} sprite - The sprite to map to.
     * @returns The mapped matrix.
     */
    FilterSystem.prototype.calculateSpriteMatrix = function (outputMatrix, sprite) {
        var _a = this.activeState, sourceFrame = _a.sourceFrame, destinationFrame = _a.destinationFrame;
        var orig = sprite._texture.orig;
        var mappedMatrix = outputMatrix.set(destinationFrame.width, 0, 0, destinationFrame.height, sourceFrame.x, sourceFrame.y);
        var worldTransform = sprite.worldTransform.copyTo(Matrix.TEMP_MATRIX);
        worldTransform.invert();
        mappedMatrix.prepend(worldTransform);
        mappedMatrix.scale(1.0 / orig.width, 1.0 / orig.height);
        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);
        return mappedMatrix;
    };
    /** Destroys this Filter System. */
    FilterSystem.prototype.destroy = function () {
        this.renderer = null;
        // Those textures has to be destroyed by RenderTextureSystem or FramebufferSystem
        this.texturePool.clear(false);
    };
    /**
     * Gets a Power-of-Two render texture or fullScreen texture
     * @param minWidth - The minimum width of the render texture in real pixels.
     * @param minHeight - The minimum height of the render texture in real pixels.
     * @param resolution - The resolution of the render texture.
     * @param multisample - Number of samples of the render texture.
     * @returns - The new render texture.
     */
    FilterSystem.prototype.getOptimalFilterTexture = function (minWidth, minHeight, resolution, multisample) {
        if (resolution === void 0) { resolution = 1; }
        if (multisample === void 0) { multisample = MSAA_QUALITY.NONE; }
        return this.texturePool.getOptimalTexture(minWidth, minHeight, resolution, multisample);
    };
    /**
     * Gets extra render texture to use inside current filter
     * To be compliant with older filters, you can use params in any order
     * @param input - renderTexture from which size and resolution will be copied
     * @param resolution - override resolution of the renderTexture
     * @param multisample - number of samples of the renderTexture
     */
    FilterSystem.prototype.getFilterTexture = function (input, resolution, multisample) {
        if (typeof input === 'number') {
            var swap = input;
            input = resolution;
            resolution = swap;
        }
        input = input || this.activeState.renderTexture;
        var filterTexture = this.texturePool.getOptimalTexture(input.width, input.height, resolution || input.resolution, multisample || MSAA_QUALITY.NONE);
        filterTexture.filterFrame = input.filterFrame;
        return filterTexture;
    };
    /**
     * Frees a render texture back into the pool.
     * @param renderTexture - The renderTarget to free
     */
    FilterSystem.prototype.returnFilterTexture = function (renderTexture) {
        this.texturePool.returnTexture(renderTexture);
    };
    /** Empties the texture pool. */
    FilterSystem.prototype.emptyPool = function () {
        this.texturePool.clear(true);
    };
    /** Calls `texturePool.resize()`, affects fullScreen renderTextures. */
    FilterSystem.prototype.resize = function () {
        this.texturePool.setScreenSize(this.renderer.view);
    };
    /**
     * @param matrix - first param
     * @param rect - second param
     */
    FilterSystem.prototype.transformAABB = function (matrix, rect) {
        var lt = core_tempPoints[0];
        var lb = core_tempPoints[1];
        var rt = core_tempPoints[2];
        var rb = core_tempPoints[3];
        lt.set(rect.left, rect.top);
        lb.set(rect.left, rect.bottom);
        rt.set(rect.right, rect.top);
        rb.set(rect.right, rect.bottom);
        matrix.apply(lt, lt);
        matrix.apply(lb, lb);
        matrix.apply(rt, rt);
        matrix.apply(rb, rb);
        var x0 = Math.min(lt.x, lb.x, rt.x, rb.x);
        var y0 = Math.min(lt.y, lb.y, rt.y, rb.y);
        var x1 = Math.max(lt.x, lb.x, rt.x, rb.x);
        var y1 = Math.max(lt.y, lb.y, rt.y, rb.y);
        rect.x = x0;
        rect.y = y0;
        rect.width = x1 - x0;
        rect.height = y1 - y0;
    };
    FilterSystem.prototype.roundFrame = function (frame, resolution, bindingSourceFrame, bindingDestinationFrame, transform) {
        if (frame.width <= 0 || frame.height <= 0 || bindingSourceFrame.width <= 0 || bindingSourceFrame.height <= 0) {
            return;
        }
        if (transform) {
            var a = transform.a, b = transform.b, c = transform.c, d = transform.d;
            // Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation
            // is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).
            if ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4)
                && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4)) {
                return;
            }
        }
        transform = transform ? tempMatrix$2.copyFrom(transform) : tempMatrix$2.identity();
        // Get forward transform from world space to screen space
        transform
            .translate(-bindingSourceFrame.x, -bindingSourceFrame.y)
            .scale(bindingDestinationFrame.width / bindingSourceFrame.width, bindingDestinationFrame.height / bindingSourceFrame.height)
            .translate(bindingDestinationFrame.x, bindingDestinationFrame.y);
        // Convert frame to screen space
        this.transformAABB(transform, frame);
        // Round frame in screen space
        frame.ceil(resolution);
        // Project back into world space.
        this.transformAABB(transform.invert(), frame);
    };
    return FilterSystem;
}());

/**
 * Base for a common object renderer that can be used as a
 * system renderer plugin.
 * @memberof PIXI
 */
var ObjectRenderer = /** @class */ (function () {
    /**
     * @param renderer - The renderer this manager works for.
     */
    function ObjectRenderer(renderer) {
        this.renderer = renderer;
    }
    /** Stub method that should be used to empty the current batch by rendering objects now. */
    ObjectRenderer.prototype.flush = function () {
        // flush!
    };
    /** Generic destruction method that frees all resources. This should be called by subclasses. */
    ObjectRenderer.prototype.destroy = function () {
        this.renderer = null;
    };
    /**
     * Stub method that initializes any state required before
     * rendering starts. It is different from the `prerender`
     * signal, which occurs every frame, in that it is called
     * whenever an object requests _this_ renderer specifically.
     */
    ObjectRenderer.prototype.start = function () {
        // set the shader..
    };
    /** Stops the renderer. It should free up any state and become dormant. */
    ObjectRenderer.prototype.stop = function () {
        this.flush();
    };
    /**
     * Keeps the object to render. It doesn't have to be
     * rendered immediately.
     * @param {PIXI.DisplayObject} _object - The object to render.
     */
    ObjectRenderer.prototype.render = function (_object) {
        // render the object
    };
    return ObjectRenderer;
}());

/**
 * System plugin to the renderer to manage batching.
 * @memberof PIXI
 */
var BatchSystem = /** @class */ (function () {
    /**
     * @param renderer - The renderer this System works for.
     */
    function BatchSystem(renderer) {
        this.renderer = renderer;
        this.emptyRenderer = new ObjectRenderer(renderer);
        this.currentRenderer = this.emptyRenderer;
    }
    /**
     * Changes the current renderer to the one given in parameter
     * @param objectRenderer - The object renderer to use.
     */
    BatchSystem.prototype.setObjectRenderer = function (objectRenderer) {
        if (this.currentRenderer === objectRenderer) {
            return;
        }
        this.currentRenderer.stop();
        this.currentRenderer = objectRenderer;
        this.currentRenderer.start();
    };
    /**
     * This should be called if you wish to do some custom rendering
     * It will basically render anything that may be batched up such as sprites
     */
    BatchSystem.prototype.flush = function () {
        this.setObjectRenderer(this.emptyRenderer);
    };
    /** Reset the system to an empty renderer */
    BatchSystem.prototype.reset = function () {
        this.setObjectRenderer(this.emptyRenderer);
    };
    /**
     * Handy function for batch renderers: copies bound textures in first maxTextures locations to array
     * sets actual _batchLocation for them
     * @param arr - arr copy destination
     * @param maxTextures - number of copied elements
     */
    BatchSystem.prototype.copyBoundTextures = function (arr, maxTextures) {
        var boundTextures = this.renderer.texture.boundTextures;
        for (var i = maxTextures - 1; i >= 0; --i) {
            arr[i] = boundTextures[i] || null;
            if (arr[i]) {
                arr[i]._batchLocation = i;
            }
        }
    };
    /**
     * Assigns batch locations to textures in array based on boundTextures state.
     * All textures in texArray should have `_batchEnabled = _batchId`,
     * and their count should be less than `maxTextures`.
     * @param texArray - textures to bound
     * @param boundTextures - current state of bound textures
     * @param batchId - marker for _batchEnabled param of textures in texArray
     * @param maxTextures - number of texture locations to manipulate
     */
    BatchSystem.prototype.boundArray = function (texArray, boundTextures, batchId, maxTextures) {
        var elements = texArray.elements, ids = texArray.ids, count = texArray.count;
        var j = 0;
        for (var i = 0; i < count; i++) {
            var tex = elements[i];
            var loc = tex._batchLocation;
            if (loc >= 0 && loc < maxTextures
                && boundTextures[loc] === tex) {
                ids[i] = loc;
                continue;
            }
            while (j < maxTextures) {
                var bound = boundTextures[j];
                if (bound && bound._batchEnabled === batchId
                    && bound._batchLocation === j) {
                    j++;
                    continue;
                }
                ids[i] = j;
                tex._batchLocation = j;
                boundTextures[j] = tex;
                break;
            }
        }
    };
    /**
     * @ignore
     */
    BatchSystem.prototype.destroy = function () {
        this.renderer = null;
    };
    return BatchSystem;
}());

var CONTEXT_UID_COUNTER = 0;
/**
 * System plugin to the renderer to manage the context.
 * @memberof PIXI
 */
var ContextSystem = /** @class */ (function () {
    /** @param renderer - The renderer this System works for. */
    function ContextSystem(renderer) {
        this.renderer = renderer;
        this.webGLVersion = 1;
        this.extensions = {};
        this.supports = {
            uint32Indices: false,
        };
        // Bind functions
        this.handleContextLost = this.handleContextLost.bind(this);
        this.handleContextRestored = this.handleContextRestored.bind(this);
        renderer.view.addEventListener('webglcontextlost', this.handleContextLost, false);
        renderer.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);
    }
    Object.defineProperty(ContextSystem.prototype, "isLost", {
        /**
         * `true` if the context is lost
         * @readonly
         */
        get: function () {
            return (!this.gl || this.gl.isContextLost());
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Handles the context change event.
     * @param {WebGLRenderingContext} gl - New WebGL context.
     */
    ContextSystem.prototype.contextChange = function (gl) {
        this.gl = gl;
        this.renderer.gl = gl;
        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;
    };
    /**
     * Initializes the context.
     * @protected
     * @param {WebGLRenderingContext} gl - WebGL context
     */
    ContextSystem.prototype.initFromContext = function (gl) {
        this.gl = gl;
        this.validateContext(gl);
        this.renderer.gl = gl;
        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;
        this.renderer.runners.contextChange.emit(gl);
    };
    /**
     * Initialize from context options
     * @protected
     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
     * @param {object} options - context attributes
     */
    ContextSystem.prototype.initFromOptions = function (options) {
        var gl = this.createContext(this.renderer.view, options);
        this.initFromContext(gl);
    };
    /**
     * Helper class to create a WebGL Context
     * @param canvas - the canvas element that we will get the context from
     * @param options - An options object that gets passed in to the canvas element containing the
     *    context attributes
     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext
     * @returns {WebGLRenderingContext} the WebGL context
     */
    ContextSystem.prototype.createContext = function (canvas, options) {
        var gl;
        if (settings.PREFER_ENV >= ENV.WEBGL2) {
            gl = canvas.getContext('webgl2', options);
        }
        if (gl) {
            this.webGLVersion = 2;
        }
        else {
            this.webGLVersion = 1;
            gl = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);
            if (!gl) {
                // fail, not able to get a context
                throw new Error('This browser does not support WebGL. Try using the canvas renderer');
            }
        }
        this.gl = gl;
        this.getExtensions();
        return this.gl;
    };
    /** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */
    ContextSystem.prototype.getExtensions = function () {
        // time to set up default extensions that Pixi uses.
        var gl = this.gl;
        var common = {
            loseContext: gl.getExtension('WEBGL_lose_context'),
            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),
            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),
            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),
            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'),
            etc: gl.getExtension('WEBGL_compressed_texture_etc'),
            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),
            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')
                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),
            atc: gl.getExtension('WEBGL_compressed_texture_atc'),
            astc: gl.getExtension('WEBGL_compressed_texture_astc')
        };
        if (this.webGLVersion === 1) {
            Object.assign(this.extensions, common, {
                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),
                depthTexture: gl.getExtension('WEBGL_depth_texture'),
                vertexArrayObject: gl.getExtension('OES_vertex_array_object')
                    || gl.getExtension('MOZ_OES_vertex_array_object')
                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),
                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),
                // Floats and half-floats
                floatTexture: gl.getExtension('OES_texture_float'),
                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),
                textureHalfFloat: gl.getExtension('OES_texture_half_float'),
                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),
            });
        }
        else if (this.webGLVersion === 2) {
            Object.assign(this.extensions, common, {
                // Floats and half-floats
                colorBufferFloat: gl.getExtension('EXT_color_buffer_float')
            });
        }
    };
    /**
     * Handles a lost webgl context
     * @param {WebGLContextEvent} event - The context lost event.
     */
    ContextSystem.prototype.handleContextLost = function (event) {
        var _this = this;
        // Prevent default to be able to restore the context
        event.preventDefault();
        // Restore the context after this event has exited
        setTimeout(function () {
            if (_this.gl.isContextLost() && _this.extensions.loseContext) {
                _this.extensions.loseContext.restoreContext();
            }
        }, 0);
    };
    /** Handles a restored webgl context. */
    ContextSystem.prototype.handleContextRestored = function () {
        this.renderer.runners.contextChange.emit(this.gl);
    };
    ContextSystem.prototype.destroy = function () {
        var view = this.renderer.view;
        this.renderer = null;
        // remove listeners
        view.removeEventListener('webglcontextlost', this.handleContextLost);
        view.removeEventListener('webglcontextrestored', this.handleContextRestored);
        this.gl.useProgram(null);
        if (this.extensions.loseContext) {
            this.extensions.loseContext.loseContext();
        }
    };
    /** Handle the post-render runner event. */
    ContextSystem.prototype.postrender = function () {
        if (this.renderer.renderingToScreen) {
            this.gl.flush();
        }
    };
    /**
     * Validate context.
     * @param {WebGLRenderingContext} gl - Render context.
     */
    ContextSystem.prototype.validateContext = function (gl) {
        var attributes = gl.getContextAttributes();
        var isWebGl2 = 'WebGL2RenderingContext' in globalThis && gl instanceof globalThis.WebGL2RenderingContext;
        if (isWebGl2) {
            this.webGLVersion = 2;
        }
        // this is going to be fairly simple for now.. but at least we have room to grow!
        if (attributes && !attributes.stencil) {
            /* eslint-disable max-len, no-console */
            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');
            /* eslint-enable max-len, no-console */
        }
        var hasuint32 = isWebGl2 || !!gl.getExtension('OES_element_index_uint');
        this.supports.uint32Indices = hasuint32;
        if (!hasuint32) {
            /* eslint-disable max-len, no-console */
            console.warn('Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly');
            /* eslint-enable max-len, no-console */
        }
    };
    return ContextSystem;
}());

/**
 * Internal framebuffer for WebGL context.
 * @memberof PIXI
 */
var GLFramebuffer = /** @class */ (function () {
    function GLFramebuffer(framebuffer) {
        this.framebuffer = framebuffer;
        this.stencil = null;
        this.dirtyId = -1;
        this.dirtyFormat = -1;
        this.dirtySize = -1;
        this.multisample = MSAA_QUALITY.NONE;
        this.msaaBuffer = null;
        this.blitFramebuffer = null;
        this.mipLevel = 0;
    }
    return GLFramebuffer;
}());

var tempRectangle = new Rectangle();
/**
 * System plugin to the renderer to manage framebuffers.
 * @memberof PIXI
 */
var FramebufferSystem = /** @class */ (function () {
    /**
     * @param renderer - The renderer this System works for.
     */
    function FramebufferSystem(renderer) {
        this.renderer = renderer;
        this.managedFramebuffers = [];
        this.unknownFramebuffer = new Framebuffer(10, 10);
        this.msaaSamples = null;
    }
    /** Sets up the renderer context and necessary buffers. */
    FramebufferSystem.prototype.contextChange = function () {
        this.disposeAll(true);
        var gl = this.gl = this.renderer.gl;
        this.CONTEXT_UID = this.renderer.CONTEXT_UID;
        this.current = this.unknownFramebuffer;
        this.viewport = new Rectangle();
        this.hasMRT = true;
        this.writeDepthTexture = true;
        // webgl2
        if (this.renderer.context.webGLVersion === 1) {
            // webgl 1!
            var nativeDrawBuffersExtension_1 = this.renderer.context.extensions.drawBuffers;
            var nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;
            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY) {
                nativeDrawBuffersExtension_1 = null;
                nativeDepthTextureExtension = null;
            }
            if (nativeDrawBuffersExtension_1) {
                gl.drawBuffers = function (activeTextures) {
                    return nativeDrawBuffersExtension_1.drawBuffersWEBGL(activeTextures);
                };
            }
            else {
                this.hasMRT = false;
                gl.drawBuffers = function () {
                    // empty
                };
            }
            if (!nativeDepthTextureExtension) {
                this.writeDepthTexture = false;
            }
        }
        else {
            // WebGL2
            // cache possible MSAA samples
            this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);
        }
    };
    /**
     * Bind a framebuffer.
     * @param framebuffer
     * @param frame - frame, default is framebuffer size
     * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0
     */
    FramebufferSystem.prototype.bind = function (framebuffer, frame, mipLevel) {
        if (mipLevel === void 0) { mipLevel = 0; }
        var gl = this.gl;
        if (framebuffer) {
            // TODO caching layer!
            var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);
            if (this.current !== framebuffer) {
                this.current = framebuffer;
                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);
            }
            // make sure all textures are unbound..
            if (fbo.mipLevel !== mipLevel) {
                framebuffer.dirtyId++;
                framebuffer.dirtyFormat++;
                fbo.mipLevel = mipLevel;
            }
            // now check for updates...
            if (fbo.dirtyId !== framebuffer.dirtyId) {
                fbo.dirtyId = framebuffer.dirtyId;
                if (fbo.dirtyFormat !== framebuffer.dirtyFormat) {
                    fbo.dirtyFormat = framebuffer.dirtyFormat;
                    fbo.dirtySize = framebuffer.dirtySize;
                    this.updateFramebuffer(framebuffer, mipLevel);
                }
                else if (fbo.dirtySize !== framebuffer.dirtySize) {
                    fbo.dirtySize = framebuffer.dirtySize;
                    this.resizeFramebuffer(framebuffer);
                }
            }
            for (var i = 0; i < framebuffer.colorTextures.length; i++) {
                var tex = framebuffer.colorTextures[i];
                this.renderer.texture.unbind(tex.parentTextureArray || tex);
            }
            if (framebuffer.depthTexture) {
                this.renderer.texture.unbind(framebuffer.depthTexture);
            }
            if (frame) {
                var mipWidth = (frame.width >> mipLevel);
                var mipHeight = (frame.height >> mipLevel);
                var scale = mipWidth / frame.width;
                this.setViewport(frame.x * scale, frame.y * scale, mipWidth, mipHeight);
            }
            else {
                var mipWidth = (framebuffer.width >> mipLevel);
                var mipHeight = (framebuffer.height >> mipLevel);
                this.setViewport(0, 0, mipWidth, mipHeight);
            }
        }
        else {
            if (this.current) {
                this.current = null;
                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            }
            if (frame) {
                this.setViewport(frame.x, frame.y, frame.width, frame.height);
            }
            else {
                this.setViewport(0, 0, this.renderer.width, this.renderer.height);
            }
        }
    };
    /**
     * Set the WebGLRenderingContext's viewport.
     * @param x - X position of viewport
     * @param y - Y position of viewport
     * @param width - Width of viewport
     * @param height - Height of viewport
     */
    FramebufferSystem.prototype.setViewport = function (x, y, width, height) {
        var v = this.viewport;
        x = Math.round(x);
        y = Math.round(y);
        width = Math.round(width);
        height = Math.round(height);
        if (v.width !== width || v.height !== height || v.x !== x || v.y !== y) {
            v.x = x;
            v.y = y;
            v.width = width;
            v.height = height;
            this.gl.viewport(x, y, width, height);
        }
    };
    Object.defineProperty(FramebufferSystem.prototype, "size", {
        /**
         * Get the size of the current width and height. Returns object with `width` and `height` values.
         * @readonly
         */
        get: function () {
            if (this.current) {
                // TODO store temp
                return { x: 0, y: 0, width: this.current.width, height: this.current.height };
            }
            return { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Clear the color of the context
     * @param r - Red value from 0 to 1
     * @param g - Green value from 0 to 1
     * @param b - Blue value from 0 to 1
     * @param a - Alpha value from 0 to 1
     * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks
     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.
     */
    FramebufferSystem.prototype.clear = function (r, g, b, a, mask) {
        if (mask === void 0) { mask = BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH; }
        var gl = this.gl;
        // TODO clear color can be set only one right?
        gl.clearColor(r, g, b, a);
        gl.clear(mask);
    };
    /**
     * Initialize framebuffer for this context
     * @protected
     * @param framebuffer
     * @returns - created GLFramebuffer
     */
    FramebufferSystem.prototype.initFramebuffer = function (framebuffer) {
        var gl = this.gl;
        var fbo = new GLFramebuffer(gl.createFramebuffer());
        fbo.multisample = this.detectSamples(framebuffer.multisample);
        framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;
        this.managedFramebuffers.push(framebuffer);
        framebuffer.disposeRunner.add(this);
        return fbo;
    };
    /**
     * Resize the framebuffer
     * @param framebuffer
     * @protected
     */
    FramebufferSystem.prototype.resizeFramebuffer = function (framebuffer) {
        var gl = this.gl;
        var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];
        if (fbo.msaaBuffer) {
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);
            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.RGBA8, framebuffer.width, framebuffer.height);
        }
        if (fbo.stencil) {
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);
            if (fbo.msaaBuffer) {
                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);
            }
            else {
                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);
            }
        }
        var colorTextures = framebuffer.colorTextures;
        var count = colorTextures.length;
        if (!gl.drawBuffers) {
            count = Math.min(count, 1);
        }
        for (var i = 0; i < count; i++) {
            var texture = colorTextures[i];
            var parentTexture = texture.parentTextureArray || texture;
            this.renderer.texture.bind(parentTexture, 0);
        }
        if (framebuffer.depthTexture && this.writeDepthTexture) {
            this.renderer.texture.bind(framebuffer.depthTexture, 0);
        }
    };
    /**
     * Update the framebuffer
     * @param framebuffer
     * @param mipLevel
     * @protected
     */
    FramebufferSystem.prototype.updateFramebuffer = function (framebuffer, mipLevel) {
        var gl = this.gl;
        var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];
        // bind the color texture
        var colorTextures = framebuffer.colorTextures;
        var count = colorTextures.length;
        if (!gl.drawBuffers) {
            count = Math.min(count, 1);
        }
        if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer)) {
            fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);
            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.RGBA8, framebuffer.width, framebuffer.height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);
        }
        else if (fbo.msaaBuffer) {
            gl.deleteRenderbuffer(fbo.msaaBuffer);
            fbo.msaaBuffer = null;
            if (fbo.blitFramebuffer) {
                fbo.blitFramebuffer.dispose();
                fbo.blitFramebuffer = null;
            }
        }
        var activeTextures = [];
        for (var i = 0; i < count; i++) {
            var texture = colorTextures[i];
            var parentTexture = texture.parentTextureArray || texture;
            this.renderer.texture.bind(parentTexture, 0);
            if (i === 0 && fbo.msaaBuffer) {
                continue;
            }
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, texture.target, parentTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);
            activeTextures.push(gl.COLOR_ATTACHMENT0 + i);
        }
        if (activeTextures.length > 1) {
            gl.drawBuffers(activeTextures);
        }
        if (framebuffer.depthTexture) {
            var writeDepthTexture = this.writeDepthTexture;
            if (writeDepthTexture) {
                var depthTexture = framebuffer.depthTexture;
                this.renderer.texture.bind(depthTexture, 0);
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);
            }
        }
        if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture)) {
            fbo.stencil = fbo.stencil || gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);
            if (fbo.msaaBuffer) {
                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);
            }
            else {
                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);
            }
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);
        }
        else if (fbo.stencil) {
            gl.deleteRenderbuffer(fbo.stencil);
            fbo.stencil = null;
        }
    };
    /**
     * Returns true if the frame buffer can be multisampled.
     * @param framebuffer
     */
    FramebufferSystem.prototype.canMultisampleFramebuffer = function (framebuffer) {
        return this.renderer.context.webGLVersion !== 1
            && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;
    };
    /**
     * Detects number of samples that is not more than a param but as close to it as possible
     * @param samples - number of samples
     * @returns - recommended number of samples
     */
    FramebufferSystem.prototype.detectSamples = function (samples) {
        var msaaSamples = this.msaaSamples;
        var res = MSAA_QUALITY.NONE;
        if (samples <= 1 || msaaSamples === null) {
            return res;
        }
        for (var i = 0; i < msaaSamples.length; i++) {
            if (msaaSamples[i] <= samples) {
                res = msaaSamples[i];
                break;
            }
        }
        if (res === 1) {
            res = MSAA_QUALITY.NONE;
        }
        return res;
    };
    /**
     * Only works with WebGL2
     *
     * blits framebuffer to another of the same or bigger size
     * after that target framebuffer is bound
     *
     * Fails with WebGL warning if blits multisample framebuffer to different size
     * @param framebuffer - by default it blits "into itself", from renderBuffer to texture.
     * @param sourcePixels - source rectangle in pixels
     * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels
     */
    FramebufferSystem.prototype.blit = function (framebuffer, sourcePixels, destPixels) {
        var _a = this, current = _a.current, renderer = _a.renderer, gl = _a.gl, CONTEXT_UID = _a.CONTEXT_UID;
        if (renderer.context.webGLVersion !== 2) {
            return;
        }
        if (!current) {
            return;
        }
        var fbo = current.glFramebuffers[CONTEXT_UID];
        if (!fbo) {
            return;
        }
        if (!framebuffer) {
            if (!fbo.msaaBuffer) {
                return;
            }
            var colorTexture = current.colorTextures[0];
            if (!colorTexture) {
                return;
            }
            if (!fbo.blitFramebuffer) {
                fbo.blitFramebuffer = new Framebuffer(current.width, current.height);
                fbo.blitFramebuffer.addColorTexture(0, colorTexture);
            }
            framebuffer = fbo.blitFramebuffer;
            if (framebuffer.colorTextures[0] !== colorTexture) {
                framebuffer.colorTextures[0] = colorTexture;
                framebuffer.dirtyId++;
                framebuffer.dirtyFormat++;
            }
            if (framebuffer.width !== current.width || framebuffer.height !== current.height) {
                framebuffer.width = current.width;
                framebuffer.height = current.height;
                framebuffer.dirtyId++;
                framebuffer.dirtySize++;
            }
        }
        if (!sourcePixels) {
            sourcePixels = tempRectangle;
            sourcePixels.width = current.width;
            sourcePixels.height = current.height;
        }
        if (!destPixels) {
            destPixels = sourcePixels;
        }
        var sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;
        this.bind(framebuffer);
        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);
        gl.blitFramebuffer(sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom, destPixels.left, destPixels.top, destPixels.right, destPixels.bottom, gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR);
    };
    /**
     * Disposes framebuffer.
     * @param framebuffer - framebuffer that has to be disposed of
     * @param contextLost - If context was lost, we suppress all delete function calls
     */
    FramebufferSystem.prototype.disposeFramebuffer = function (framebuffer, contextLost) {
        var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];
        var gl = this.gl;
        if (!fbo) {
            return;
        }
        delete framebuffer.glFramebuffers[this.CONTEXT_UID];
        var index = this.managedFramebuffers.indexOf(framebuffer);
        if (index >= 0) {
            this.managedFramebuffers.splice(index, 1);
        }
        framebuffer.disposeRunner.remove(this);
        if (!contextLost) {
            gl.deleteFramebuffer(fbo.framebuffer);
            if (fbo.msaaBuffer) {
                gl.deleteRenderbuffer(fbo.msaaBuffer);
            }
            if (fbo.stencil) {
                gl.deleteRenderbuffer(fbo.stencil);
            }
        }
        if (fbo.blitFramebuffer) {
            fbo.blitFramebuffer.dispose();
        }
    };
    /**
     * Disposes all framebuffers, but not textures bound to them.
     * @param [contextLost=false] - If context was lost, we suppress all delete function calls
     */
    FramebufferSystem.prototype.disposeAll = function (contextLost) {
        var list = this.managedFramebuffers;
        this.managedFramebuffers = [];
        for (var i = 0; i < list.length; i++) {
            this.disposeFramebuffer(list[i], contextLost);
        }
    };
    /**
     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.
     * Used by MaskSystem, when its time to use stencil mask for Graphics element.
     *
     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.
     * @private
     */
    FramebufferSystem.prototype.forceStencil = function () {
        var framebuffer = this.current;
        if (!framebuffer) {
            return;
        }
        var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];
        if (!fbo || fbo.stencil) {
            return;
        }
        framebuffer.stencil = true;
        var w = framebuffer.width;
        var h = framebuffer.height;
        var gl = this.gl;
        var stencil = gl.createRenderbuffer();
        gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);
        if (fbo.msaaBuffer) {
            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);
        }
        else {
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);
        }
        fbo.stencil = stencil;
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);
    };
    /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */
    FramebufferSystem.prototype.reset = function () {
        this.current = this.unknownFramebuffer;
        this.viewport = new Rectangle();
    };
    FramebufferSystem.prototype.destroy = function () {
        this.renderer = null;
    };
    return FramebufferSystem;
}());

var byteSizeMap = { 5126: 4, 5123: 2, 5121: 1 };
/**
 * System plugin to the renderer to manage geometry.
 * @memberof PIXI
 */
var GeometrySystem = /** @class */ (function () {
    /** @param renderer - The renderer this System works for. */
    function GeometrySystem(renderer) {
        this.renderer = renderer;
        this._activeGeometry = null;
        this._activeVao = null;
        this.hasVao = true;
        this.hasInstance = true;
        this.canUseUInt32ElementIndex = false;
        this.managedGeometries = {};
    }
    /** Sets up the renderer context and necessary buffers. */
    GeometrySystem.prototype.contextChange = function () {
        this.disposeAll(true);
        var gl = this.gl = this.renderer.gl;
        var context = this.renderer.context;
        this.CONTEXT_UID = this.renderer.CONTEXT_UID;
        // webgl2
        if (context.webGLVersion !== 2) {
            // webgl 1!
            var nativeVaoExtension_1 = this.renderer.context.extensions.vertexArrayObject;
            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY) {
                nativeVaoExtension_1 = null;
            }
            if (nativeVaoExtension_1) {
                gl.createVertexArray = function () {
                    return nativeVaoExtension_1.createVertexArrayOES();
                };
                gl.bindVertexArray = function (vao) {
                    return nativeVaoExtension_1.bindVertexArrayOES(vao);
                };
                gl.deleteVertexArray = function (vao) {
                    return nativeVaoExtension_1.deleteVertexArrayOES(vao);
                };
            }
            else {
                this.hasVao = false;
                gl.createVertexArray = function () {
                    return null;
                };
                gl.bindVertexArray = function () {
                    return null;
                };
                gl.deleteVertexArray = function () {
                    return null;
                };
            }
        }
        if (context.webGLVersion !== 2) {
            var instanceExt_1 = gl.getExtension('ANGLE_instanced_arrays');
            if (instanceExt_1) {
                gl.vertexAttribDivisor = function (a, b) {
                    return instanceExt_1.vertexAttribDivisorANGLE(a, b);
                };
                gl.drawElementsInstanced = function (a, b, c, d, e) {
                    return instanceExt_1.drawElementsInstancedANGLE(a, b, c, d, e);
                };
                gl.drawArraysInstanced = function (a, b, c, d) {
                    return instanceExt_1.drawArraysInstancedANGLE(a, b, c, d);
                };
            }
            else {
                this.hasInstance = false;
            }
        }
        this.canUseUInt32ElementIndex = context.webGLVersion === 2 || !!context.extensions.uint32ElementIndex;
    };
    /**
     * Binds geometry so that is can be drawn. Creating a Vao if required
     * @param geometry - Instance of geometry to bind.
     * @param shader - Instance of shader to use vao for.
     */
    GeometrySystem.prototype.bind = function (geometry, shader) {
        shader = shader || this.renderer.shader.shader;
        var gl = this.gl;
        // not sure the best way to address this..
        // currently different shaders require different VAOs for the same geometry
        // Still mulling over the best way to solve this one..
        // will likely need to modify the shader attribute locations at run time!
        var vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];
        var incRefCount = false;
        if (!vaos) {
            this.managedGeometries[geometry.id] = geometry;
            geometry.disposeRunner.add(this);
            geometry.glVertexArrayObjects[this.CONTEXT_UID] = vaos = {};
            incRefCount = true;
        }
        var vao = vaos[shader.program.id] || this.initGeometryVao(geometry, shader, incRefCount);
        this._activeGeometry = geometry;
        if (this._activeVao !== vao) {
            this._activeVao = vao;
            if (this.hasVao) {
                gl.bindVertexArray(vao);
            }
            else {
                this.activateVao(geometry, shader.program);
            }
        }
        // TODO - optimise later!
        // don't need to loop through if nothing changed!
        // maybe look to add an 'autoupdate' to geometry?
        this.updateBuffers();
    };
    /** Reset and unbind any active VAO and geometry. */
    GeometrySystem.prototype.reset = function () {
        this.unbind();
    };
    /** Update buffers of the currently bound geometry. */
    GeometrySystem.prototype.updateBuffers = function () {
        var geometry = this._activeGeometry;
        var bufferSystem = this.renderer.buffer;
        for (var i = 0; i < geometry.buffers.length; i++) {
            var buffer = geometry.buffers[i];
            bufferSystem.update(buffer);
        }
    };
    /**
     * Check compatibility between a geometry and a program
     * @param geometry - Geometry instance.
     * @param program - Program instance.
     */
    GeometrySystem.prototype.checkCompatibility = function (geometry, program) {
        // geometry must have at least all the attributes that the shader requires.
        var geometryAttributes = geometry.attributes;
        var shaderAttributes = program.attributeData;
        for (var j in shaderAttributes) {
            if (!geometryAttributes[j]) {
                throw new Error("shader and geometry incompatible, geometry missing the \"" + j + "\" attribute");
            }
        }
    };
    /**
     * Takes a geometry and program and generates a unique signature for them.
     * @param geometry - To get signature from.
     * @param program - To test geometry against.
     * @returns - Unique signature of the geometry and program
     */
    GeometrySystem.prototype.getSignature = function (geometry, program) {
        var attribs = geometry.attributes;
        var shaderAttributes = program.attributeData;
        var strings = ['g', geometry.id];
        for (var i in attribs) {
            if (shaderAttributes[i]) {
                strings.push(i, shaderAttributes[i].location);
            }
        }
        return strings.join('-');
    };
    /**
     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.
     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the
     * attribute locations.
     * @param geometry - Instance of geometry to to generate Vao for.
     * @param shader - Instance of the shader.
     * @param incRefCount - Increment refCount of all geometry buffers.
     */
    GeometrySystem.prototype.initGeometryVao = function (geometry, shader, incRefCount) {
        if (incRefCount === void 0) { incRefCount = true; }
        var gl = this.gl;
        var CONTEXT_UID = this.CONTEXT_UID;
        var bufferSystem = this.renderer.buffer;
        var program = shader.program;
        if (!program.glPrograms[CONTEXT_UID]) {
            this.renderer.shader.generateProgram(shader);
        }
        this.checkCompatibility(geometry, program);
        var signature = this.getSignature(geometry, program);
        var vaoObjectHash = geometry.glVertexArrayObjects[this.CONTEXT_UID];
        var vao = vaoObjectHash[signature];
        if (vao) {
            // this will give us easy access to the vao
            vaoObjectHash[program.id] = vao;
            return vao;
        }
        var buffers = geometry.buffers;
        var attributes = geometry.attributes;
        var tempStride = {};
        var tempStart = {};
        for (var j in buffers) {
            tempStride[j] = 0;
            tempStart[j] = 0;
        }
        for (var j in attributes) {
            if (!attributes[j].size && program.attributeData[j]) {
                attributes[j].size = program.attributeData[j].size;
            }
            else if (!attributes[j].size) {
                console.warn("PIXI Geometry attribute '" + j + "' size cannot be determined (likely the bound shader does not have the attribute)"); // eslint-disable-line
            }
            tempStride[attributes[j].buffer] += attributes[j].size * byteSizeMap[attributes[j].type];
        }
        for (var j in attributes) {
            var attribute = attributes[j];
            var attribSize = attribute.size;
            if (attribute.stride === undefined) {
                if (tempStride[attribute.buffer] === attribSize * byteSizeMap[attribute.type]) {
                    attribute.stride = 0;
                }
                else {
                    attribute.stride = tempStride[attribute.buffer];
                }
            }
            if (attribute.start === undefined) {
                attribute.start = tempStart[attribute.buffer];
                tempStart[attribute.buffer] += attribSize * byteSizeMap[attribute.type];
            }
        }
        vao = gl.createVertexArray();
        gl.bindVertexArray(vao);
        // first update - and create the buffers!
        // only create a gl buffer if it actually gets
        for (var i = 0; i < buffers.length; i++) {
            var buffer = buffers[i];
            bufferSystem.bind(buffer);
            if (incRefCount) {
                buffer._glBuffers[CONTEXT_UID].refCount++;
            }
        }
        // TODO - maybe make this a data object?
        // lets wait to see if we need to first!
        this.activateVao(geometry, program);
        this._activeVao = vao;
        // add it to the cache!
        vaoObjectHash[program.id] = vao;
        vaoObjectHash[signature] = vao;
        return vao;
    };
    /**
     * Disposes geometry.
     * @param geometry - Geometry with buffers. Only VAO will be disposed
     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray
     */
    GeometrySystem.prototype.disposeGeometry = function (geometry, contextLost) {
        var _a;
        if (!this.managedGeometries[geometry.id]) {
            return;
        }
        delete this.managedGeometries[geometry.id];
        var vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];
        var gl = this.gl;
        var buffers = geometry.buffers;
        var bufferSystem = (_a = this.renderer) === null || _a === void 0 ? void 0 : _a.buffer;
        geometry.disposeRunner.remove(this);
        if (!vaos) {
            return;
        }
        // bufferSystem may have already been destroyed..
        // if this is the case, there is no need to destroy the geometry buffers...
        // they already have been!
        if (bufferSystem) {
            for (var i = 0; i < buffers.length; i++) {
                var buf = buffers[i]._glBuffers[this.CONTEXT_UID];
                // my be null as context may have changed right before the dispose is called
                if (buf) {
                    buf.refCount--;
                    if (buf.refCount === 0 && !contextLost) {
                        bufferSystem.dispose(buffers[i], contextLost);
                    }
                }
            }
        }
        if (!contextLost) {
            for (var vaoId in vaos) {
                // delete only signatures, everything else are copies
                if (vaoId[0] === 'g') {
                    var vao = vaos[vaoId];
                    if (this._activeVao === vao) {
                        this.unbind();
                    }
                    gl.deleteVertexArray(vao);
                }
            }
        }
        delete geometry.glVertexArrayObjects[this.CONTEXT_UID];
    };
    /**
     * Dispose all WebGL resources of all managed geometries.
     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls
     */
    GeometrySystem.prototype.disposeAll = function (contextLost) {
        var all = Object.keys(this.managedGeometries);
        for (var i = 0; i < all.length; i++) {
            this.disposeGeometry(this.managedGeometries[all[i]], contextLost);
        }
    };
    /**
     * Activate vertex array object.
     * @param geometry - Geometry instance.
     * @param program - Shader program instance.
     */
    GeometrySystem.prototype.activateVao = function (geometry, program) {
        var gl = this.gl;
        var CONTEXT_UID = this.CONTEXT_UID;
        var bufferSystem = this.renderer.buffer;
        var buffers = geometry.buffers;
        var attributes = geometry.attributes;
        if (geometry.indexBuffer) {
            // first update the index buffer if we have one..
            bufferSystem.bind(geometry.indexBuffer);
        }
        var lastBuffer = null;
        // add a new one!
        for (var j in attributes) {
            var attribute = attributes[j];
            var buffer = buffers[attribute.buffer];
            var glBuffer = buffer._glBuffers[CONTEXT_UID];
            if (program.attributeData[j]) {
                if (lastBuffer !== glBuffer) {
                    bufferSystem.bind(buffer);
                    lastBuffer = glBuffer;
                }
                var location = program.attributeData[j].location;
                // TODO introduce state again
                // we can optimise this for older devices that have no VAOs
                gl.enableVertexAttribArray(location);
                gl.vertexAttribPointer(location, attribute.size, attribute.type || gl.FLOAT, attribute.normalized, attribute.stride, attribute.start);
                if (attribute.instance) {
                    // TODO calculate instance count based of this...
                    if (this.hasInstance) {
                        gl.vertexAttribDivisor(location, 1);
                    }
                    else {
                        throw new Error('geometry error, GPU Instancing is not supported on this device');
                    }
                }
            }
        }
    };
    /**
     * Draws the currently bound geometry.
     * @param type - The type primitive to render.
     * @param size - The number of elements to be rendered. If not specified, all vertices after the
     *  starting vertex will be drawn.
     * @param start - The starting vertex in the geometry to start drawing from. If not specified,
     *  drawing will start from the first vertex.
     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,
     *  all instances will be drawn.
     */
    GeometrySystem.prototype.draw = function (type, size, start, instanceCount) {
        var gl = this.gl;
        var geometry = this._activeGeometry;
        // TODO.. this should not change so maybe cache the function?
        if (geometry.indexBuffer) {
            var byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;
            var glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;
            if (byteSize === 2 || (byteSize === 4 && this.canUseUInt32ElementIndex)) {
                if (geometry.instanced) {
                    /* eslint-disable max-len */
                    gl.drawElementsInstanced(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount || 1);
                    /* eslint-enable max-len */
                }
                else {
                    /* eslint-disable max-len */
                    gl.drawElements(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);
                    /* eslint-enable max-len */
                }
            }
            else {
                console.warn('unsupported index buffer type: uint32');
            }
        }
        else if (geometry.instanced) {
            // TODO need a better way to calculate size..
            gl.drawArraysInstanced(type, start, size || geometry.getSize(), instanceCount || 1);
        }
        else {
            gl.drawArrays(type, start, size || geometry.getSize());
        }
        return this;
    };
    /** Unbind/reset everything. */
    GeometrySystem.prototype.unbind = function () {
        this.gl.bindVertexArray(null);
        this._activeVao = null;
        this._activeGeometry = null;
    };
    GeometrySystem.prototype.destroy = function () {
        this.renderer = null;
    };
    return GeometrySystem;
}());

/**
 * Component for masked elements.
 *
 * Holds mask mode and temporary data about current mask.
 * @memberof PIXI
 */
var MaskData = /** @class */ (function () {
    /**
     * Create MaskData
     * @param {PIXI.DisplayObject} [maskObject=null] - object that describes the mask
     */
    function MaskData(maskObject) {
        if (maskObject === void 0) { maskObject = null; }
        this.type = MASK_TYPES.NONE;
        this.autoDetect = true;
        this.maskObject = maskObject || null;
        this.pooled = false;
        this.isMaskData = true;
        this.resolution = null;
        this.multisample = settings.FILTER_MULTISAMPLE;
        this.enabled = true;
        this.colorMask = 0xf;
        this._filters = null;
        this._stencilCounter = 0;
        this._scissorCounter = 0;
        this._scissorRect = null;
        this._scissorRectLocal = null;
        this._colorMask = 0xf;
        this._target = null;
    }
    Object.defineProperty(MaskData.prototype, "filter", {
        /**
         * The sprite mask filter.
         * If set to `null`, the default sprite mask filter is used.
         * @default null
         */
        get: function () {
            return this._filters ? this._filters[0] : null;
        },
        set: function (value) {
            if (value) {
                if (this._filters) {
                    this._filters[0] = value;
                }
                else {
                    this._filters = [value];
                }
            }
            else {
                this._filters = null;
            }
        },
        enumerable: false,
        configurable: true
    });
    /** Resets the mask data after popMask(). */
    MaskData.prototype.reset = function () {
        if (this.pooled) {
            this.maskObject = null;
            this.type = MASK_TYPES.NONE;
            this.autoDetect = true;
        }
        this._target = null;
        this._scissorRectLocal = null;
    };
    /**
     * Copies counters from maskData above, called from pushMask().
     * @param maskAbove
     */
    MaskData.prototype.copyCountersOrReset = function (maskAbove) {
        if (maskAbove) {
            this._stencilCounter = maskAbove._stencilCounter;
            this._scissorCounter = maskAbove._scissorCounter;
            this._scissorRect = maskAbove._scissorRect;
        }
        else {
            this._stencilCounter = 0;
            this._scissorCounter = 0;
            this._scissorRect = null;
        }
    };
    return MaskData;
}());

/**
 * @private
 * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}
 * @param {number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER
 * @param {string} src - The vertex shader source as an array of strings.
 * @returns {WebGLShader} the shader
 */
function compileShader(gl, type, src) {
    var shader = gl.createShader(type);
    gl.shaderSource(shader, src);
    gl.compileShader(shader);
    return shader;
}

/**
 * will log a shader error highlighting the lines with the error
 * also will add numbers along the side.
 * @param gl - the WebGLContext
 * @param shader - the shader to log errors for
 */
function logPrettyShaderError(gl, shader) {
    var shaderSrc = gl.getShaderSource(shader)
        .split('\n')
        .map(function (line, index) { return index + ": " + line; });
    var shaderLog = gl.getShaderInfoLog(shader);
    var splitShader = shaderLog.split('\n');
    var dedupe = {};
    var lineNumbers = splitShader.map(function (line) { return parseFloat(line.replace(/^ERROR\: 0\:([\d]+)\:.*$/, '$1')); })
        .filter(function (n) {
        if (n && !dedupe[n]) {
            dedupe[n] = true;
            return true;
        }
        return false;
    });
    var logArgs = [''];
    lineNumbers.forEach(function (number) {
        shaderSrc[number - 1] = "%c" + shaderSrc[number - 1] + "%c";
        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');
    });
    var fragmentSourceToLog = shaderSrc
        .join('\n');
    logArgs[0] = fragmentSourceToLog;
    console.error(shaderLog);
    // eslint-disable-next-line no-console
    console.groupCollapsed('click to view full shader code');
    console.warn.apply(console, logArgs);
    // eslint-disable-next-line no-console
    console.groupEnd();
}
/**
 *
 * logs out any program errors
 * @param gl - The current WebGL context
 * @param program - the WebGL program to display errors for
 * @param vertexShader  - the fragment WebGL shader program
 * @param fragmentShader - the vertex WebGL shader program
 */
function logProgramError(gl, program, vertexShader, fragmentShader) {
    // if linking fails, then log and cleanup
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
            logPrettyShaderError(gl, vertexShader);
        }
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
            logPrettyShaderError(gl, fragmentShader);
        }
        console.error('PixiJS Error: Could not initialize shader.');
        // if there is a program info log, log it
        if (gl.getProgramInfoLog(program) !== '') {
            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));
        }
    }
}

function booleanArray(size) {
    var array = new Array(size);
    for (var i = 0; i < array.length; i++) {
        array[i] = false;
    }
    return array;
}
/**
 * @method defaultValue
 * @memberof PIXI.glCore.shader
 * @param {string} type - Type of value
 * @param {number} size
 * @private
 */
function defaultValue(type, size) {
    switch (type) {
        case 'float':
            return 0;
        case 'vec2':
            return new Float32Array(2 * size);
        case 'vec3':
            return new Float32Array(3 * size);
        case 'vec4':
            return new Float32Array(4 * size);
        case 'int':
        case 'uint':
        case 'sampler2D':
        case 'sampler2DArray':
            return 0;
        case 'ivec2':
            return new Int32Array(2 * size);
        case 'ivec3':
            return new Int32Array(3 * size);
        case 'ivec4':
            return new Int32Array(4 * size);
        case 'uvec2':
            return new Uint32Array(2 * size);
        case 'uvec3':
            return new Uint32Array(3 * size);
        case 'uvec4':
            return new Uint32Array(4 * size);
        case 'bool':
            return false;
        case 'bvec2':
            return booleanArray(2 * size);
        case 'bvec3':
            return booleanArray(3 * size);
        case 'bvec4':
            return booleanArray(4 * size);
        case 'mat2':
            return new Float32Array([1, 0,
                0, 1]);
        case 'mat3':
            return new Float32Array([1, 0, 0,
                0, 1, 0,
                0, 0, 1]);
        case 'mat4':
            return new Float32Array([1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1]);
    }
    return null;
}

var unknownContext = {};
var context = unknownContext;
/**
 * returns a little WebGL context to use for program inspection.
 * @static
 * @private
 * @returns {WebGLRenderingContext} a gl context to test with
 */
function getTestContext() {
    if (context === unknownContext || (context && context.isContextLost())) {
        var canvas = settings.ADAPTER.createCanvas();
        var gl = void 0;
        if (settings.PREFER_ENV >= ENV.WEBGL2) {
            gl = canvas.getContext('webgl2', {});
        }
        if (!gl) {
            gl = (canvas.getContext('webgl', {})
                || canvas.getContext('experimental-webgl', {}));
            if (!gl) {
                // fail, not able to get a context
                gl = null;
            }
            else {
                // for shader testing..
                gl.getExtension('WEBGL_draw_buffers');
            }
        }
        context = gl;
    }
    return context;
}

var maxFragmentPrecision;
function getMaxFragmentPrecision() {
    if (!maxFragmentPrecision) {
        maxFragmentPrecision = PRECISION.MEDIUM;
        var gl = getTestContext();
        if (gl) {
            if (gl.getShaderPrecisionFormat) {
                var shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
                maxFragmentPrecision = shaderFragment.precision ? PRECISION.HIGH : PRECISION.MEDIUM;
            }
        }
    }
    return maxFragmentPrecision;
}

/**
 * Sets the float precision on the shader, ensuring the device supports the request precision.
 * If the precision is already present, it just ensures that the device is able to handle it.
 * @private
 * @param {string} src - The shader source
 * @param {PIXI.PRECISION} requestedPrecision - The request float precision of the shader.
 * @param {PIXI.PRECISION} maxSupportedPrecision - The maximum precision the shader supports.
 * @returns {string} modified shader source
 */
function setPrecision(src, requestedPrecision, maxSupportedPrecision) {
    if (src.substring(0, 9) !== 'precision') {
        // no precision supplied, so PixiJS will add the requested level.
        var precision = requestedPrecision;
        // If highp is requested but not supported, downgrade precision to a level all devices support.
        if (requestedPrecision === PRECISION.HIGH && maxSupportedPrecision !== PRECISION.HIGH) {
            precision = PRECISION.MEDIUM;
        }
        return "precision " + precision + " float;\n" + src;
    }
    else if (maxSupportedPrecision !== PRECISION.HIGH && src.substring(0, 15) === 'precision highp') {
        // precision was supplied, but at a level this device does not support, so downgrading to mediump.
        return src.replace('precision highp', 'precision mediump');
    }
    return src;
}

var GLSL_TO_SIZE = {
    float: 1,
    vec2: 2,
    vec3: 3,
    vec4: 4,
    int: 1,
    ivec2: 2,
    ivec3: 3,
    ivec4: 4,
    uint: 1,
    uvec2: 2,
    uvec3: 3,
    uvec4: 4,
    bool: 1,
    bvec2: 2,
    bvec3: 3,
    bvec4: 4,
    mat2: 4,
    mat3: 9,
    mat4: 16,
    sampler2D: 1,
};
/**
 * @private
 * @method mapSize
 * @memberof PIXI.glCore.shader
 * @param {string} type
 */
function mapSize(type) {
    return GLSL_TO_SIZE[type];
}

var GL_TABLE = null;
var GL_TO_GLSL_TYPES = {
    FLOAT: 'float',
    FLOAT_VEC2: 'vec2',
    FLOAT_VEC3: 'vec3',
    FLOAT_VEC4: 'vec4',
    INT: 'int',
    INT_VEC2: 'ivec2',
    INT_VEC3: 'ivec3',
    INT_VEC4: 'ivec4',
    UNSIGNED_INT: 'uint',
    UNSIGNED_INT_VEC2: 'uvec2',
    UNSIGNED_INT_VEC3: 'uvec3',
    UNSIGNED_INT_VEC4: 'uvec4',
    BOOL: 'bool',
    BOOL_VEC2: 'bvec2',
    BOOL_VEC3: 'bvec3',
    BOOL_VEC4: 'bvec4',
    FLOAT_MAT2: 'mat2',
    FLOAT_MAT3: 'mat3',
    FLOAT_MAT4: 'mat4',
    SAMPLER_2D: 'sampler2D',
    INT_SAMPLER_2D: 'sampler2D',
    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',
    SAMPLER_CUBE: 'samplerCube',
    INT_SAMPLER_CUBE: 'samplerCube',
    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',
    SAMPLER_2D_ARRAY: 'sampler2DArray',
    INT_SAMPLER_2D_ARRAY: 'sampler2DArray',
    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function mapType(gl, type) {
    if (!GL_TABLE) {
        var typeNames = Object.keys(GL_TO_GLSL_TYPES);
        GL_TABLE = {};
        for (var i = 0; i < typeNames.length; ++i) {
            var tn = typeNames[i];
            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];
        }
    }
    return GL_TABLE[type];
}

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
// Parsers, each one of these will take a look at the type of shader property and uniform.
// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.
// Shader upload code is automagically generated with these parsers.
// If no parser is valid then the default upload functions are used.
// exposing Parsers means that custom upload logic can be added to pixi's shaders.
// A good example would be a pixi rectangle can be directly set on a uniform.
// If the shader sees it it knows how to upload the rectangle structure as a vec4
// format is as follows:
//
// {
//     test: (data, uniform) => {} <--- test is this code should be used for this uniform
//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform
//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the
//                                         uniform to a uniform buffer
// }
var uniformParsers = [
    // a float cache layer
    {
        test: function (data) {
            return data.type === 'float' && data.size === 1 && !data.isArray;
        },
        code: function (name) {
            return "\n            if(uv[\"" + name + "\"] !== ud[\"" + name + "\"].value)\n            {\n                ud[\"" + name + "\"].value = uv[\"" + name + "\"]\n                gl.uniform1f(ud[\"" + name + "\"].location, uv[\"" + name + "\"])\n            }\n            ";
        },
    },
    // handling samplers
    {
        test: function (data, uniform) {
            // eslint-disable-next-line max-len,no-eq-null,eqeqeq
            return (data.type === 'sampler2D' || data.type === 'samplerCube' || data.type === 'sampler2DArray') && data.size === 1 && !data.isArray && (uniform == null || uniform.castToBaseTexture !== undefined);
        },
        code: function (name) { return "t = syncData.textureCount++;\n\n            renderer.texture.bind(uv[\"" + name + "\"], t);\n\n            if(ud[\"" + name + "\"].value !== t)\n            {\n                ud[\"" + name + "\"].value = t;\n                gl.uniform1i(ud[\"" + name + "\"].location, t);\n; // eslint-disable-line max-len\n            }"; },
    },
    // uploading pixi matrix object to mat3
    {
        test: function (data, uniform) {
            return data.type === 'mat3' && data.size === 1 && !data.isArray && uniform.a !== undefined;
        },
        code: function (name) {
            // TODO and some smart caching dirty ids here!
            return "\n            gl.uniformMatrix3fv(ud[\"" + name + "\"].location, false, uv[\"" + name + "\"].toArray(true));\n            ";
        },
        codeUbo: function (name) {
            return "\n                var " + name + "_matrix = uv." + name + ".toArray(true);\n\n                data[offset] = " + name + "_matrix[0];\n                data[offset+1] = " + name + "_matrix[1];\n                data[offset+2] = " + name + "_matrix[2];\n        \n                data[offset + 4] = " + name + "_matrix[3];\n                data[offset + 5] = " + name + "_matrix[4];\n                data[offset + 6] = " + name + "_matrix[5];\n        \n                data[offset + 8] = " + name + "_matrix[6];\n                data[offset + 9] = " + name + "_matrix[7];\n                data[offset + 10] = " + name + "_matrix[8];\n            ";
        },
    },
    // uploading a pixi point as a vec2 with caching layer
    {
        test: function (data, uniform) {
            return data.type === 'vec2' && data.size === 1 && !data.isArray && uniform.x !== undefined;
        },
        code: function (name) {
            return "\n                cv = ud[\"" + name + "\"].value;\n                v = uv[\"" + name + "\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud[\"" + name + "\"].location, v.x, v.y);\n                }";
        },
        codeUbo: function (name) {
            return "\n                v = uv." + name + ";\n\n                data[offset] = v.x;\n                data[offset+1] = v.y;\n            ";
        }
    },
    // caching layer for a vec2
    {
        test: function (data) {
            return data.type === 'vec2' && data.size === 1 && !data.isArray;
        },
        code: function (name) {
            return "\n                cv = ud[\"" + name + "\"].value;\n                v = uv[\"" + name + "\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud[\"" + name + "\"].location, v[0], v[1]);\n                }\n            ";
        },
    },
    // upload a pixi rectangle as a vec4 with caching layer
    {
        test: function (data, uniform) {
            return data.type === 'vec4' && data.size === 1 && !data.isArray && uniform.width !== undefined;
        },
        code: function (name) {
            return "\n                cv = ud[\"" + name + "\"].value;\n                v = uv[\"" + name + "\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud[\"" + name + "\"].location, v.x, v.y, v.width, v.height)\n                }";
        },
        codeUbo: function (name) {
            return "\n                    v = uv." + name + ";\n\n                    data[offset] = v.x;\n                    data[offset+1] = v.y;\n                    data[offset+2] = v.width;\n                    data[offset+3] = v.height;\n                ";
        }
    },
    // a caching layer for vec4 uploading
    {
        test: function (data) {
            return data.type === 'vec4' && data.size === 1 && !data.isArray;
        },
        code: function (name) {
            return "\n                cv = ud[\"" + name + "\"].value;\n                v = uv[\"" + name + "\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud[\"" + name + "\"].location, v[0], v[1], v[2], v[3])\n                }";
        },
    } ];

// cu = Cached value's uniform data field
// cv = Cached value
// v = value to upload
// ud = uniformData
// uv = uniformValue
// l = location
var GLSL_TO_SINGLE_SETTERS_CACHED = {
    float: "\n    if (cv !== v)\n    {\n        cu.value = v;\n        gl.uniform1f(location, v);\n    }",
    vec2: "\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2f(location, v[0], v[1])\n    }",
    vec3: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3f(location, v[0], v[1], v[2])\n    }",
    vec4: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n    }",
    int: "\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }",
    ivec2: "\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2i(location, v[0], v[1]);\n    }",
    ivec3: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3i(location, v[0], v[1], v[2]);\n    }",
    ivec4: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n    }",
    uint: "\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1ui(location, v);\n    }",
    uvec2: "\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2ui(location, v[0], v[1]);\n    }",
    uvec3: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3ui(location, v[0], v[1], v[2]);\n    }",
    uvec4: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n    }",
    bool: "\n    if (cv !== v)\n    {\n        cu.value = v;\n        gl.uniform1i(location, v);\n    }",
    bvec2: "\n    if (cv[0] != v[0] || cv[1] != v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2i(location, v[0], v[1]);\n    }",
    bvec3: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3i(location, v[0], v[1], v[2]);\n    }",
    bvec4: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n    }",
    mat2: 'gl.uniformMatrix2fv(location, false, v)',
    mat3: 'gl.uniformMatrix3fv(location, false, v)',
    mat4: 'gl.uniformMatrix4fv(location, false, v)',
    sampler2D: "\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }",
    samplerCube: "\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }",
    sampler2DArray: "\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }",
};
var GLSL_TO_ARRAY_SETTERS = {
    float: "gl.uniform1fv(location, v)",
    vec2: "gl.uniform2fv(location, v)",
    vec3: "gl.uniform3fv(location, v)",
    vec4: 'gl.uniform4fv(location, v)',
    mat4: 'gl.uniformMatrix4fv(location, false, v)',
    mat3: 'gl.uniformMatrix3fv(location, false, v)',
    mat2: 'gl.uniformMatrix2fv(location, false, v)',
    int: 'gl.uniform1iv(location, v)',
    ivec2: 'gl.uniform2iv(location, v)',
    ivec3: 'gl.uniform3iv(location, v)',
    ivec4: 'gl.uniform4iv(location, v)',
    uint: 'gl.uniform1uiv(location, v)',
    uvec2: 'gl.uniform2uiv(location, v)',
    uvec3: 'gl.uniform3uiv(location, v)',
    uvec4: 'gl.uniform4uiv(location, v)',
    bool: 'gl.uniform1iv(location, v)',
    bvec2: 'gl.uniform2iv(location, v)',
    bvec3: 'gl.uniform3iv(location, v)',
    bvec4: 'gl.uniform4iv(location, v)',
    sampler2D: 'gl.uniform1iv(location, v)',
    samplerCube: 'gl.uniform1iv(location, v)',
    sampler2DArray: 'gl.uniform1iv(location, v)',
};
function generateUniformsSync(group, uniformData) {
    var _a;
    var funcFragments = ["\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n    "];
    for (var i in group.uniforms) {
        var data = uniformData[i];
        if (!data) {
            if ((_a = group.uniforms[i]) === null || _a === void 0 ? void 0 : _a.group) {
                if (group.uniforms[i].ubo) {
                    funcFragments.push("\n                        renderer.shader.syncUniformBufferGroup(uv." + i + ", '" + i + "');\n                    ");
                }
                else {
                    funcFragments.push("\n                        renderer.shader.syncUniformGroup(uv." + i + ", syncData);\n                    ");
                }
            }
            continue;
        }
        var uniform = group.uniforms[i];
        var parsed = false;
        for (var j = 0; j < uniformParsers.length; j++) {
            if (uniformParsers[j].test(data, uniform)) {
                funcFragments.push(uniformParsers[j].code(i, uniform));
                parsed = true;
                break;
            }
        }
        if (!parsed) {
            var templateType = data.size === 1 && !data.isArray ? GLSL_TO_SINGLE_SETTERS_CACHED : GLSL_TO_ARRAY_SETTERS;
            var template = templateType[data.type].replace('location', "ud[\"" + i + "\"].location");
            funcFragments.push("\n            cu = ud[\"" + i + "\"];\n            cv = cu.value;\n            v = uv[\"" + i + "\"];\n            " + template + ";");
        }
    }
    /*
     * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly
     * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used
     * no matter which group is being used
     *
     */
    // eslint-disable-next-line no-new-func
    return new Function('ud', 'uv', 'renderer', 'syncData', funcFragments.join('\n'));
}

var fragTemplate = [
    'precision mediump float;',
    'void main(void){',
    'float test = 0.1;',
    '%forloop%',
    'gl_FragColor = vec4(0.0);',
    '}' ].join('\n');
function generateIfTestSrc(maxIfs) {
    var src = '';
    for (var i = 0; i < maxIfs; ++i) {
        if (i > 0) {
            src += '\nelse ';
        }
        if (i < maxIfs - 1) {
            src += "if(test == " + i + ".0){}";
        }
    }
    return src;
}
function checkMaxIfStatementsInShader(maxIfs, gl) {
    if (maxIfs === 0) {
        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');
    }
    var shader = gl.createShader(gl.FRAGMENT_SHADER);
    while (true) // eslint-disable-line no-constant-condition
     {
        var fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));
        gl.shaderSource(shader, fragmentSrc);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            maxIfs = (maxIfs / 2) | 0;
        }
        else {
            // valid!
            break;
        }
    }
    return maxIfs;
}

// Cache the result to prevent running this over and over
var unsafeEval;
/**
 * Not all platforms allow to generate function code (e.g., `new Function`).
 * this provides the platform-level detection.
 * @private
 * @returns {boolean} `true` if `new Function` is supported.
 */
function unsafeEvalSupported() {
    if (typeof unsafeEval === 'boolean') {
        return unsafeEval;
    }
    try {
        /* eslint-disable no-new-func */
        var func = new Function('param1', 'param2', 'param3', 'return param1[param2] === param3;');
        /* eslint-enable no-new-func */
        unsafeEval = func({ a: 'b' }, 'a', 'b') === true;
    }
    catch (e) {
        unsafeEval = false;
    }
    return unsafeEval;
}

var defaultFragment$2 = "varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor *= texture2D(uSampler, vTextureCoord);\n}";

var defaultVertex$3 = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vTextureCoord = aTextureCoord;\n}\n";

var UID$1 = 0;
var nameCache = {};
/**
 * Helper class to create a shader program.
 * @memberof PIXI
 */
var Program = /** @class */ (function () {
    /**
     * @param vertexSrc - The source of the vertex shader.
     * @param fragmentSrc - The source of the fragment shader.
     * @param name - Name for shader
     */
    function Program(vertexSrc, fragmentSrc, name) {
        if (name === void 0) { name = 'pixi-shader'; }
        this.id = UID$1++;
        this.vertexSrc = vertexSrc || Program.defaultVertexSrc;
        this.fragmentSrc = fragmentSrc || Program.defaultFragmentSrc;
        this.vertexSrc = this.vertexSrc.trim();
        this.fragmentSrc = this.fragmentSrc.trim();
        if (this.vertexSrc.substring(0, 8) !== '#version') {
            name = name.replace(/\s+/g, '-');
            if (nameCache[name]) {
                nameCache[name]++;
                name += "-" + nameCache[name];
            }
            else {
                nameCache[name] = 1;
            }
            this.vertexSrc = "#define SHADER_NAME " + name + "\n" + this.vertexSrc;
            this.fragmentSrc = "#define SHADER_NAME " + name + "\n" + this.fragmentSrc;
            this.vertexSrc = setPrecision(this.vertexSrc, settings.PRECISION_VERTEX, PRECISION.HIGH);
            this.fragmentSrc = setPrecision(this.fragmentSrc, settings.PRECISION_FRAGMENT, getMaxFragmentPrecision());
        }
        // currently this does not extract structs only default types
        // this is where we store shader references..
        this.glPrograms = {};
        this.syncUniforms = null;
    }
    Object.defineProperty(Program, "defaultVertexSrc", {
        /**
         * The default vertex shader source.
         * @constant
         */
        get: function () {
            return defaultVertex$3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Program, "defaultFragmentSrc", {
        /**
         * The default fragment shader source.
         * @constant
         */
        get: function () {
            return defaultFragment$2;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * A short hand function to create a program based of a vertex and fragment shader.
     *
     * This method will also check to see if there is a cached program.
     * @param vertexSrc - The source of the vertex shader.
     * @param fragmentSrc - The source of the fragment shader.
     * @param name - Name for shader
     * @returns A shiny new PixiJS shader program!
     */
    Program.from = function (vertexSrc, fragmentSrc, name) {
        var key = vertexSrc + fragmentSrc;
        var program = ProgramCache[key];
        if (!program) {
            ProgramCache[key] = program = new Program(vertexSrc, fragmentSrc, name);
        }
        return program;
    };
    return Program;
}());

/**
 * A helper class for shaders.
 * @memberof PIXI
 */
var Shader = /** @class */ (function () {
    /**
     * @param program - The program the shader will use.
     * @param uniforms - Custom uniforms to use to augment the built-in ones.
     */
    function Shader(program, uniforms) {
        /**
         * Used internally to bind uniform buffer objects.
         * @ignore
         */
        this.uniformBindCount = 0;
        this.program = program;
        // lets see whats been passed in
        // uniforms should be converted to a uniform group
        if (uniforms) {
            if (uniforms instanceof UniformGroup) {
                this.uniformGroup = uniforms;
            }
            else {
                this.uniformGroup = new UniformGroup(uniforms);
            }
        }
        else {
            this.uniformGroup = new UniformGroup({});
        }
        this.disposeRunner = new Runner('disposeShader');
    }
    // TODO move to shader system..
    Shader.prototype.checkUniformExists = function (name, group) {
        if (group.uniforms[name]) {
            return true;
        }
        for (var i in group.uniforms) {
            var uniform = group.uniforms[i];
            if (uniform.group) {
                if (this.checkUniformExists(name, uniform)) {
                    return true;
                }
            }
        }
        return false;
    };
    Shader.prototype.destroy = function () {
        // usage count on programs?
        // remove if not used!
        this.uniformGroup = null;
        this.disposeRunner.emit(this);
        this.disposeRunner.destroy();
    };
    Object.defineProperty(Shader.prototype, "uniforms", {
        /**
         * Shader uniform values, shortcut for `uniformGroup.uniforms`.
         * @readonly
         */
        get: function () {
            return this.uniformGroup.uniforms;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * A short hand function to create a shader based of a vertex and fragment shader.
     * @param vertexSrc - The source of the vertex shader.
     * @param fragmentSrc - The source of the fragment shader.
     * @param uniforms - Custom uniforms to use to augment the built-in ones.
     * @returns A shiny new PixiJS shader!
     */
    Shader.from = function (vertexSrc, fragmentSrc, uniforms) {
        var program = Program.from(vertexSrc, fragmentSrc);
        return new Shader(program, uniforms);
    };
    return Shader;
}());

/* eslint-disable max-len */
var BLEND$1 = 0;
var OFFSET$1 = 1;
var CULLING$1 = 2;
var DEPTH_TEST$1 = 3;
var WINDING$1 = 4;
var DEPTH_MASK$1 = 5;
/**
 * This is a WebGL state, and is is passed to {@link PIXI.StateSystem}.
 *
 * Each mesh rendered may require WebGL to be in a different state.
 * For example you may want different blend mode or to enable polygon offsets
 * @memberof PIXI
 */
var State = /** @class */ (function () {
    function State() {
        this.data = 0;
        this.blendMode = BLEND_MODES.NORMAL;
        this.polygonOffset = 0;
        this.blend = true;
        this.depthMask = true;
        //  this.depthTest = true;
    }
    Object.defineProperty(State.prototype, "blend", {
        /**
         * Activates blending of the computed fragment color values.
         * @default true
         */
        get: function () {
            return !!(this.data & (1 << BLEND$1));
        },
        set: function (value) {
            if (!!(this.data & (1 << BLEND$1)) !== value) {
                this.data ^= (1 << BLEND$1);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(State.prototype, "offsets", {
        /**
         * Activates adding an offset to depth values of polygon's fragments
         * @default false
         */
        get: function () {
            return !!(this.data & (1 << OFFSET$1));
        },
        set: function (value) {
            if (!!(this.data & (1 << OFFSET$1)) !== value) {
                this.data ^= (1 << OFFSET$1);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(State.prototype, "culling", {
        /**
         * Activates culling of polygons.
         * @default false
         */
        get: function () {
            return !!(this.data & (1 << CULLING$1));
        },
        set: function (value) {
            if (!!(this.data & (1 << CULLING$1)) !== value) {
                this.data ^= (1 << CULLING$1);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(State.prototype, "depthTest", {
        /**
         * Activates depth comparisons and updates to the depth buffer.
         * @default false
         */
        get: function () {
            return !!(this.data & (1 << DEPTH_TEST$1));
        },
        set: function (value) {
            if (!!(this.data & (1 << DEPTH_TEST$1)) !== value) {
                this.data ^= (1 << DEPTH_TEST$1);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(State.prototype, "depthMask", {
        /**
         * Enables or disables writing to the depth buffer.
         * @default true
         */
        get: function () {
            return !!(this.data & (1 << DEPTH_MASK$1));
        },
        set: function (value) {
            if (!!(this.data & (1 << DEPTH_MASK$1)) !== value) {
                this.data ^= (1 << DEPTH_MASK$1);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(State.prototype, "clockwiseFrontFace", {
        /**
         * Specifies whether or not front or back-facing polygons can be culled.
         * @default false
         */
        get: function () {
            return !!(this.data & (1 << WINDING$1));
        },
        set: function (value) {
            if (!!(this.data & (1 << WINDING$1)) !== value) {
                this.data ^= (1 << WINDING$1);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(State.prototype, "blendMode", {
        /**
         * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         * Setting this mode to anything other than NO_BLEND will automatically switch blending on.
         * @default PIXI.BLEND_MODES.NORMAL
         */
        get: function () {
            return this._blendMode;
        },
        set: function (value) {
            this.blend = (value !== BLEND_MODES.NONE);
            this._blendMode = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(State.prototype, "polygonOffset", {
        /**
         * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.
         * @default 0
         */
        get: function () {
            return this._polygonOffset;
        },
        set: function (value) {
            this.offsets = !!value;
            this._polygonOffset = value;
        },
        enumerable: false,
        configurable: true
    });
    State.prototype.toString = function () {
        return "[@pixi/core:State "
            + ("blendMode=" + this.blendMode + " ")
            + ("clockwiseFrontFace=" + this.clockwiseFrontFace + " ")
            + ("culling=" + this.culling + " ")
            + ("depthMask=" + this.depthMask + " ")
            + ("polygonOffset=" + this.polygonOffset)
            + "]";
    };
    State.for2d = function () {
        var state = new State();
        state.depthTest = false;
        state.blend = true;
        return state;
    };
    return State;
}());

var defaultFragment$1 = "varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\n}\n";

var defaultVertex$2 = "attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n";

/**
 * A filter is a special shader that applies post-processing effects to an input texture and writes into an output
 * render-target.
 *
 * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the
 * {@link PIXI.filters.BlurFilter BlurFilter}.
 *
 * ### Usage
 * Filters can be applied to any DisplayObject or Container.
 * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,
 * then filter renders it to the screen.
 * Multiple filters can be added to the `filters` array property and stacked on each other.
 *
 * ```
 * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });
 * const container = new PIXI.Container();
 * container.filters = [filter];
 * ```
 *
 * ### Previous Version Differences
 *
 * In PixiJS **v3**, a filter was always applied to _whole screen_.
 *
 * In PixiJS **v4**, a filter can be applied _only part of the screen_.
 * Developers had to create a set of uniforms to deal with coordinates.
 *
 * In PixiJS **v5** combines _both approaches_.
 * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,
 * bringing those extra uniforms into account.
 *
 * Also be aware that we have changed default vertex shader, please consult
 * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.
 *
 * ### Frames
 *
 * The following table summarizes the coordinate spaces used in the filtering pipeline:
 *
 * <table>
 * <thead>
 *   <tr>
 *     <th>Coordinate Space</th>
 *     <th>Description</th>
 *   </tr>
 * </thead>
 * <tbody>
 *   <tr>
 *     <td>Texture Coordinates</td>
 *     <td>
 *         The texture (or UV) coordinates in the input base-texture's space. These are normalized into the (0,1) range along
 *         both axes.
 *     </td>
 *   </tr>
 *   <tr>
 *     <td>World Space</td>
 *     <td>
 *         A point in the same space as the world bounds of any display-object (i.e. in the scene graph's space).
 *     </td>
 *   </tr>
 *   <tr>
 *     <td>Physical Pixels</td>
 *     <td>
 *         This is base-texture's space with the origin on the top-left. You can calculate these by multiplying the texture
 *         coordinates by the dimensions of the texture.
 *     </td>
 *   </tr>
 * </tbody>
 * </table>
 *
 * ### Built-in Uniforms
 *
 * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,
 * and `projectionMatrix` uniform maps it to the gl viewport.
 *
 * **uSampler**
 *
 * The most important uniform is the input texture that container was rendered into.
 * _Important note: as with all Framebuffers in PixiJS, both input and output are
 * premultiplied by alpha._
 *
 * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.
 * Use it to sample the input.
 *
 * ```
 * const fragment = `
 * varying vec2 vTextureCoord;
 * uniform sampler2D uSampler;
 * void main(void)
 * {
 *    gl_FragColor = texture2D(uSampler, vTextureCoord);
 * }
 * `;
 *
 * const myFilter = new PIXI.Filter(null, fragment);
 * ```
 *
 * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.
 *
 * **outputFrame**
 *
 * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.
 * It's the same as `renderer.screen` for a fullscreen filter.
 * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,
 * `(0, 0, outputFrame.width, outputFrame.height)`,
 *
 * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.
 * To calculate vertex position in screen space using normalized (0-1) space:
 *
 * ```
 * vec4 filterVertexPosition( void )
 * {
 *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;
 *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);
 * }
 * ```
 *
 * **inputSize**
 *
 * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.
 * The `inputSize.xy` are size of temporary framebuffer that holds input.
 * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.
 *
 * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.
 *
 * To calculate input normalized coordinate, you have to map it to filter normalized space.
 * Multiply by `outputFrame.zw` to get input coordinate.
 * Divide by `inputSize.xy` to get input normalized coordinate.
 *
 * ```
 * vec2 filterTextureCoord( void )
 * {
 *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy
 * }
 * ```
 * **resolution**
 *
 * The `resolution` is the ratio of screen (CSS) pixels to real pixels.
 *
 * **inputPixel**
 *
 * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`
 * `inputPixel.zw` is inverted `inputPixel.xy`.
 *
 * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.
 *
 * **inputClamp**
 *
 * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.
 * For displacements, coordinates has to be clamped.
 *
 * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer
 * `inputClamp.zw` is bottom-right pixel center.
 *
 * ```
 * vec4 color = texture2D(uSampler, clamp(modifiedTextureCoord, inputClamp.xy, inputClamp.zw))
 * ```
 * OR
 * ```
 * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))
 * ```
 *
 * ### Additional Information
 *
 * Complete documentation on Filter usage is located in the
 * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.
 *
 * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded
 * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.
 * @memberof PIXI
 */
var Filter = /** @class */ (function (_super) {
    __extends(Filter, _super);
    /**
     * @param vertexSrc - The source of the vertex shader.
     * @param fragmentSrc - The source of the fragment shader.
     * @param uniforms - Custom uniforms to use to augment the built-in ones.
     */
    function Filter(vertexSrc, fragmentSrc, uniforms) {
        var _this = this;
        var program = Program.from(vertexSrc || Filter.defaultVertexSrc, fragmentSrc || Filter.defaultFragmentSrc);
        _this = _super.call(this, program, uniforms) || this;
        _this.padding = 0;
        _this.resolution = settings.FILTER_RESOLUTION;
        _this.multisample = settings.FILTER_MULTISAMPLE;
        _this.enabled = true;
        _this.autoFit = true;
        _this.state = new State();
        return _this;
    }
    /**
     * Applies the filter
     * @param {PIXI.FilterSystem} filterManager - The renderer to retrieve the filter from
     * @param {PIXI.RenderTexture} input - The input render target.
     * @param {PIXI.RenderTexture} output - The target to output to.
     * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it.
     * @param {object} [_currentState] - It's current state of filter.
     *        There are some useful properties in the currentState :
     *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution
     */
    Filter.prototype.apply = function (filterManager, input, output, clearMode, _currentState) {
        // do as you please!
        filterManager.applyFilter(this, input, output, clearMode);
        // or just do a regular render..
    };
    Object.defineProperty(Filter.prototype, "blendMode", {
        /**
         * Sets the blend mode of the filter.
         * @default PIXI.BLEND_MODES.NORMAL
         */
        get: function () {
            return this.state.blendMode;
        },
        set: function (value) {
            this.state.blendMode = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "resolution", {
        /**
         * The resolution of the filter. Setting this to be lower will lower the quality but
         * increase the performance of the filter.
         */
        get: function () {
            return this._resolution;
        },
        set: function (value) {
            this._resolution = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Filter, "defaultVertexSrc", {
        /**
         * The default vertex shader source
         * @constant
         */
        get: function () {
            return defaultVertex$2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Filter, "defaultFragmentSrc", {
        /**
         * The default fragment shader source
         * @constant
         */
        get: function () {
            return defaultFragment$1;
        },
        enumerable: false,
        configurable: true
    });
    return Filter;
}(Shader));

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 otherMatrix;\n\nvarying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n}\n";

var fragment = "varying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform sampler2D mask;\nuniform float alpha;\nuniform float npmAlpha;\nuniform vec4 maskClamp;\n\nvoid main(void)\n{\n    float clip = step(3.5,\n        step(maskClamp.x, vMaskCoord.x) +\n        step(maskClamp.y, vMaskCoord.y) +\n        step(vMaskCoord.x, maskClamp.z) +\n        step(vMaskCoord.y, maskClamp.w));\n\n    vec4 original = texture2D(uSampler, vTextureCoord);\n    vec4 masky = texture2D(mask, vMaskCoord);\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\n\n    original *= (alphaMul * masky.r * alpha * clip);\n\n    gl_FragColor = original;\n}\n";

var tempMat = new Matrix();
/**
 * Class controls uv mapping from Texture normal space to BaseTexture normal space.
 *
 * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.
 *
 * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.
 * If you want to add support for texture region of certain feature or filter, that's what you're looking for.
 *
 * Takes track of Texture changes through `_lastTextureID` private field.
 * Use `update()` method call to track it from outside.
 * @see PIXI.Texture
 * @see PIXI.Mesh
 * @see PIXI.TilingSprite
 * @memberof PIXI
 */
var TextureMatrix = /** @class */ (function () {
    /**
     * @param texture - observed texture
     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.
     */
    function TextureMatrix(texture, clampMargin) {
        this._texture = texture;
        this.mapCoord = new Matrix();
        this.uClampFrame = new Float32Array(4);
        this.uClampOffset = new Float32Array(2);
        this._textureID = -1;
        this._updateID = 0;
        this.clampOffset = 0;
        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;
        this.isSimple = false;
    }
    Object.defineProperty(TextureMatrix.prototype, "texture", {
        /** Texture property. */
        get: function () {
            return this._texture;
        },
        set: function (value) {
            this._texture = value;
            this._textureID = -1;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Multiplies uvs array to transform
     * @param uvs - mesh uvs
     * @param [out=uvs] - output
     * @returns - output
     */
    TextureMatrix.prototype.multiplyUvs = function (uvs, out) {
        if (out === undefined) {
            out = uvs;
        }
        var mat = this.mapCoord;
        for (var i = 0; i < uvs.length; i += 2) {
            var x = uvs[i];
            var y = uvs[i + 1];
            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;
            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;
        }
        return out;
    };
    /**
     * Updates matrices if texture was changed.
     * @param [forceUpdate=false] - if true, matrices will be updated any case
     * @returns - Whether or not it was updated
     */
    TextureMatrix.prototype.update = function (forceUpdate) {
        var tex = this._texture;
        if (!tex || !tex.valid) {
            return false;
        }
        if (!forceUpdate
            && this._textureID === tex._updateID) {
            return false;
        }
        this._textureID = tex._updateID;
        this._updateID++;
        var uvs = tex._uvs;
        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);
        var orig = tex.orig;
        var trim = tex.trim;
        if (trim) {
            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height, -trim.x / trim.width, -trim.y / trim.height);
            this.mapCoord.append(tempMat);
        }
        var texBase = tex.baseTexture;
        var frame = this.uClampFrame;
        var margin = this.clampMargin / texBase.resolution;
        var offset = this.clampOffset;
        frame[0] = (tex._frame.x + margin + offset) / texBase.width;
        frame[1] = (tex._frame.y + margin + offset) / texBase.height;
        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;
        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;
        this.uClampOffset[0] = offset / texBase.realWidth;
        this.uClampOffset[1] = offset / texBase.realHeight;
        this.isSimple = tex._frame.width === texBase.width
            && tex._frame.height === texBase.height
            && tex.rotate === 0;
        return true;
    };
    return TextureMatrix;
}());

/**
 * This handles a Sprite acting as a mask, as opposed to a Graphic.
 *
 * WebGL only.
 * @memberof PIXI
 */
var SpriteMaskFilter = /** @class */ (function (_super) {
    __extends(SpriteMaskFilter, _super);
    /** @ignore */
    function SpriteMaskFilter(vertexSrc, fragmentSrc, uniforms) {
        var _this = this;
        var sprite = null;
        if (typeof vertexSrc !== 'string' && fragmentSrc === undefined && uniforms === undefined) {
            sprite = vertexSrc;
            vertexSrc = undefined;
            fragmentSrc = undefined;
            uniforms = undefined;
        }
        _this = _super.call(this, vertexSrc || vertex, fragmentSrc || fragment, uniforms) || this;
        _this.maskSprite = sprite;
        _this.maskMatrix = new Matrix();
        return _this;
    }
    Object.defineProperty(SpriteMaskFilter.prototype, "maskSprite", {
        /**
         * Sprite mask
         * @type {PIXI.DisplayObject}
         */
        get: function () {
            return this._maskSprite;
        },
        set: function (value) {
            this._maskSprite = value;
            if (this._maskSprite) {
                this._maskSprite.renderable = false;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Applies the filter
     * @param filterManager - The renderer to retrieve the filter from
     * @param input - The input render target.
     * @param output - The target to output to.
     * @param clearMode - Should the output be cleared before rendering to it.
     */
    SpriteMaskFilter.prototype.apply = function (filterManager, input, output, clearMode) {
        var maskSprite = this._maskSprite;
        var tex = maskSprite._texture;
        if (!tex.valid) {
            return;
        }
        if (!tex.uvMatrix) {
            // margin = 0.0, let it bleed a bit, shader code becomes easier
            // assuming that atlas textures were made with 1-pixel padding
            tex.uvMatrix = new TextureMatrix(tex, 0.0);
        }
        tex.uvMatrix.update();
        this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0.0 : 1.0;
        this.uniforms.mask = tex;
        // get _normalized sprite texture coords_ and convert them to _normalized atlas texture coords_ with `prepend`
        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite)
            .prepend(tex.uvMatrix.mapCoord);
        this.uniforms.alpha = maskSprite.worldAlpha;
        this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;
        filterManager.applyFilter(this, input, output, clearMode);
    };
    return SpriteMaskFilter;
}(Filter));

/**
 * System plugin to the renderer to manage masks.
 *
 * There are three built-in types of masking:
 * **Scissor Masking**: Scissor masking discards pixels that are outside of a rectangle called the scissor box. It is
 *  the most performant as the scissor test is inexpensive. However, it can only be used when the mask is rectangular.
 * **Stencil Masking**: Stencil masking discards pixels that don't overlap with the pixels rendered into the stencil
 *  buffer. It is the next fastest option as it does not require rendering into a separate framebuffer. However, it does
 *  cause the mask to be rendered **twice** for each masking operation; hence, minimize the rendering cost of your masks.
 * **Sprite Mask Filtering**: Sprite mask filtering discards pixels based on the red channel of the sprite-mask's
 *  texture. (Generally, the masking texture is grayscale). Using advanced techniques, you might be able to embed this
 *  type of masking in a custom shader - and hence, bypassing the masking system fully for performance wins.
 *
 * The best type of masking is auto-detected when you `push` one. To use scissor masking, you must pass in a `Graphics`
 * object with just a rectangle drawn.
 *
 * ## Mask Stacks
 *
 * In the scene graph, masks can be applied recursively, i.e. a mask can be applied during a masking operation. The mask
 * stack stores the currently applied masks in order. Each {@link PIXI.BaseRenderTexture} holds its own mask stack, i.e.
 * when you switch render-textures, the old masks only applied when you switch back to rendering to the old render-target.
 * @memberof PIXI
 */
var MaskSystem = /** @class */ (function () {
    /**
     * @param renderer - The renderer this System works for.
     */
    function MaskSystem(renderer) {
        this.renderer = renderer;
        this.enableScissor = true;
        this.alphaMaskPool = [];
        this.maskDataPool = [];
        this.maskStack = [];
        this.alphaMaskIndex = 0;
    }
    /**
     * Changes the mask stack that is used by this System.
     * @param maskStack - The mask stack
     */
    MaskSystem.prototype.setMaskStack = function (maskStack) {
        this.maskStack = maskStack;
        this.renderer.scissor.setMaskStack(maskStack);
        this.renderer.stencil.setMaskStack(maskStack);
    };
    /**
     * Enables the mask and appends it to the current mask stack.
     *
     * NOTE: The batch renderer should be flushed beforehand to prevent pending renders from being masked.
     * @param {PIXI.DisplayObject} target - Display Object to push the mask to
     * @param {PIXI.MaskData|PIXI.Sprite|PIXI.Graphics|PIXI.DisplayObject} maskDataOrTarget - The masking data.
     */
    MaskSystem.prototype.push = function (target, maskDataOrTarget) {
        var maskData = maskDataOrTarget;
        if (!maskData.isMaskData) {
            var d = this.maskDataPool.pop() || new MaskData();
            d.pooled = true;
            d.maskObject = maskDataOrTarget;
            maskData = d;
        }
        var maskAbove = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;
        maskData.copyCountersOrReset(maskAbove);
        maskData._colorMask = maskAbove ? maskAbove._colorMask : 0xf;
        if (maskData.autoDetect) {
            this.detect(maskData);
        }
        maskData._target = target;
        if (maskData.type !== MASK_TYPES.SPRITE) {
            this.maskStack.push(maskData);
        }
        if (maskData.enabled) {
            switch (maskData.type) {
                case MASK_TYPES.SCISSOR:
                    this.renderer.scissor.push(maskData);
                    break;
                case MASK_TYPES.STENCIL:
                    this.renderer.stencil.push(maskData);
                    break;
                case MASK_TYPES.SPRITE:
                    maskData.copyCountersOrReset(null);
                    this.pushSpriteMask(maskData);
                    break;
                case MASK_TYPES.COLOR:
                    this.pushColorMask(maskData);
                    break;
            }
        }
        if (maskData.type === MASK_TYPES.SPRITE) {
            this.maskStack.push(maskData);
        }
    };
    /**
     * Removes the last mask from the mask stack and doesn't return it.
     *
     * NOTE: The batch renderer should be flushed beforehand to render the masked contents before the mask is removed.
     * @param {PIXI.IMaskTarget} target - Display Object to pop the mask from
     */
    MaskSystem.prototype.pop = function (target) {
        var maskData = this.maskStack.pop();
        if (!maskData || maskData._target !== target) {
            // TODO: add an assert when we have it
            return;
        }
        if (maskData.enabled) {
            switch (maskData.type) {
                case MASK_TYPES.SCISSOR:
                    this.renderer.scissor.pop(maskData);
                    break;
                case MASK_TYPES.STENCIL:
                    this.renderer.stencil.pop(maskData.maskObject);
                    break;
                case MASK_TYPES.SPRITE:
                    this.popSpriteMask(maskData);
                    break;
                case MASK_TYPES.COLOR:
                    this.popColorMask(maskData);
                    break;
            }
        }
        maskData.reset();
        if (maskData.pooled) {
            this.maskDataPool.push(maskData);
        }
        if (this.maskStack.length !== 0) {
            var maskCurrent = this.maskStack[this.maskStack.length - 1];
            if (maskCurrent.type === MASK_TYPES.SPRITE && maskCurrent._filters) {
                maskCurrent._filters[0].maskSprite = maskCurrent.maskObject;
            }
        }
    };
    /**
     * Sets type of MaskData based on its maskObject.
     * @param maskData
     */
    MaskSystem.prototype.detect = function (maskData) {
        var maskObject = maskData.maskObject;
        if (!maskObject) {
            maskData.type = MASK_TYPES.COLOR;
        }
        else if (maskObject.isSprite) {
            maskData.type = MASK_TYPES.SPRITE;
        }
        else if (this.enableScissor && this.renderer.scissor.testScissor(maskData)) {
            maskData.type = MASK_TYPES.SCISSOR;
        }
        else {
            maskData.type = MASK_TYPES.STENCIL;
        }
    };
    /**
     * Applies the Mask and adds it to the current filter stack.
     * @param maskData - Sprite to be used as the mask.
     */
    MaskSystem.prototype.pushSpriteMask = function (maskData) {
        var _a, _b;
        var maskObject = maskData.maskObject;
        var target = maskData._target;
        var alphaMaskFilter = maskData._filters;
        if (!alphaMaskFilter) {
            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];
            if (!alphaMaskFilter) {
                alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new SpriteMaskFilter()];
            }
        }
        var renderer = this.renderer;
        var renderTextureSystem = renderer.renderTexture;
        var resolution;
        var multisample;
        if (renderTextureSystem.current) {
            var renderTexture = renderTextureSystem.current;
            resolution = maskData.resolution || renderTexture.resolution;
            multisample = (_a = maskData.multisample) !== null && _a !== void 0 ? _a : renderTexture.multisample;
        }
        else {
            resolution = maskData.resolution || renderer.resolution;
            multisample = (_b = maskData.multisample) !== null && _b !== void 0 ? _b : renderer.multisample;
        }
        alphaMaskFilter[0].resolution = resolution;
        alphaMaskFilter[0].multisample = multisample;
        alphaMaskFilter[0].maskSprite = maskObject;
        var stashFilterArea = target.filterArea;
        target.filterArea = maskObject.getBounds(true);
        renderer.filter.push(target, alphaMaskFilter);
        target.filterArea = stashFilterArea;
        if (!maskData._filters) {
            this.alphaMaskIndex++;
        }
    };
    /**
     * Removes the last filter from the filter stack and doesn't return it.
     * @param maskData - Sprite to be used as the mask.
     */
    MaskSystem.prototype.popSpriteMask = function (maskData) {
        this.renderer.filter.pop();
        if (maskData._filters) {
            maskData._filters[0].maskSprite = null;
        }
        else {
            this.alphaMaskIndex--;
            this.alphaMaskPool[this.alphaMaskIndex][0].maskSprite = null;
        }
    };
    /**
     * Pushes the color mask.
     * @param maskData - The mask data
     */
    MaskSystem.prototype.pushColorMask = function (maskData) {
        var currColorMask = maskData._colorMask;
        var nextColorMask = maskData._colorMask = currColorMask & maskData.colorMask;
        if (nextColorMask !== currColorMask) {
            this.renderer.gl.colorMask((nextColorMask & 0x1) !== 0, (nextColorMask & 0x2) !== 0, (nextColorMask & 0x4) !== 0, (nextColorMask & 0x8) !== 0);
        }
    };
    /**
     * Pops the color mask.
     * @param maskData - The mask data
     */
    MaskSystem.prototype.popColorMask = function (maskData) {
        var currColorMask = maskData._colorMask;
        var nextColorMask = this.maskStack.length > 0
            ? this.maskStack[this.maskStack.length - 1]._colorMask : 0xf;
        if (nextColorMask !== currColorMask) {
            this.renderer.gl.colorMask((nextColorMask & 0x1) !== 0, (nextColorMask & 0x2) !== 0, (nextColorMask & 0x4) !== 0, (nextColorMask & 0x8) !== 0);
        }
    };
    MaskSystem.prototype.destroy = function () {
        this.renderer = null;
    };
    return MaskSystem;
}());

/**
 * System plugin to the renderer to manage specific types of masking operations.
 * @memberof PIXI
 */
var AbstractMaskSystem = /** @class */ (function () {
    /**
     * @param renderer - The renderer this System works for.
     */
    function AbstractMaskSystem(renderer) {
        this.renderer = renderer;
        this.maskStack = [];
        this.glConst = 0;
    }
    /** Gets count of masks of certain type. */
    AbstractMaskSystem.prototype.getStackLength = function () {
        return this.maskStack.length;
    };
    /**
     * Changes the mask stack that is used by this System.
     * @param {PIXI.MaskData[]} maskStack - The mask stack
     */
    AbstractMaskSystem.prototype.setMaskStack = function (maskStack) {
        var gl = this.renderer.gl;
        var curStackLen = this.getStackLength();
        this.maskStack = maskStack;
        var newStackLen = this.getStackLength();
        if (newStackLen !== curStackLen) {
            if (newStackLen === 0) {
                gl.disable(this.glConst);
            }
            else {
                gl.enable(this.glConst);
                this._useCurrent();
            }
        }
    };
    /**
     * Setup renderer to use the current mask data.
     * @private
     */
    AbstractMaskSystem.prototype._useCurrent = function () {
        // OVERWRITE;
    };
    /** Destroys the mask stack. */
    AbstractMaskSystem.prototype.destroy = function () {
        this.renderer = null;
        this.maskStack = null;
    };
    return AbstractMaskSystem;
}());

var tempMatrix$1 = new Matrix();
var rectPool = [];
/**
 * System plugin to the renderer to manage scissor masking.
 *
 * Scissor masking discards pixels outside of a rectangle called the scissor box. The scissor box is in the framebuffer
 * viewport's space; however, the mask's rectangle is projected from world-space to viewport space automatically
 * by this system.
 * @memberof PIXI
 */
var ScissorSystem = /** @class */ (function (_super) {
    __extends(ScissorSystem, _super);
    /**
     * @param {PIXI.Renderer} renderer - The renderer this System works for.
     */
    function ScissorSystem(renderer) {
        var _this = _super.call(this, renderer) || this;
        _this.glConst = settings.ADAPTER.getWebGLRenderingContext().SCISSOR_TEST;
        return _this;
    }
    ScissorSystem.prototype.getStackLength = function () {
        var maskData = this.maskStack[this.maskStack.length - 1];
        if (maskData) {
            return maskData._scissorCounter;
        }
        return 0;
    };
    /**
     * evaluates _boundsTransformed, _scissorRect for MaskData
     * @param maskData
     */
    ScissorSystem.prototype.calcScissorRect = function (maskData) {
        var _a;
        if (maskData._scissorRectLocal) {
            return;
        }
        var prevData = maskData._scissorRect;
        var maskObject = maskData.maskObject;
        var renderer = this.renderer;
        var renderTextureSystem = renderer.renderTexture;
        var rect = maskObject.getBounds(true, (_a = rectPool.pop()) !== null && _a !== void 0 ? _a : new Rectangle());
        this.roundFrameToPixels(rect, renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution, renderTextureSystem.sourceFrame, renderTextureSystem.destinationFrame, renderer.projection.transform);
        if (prevData) {
            rect.fit(prevData);
        }
        maskData._scissorRectLocal = rect;
    };
    ScissorSystem.isMatrixRotated = function (matrix) {
        if (!matrix) {
            return false;
        }
        var a = matrix.a, b = matrix.b, c = matrix.c, d = matrix.d;
        // Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation
        // is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).
        return ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4)
            && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4));
    };
    /**
     * Test, whether the object can be scissor mask with current renderer projection.
     * Calls "calcScissorRect()" if its true.
     * @param maskData - mask data
     * @returns whether Whether the object can be scissor mask
     */
    ScissorSystem.prototype.testScissor = function (maskData) {
        var maskObject = maskData.maskObject;
        if (!maskObject.isFastRect || !maskObject.isFastRect()) {
            return false;
        }
        if (ScissorSystem.isMatrixRotated(maskObject.worldTransform)) {
            return false;
        }
        if (ScissorSystem.isMatrixRotated(this.renderer.projection.transform)) {
            return false;
        }
        this.calcScissorRect(maskData);
        var rect = maskData._scissorRectLocal;
        return rect.width > 0 && rect.height > 0;
    };
    ScissorSystem.prototype.roundFrameToPixels = function (frame, resolution, bindingSourceFrame, bindingDestinationFrame, transform) {
        if (ScissorSystem.isMatrixRotated(transform)) {
            return;
        }
        transform = transform ? tempMatrix$1.copyFrom(transform) : tempMatrix$1.identity();
        // Get forward transform from world space to screen space
        transform
            .translate(-bindingSourceFrame.x, -bindingSourceFrame.y)
            .scale(bindingDestinationFrame.width / bindingSourceFrame.width, bindingDestinationFrame.height / bindingSourceFrame.height)
            .translate(bindingDestinationFrame.x, bindingDestinationFrame.y);
        // Convert frame to screen space
        this.renderer.filter.transformAABB(transform, frame);
        frame.fit(bindingDestinationFrame);
        frame.x = Math.round(frame.x * resolution);
        frame.y = Math.round(frame.y * resolution);
        frame.width = Math.round(frame.width * resolution);
        frame.height = Math.round(frame.height * resolution);
    };
    /**
     * Applies the Mask and adds it to the current stencil stack.
     * @author alvin
     * @param maskData - The mask data.
     */
    ScissorSystem.prototype.push = function (maskData) {
        if (!maskData._scissorRectLocal) {
            this.calcScissorRect(maskData);
        }
        var gl = this.renderer.gl;
        if (!maskData._scissorRect) {
            gl.enable(gl.SCISSOR_TEST);
        }
        maskData._scissorCounter++;
        maskData._scissorRect = maskData._scissorRectLocal;
        this._useCurrent();
    };
    /**
     * This should be called after a mask is popped off the mask stack. It will rebind the scissor box to be latest with the
     * last mask in the stack.
     *
     * This can also be called when you directly modify the scissor box and want to restore PixiJS state.
     * @param maskData - The mask data.
     */
    ScissorSystem.prototype.pop = function (maskData) {
        var gl = this.renderer.gl;
        if (maskData) {
            rectPool.push(maskData._scissorRectLocal);
        }
        if (this.getStackLength() > 0) {
            this._useCurrent();
        }
        else {
            gl.disable(gl.SCISSOR_TEST);
        }
    };
    /**
     * Setup renderer to use the current scissor data.
     * @private
     */
    ScissorSystem.prototype._useCurrent = function () {
        var rect = this.maskStack[this.maskStack.length - 1]._scissorRect;
        var y;
        if (this.renderer.renderTexture.current) {
            y = rect.y;
        }
        else {
            // flipY. In future we'll have it over renderTextures as an option
            y = this.renderer.height - rect.height - rect.y;
        }
        this.renderer.gl.scissor(rect.x, y, rect.width, rect.height);
    };
    return ScissorSystem;
}(AbstractMaskSystem));

/**
 * System plugin to the renderer to manage stencils (used for masks).
 * @memberof PIXI
 */
var StencilSystem = /** @class */ (function (_super) {
    __extends(StencilSystem, _super);
    /**
     * @param renderer - The renderer this System works for.
     */
    function StencilSystem(renderer) {
        var _this = _super.call(this, renderer) || this;
        _this.glConst = settings.ADAPTER.getWebGLRenderingContext().STENCIL_TEST;
        return _this;
    }
    StencilSystem.prototype.getStackLength = function () {
        var maskData = this.maskStack[this.maskStack.length - 1];
        if (maskData) {
            return maskData._stencilCounter;
        }
        return 0;
    };
    /**
     * Applies the Mask and adds it to the current stencil stack.
     * @param maskData - The mask data
     */
    StencilSystem.prototype.push = function (maskData) {
        var maskObject = maskData.maskObject;
        var gl = this.renderer.gl;
        var prevMaskCount = maskData._stencilCounter;
        if (prevMaskCount === 0) {
            // force use stencil texture in current framebuffer
            this.renderer.framebuffer.forceStencil();
            gl.clearStencil(0);
            gl.clear(gl.STENCIL_BUFFER_BIT);
            gl.enable(gl.STENCIL_TEST);
        }
        maskData._stencilCounter++;
        var colorMask = maskData._colorMask;
        if (colorMask !== 0) {
            maskData._colorMask = 0;
            gl.colorMask(false, false, false, false);
        }
        // Increment the reference stencil value where the new mask overlaps with the old ones.
        gl.stencilFunc(gl.EQUAL, prevMaskCount, 0xFFFFFFFF);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
        maskObject.renderable = true;
        maskObject.render(this.renderer);
        this.renderer.batch.flush();
        maskObject.renderable = false;
        if (colorMask !== 0) {
            maskData._colorMask = colorMask;
            gl.colorMask((colorMask & 1) !== 0, (colorMask & 2) !== 0, (colorMask & 4) !== 0, (colorMask & 8) !== 0);
        }
        this._useCurrent();
    };
    /**
     * Pops stencil mask. MaskData is already removed from stack
     * @param {PIXI.DisplayObject} maskObject - object of popped mask data
     */
    StencilSystem.prototype.pop = function (maskObject) {
        var gl = this.renderer.gl;
        if (this.getStackLength() === 0) {
            // the stack is empty!
            gl.disable(gl.STENCIL_TEST);
        }
        else {
            var maskData = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;
            var colorMask = maskData ? maskData._colorMask : 0xf;
            if (colorMask !== 0) {
                maskData._colorMask = 0;
                gl.colorMask(false, false, false, false);
            }
            // Decrement the reference stencil value where the popped mask overlaps with the other ones
            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);
            maskObject.renderable = true;
            maskObject.render(this.renderer);
            this.renderer.batch.flush();
            maskObject.renderable = false;
            if (colorMask !== 0) {
                maskData._colorMask = colorMask;
                gl.colorMask((colorMask & 0x1) !== 0, (colorMask & 0x2) !== 0, (colorMask & 0x4) !== 0, (colorMask & 0x8) !== 0);
            }
            this._useCurrent();
        }
    };
    /**
     * Setup renderer to use the current stencil data.
     * @private
     */
    StencilSystem.prototype._useCurrent = function () {
        var gl = this.renderer.gl;
        gl.stencilFunc(gl.EQUAL, this.getStackLength(), 0xFFFFFFFF);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
    };
    return StencilSystem;
}(AbstractMaskSystem));

/**
 * System plugin to the renderer to manage the projection matrix.
 *
 * The `projectionMatrix` is a global uniform provided to all shaders. It is used to transform points in world space to
 * normalized device coordinates.
 * @memberof PIXI
 */
var ProjectionSystem = /** @class */ (function () {
    /** @param renderer - The renderer this System works for. */
    function ProjectionSystem(renderer) {
        this.renderer = renderer;
        this.destinationFrame = null;
        this.sourceFrame = null;
        this.defaultFrame = null;
        this.projectionMatrix = new Matrix();
        this.transform = null;
    }
    /**
     * Updates the projection-matrix based on the sourceFrame → destinationFrame mapping provided.
     *
     * NOTE: It is expected you call `renderer.framebuffer.setViewport(destinationFrame)` after this. This is because
     * the framebuffer viewport converts shader vertex output in normalized device coordinates to window coordinates.
     *
     * NOTE-2: {@link RenderTextureSystem#bind} updates the projection-matrix when you bind a render-texture. It is expected
     * that you dirty the current bindings when calling this manually.
     * @param destinationFrame - The rectangle in the render-target to render the contents into. If rendering to the canvas,
     *  the origin is on the top-left; if rendering to a render-texture, the origin is on the bottom-left.
     * @param sourceFrame - The rectangle in world space that contains the contents being rendered.
     * @param resolution - The resolution of the render-target, which is the ratio of
     *  world-space (or CSS) pixels to physical pixels.
     * @param root - Whether the render-target is the screen. This is required because rendering to textures
     *  is y-flipped (i.e. upside down relative to the screen).
     */
    ProjectionSystem.prototype.update = function (destinationFrame, sourceFrame, resolution, root) {
        this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;
        this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame;
        // Calculate object-space to clip-space projection
        this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root);
        if (this.transform) {
            this.projectionMatrix.append(this.transform);
        }
        var renderer = this.renderer;
        renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix;
        renderer.globalUniforms.update();
        // this will work for now
        // but would be sweet to stick and even on the global uniforms..
        if (renderer.shader.shader) {
            renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);
        }
    };
    /**
     * Calculates the `projectionMatrix` to map points inside `sourceFrame` to inside `destinationFrame`.
     * @param _destinationFrame - The destination frame in the render-target.
     * @param sourceFrame - The source frame in world space.
     * @param _resolution - The render-target's resolution, i.e. ratio of CSS to physical pixels.
     * @param root - Whether rendering into the screen. Otherwise, if rendering to a framebuffer, the projection
     *  is y-flipped.
     */
    ProjectionSystem.prototype.calculateProjection = function (_destinationFrame, sourceFrame, _resolution, root) {
        var pm = this.projectionMatrix;
        var sign = !root ? 1 : -1;
        pm.identity();
        pm.a = (1 / sourceFrame.width * 2);
        pm.d = sign * (1 / sourceFrame.height * 2);
        pm.tx = -1 - (sourceFrame.x * pm.a);
        pm.ty = -sign - (sourceFrame.y * pm.d);
    };
    /**
     * Sets the transform of the active render target to the given matrix.
     * @param _matrix - The transformation matrix
     */
    ProjectionSystem.prototype.setTransform = function (_matrix) {
        // this._activeRenderTarget.transform = matrix;
    };
    ProjectionSystem.prototype.destroy = function () {
        this.renderer = null;
    };
    return ProjectionSystem;
}());

// Temporary rectangle for assigned sourceFrame or destinationFrame
var tempRect = new Rectangle();
// Temporary rectangle for renderTexture destinationFrame
var tempRect2 = new Rectangle();
/* eslint-disable max-len */
/**
 * System plugin to the renderer to manage render textures.
 *
 * Should be added after FramebufferSystem
 *
 * ### Frames
 *
 * The `RenderTextureSystem` holds a sourceFrame → destinationFrame projection. The following table explains the different
 * coordinate spaces used:
 *
 * | Frame                  | Description                                                      | Coordinate System                                       |
 * | ---------------------- | ---------------------------------------------------------------- | ------------------------------------------------------- |
 * | sourceFrame            | The rectangle inside of which display-objects are being rendered | **World Space**: The origin on the top-left             |
 * | destinationFrame       | The rectangle in the render-target (canvas or texture) into which contents should be rendered | If rendering to the canvas, this is in screen space and the origin is on the top-left. If rendering to a render-texture, this is in its base-texture's space with the origin on the bottom-left.  |
 * | viewportFrame          | The framebuffer viewport corresponding to the destination-frame  | **Window Coordinates**: The origin is always on the bottom-left. |
 * @memberof PIXI
 */
var RenderTextureSystem = /** @class */ (function () {
    /**
     * @param renderer - The renderer this System works for.
     */
    function RenderTextureSystem(renderer) {
        this.renderer = renderer;
        this.clearColor = renderer._backgroundColorRgba;
        this.defaultMaskStack = [];
        this.current = null;
        this.sourceFrame = new Rectangle();
        this.destinationFrame = new Rectangle();
        this.viewportFrame = new Rectangle();
    }
    /**
     * Bind the current render texture.
     * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.
     * @param sourceFrame - Part of world that is mapped to the renderTexture.
     * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.
     */
    RenderTextureSystem.prototype.bind = function (renderTexture, sourceFrame, destinationFrame) {
        if (renderTexture === void 0) { renderTexture = null; }
        var renderer = this.renderer;
        this.current = renderTexture;
        var baseTexture;
        var framebuffer;
        var resolution;
        if (renderTexture) {
            baseTexture = renderTexture.baseTexture;
            resolution = baseTexture.resolution;
            if (!sourceFrame) {
                tempRect.width = renderTexture.frame.width;
                tempRect.height = renderTexture.frame.height;
                sourceFrame = tempRect;
            }
            if (!destinationFrame) {
                tempRect2.x = renderTexture.frame.x;
                tempRect2.y = renderTexture.frame.y;
                tempRect2.width = sourceFrame.width;
                tempRect2.height = sourceFrame.height;
                destinationFrame = tempRect2;
            }
            framebuffer = baseTexture.framebuffer;
        }
        else {
            resolution = renderer.resolution;
            if (!sourceFrame) {
                tempRect.width = renderer.screen.width;
                tempRect.height = renderer.screen.height;
                sourceFrame = tempRect;
            }
            if (!destinationFrame) {
                destinationFrame = tempRect;
                destinationFrame.width = sourceFrame.width;
                destinationFrame.height = sourceFrame.height;
            }
        }
        var viewportFrame = this.viewportFrame;
        viewportFrame.x = destinationFrame.x * resolution;
        viewportFrame.y = destinationFrame.y * resolution;
        viewportFrame.width = destinationFrame.width * resolution;
        viewportFrame.height = destinationFrame.height * resolution;
        if (!renderTexture) {
            viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height);
        }
        viewportFrame.ceil();
        this.renderer.framebuffer.bind(framebuffer, viewportFrame);
        this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);
        if (renderTexture) {
            this.renderer.mask.setMaskStack(baseTexture.maskStack);
        }
        else {
            this.renderer.mask.setMaskStack(this.defaultMaskStack);
        }
        this.sourceFrame.copyFrom(sourceFrame);
        this.destinationFrame.copyFrom(destinationFrame);
    };
    /**
     * Erases the render texture and fills the drawing area with a colour.
     * @param clearColor - The color as rgba, default to use the renderer backgroundColor
     * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks
     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.
     */
    RenderTextureSystem.prototype.clear = function (clearColor, mask) {
        if (this.current) {
            clearColor = clearColor || this.current.baseTexture.clearColor;
        }
        else {
            clearColor = clearColor || this.clearColor;
        }
        var destinationFrame = this.destinationFrame;
        var baseFrame = this.current ? this.current.baseTexture : this.renderer.screen;
        var clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;
        if (clearMask) {
            var _a = this.viewportFrame, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
            x = Math.round(x);
            y = Math.round(y);
            width = Math.round(width);
            height = Math.round(height);
            // TODO: ScissorSystem should cache whether the scissor test is enabled or not.
            this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);
            this.renderer.gl.scissor(x, y, width, height);
        }
        this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3], mask);
        if (clearMask) {
            // Restore the scissor box
            this.renderer.scissor.pop();
        }
    };
    RenderTextureSystem.prototype.resize = function () {
        // resize the root only!
        this.bind(null);
    };
    /** Resets render-texture state. */
    RenderTextureSystem.prototype.reset = function () {
        this.bind(null);
    };
    RenderTextureSystem.prototype.destroy = function () {
        this.renderer = null;
    };
    return RenderTextureSystem;
}());

function uboUpdate(_ud, _uv, _renderer, _syncData, buffer) {
    _renderer.buffer.update(buffer);
}
// cv = CachedValue
// v = value
// ud = uniformData
// uv = uniformValue
// l = location
var UBO_TO_SINGLE_SETTERS = {
    float: "\n        data[offset] = v;\n    ",
    vec2: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n    ",
    vec3: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n\n    ",
    vec4: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n        data[offset+3] = v[3];\n    ",
    mat2: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n\n        data[offset+4] = v[2];\n        data[offset+5] = v[3];\n    ",
    mat3: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    ",
    mat4: "\n        for(var i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    "
};
var GLSL_TO_STD40_SIZE = {
    float: 4,
    vec2: 8,
    vec3: 12,
    vec4: 16,
    int: 4,
    ivec2: 8,
    ivec3: 12,
    ivec4: 16,
    uint: 4,
    uvec2: 8,
    uvec3: 12,
    uvec4: 16,
    bool: 4,
    bvec2: 8,
    bvec3: 12,
    bvec4: 16,
    mat2: 16 * 2,
    mat3: 16 * 3,
    mat4: 16 * 4,
};
/**
 * logic originally from here: https://github.com/sketchpunk/FunWithWebGL2/blob/master/lesson_022/Shaders.js
 * rewrote it, but this was a great starting point to get a solid understanding of whats going on :)
 * @ignore
 * @param uniformData
 */
function createUBOElements(uniformData) {
    var uboElements = uniformData.map(function (data) {
        return ({
            data: data,
            offset: 0,
            dataLen: 0,
            dirty: 0
        });
    });
    var size = 0;
    var chunkSize = 0;
    var offset = 0;
    for (var i = 0; i < uboElements.length; i++) {
        var uboElement = uboElements[i];
        size = GLSL_TO_STD40_SIZE[uboElement.data.type];
        if (uboElement.data.size > 1) {
            size = Math.max(size, 16) * uboElement.data.size;
        }
        uboElement.dataLen = size;
        // add some size offset..
        // must align to the nearest 16 bytes or internally nearest round size
        if (chunkSize % size !== 0 && chunkSize < 16) {
            // diff required to line up..
            var lineUpValue = (chunkSize % size) % 16;
            chunkSize += lineUpValue;
            offset += lineUpValue;
        }
        if ((chunkSize + size) > 16) {
            offset = Math.ceil(offset / 16) * 16;
            uboElement.offset = offset;
            offset += size;
            chunkSize = size;
        }
        else {
            uboElement.offset = offset;
            chunkSize += size;
            offset += size;
        }
    }
    offset = Math.ceil(offset / 16) * 16;
    return { uboElements: uboElements, size: offset };
}
function getUBOData(uniforms, uniformData) {
    var usedUniformDatas = [];
    // build..
    for (var i in uniforms) {
        if (uniformData[i]) {
            usedUniformDatas.push(uniformData[i]);
        }
    }
    // sort them out by index!
    usedUniformDatas.sort(function (a, b) { return a.index - b.index; });
    return usedUniformDatas;
}
function generateUniformBufferSync(group, uniformData) {
    if (!group.autoManage) {
        // if the group is nott automatically managed, we don't need to generate a special function for it...
        return { size: 0, syncFunc: uboUpdate };
    }
    var usedUniformDatas = getUBOData(group.uniforms, uniformData);
    var _a = createUBOElements(usedUniformDatas), uboElements = _a.uboElements, size = _a.size;
    var funcFragments = ["\n    var v = null;\n    var v2 = null;\n    var cv = null;\n    var t = 0;\n    var gl = renderer.gl\n    var index = 0;\n    var data = buffer.data;\n    "];
    for (var i = 0; i < uboElements.length; i++) {
        var uboElement = uboElements[i];
        var uniform = group.uniforms[uboElement.data.name];
        var name = uboElement.data.name;
        var parsed = false;
        for (var j = 0; j < uniformParsers.length; j++) {
            var uniformParser = uniformParsers[j];
            if (uniformParser.codeUbo && uniformParser.test(uboElement.data, uniform)) {
                funcFragments.push("offset = " + uboElement.offset / 4 + ";", uniformParsers[j].codeUbo(uboElement.data.name, uniform));
                parsed = true;
                break;
            }
        }
        if (!parsed) {
            if (uboElement.data.size > 1) {
                var size_1 = mapSize(uboElement.data.type);
                var rowSize = Math.max(GLSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);
                var elementSize = size_1 / rowSize;
                var remainder = (4 - (elementSize % 4)) % 4;
                funcFragments.push("\n                cv = ud." + name + ".value;\n                v = uv." + name + ";\n                offset = " + uboElement.offset / 4 + ";\n\n                t = 0;\n\n                for(var i=0; i < " + uboElement.data.size * rowSize + "; i++)\n                {\n                    for(var j = 0; j < " + elementSize + "; j++)\n                    {\n                        data[offset++] = v[t++];\n                    }\n                    offset += " + remainder + ";\n                }\n\n                ");
            }
            else {
                var template = UBO_TO_SINGLE_SETTERS[uboElement.data.type];
                funcFragments.push("\n                cv = ud." + name + ".value;\n                v = uv." + name + ";\n                offset = " + uboElement.offset / 4 + ";\n                " + template + ";\n                ");
            }
        }
    }
    funcFragments.push("\n       renderer.buffer.update(buffer);\n    ");
    return {
        size: size,
        // eslint-disable-next-line no-new-func
        syncFunc: new Function('ud', 'uv', 'renderer', 'syncData', 'buffer', funcFragments.join('\n'))
    };
}

/**
 * @private
 */
var IGLUniformData = /** @class */ (function () {
    function IGLUniformData() {
    }
    return IGLUniformData;
}());
/**
 * Helper class to create a WebGL Program
 * @memberof PIXI
 */
var GLProgram = /** @class */ (function () {
    /**
     * Makes a new Pixi program.
     * @param program - webgl program
     * @param uniformData - uniforms
     */
    function GLProgram(program, uniformData) {
        this.program = program;
        this.uniformData = uniformData;
        this.uniformGroups = {};
        this.uniformDirtyGroups = {};
        this.uniformBufferBindings = {};
    }
    /** Destroys this program. */
    GLProgram.prototype.destroy = function () {
        this.uniformData = null;
        this.uniformGroups = null;
        this.uniformDirtyGroups = null;
        this.uniformBufferBindings = null;
        this.program = null;
    };
    return GLProgram;
}());

/**
 * returns the attribute data from the program
 * @private
 * @param {WebGLProgram} [program] - the WebGL program
 * @param {WebGLRenderingContext} [gl] - the WebGL context
 * @returns {object} the attribute data for this program
 */
function getAttributeData(program, gl) {
    var attributes = {};
    var totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
    for (var i = 0; i < totalAttributes; i++) {
        var attribData = gl.getActiveAttrib(program, i);
        if (attribData.name.indexOf('gl_') === 0) {
            continue;
        }
        var type = mapType(gl, attribData.type);
        var data = {
            type: type,
            name: attribData.name,
            size: mapSize(type),
            location: gl.getAttribLocation(program, attribData.name),
        };
        attributes[attribData.name] = data;
    }
    return attributes;
}

/**
 * returns the uniform data from the program
 * @private
 * @param program - the webgl program
 * @param gl - the WebGL context
 * @returns {object} the uniform data for this program
 */
function getUniformData(program, gl) {
    var uniforms = {};
    var totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
    for (var i = 0; i < totalUniforms; i++) {
        var uniformData = gl.getActiveUniform(program, i);
        var name = uniformData.name.replace(/\[.*?\]$/, '');
        var isArray = !!(uniformData.name.match(/\[.*?\]$/));
        var type = mapType(gl, uniformData.type);
        uniforms[name] = {
            name: name,
            index: i,
            type: type,
            size: uniformData.size,
            isArray: isArray,
            value: defaultValue(type, uniformData.size),
        };
    }
    return uniforms;
}

/**
 * generates a WebGL Program object from a high level Pixi Program.
 * @param gl - a rendering context on which to generate the program
 * @param program - the high level Pixi Program.
 */
function generateProgram(gl, program) {
    var glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertexSrc);
    var glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragmentSrc);
    var webGLProgram = gl.createProgram();
    gl.attachShader(webGLProgram, glVertShader);
    gl.attachShader(webGLProgram, glFragShader);
    gl.linkProgram(webGLProgram);
    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS)) {
        logProgramError(gl, webGLProgram, glVertShader, glFragShader);
    }
    program.attributeData = getAttributeData(webGLProgram, gl);
    program.uniformData = getUniformData(webGLProgram, gl);
    // GLSL 1.00: bind attributes sorted by name in ascending order
    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler
    //            or assigned by the layout specifier in the shader source code
    if (!(/^[ \t]*#[ \t]*version[ \t]+300[ \t]+es[ \t]*$/m).test(program.vertexSrc)) {
        var keys = Object.keys(program.attributeData);
        keys.sort(function (a, b) { return (a > b) ? 1 : -1; }); // eslint-disable-line no-confusing-arrow
        for (var i = 0; i < keys.length; i++) {
            program.attributeData[keys[i]].location = i;
            gl.bindAttribLocation(webGLProgram, i, keys[i]);
        }
        gl.linkProgram(webGLProgram);
    }
    gl.deleteShader(glVertShader);
    gl.deleteShader(glFragShader);
    var uniformData = {};
    for (var i in program.uniformData) {
        var data = program.uniformData[i];
        uniformData[i] = {
            location: gl.getUniformLocation(webGLProgram, i),
            value: defaultValue(data.type, data.size),
        };
    }
    var glProgram = new GLProgram(webGLProgram, uniformData);
    return glProgram;
}

var UID = 0;
// default sync data so we don't create a new one each time!
var defaultSyncData = { textureCount: 0, uboCount: 0 };
/**
 * System plugin to the renderer to manage shaders.
 * @memberof PIXI
 */
var ShaderSystem = /** @class */ (function () {
    /** @param renderer - The renderer this System works for. */
    function ShaderSystem(renderer) {
        this.destroyed = false;
        this.renderer = renderer;
        // Validation check that this environment support `new Function`
        this.systemCheck();
        this.gl = null;
        this.shader = null;
        this.program = null;
        this.cache = {};
        this._uboCache = {};
        this.id = UID++;
    }
    /**
     * Overrideable function by `@pixi/unsafe-eval` to silence
     * throwing an error if platform doesn't support unsafe-evals.
     * @private
     */
    ShaderSystem.prototype.systemCheck = function () {
        if (!unsafeEvalSupported()) {
            throw new Error('Current environment does not allow unsafe-eval, '
                + 'please use @pixi/unsafe-eval module to enable support.');
        }
    };
    ShaderSystem.prototype.contextChange = function (gl) {
        this.gl = gl;
        this.reset();
    };
    /**
     * Changes the current shader to the one given in parameter.
     * @param shader - the new shader
     * @param dontSync - false if the shader should automatically sync its uniforms.
     * @returns the glProgram that belongs to the shader.
     */
    ShaderSystem.prototype.bind = function (shader, dontSync) {
        shader.disposeRunner.add(this);
        shader.uniforms.globals = this.renderer.globalUniforms;
        var program = shader.program;
        var glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);
        this.shader = shader;
        // TODO - some current Pixi plugins bypass this.. so it not safe to use yet..
        if (this.program !== program) {
            this.program = program;
            this.gl.useProgram(glProgram.program);
        }
        if (!dontSync) {
            defaultSyncData.textureCount = 0;
            defaultSyncData.uboCount = 0;
            this.syncUniformGroup(shader.uniformGroup, defaultSyncData);
        }
        return glProgram;
    };
    /**
     * Uploads the uniforms values to the currently bound shader.
     * @param uniforms - the uniforms values that be applied to the current shader
     */
    ShaderSystem.prototype.setUniforms = function (uniforms) {
        var shader = this.shader.program;
        var glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];
        shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);
    };
    /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
    /**
     * Syncs uniforms on the group
     * @param group - the uniform group to sync
     * @param syncData - this is data that is passed to the sync function and any nested sync functions
     */
    ShaderSystem.prototype.syncUniformGroup = function (group, syncData) {
        var glProgram = this.getGlProgram();
        if (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id]) {
            glProgram.uniformDirtyGroups[group.id] = group.dirtyId;
            this.syncUniforms(group, glProgram, syncData);
        }
    };
    /**
     * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.
     * @param group
     * @param glProgram
     * @param syncData
     */
    ShaderSystem.prototype.syncUniforms = function (group, glProgram, syncData) {
        var syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);
        syncFunc(glProgram.uniformData, group.uniforms, this.renderer, syncData);
    };
    ShaderSystem.prototype.createSyncGroups = function (group) {
        var id = this.getSignature(group, this.shader.program.uniformData, 'u');
        if (!this.cache[id]) {
            this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);
        }
        group.syncUniforms[this.shader.program.id] = this.cache[id];
        return group.syncUniforms[this.shader.program.id];
    };
    /**
     * Syncs uniform buffers
     * @param group - the uniform buffer group to sync
     * @param name - the name of the uniform buffer
     */
    ShaderSystem.prototype.syncUniformBufferGroup = function (group, name) {
        var glProgram = this.getGlProgram();
        if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id]) {
            group.dirtyId = 0;
            var syncFunc = glProgram.uniformGroups[group.id]
                || this.createSyncBufferGroup(group, glProgram, name);
            // TODO wrap update in a cache??
            group.buffer.update();
            syncFunc(glProgram.uniformData, group.uniforms, this.renderer, defaultSyncData, group.buffer);
        }
        this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);
    };
    /**
     * Will create a function that uploads a uniform buffer using the STD140 standard.
     * The upload function will then be cached for future calls
     * If a group is manually managed, then a simple upload function is generated
     * @param group - the uniform buffer group to sync
     * @param glProgram - the gl program to attach the uniform bindings to
     * @param name - the name of the uniform buffer (must exist on the shader)
     */
    ShaderSystem.prototype.createSyncBufferGroup = function (group, glProgram, name) {
        var gl = this.renderer.gl;
        this.renderer.buffer.bind(group.buffer);
        // bind them...
        var uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);
        glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount;
        gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount);
        this.shader.uniformBindCount++;
        var id = this.getSignature(group, this.shader.program.uniformData, 'ubo');
        var uboData = this._uboCache[id];
        if (!uboData) {
            uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData);
        }
        if (group.autoManage) {
            var data = new Float32Array(uboData.size / 4);
            group.buffer.update(data);
        }
        glProgram.uniformGroups[group.id] = uboData.syncFunc;
        return glProgram.uniformGroups[group.id];
    };
    /**
     * Takes a uniform group and data and generates a unique signature for them.
     * @param group - The uniform group to get signature of
     * @param group.uniforms
     * @param uniformData - Uniform information generated by the shader
     * @param preFix
     * @returns Unique signature of the uniform group
     */
    ShaderSystem.prototype.getSignature = function (group, uniformData, preFix) {
        var uniforms = group.uniforms;
        var strings = [preFix + "-"];
        for (var i in uniforms) {
            strings.push(i);
            if (uniformData[i]) {
                strings.push(uniformData[i].type);
            }
        }
        return strings.join('-');
    };
    /**
     * Returns the underlying GLShade rof the currently bound shader.
     *
     * This can be handy for when you to have a little more control over the setting of your uniforms.
     * @returns The glProgram for the currently bound Shader for this context
     */
    ShaderSystem.prototype.getGlProgram = function () {
        if (this.shader) {
            return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];
        }
        return null;
    };
    /**
     * Generates a glProgram version of the Shader provided.
     * @param shader - The shader that the glProgram will be based on.
     * @returns A shiny new glProgram!
     */
    ShaderSystem.prototype.generateProgram = function (shader) {
        var gl = this.gl;
        var program = shader.program;
        var glProgram = generateProgram(gl, program);
        program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;
        return glProgram;
    };
    /** Resets ShaderSystem state, does not affect WebGL state. */
    ShaderSystem.prototype.reset = function () {
        this.program = null;
        this.shader = null;
    };
    /**
     * Disposes shader.
     * If disposing one equals with current shader, set current as null.
     * @param shader - Shader object
     */
    ShaderSystem.prototype.disposeShader = function (shader) {
        if (this.shader === shader) {
            this.shader = null;
        }
    };
    /** Destroys this System and removes all its textures. */
    ShaderSystem.prototype.destroy = function () {
        this.renderer = null;
        // TODO implement destroy method for ShaderSystem
        this.destroyed = true;
    };
    return ShaderSystem;
}());

/**
 * Maps gl blend combinations to WebGL.
 * @memberof PIXI
 * @function mapWebGLBlendModesToPixi
 * @private
 * @param {WebGLRenderingContext} gl - The rendering context.
 * @param {number[][]} [array=[]] - The array to output into.
 * @returns {number[][]} Mapped modes.
 */
function mapWebGLBlendModesToPixi(gl, array) {
    if (array === void 0) { array = []; }
    // TODO - premultiply alpha would be different.
    // add a boolean for that!
    array[BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.ADD] = [gl.ONE, gl.ONE];
    array[BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.OVERLAY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.DARKEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.LIGHTEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.COLOR_DODGE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.COLOR_BURN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.HARD_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.SOFT_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.DIFFERENCE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.EXCLUSION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.HUE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.SATURATION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.COLOR] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.LUMINOSITY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.NONE] = [0, 0];
    // not-premultiplied blend modes
    array[BLEND_MODES.NORMAL_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.ADD_NPM] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];
    array[BLEND_MODES.SCREEN_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    // composite operations
    array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];
    array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];
    array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];
    array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];
    array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];
    array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];
    array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];
    // SUBTRACT from flash
    array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];
    return array;
}

var BLEND = 0;
var OFFSET = 1;
var CULLING = 2;
var DEPTH_TEST = 3;
var WINDING = 4;
var DEPTH_MASK = 5;
/**
 * System plugin to the renderer to manage WebGL state machines.
 * @memberof PIXI
 */
var StateSystem = /** @class */ (function () {
    function StateSystem() {
        this.gl = null;
        this.stateId = 0;
        this.polygonOffset = 0;
        this.blendMode = BLEND_MODES.NONE;
        this._blendEq = false;
        // map functions for when we set state..
        this.map = [];
        this.map[BLEND] = this.setBlend;
        this.map[OFFSET] = this.setOffset;
        this.map[CULLING] = this.setCullFace;
        this.map[DEPTH_TEST] = this.setDepthTest;
        this.map[WINDING] = this.setFrontFace;
        this.map[DEPTH_MASK] = this.setDepthMask;
        this.checks = [];
        this.defaultState = new State();
        this.defaultState.blend = true;
    }
    StateSystem.prototype.contextChange = function (gl) {
        this.gl = gl;
        this.blendModes = mapWebGLBlendModesToPixi(gl);
        this.set(this.defaultState);
        this.reset();
    };
    /**
     * Sets the current state
     * @param {*} state - The state to set.
     */
    StateSystem.prototype.set = function (state) {
        state = state || this.defaultState;
        // TODO maybe to an object check? ( this.state === state )?
        if (this.stateId !== state.data) {
            var diff = this.stateId ^ state.data;
            var i = 0;
            // order from least to most common
            while (diff) {
                if (diff & 1) {
                    // state change!
                    this.map[i].call(this, !!(state.data & (1 << i)));
                }
                diff = diff >> 1;
                i++;
            }
            this.stateId = state.data;
        }
        // based on the above settings we check for specific modes..
        // for example if blend is active we check and set the blend modes
        // or of polygon offset is active we check the poly depth.
        for (var i = 0; i < this.checks.length; i++) {
            this.checks[i](this, state);
        }
    };
    /**
     * Sets the state, when previous state is unknown.
     * @param {*} state - The state to set
     */
    StateSystem.prototype.forceState = function (state) {
        state = state || this.defaultState;
        for (var i = 0; i < this.map.length; i++) {
            this.map[i].call(this, !!(state.data & (1 << i)));
        }
        for (var i = 0; i < this.checks.length; i++) {
            this.checks[i](this, state);
        }
        this.stateId = state.data;
    };
    /**
     * Sets whether to enable or disable blending.
     * @param value - Turn on or off WebGl blending.
     */
    StateSystem.prototype.setBlend = function (value) {
        this.updateCheck(StateSystem.checkBlendMode, value);
        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);
    };
    /**
     * Sets whether to enable or disable polygon offset fill.
     * @param value - Turn on or off webgl polygon offset testing.
     */
    StateSystem.prototype.setOffset = function (value) {
        this.updateCheck(StateSystem.checkPolygonOffset, value);
        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);
    };
    /**
     * Sets whether to enable or disable depth test.
     * @param value - Turn on or off webgl depth testing.
     */
    StateSystem.prototype.setDepthTest = function (value) {
        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);
    };
    /**
     * Sets whether to enable or disable depth mask.
     * @param value - Turn on or off webgl depth mask.
     */
    StateSystem.prototype.setDepthMask = function (value) {
        this.gl.depthMask(value);
    };
    /**
     * Sets whether to enable or disable cull face.
     * @param {boolean} value - Turn on or off webgl cull face.
     */
    StateSystem.prototype.setCullFace = function (value) {
        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);
    };
    /**
     * Sets the gl front face.
     * @param {boolean} value - true is clockwise and false is counter-clockwise
     */
    StateSystem.prototype.setFrontFace = function (value) {
        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);
    };
    /**
     * Sets the blend mode.
     * @param {number} value - The blend mode to set to.
     */
    StateSystem.prototype.setBlendMode = function (value) {
        if (value === this.blendMode) {
            return;
        }
        this.blendMode = value;
        var mode = this.blendModes[value];
        var gl = this.gl;
        if (mode.length === 2) {
            gl.blendFunc(mode[0], mode[1]);
        }
        else {
            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);
        }
        if (mode.length === 6) {
            this._blendEq = true;
            gl.blendEquationSeparate(mode[4], mode[5]);
        }
        else if (this._blendEq) {
            this._blendEq = false;
            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
        }
    };
    /**
     * Sets the polygon offset.
     * @param {number} value - the polygon offset
     * @param {number} scale - the polygon offset scale
     */
    StateSystem.prototype.setPolygonOffset = function (value, scale) {
        this.gl.polygonOffset(value, scale);
    };
    // used
    /** Resets all the logic and disables the VAOs. */
    StateSystem.prototype.reset = function () {
        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);
        this.forceState(this.defaultState);
        this._blendEq = true;
        this.blendMode = -1;
        this.setBlendMode(0);
    };
    /**
     * Checks to see which updates should be checked based on which settings have been activated.
     *
     * For example, if blend is enabled then we should check the blend modes each time the state is changed
     * or if polygon fill is activated then we need to check if the polygon offset changes.
     * The idea is that we only check what we have too.
     * @param func - the checking function to add or remove
     * @param value - should the check function be added or removed.
     */
    StateSystem.prototype.updateCheck = function (func, value) {
        var index = this.checks.indexOf(func);
        if (value && index === -1) {
            this.checks.push(func);
        }
        else if (!value && index !== -1) {
            this.checks.splice(index, 1);
        }
    };
    /**
     * A private little wrapper function that we call to check the blend mode.
     * @param system - the System to perform the state check on
     * @param state - the state that the blendMode will pulled from
     */
    StateSystem.checkBlendMode = function (system, state) {
        system.setBlendMode(state.blendMode);
    };
    /**
     * A private little wrapper function that we call to check the polygon offset.
     * @param system - the System to perform the state check on
     * @param state - the state that the blendMode will pulled from
     */
    StateSystem.checkPolygonOffset = function (system, state) {
        system.setPolygonOffset(1, state.polygonOffset);
    };
    /**
     * @ignore
     */
    StateSystem.prototype.destroy = function () {
        this.gl = null;
    };
    return StateSystem;
}());

/**
 * System plugin to the renderer to manage texture garbage collection on the GPU,
 * ensuring that it does not get clogged up with textures that are no longer being used.
 * @memberof PIXI
 */
var TextureGCSystem = /** @class */ (function () {
    /** @param renderer - The renderer this System works for. */
    function TextureGCSystem(renderer) {
        this.renderer = renderer;
        this.count = 0;
        this.checkCount = 0;
        this.maxIdle = settings.GC_MAX_IDLE;
        this.checkCountMax = settings.GC_MAX_CHECK_COUNT;
        this.mode = settings.GC_MODE;
    }
    /**
     * Checks to see when the last time a texture was used
     * if the texture has not been used for a specified amount of time it will be removed from the GPU
     */
    TextureGCSystem.prototype.postrender = function () {
        if (!this.renderer.renderingToScreen) {
            return;
        }
        this.count++;
        if (this.mode === GC_MODES.MANUAL) {
            return;
        }
        this.checkCount++;
        if (this.checkCount > this.checkCountMax) {
            this.checkCount = 0;
            this.run();
        }
    };
    /**
     * Checks to see when the last time a texture was used
     * if the texture has not been used for a specified amount of time it will be removed from the GPU
     */
    TextureGCSystem.prototype.run = function () {
        var tm = this.renderer.texture;
        var managedTextures = tm.managedTextures;
        var wasRemoved = false;
        for (var i = 0; i < managedTextures.length; i++) {
            var texture = managedTextures[i];
            // only supports non generated textures at the moment!
            if (!texture.framebuffer && this.count - texture.touched > this.maxIdle) {
                tm.destroyTexture(texture, true);
                managedTextures[i] = null;
                wasRemoved = true;
            }
        }
        if (wasRemoved) {
            var j = 0;
            for (var i = 0; i < managedTextures.length; i++) {
                if (managedTextures[i] !== null) {
                    managedTextures[j++] = managedTextures[i];
                }
            }
            managedTextures.length = j;
        }
    };
    /**
     * Removes all the textures within the specified displayObject and its children from the GPU
     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.
     */
    TextureGCSystem.prototype.unload = function (displayObject) {
        var tm = this.renderer.texture;
        var texture = displayObject._texture;
        // only destroy non generated textures
        if (texture && !texture.framebuffer) {
            tm.destroyTexture(texture);
        }
        for (var i = displayObject.children.length - 1; i >= 0; i--) {
            this.unload(displayObject.children[i]);
        }
    };
    TextureGCSystem.prototype.destroy = function () {
        this.renderer = null;
    };
    return TextureGCSystem;
}());

/**
 * Returns a lookup table that maps each type-format pair to a compatible internal format.
 * @memberof PIXI
 * @function mapTypeAndFormatToInternalFormat
 * @private
 * @param {WebGLRenderingContext} gl - The rendering context.
 * @returns Lookup table.
 */
function mapTypeAndFormatToInternalFormat(gl) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
    var table;
    if ('WebGL2RenderingContext' in globalThis && gl instanceof globalThis.WebGL2RenderingContext) {
        table = (_a = {},
            _a[TYPES.UNSIGNED_BYTE] = (_b = {},
                _b[FORMATS.RGBA] = gl.RGBA8,
                _b[FORMATS.RGB] = gl.RGB8,
                _b[FORMATS.RG] = gl.RG8,
                _b[FORMATS.RED] = gl.R8,
                _b[FORMATS.RGBA_INTEGER] = gl.RGBA8UI,
                _b[FORMATS.RGB_INTEGER] = gl.RGB8UI,
                _b[FORMATS.RG_INTEGER] = gl.RG8UI,
                _b[FORMATS.RED_INTEGER] = gl.R8UI,
                _b[FORMATS.ALPHA] = gl.ALPHA,
                _b[FORMATS.LUMINANCE] = gl.LUMINANCE,
                _b[FORMATS.LUMINANCE_ALPHA] = gl.LUMINANCE_ALPHA,
                _b),
            _a[TYPES.BYTE] = (_c = {},
                _c[FORMATS.RGBA] = gl.RGBA8_SNORM,
                _c[FORMATS.RGB] = gl.RGB8_SNORM,
                _c[FORMATS.RG] = gl.RG8_SNORM,
                _c[FORMATS.RED] = gl.R8_SNORM,
                _c[FORMATS.RGBA_INTEGER] = gl.RGBA8I,
                _c[FORMATS.RGB_INTEGER] = gl.RGB8I,
                _c[FORMATS.RG_INTEGER] = gl.RG8I,
                _c[FORMATS.RED_INTEGER] = gl.R8I,
                _c),
            _a[TYPES.UNSIGNED_SHORT] = (_d = {},
                _d[FORMATS.RGBA_INTEGER] = gl.RGBA16UI,
                _d[FORMATS.RGB_INTEGER] = gl.RGB16UI,
                _d[FORMATS.RG_INTEGER] = gl.RG16UI,
                _d[FORMATS.RED_INTEGER] = gl.R16UI,
                _d[FORMATS.DEPTH_COMPONENT] = gl.DEPTH_COMPONENT16,
                _d),
            _a[TYPES.SHORT] = (_e = {},
                _e[FORMATS.RGBA_INTEGER] = gl.RGBA16I,
                _e[FORMATS.RGB_INTEGER] = gl.RGB16I,
                _e[FORMATS.RG_INTEGER] = gl.RG16I,
                _e[FORMATS.RED_INTEGER] = gl.R16I,
                _e),
            _a[TYPES.UNSIGNED_INT] = (_f = {},
                _f[FORMATS.RGBA_INTEGER] = gl.RGBA32UI,
                _f[FORMATS.RGB_INTEGER] = gl.RGB32UI,
                _f[FORMATS.RG_INTEGER] = gl.RG32UI,
                _f[FORMATS.RED_INTEGER] = gl.R32UI,
                _f[FORMATS.DEPTH_COMPONENT] = gl.DEPTH_COMPONENT24,
                _f),
            _a[TYPES.INT] = (_g = {},
                _g[FORMATS.RGBA_INTEGER] = gl.RGBA32I,
                _g[FORMATS.RGB_INTEGER] = gl.RGB32I,
                _g[FORMATS.RG_INTEGER] = gl.RG32I,
                _g[FORMATS.RED_INTEGER] = gl.R32I,
                _g),
            _a[TYPES.FLOAT] = (_h = {},
                _h[FORMATS.RGBA] = gl.RGBA32F,
                _h[FORMATS.RGB] = gl.RGB32F,
                _h[FORMATS.RG] = gl.RG32F,
                _h[FORMATS.RED] = gl.R32F,
                _h[FORMATS.DEPTH_COMPONENT] = gl.DEPTH_COMPONENT32F,
                _h),
            _a[TYPES.HALF_FLOAT] = (_j = {},
                _j[FORMATS.RGBA] = gl.RGBA16F,
                _j[FORMATS.RGB] = gl.RGB16F,
                _j[FORMATS.RG] = gl.RG16F,
                _j[FORMATS.RED] = gl.R16F,
                _j),
            _a[TYPES.UNSIGNED_SHORT_5_6_5] = (_k = {},
                _k[FORMATS.RGB] = gl.RGB565,
                _k),
            _a[TYPES.UNSIGNED_SHORT_4_4_4_4] = (_l = {},
                _l[FORMATS.RGBA] = gl.RGBA4,
                _l),
            _a[TYPES.UNSIGNED_SHORT_5_5_5_1] = (_m = {},
                _m[FORMATS.RGBA] = gl.RGB5_A1,
                _m),
            _a[TYPES.UNSIGNED_INT_2_10_10_10_REV] = (_o = {},
                _o[FORMATS.RGBA] = gl.RGB10_A2,
                _o[FORMATS.RGBA_INTEGER] = gl.RGB10_A2UI,
                _o),
            _a[TYPES.UNSIGNED_INT_10F_11F_11F_REV] = (_p = {},
                _p[FORMATS.RGB] = gl.R11F_G11F_B10F,
                _p),
            _a[TYPES.UNSIGNED_INT_5_9_9_9_REV] = (_q = {},
                _q[FORMATS.RGB] = gl.RGB9_E5,
                _q),
            _a[TYPES.UNSIGNED_INT_24_8] = (_r = {},
                _r[FORMATS.DEPTH_STENCIL] = gl.DEPTH24_STENCIL8,
                _r),
            _a[TYPES.FLOAT_32_UNSIGNED_INT_24_8_REV] = (_s = {},
                _s[FORMATS.DEPTH_STENCIL] = gl.DEPTH32F_STENCIL8,
                _s),
            _a);
    }
    else {
        table = (_t = {},
            _t[TYPES.UNSIGNED_BYTE] = (_u = {},
                _u[FORMATS.RGBA] = gl.RGBA,
                _u[FORMATS.RGB] = gl.RGB,
                _u[FORMATS.ALPHA] = gl.ALPHA,
                _u[FORMATS.LUMINANCE] = gl.LUMINANCE,
                _u[FORMATS.LUMINANCE_ALPHA] = gl.LUMINANCE_ALPHA,
                _u),
            _t[TYPES.UNSIGNED_SHORT_5_6_5] = (_v = {},
                _v[FORMATS.RGB] = gl.RGB,
                _v),
            _t[TYPES.UNSIGNED_SHORT_4_4_4_4] = (_w = {},
                _w[FORMATS.RGBA] = gl.RGBA,
                _w),
            _t[TYPES.UNSIGNED_SHORT_5_5_5_1] = (_x = {},
                _x[FORMATS.RGBA] = gl.RGBA,
                _x),
            _t);
    }
    return table;
}

/**
 * Internal texture for WebGL context.
 * @memberof PIXI
 */
var GLTexture = /** @class */ (function () {
    function GLTexture(texture) {
        this.texture = texture;
        this.width = -1;
        this.height = -1;
        this.dirtyId = -1;
        this.dirtyStyleId = -1;
        this.mipmap = false;
        this.wrapMode = 33071;
        this.type = TYPES.UNSIGNED_BYTE;
        this.internalFormat = FORMATS.RGBA;
        this.samplerType = 0;
    }
    return GLTexture;
}());

/**
 * System plugin to the renderer to manage textures.
 * @memberof PIXI
 */
var TextureSystem = /** @class */ (function () {
    /**
     * @param renderer - The renderer this system works for.
     */
    function TextureSystem(renderer) {
        this.renderer = renderer;
        // TODO set to max textures...
        this.boundTextures = [];
        this.currentLocation = -1;
        this.managedTextures = [];
        this._unknownBoundTextures = false;
        this.unknownTexture = new BaseTexture();
        this.hasIntegerTextures = false;
    }
    /** Sets up the renderer context and necessary buffers. */
    TextureSystem.prototype.contextChange = function () {
        var gl = this.gl = this.renderer.gl;
        this.CONTEXT_UID = this.renderer.CONTEXT_UID;
        this.webGLVersion = this.renderer.context.webGLVersion;
        this.internalFormats = mapTypeAndFormatToInternalFormat(gl);
        var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        this.boundTextures.length = maxTextures;
        for (var i = 0; i < maxTextures; i++) {
            this.boundTextures[i] = null;
        }
        // TODO move this.. to a nice make empty textures class..
        this.emptyTextures = {};
        var emptyTexture2D = new GLTexture(gl.createTexture());
        gl.bindTexture(gl.TEXTURE_2D, emptyTexture2D.texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
        this.emptyTextures[gl.TEXTURE_2D] = emptyTexture2D;
        this.emptyTextures[gl.TEXTURE_CUBE_MAP] = new GLTexture(gl.createTexture());
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);
        for (var i = 0; i < 6; i++) {
            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
        }
        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        for (var i = 0; i < this.boundTextures.length; i++) {
            this.bind(null, i);
        }
    };
    /**
     * Bind a texture to a specific location
     *
     * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`
     * @param texture - Texture to bind
     * @param [location=0] - Location to bind at
     */
    TextureSystem.prototype.bind = function (texture, location) {
        if (location === void 0) { location = 0; }
        var gl = this.gl;
        texture = texture === null || texture === void 0 ? void 0 : texture.castToBaseTexture();
        // cannot bind partial texture
        // TODO: report a warning
        if (texture && texture.valid && !texture.parentTextureArray) {
            texture.touched = this.renderer.textureGC.count;
            var glTexture = texture._glTextures[this.CONTEXT_UID] || this.initTexture(texture);
            if (this.boundTextures[location] !== texture) {
                if (this.currentLocation !== location) {
                    this.currentLocation = location;
                    gl.activeTexture(gl.TEXTURE0 + location);
                }
                gl.bindTexture(texture.target, glTexture.texture);
            }
            if (glTexture.dirtyId !== texture.dirtyId) {
                if (this.currentLocation !== location) {
                    this.currentLocation = location;
                    gl.activeTexture(gl.TEXTURE0 + location);
                }
                this.updateTexture(texture);
            }
            else if (glTexture.dirtyStyleId !== texture.dirtyStyleId) {
                this.updateTextureStyle(texture);
            }
            this.boundTextures[location] = texture;
        }
        else {
            if (this.currentLocation !== location) {
                this.currentLocation = location;
                gl.activeTexture(gl.TEXTURE0 + location);
            }
            gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[gl.TEXTURE_2D].texture);
            this.boundTextures[location] = null;
        }
    };
    /** Resets texture location and bound textures Actual `bind(null, i)` calls will be performed at next `unbind()` call */
    TextureSystem.prototype.reset = function () {
        this._unknownBoundTextures = true;
        this.hasIntegerTextures = false;
        this.currentLocation = -1;
        for (var i = 0; i < this.boundTextures.length; i++) {
            this.boundTextures[i] = this.unknownTexture;
        }
    };
    /**
     * Unbind a texture.
     * @param texture - Texture to bind
     */
    TextureSystem.prototype.unbind = function (texture) {
        var _a = this, gl = _a.gl, boundTextures = _a.boundTextures;
        if (this._unknownBoundTextures) {
            this._unknownBoundTextures = false;
            // someone changed webGL state,
            // we have to be sure that our texture does not appear in multi-texture renderer samplers
            for (var i = 0; i < boundTextures.length; i++) {
                if (boundTextures[i] === this.unknownTexture) {
                    this.bind(null, i);
                }
            }
        }
        for (var i = 0; i < boundTextures.length; i++) {
            if (boundTextures[i] === texture) {
                if (this.currentLocation !== i) {
                    gl.activeTexture(gl.TEXTURE0 + i);
                    this.currentLocation = i;
                }
                gl.bindTexture(texture.target, this.emptyTextures[texture.target].texture);
                boundTextures[i] = null;
            }
        }
    };
    /**
     * Ensures that current boundTextures all have FLOAT sampler type,
     * see {@link PIXI.SAMPLER_TYPES} for explanation.
     * @param maxTextures - number of locations to check
     */
    TextureSystem.prototype.ensureSamplerType = function (maxTextures) {
        var _a = this, boundTextures = _a.boundTextures, hasIntegerTextures = _a.hasIntegerTextures, CONTEXT_UID = _a.CONTEXT_UID;
        if (!hasIntegerTextures) {
            return;
        }
        for (var i = maxTextures - 1; i >= 0; --i) {
            var tex = boundTextures[i];
            if (tex) {
                var glTexture = tex._glTextures[CONTEXT_UID];
                if (glTexture.samplerType !== SAMPLER_TYPES.FLOAT) {
                    this.renderer.texture.unbind(tex);
                }
            }
        }
    };
    /**
     * Initialize a texture
     * @private
     * @param texture - Texture to initialize
     */
    TextureSystem.prototype.initTexture = function (texture) {
        var glTexture = new GLTexture(this.gl.createTexture());
        // guarantee an update..
        glTexture.dirtyId = -1;
        texture._glTextures[this.CONTEXT_UID] = glTexture;
        this.managedTextures.push(texture);
        texture.on('dispose', this.destroyTexture, this);
        return glTexture;
    };
    TextureSystem.prototype.initTextureType = function (texture, glTexture) {
        var _a, _b;
        glTexture.internalFormat = (_b = (_a = this.internalFormats[texture.type]) === null || _a === void 0 ? void 0 : _a[texture.format]) !== null && _b !== void 0 ? _b : texture.format;
        if (this.webGLVersion === 2 && texture.type === TYPES.HALF_FLOAT) {
            // TYPES.HALF_FLOAT is WebGL1 HALF_FLOAT_OES
            // we have to convert it to WebGL HALF_FLOAT
            glTexture.type = this.gl.HALF_FLOAT;
        }
        else {
            glTexture.type = texture.type;
        }
    };
    /**
     * Update a texture
     * @private
     * @param {PIXI.BaseTexture} texture - Texture to initialize
     */
    TextureSystem.prototype.updateTexture = function (texture) {
        var glTexture = texture._glTextures[this.CONTEXT_UID];
        if (!glTexture) {
            return;
        }
        var renderer = this.renderer;
        this.initTextureType(texture, glTexture);
        if (texture.resource && texture.resource.upload(renderer, texture, glTexture)) {
            // texture is uploaded, dont do anything!
            if (glTexture.samplerType !== SAMPLER_TYPES.FLOAT) {
                this.hasIntegerTextures = true;
            }
        }
        else {
            // default, renderTexture-like logic
            var width = texture.realWidth;
            var height = texture.realHeight;
            var gl = renderer.gl;
            if (glTexture.width !== width
                || glTexture.height !== height
                || glTexture.dirtyId < 0) {
                glTexture.width = width;
                glTexture.height = height;
                gl.texImage2D(texture.target, 0, glTexture.internalFormat, width, height, 0, texture.format, glTexture.type, null);
            }
        }
        // lets only update what changes..
        if (texture.dirtyStyleId !== glTexture.dirtyStyleId) {
            this.updateTextureStyle(texture);
        }
        glTexture.dirtyId = texture.dirtyId;
    };
    /**
     * Deletes the texture from WebGL
     * @private
     * @param texture - the texture to destroy
     * @param [skipRemove=false] - Whether to skip removing the texture from the TextureManager.
     */
    TextureSystem.prototype.destroyTexture = function (texture, skipRemove) {
        var gl = this.gl;
        texture = texture.castToBaseTexture();
        if (texture._glTextures[this.CONTEXT_UID]) {
            this.unbind(texture);
            gl.deleteTexture(texture._glTextures[this.CONTEXT_UID].texture);
            texture.off('dispose', this.destroyTexture, this);
            delete texture._glTextures[this.CONTEXT_UID];
            if (!skipRemove) {
                var i = this.managedTextures.indexOf(texture);
                if (i !== -1) {
                    removeItems(this.managedTextures, i, 1);
                }
            }
        }
    };
    /**
     * Update texture style such as mipmap flag
     * @private
     * @param {PIXI.BaseTexture} texture - Texture to update
     */
    TextureSystem.prototype.updateTextureStyle = function (texture) {
        var glTexture = texture._glTextures[this.CONTEXT_UID];
        if (!glTexture) {
            return;
        }
        if ((texture.mipmap === MIPMAP_MODES.POW2 || this.webGLVersion !== 2) && !texture.isPowerOfTwo) {
            glTexture.mipmap = false;
        }
        else {
            glTexture.mipmap = texture.mipmap >= 1;
        }
        if (this.webGLVersion !== 2 && !texture.isPowerOfTwo) {
            glTexture.wrapMode = WRAP_MODES.CLAMP;
        }
        else {
            glTexture.wrapMode = texture.wrapMode;
        }
        if (texture.resource && texture.resource.style(this.renderer, texture, glTexture)) ;
        else {
            this.setStyle(texture, glTexture);
        }
        glTexture.dirtyStyleId = texture.dirtyStyleId;
    };
    /**
     * Set style for texture
     * @private
     * @param texture - Texture to update
     * @param glTexture
     */
    TextureSystem.prototype.setStyle = function (texture, glTexture) {
        var gl = this.gl;
        if (glTexture.mipmap && texture.mipmap !== MIPMAP_MODES.ON_MANUAL) {
            gl.generateMipmap(texture.target);
        }
        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_S, glTexture.wrapMode);
        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_T, glTexture.wrapMode);
        if (glTexture.mipmap) {
            /* eslint-disable max-len */
            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);
            /* eslint-disable max-len */
            var anisotropicExt = this.renderer.context.extensions.anisotropicFiltering;
            if (anisotropicExt && texture.anisotropicLevel > 0 && texture.scaleMode === SCALE_MODES.LINEAR) {
                var level = Math.min(texture.anisotropicLevel, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));
                gl.texParameterf(texture.target, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);
            }
        }
        else {
            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);
        }
        gl.texParameteri(texture.target, gl.TEXTURE_MAG_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);
    };
    TextureSystem.prototype.destroy = function () {
        this.renderer = null;
    };
    return TextureSystem;
}());

var _systems = {
    __proto__: null,
    FilterSystem: FilterSystem,
    BatchSystem: BatchSystem,
    ContextSystem: ContextSystem,
    FramebufferSystem: FramebufferSystem,
    GeometrySystem: GeometrySystem,
    MaskSystem: MaskSystem,
    ScissorSystem: ScissorSystem,
    StencilSystem: StencilSystem,
    ProjectionSystem: ProjectionSystem,
    RenderTextureSystem: RenderTextureSystem,
    ShaderSystem: ShaderSystem,
    StateSystem: StateSystem,
    TextureGCSystem: TextureGCSystem,
    TextureSystem: TextureSystem
};

var tempMatrix = new Matrix();
/**
 * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}
 * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.
 * @abstract
 * @class
 * @extends PIXI.utils.EventEmitter
 * @memberof PIXI
 */
var AbstractRenderer = /** @class */ (function (_super) {
    __extends(AbstractRenderer, _super);
    /**
     * @param type - The renderer type.
     * @param [options] - The optional renderer parameters.
     * @param {number} [options.width=800] - The width of the screen.
     * @param {number} [options.height=600] - The height of the screen.
     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.
     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.
     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the
     *   canvas needs to be opaque, possibly for performance reasons on some older devices.
     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for
     *   resolutions other than 1.
     * @param {boolean} [options.antialias=false] - Sets antialias
     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.
     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,
     *  enable this if you need to call toDataUrl on the WebGL context.
     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or
     *      not before the new render pass.
     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
     *  (shown if not transparent).
     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).
     * @param {boolean} [options.transparent] - **Deprecated**. `true` sets backgroundAlpha to 0,
     * `false` sets backgroundAlpha to 1.
     */
    function AbstractRenderer(type, options) {
        if (type === void 0) { type = RENDERER_TYPE.UNKNOWN; }
        var _this = _super.call(this) || this;
        // Add the default render options
        options = Object.assign({}, settings.RENDER_OPTIONS, options);
        /**
         * The supplied constructor options.
         * @member {object}
         * @readonly
         */
        _this.options = options;
        /**
         * The type of the renderer.
         * @member {number}
         * @default PIXI.RENDERER_TYPE.UNKNOWN
         * @see PIXI.RENDERER_TYPE
         */
        _this.type = type;
        /**
         * Measurements of the screen. (0, 0, screenWidth, screenHeight).
         *
         * Its safe to use as filterArea or hitArea for the whole stage.
         * @member {PIXI.Rectangle}
         */
        _this.screen = new Rectangle(0, 0, options.width, options.height);
        /**
         * The canvas element that everything is drawn to.
         * @member {HTMLCanvasElement}
         */
        _this.view = options.view || settings.ADAPTER.createCanvas();
        /**
         * The resolution / device pixel ratio of the renderer.
         * @member {number}
         * @default PIXI.settings.RESOLUTION
         */
        _this.resolution = options.resolution || settings.RESOLUTION;
        /**
         * Pass-thru setting for the canvas' context `alpha` property. This is typically
         * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.
         * @member {boolean}
         */
        _this.useContextAlpha = options.useContextAlpha;
        /**
         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.
         * @member {boolean}
         */
        _this.autoDensity = !!options.autoDensity;
        /**
         * The value of the preserveDrawingBuffer flag affects whether or not the contents of
         * the stencil buffer is retained after rendering.
         * @member {boolean}
         */
        _this.preserveDrawingBuffer = options.preserveDrawingBuffer;
        /**
         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every
         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect
         * to clear the canvas every frame. Disable this by setting this to false. For example, if
         * your game has a canvas filling background image you often don't need this set.
         * @member {boolean}
         * @default
         */
        _this.clearBeforeRender = options.clearBeforeRender;
        /**
         * The background color as a number.
         * @member {number}
         * @protected
         */
        _this._backgroundColor = 0x000000;
        /**
         * The background color as an [R, G, B, A] array.
         * @member {number[]}
         * @protected
         */
        _this._backgroundColorRgba = [0, 0, 0, 1];
        /**
         * The background color as a string.
         * @member {string}
         * @protected
         */
        _this._backgroundColorString = '#000000';
        _this.backgroundColor = options.backgroundColor || _this._backgroundColor; // run bg color setter
        _this.backgroundAlpha = options.backgroundAlpha;
        // @deprecated
        if (options.transparent !== undefined) {
            deprecation('6.0.0', 'Option transparent is deprecated, please use backgroundAlpha instead.');
            _this.useContextAlpha = options.transparent;
            _this.backgroundAlpha = options.transparent ? 0 : 1;
        }
        /**
         * The last root object that the renderer tried to render.
         * @member {PIXI.DisplayObject}
         * @protected
         */
        _this._lastObjectRendered = null;
        /**
         * Collection of plugins.
         * @readonly
         * @member {object}
         */
        _this.plugins = {};
        return _this;
    }
    /**
     * Initialize the plugins.
     * @protected
     * @param {object} staticMap - The dictionary of statically saved plugins.
     */
    AbstractRenderer.prototype.initPlugins = function (staticMap) {
        for (var o in staticMap) {
            this.plugins[o] = new (staticMap[o])(this);
        }
    };
    Object.defineProperty(AbstractRenderer.prototype, "width", {
        /**
         * Same as view.width, actual number of pixels in the canvas by horizontal.
         * @member {number}
         * @readonly
         * @default 800
         */
        get: function () {
            return this.view.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractRenderer.prototype, "height", {
        /**
         * Same as view.height, actual number of pixels in the canvas by vertical.
         * @member {number}
         * @readonly
         * @default 600
         */
        get: function () {
            return this.view.height;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Resizes the screen and canvas as close as possible to the specified width and height.
     * Canvas dimensions are multiplied by resolution and rounded to the nearest integers.
     * The new canvas dimensions divided by the resolution become the new screen dimensions.
     * @param desiredScreenWidth - The desired width of the screen.
     * @param desiredScreenHeight - The desired height of the screen.
     */
    AbstractRenderer.prototype.resize = function (desiredScreenWidth, desiredScreenHeight) {
        this.view.width = Math.round(desiredScreenWidth * this.resolution);
        this.view.height = Math.round(desiredScreenHeight * this.resolution);
        var screenWidth = this.view.width / this.resolution;
        var screenHeight = this.view.height / this.resolution;
        this.screen.width = screenWidth;
        this.screen.height = screenHeight;
        if (this.autoDensity) {
            this.view.style.width = screenWidth + "px";
            this.view.style.height = screenHeight + "px";
        }
        /**
         * Fired after view has been resized.
         * @event PIXI.Renderer#resize
         * @param {number} screenWidth - The new width of the screen.
         * @param {number} screenHeight - The new height of the screen.
         */
        this.emit('resize', screenWidth, screenHeight);
    };
    /**
     * @ignore
     */
    AbstractRenderer.prototype.generateTexture = function (displayObject, options, resolution, region) {
        if (options === void 0) { options = {}; }
        // @deprecated parameters spread, use options instead
        if (typeof options === 'number') {
            deprecation('6.1.0', 'generateTexture options (scaleMode, resolution, region) are now object options.');
            options = { scaleMode: options, resolution: resolution, region: region };
        }
        var manualRegion = options.region, textureOptions = __rest(options, ["region"]);
        region = manualRegion || displayObject.getLocalBounds(null, true);
        // minimum texture size is 1x1, 0x0 will throw an error
        if (region.width === 0)
            { region.width = 1; }
        if (region.height === 0)
            { region.height = 1; }
        var renderTexture = RenderTexture.create(core_assign({ width: region.width, height: region.height }, textureOptions));
        tempMatrix.tx = -region.x;
        tempMatrix.ty = -region.y;
        this.render(displayObject, {
            renderTexture: renderTexture,
            clear: false,
            transform: tempMatrix,
            skipUpdateTransform: !!displayObject.parent
        });
        return renderTexture;
    };
    /**
     * Removes everything from the renderer and optionally removes the Canvas DOM element.
     * @param [removeView=false] - Removes the Canvas element from the DOM.
     */
    AbstractRenderer.prototype.destroy = function (removeView) {
        for (var o in this.plugins) {
            this.plugins[o].destroy();
            this.plugins[o] = null;
        }
        if (removeView && this.view.parentNode) {
            this.view.parentNode.removeChild(this.view);
        }
        var thisAny = this;
        // null-ing all objects, that's a tradition!
        thisAny.plugins = null;
        thisAny.type = RENDERER_TYPE.UNKNOWN;
        thisAny.view = null;
        thisAny.screen = null;
        thisAny._tempDisplayObjectParent = null;
        thisAny.options = null;
        this._backgroundColorRgba = null;
        this._backgroundColorString = null;
        this._lastObjectRendered = null;
    };
    Object.defineProperty(AbstractRenderer.prototype, "backgroundColor", {
        /**
         * The background color to fill if not transparent
         * @member {number}
         */
        get: function () {
            return this._backgroundColor;
        },
        set: function (value) {
            this._backgroundColor = value;
            this._backgroundColorString = hex2string(value);
            hex2rgb(value, this._backgroundColorRgba);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractRenderer.prototype, "backgroundAlpha", {
        /**
         * The background color alpha. Setting this to 0 will make the canvas transparent.
         * @member {number}
         */
        get: function () {
            return this._backgroundColorRgba[3];
        },
        set: function (value) {
            this._backgroundColorRgba[3] = value;
        },
        enumerable: false,
        configurable: true
    });
    return AbstractRenderer;
}(eventemitter3));

var GLBuffer = /** @class */ (function () {
    function GLBuffer(buffer) {
        this.buffer = buffer || null;
        this.updateID = -1;
        this.byteLength = -1;
        this.refCount = 0;
    }
    return GLBuffer;
}());

/**
 * System plugin to the renderer to manage buffers.
 *
 * WebGL uses Buffers as a way to store objects to the GPU.
 * This system makes working with them a lot easier.
 *
 * Buffers are used in three main places in WebGL
 * - geometry information
 * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)
 * - Transform feedback information. (WebGL 2 only feature)
 *
 * This system will handle the binding of buffers to the GPU as well as uploading
 * them. With this system, you never need to work directly with GPU buffers, but instead work with
 * the PIXI.Buffer class.
 * @class
 * @memberof PIXI
 */
var BufferSystem = /** @class */ (function () {
    /**
     * @param {PIXI.Renderer} renderer - The renderer this System works for.
     */
    function BufferSystem(renderer) {
        this.renderer = renderer;
        this.managedBuffers = {};
        this.boundBufferBases = {};
    }
    /**
     * @ignore
     */
    BufferSystem.prototype.destroy = function () {
        this.renderer = null;
    };
    /** Sets up the renderer context and necessary buffers. */
    BufferSystem.prototype.contextChange = function () {
        this.disposeAll(true);
        this.gl = this.renderer.gl;
        // TODO fill out...
        this.CONTEXT_UID = this.renderer.CONTEXT_UID;
    };
    /**
     * This binds specified buffer. On first run, it will create the webGL buffers for the context too
     * @param buffer - the buffer to bind to the renderer
     */
    BufferSystem.prototype.bind = function (buffer) {
        var _a = this, gl = _a.gl, CONTEXT_UID = _a.CONTEXT_UID;
        var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);
        gl.bindBuffer(buffer.type, glBuffer.buffer);
    };
    /**
     * Binds an uniform buffer to at the given index.
     *
     * A cache is used so a buffer will not be bound again if already bound.
     * @param buffer - the buffer to bind
     * @param index - the base index to bind it to.
     */
    BufferSystem.prototype.bindBufferBase = function (buffer, index) {
        var _a = this, gl = _a.gl, CONTEXT_UID = _a.CONTEXT_UID;
        if (this.boundBufferBases[index] !== buffer) {
            var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);
            this.boundBufferBases[index] = buffer;
            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);
        }
    };
    /**
     * Binds a buffer whilst also binding its range.
     * This will make the buffer start from the offset supplied rather than 0 when it is read.
     * @param buffer - the buffer to bind
     * @param index - the base index to bind at, defaults to 0
     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc
     */
    BufferSystem.prototype.bindBufferRange = function (buffer, index, offset) {
        var _a = this, gl = _a.gl, CONTEXT_UID = _a.CONTEXT_UID;
        offset = offset || 0;
        var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);
        gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);
    };
    /**
     * Will ensure the data in the buffer is uploaded to the GPU.
     * @param {PIXI.Buffer} buffer - the buffer to update
     */
    BufferSystem.prototype.update = function (buffer) {
        var _a = this, gl = _a.gl, CONTEXT_UID = _a.CONTEXT_UID;
        var glBuffer = buffer._glBuffers[CONTEXT_UID];
        if (buffer._updateID === glBuffer.updateID) {
            return;
        }
        glBuffer.updateID = buffer._updateID;
        gl.bindBuffer(buffer.type, glBuffer.buffer);
        if (glBuffer.byteLength >= buffer.data.byteLength) {
            // offset is always zero for now!
            gl.bufferSubData(buffer.type, 0, buffer.data);
        }
        else {
            var drawType = buffer.static ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;
            glBuffer.byteLength = buffer.data.byteLength;
            gl.bufferData(buffer.type, buffer.data, drawType);
        }
    };
    /**
     * Disposes buffer
     * @param {PIXI.Buffer} buffer - buffer with data
     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray
     */
    BufferSystem.prototype.dispose = function (buffer, contextLost) {
        if (!this.managedBuffers[buffer.id]) {
            return;
        }
        delete this.managedBuffers[buffer.id];
        var glBuffer = buffer._glBuffers[this.CONTEXT_UID];
        var gl = this.gl;
        buffer.disposeRunner.remove(this);
        if (!glBuffer) {
            return;
        }
        if (!contextLost) {
            gl.deleteBuffer(glBuffer.buffer);
        }
        delete buffer._glBuffers[this.CONTEXT_UID];
    };
    /**
     * dispose all WebGL resources of all managed buffers
     * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls
     */
    BufferSystem.prototype.disposeAll = function (contextLost) {
        var all = Object.keys(this.managedBuffers);
        for (var i = 0; i < all.length; i++) {
            this.dispose(this.managedBuffers[all[i]], contextLost);
        }
    };
    /**
     * creates and attaches a GLBuffer object tied to the current context.
     * @param buffer
     * @protected
     */
    BufferSystem.prototype.createGLBuffer = function (buffer) {
        var _a = this, CONTEXT_UID = _a.CONTEXT_UID, gl = _a.gl;
        buffer._glBuffers[CONTEXT_UID] = new GLBuffer(gl.createBuffer());
        this.managedBuffers[buffer.id] = buffer;
        buffer.disposeRunner.add(this);
        return buffer._glBuffers[CONTEXT_UID];
    };
    return BufferSystem;
}());

/**
 * The Renderer draws the scene and all its content onto a WebGL enabled canvas.
 *
 * This renderer should be used for browsers that support WebGL.
 *
 * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.
 * Don't forget to add the view to your DOM or you will not see anything!
 *
 * Renderer is composed of systems that manage specific tasks. The following systems are added by default
 * whenever you create a renderer:
 *
 * | System                               | Description                                                                   |
 * | ------------------------------------ | ----------------------------------------------------------------------------- |
 * | {@link PIXI.BatchSystem}             | This manages object renderers that defer rendering until a flush.             |
 * | {@link PIXI.ContextSystem}           | This manages the WebGL context and extensions.                                |
 * | {@link PIXI.EventSystem}             | This manages UI events.                                                       |
 * | {@link PIXI.FilterSystem}            | This manages the filtering pipeline for post-processing effects.              |
 * | {@link PIXI.FramebufferSystem}       | This manages framebuffers, which are used for offscreen rendering.            |
 * | {@link PIXI.GeometrySystem}          | This manages geometries & buffers, which are used to draw object meshes.      |
 * | {@link PIXI.MaskSystem}              | This manages masking operations.                                              |
 * | {@link PIXI.ProjectionSystem}        | This manages the `projectionMatrix`, used by shaders to get NDC coordinates.  |
 * | {@link PIXI.RenderTextureSystem}     | This manages render-textures, which are an abstraction over framebuffers.     |
 * | {@link PIXI.ScissorSystem}           | This handles scissor masking, and is used internally by {@link MaskSystem}    |
 * | {@link PIXI.ShaderSystem}            | This manages shaders, programs that run on the GPU to calculate 'em pixels.   |
 * | {@link PIXI.StateSystem}             | This manages the WebGL state variables like blend mode, depth testing, etc.   |
 * | {@link PIXI.StencilSystem}           | This handles stencil masking, and is used internally by {@link MaskSystem}    |
 * | {@link PIXI.TextureSystem}           | This manages textures and their resources on the GPU.                         |
 * | {@link PIXI.TextureGCSystem}         | This will automatically remove textures from the GPU if they are not used.    |
 *
 * The breadth of the API surface provided by the renderer is contained within these systems.
 * @memberof PIXI
 */
var Renderer = /** @class */ (function (_super) {
    __extends(Renderer, _super);
    /**
     * @param [options] - The optional renderer parameters.
     * @param {number} [options.width=800] - The width of the screen.
     * @param {number} [options.height=600] - The height of the screen.
     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.
     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.
     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the
     *   canvas needs to be opaque, possibly for performance reasons on some older devices.
     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for
     *   resolutions other than 1.
     * @param {boolean} [options.antialias=false] - Sets antialias. If not available natively then FXAA
     *  antialiasing is used.
     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.
     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear
     *  the canvas or not before the new render pass. If you wish to set this to false, you *must* set
     *  preserveDrawingBuffer to `true`.
     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,
     *  enable this if you need to call toDataUrl on the WebGL context.
     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
     *  (shown if not transparent).
     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).
     * @param {boolean} [options.transparent] - **Deprecated**. `true` sets backgroundAlpha to 0,
     *  `false` sets backgroundAlpha to 1.
     * @param {string} [options.powerPreference] - Parameter passed to WebGL context, set to "high-performance"
     *  for devices with dual graphics card.
     * @param {object} [options.context] - If WebGL context already exists, all parameters must be taken from it.
     */
    function Renderer(options) {
        var _this = _super.call(this, RENDERER_TYPE.WEBGL, options) || this;
        // the options will have been modified here in the super constructor with pixi's default settings..
        options = _this.options;
        _this.gl = null;
        _this.CONTEXT_UID = 0;
        _this.runners = {
            destroy: new Runner('destroy'),
            contextChange: new Runner('contextChange'),
            reset: new Runner('reset'),
            update: new Runner('update'),
            postrender: new Runner('postrender'),
            prerender: new Runner('prerender'),
            resize: new Runner('resize'),
        };
        _this.runners.contextChange.add(_this);
        _this.globalUniforms = new UniformGroup({
            projectionMatrix: new Matrix(),
        }, true);
        _this.addSystem(MaskSystem, 'mask')
            .addSystem(ContextSystem, 'context')
            .addSystem(StateSystem, 'state')
            .addSystem(ShaderSystem, 'shader')
            .addSystem(TextureSystem, 'texture')
            .addSystem(BufferSystem, 'buffer')
            .addSystem(GeometrySystem, 'geometry')
            .addSystem(FramebufferSystem, 'framebuffer')
            .addSystem(ScissorSystem, 'scissor')
            .addSystem(StencilSystem, 'stencil')
            .addSystem(ProjectionSystem, 'projection')
            .addSystem(TextureGCSystem, 'textureGC')
            .addSystem(FilterSystem, 'filter')
            .addSystem(RenderTextureSystem, 'renderTexture')
            .addSystem(BatchSystem, 'batch');
        _this.initPlugins(Renderer.__plugins);
        _this.multisample = undefined;
        /*
         * The options passed in to create a new WebGL context.
         */
        if (options.context) {
            _this.context.initFromContext(options.context);
        }
        else {
            _this.context.initFromOptions({
                alpha: !!_this.useContextAlpha,
                antialias: options.antialias,
                premultipliedAlpha: _this.useContextAlpha && _this.useContextAlpha !== 'notMultiplied',
                stencil: true,
                preserveDrawingBuffer: options.preserveDrawingBuffer,
                powerPreference: _this.options.powerPreference,
            });
        }
        _this.renderingToScreen = true;
        sayHello(_this.context.webGLVersion === 2 ? 'WebGL 2' : 'WebGL 1');
        _this.resize(_this.options.width, _this.options.height);
        return _this;
    }
    /**
     * Create renderer if WebGL is available. Overrideable
     * by the **@pixi/canvas-renderer** package to allow fallback.
     * throws error if WebGL is not available.
     * @param options
     * @private
     */
    Renderer.create = function (options) {
        if (isWebGLSupported()) {
            return new Renderer(options);
        }
        throw new Error('WebGL unsupported in this browser, use "pixi.js-legacy" for fallback canvas2d support.');
    };
    Renderer.prototype.contextChange = function () {
        var gl = this.gl;
        var samples;
        if (this.context.webGLVersion === 1) {
            var framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            samples = gl.getParameter(gl.SAMPLES);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
        }
        else {
            var framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);
            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
            samples = gl.getParameter(gl.SAMPLES);
            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebuffer);
        }
        if (samples >= MSAA_QUALITY.HIGH) {
            this.multisample = MSAA_QUALITY.HIGH;
        }
        else if (samples >= MSAA_QUALITY.MEDIUM) {
            this.multisample = MSAA_QUALITY.MEDIUM;
        }
        else if (samples >= MSAA_QUALITY.LOW) {
            this.multisample = MSAA_QUALITY.LOW;
        }
        else {
            this.multisample = MSAA_QUALITY.NONE;
        }
    };
    /**
     * Add a new system to the renderer.
     * @param ClassRef - Class reference
     * @param name - Property name for system, if not specified
     *        will use a static `name` property on the class itself. This
     *        name will be assigned as s property on the Renderer so make
     *        sure it doesn't collide with properties on Renderer.
     * @returns Return instance of renderer
     */
    Renderer.prototype.addSystem = function (ClassRef, name) {
        var system = new ClassRef(this);
        if (this[name]) {
            throw new Error("Whoops! The name \"" + name + "\" is already in use");
        }
        this[name] = system;
        for (var i in this.runners) {
            this.runners[i].add(system);
        }
        /**
         * Fired after rendering finishes.
         * @event PIXI.Renderer#postrender
         */
        /**
         * Fired before rendering starts.
         * @event PIXI.Renderer#prerender
         */
        /**
         * Fired when the WebGL context is set.
         * @event PIXI.Renderer#context
         * @param {WebGLRenderingContext} gl - WebGL context.
         */
        return this;
    };
    /**
     * @ignore
     */
    Renderer.prototype.render = function (displayObject, options) {
        var renderTexture;
        var clear;
        var transform;
        var skipUpdateTransform;
        if (options) {
            if (options instanceof RenderTexture) {
                deprecation('6.0.0', 'Renderer#render arguments changed, use options instead.');
                /* eslint-disable prefer-rest-params */
                renderTexture = options;
                clear = arguments[2];
                transform = arguments[3];
                skipUpdateTransform = arguments[4];
                /* eslint-enable prefer-rest-params */
            }
            else {
                renderTexture = options.renderTexture;
                clear = options.clear;
                transform = options.transform;
                skipUpdateTransform = options.skipUpdateTransform;
            }
        }
        // can be handy to know!
        this.renderingToScreen = !renderTexture;
        this.runners.prerender.emit();
        this.emit('prerender');
        // apply a transform at a GPU level
        this.projection.transform = transform;
        // no point rendering if our context has been blown up!
        if (this.context.isLost) {
            return;
        }
        if (!renderTexture) {
            this._lastObjectRendered = displayObject;
        }
        if (!skipUpdateTransform) {
            // update the scene graph
            var cacheParent = displayObject.enableTempParent();
            displayObject.updateTransform();
            displayObject.disableTempParent(cacheParent);
            // displayObject.hitArea = //TODO add a temp hit area
        }
        this.renderTexture.bind(renderTexture);
        this.batch.currentRenderer.start();
        if (clear !== undefined ? clear : this.clearBeforeRender) {
            this.renderTexture.clear();
        }
        displayObject.render(this);
        // apply transform..
        this.batch.currentRenderer.flush();
        if (renderTexture) {
            renderTexture.baseTexture.update();
        }
        this.runners.postrender.emit();
        // reset transform after render
        this.projection.transform = null;
        this.emit('postrender');
    };
    /**
     * @override
     * @ignore
     */
    Renderer.prototype.generateTexture = function (displayObject, options, resolution, region) {
        if (options === void 0) { options = {}; }
        var renderTexture = _super.prototype.generateTexture.call(this, displayObject, options, resolution, region);
        this.framebuffer.blit();
        return renderTexture;
    };
    /**
     * Resizes the WebGL view to the specified width and height.
     * @param desiredScreenWidth - The desired width of the screen.
     * @param desiredScreenHeight - The desired height of the screen.
     */
    Renderer.prototype.resize = function (desiredScreenWidth, desiredScreenHeight) {
        _super.prototype.resize.call(this, desiredScreenWidth, desiredScreenHeight);
        this.runners.resize.emit(this.screen.height, this.screen.width);
    };
    /**
     * Resets the WebGL state so you can render things however you fancy!
     * @returns Returns itself.
     */
    Renderer.prototype.reset = function () {
        this.runners.reset.emit();
        return this;
    };
    /** Clear the frame buffer. */
    Renderer.prototype.clear = function () {
        this.renderTexture.bind();
        this.renderTexture.clear();
    };
    /**
     * Removes everything from the renderer (event listeners, spritebatch, etc...)
     * @param [removeView=false] - Removes the Canvas element from the DOM.
     *  See: https://github.com/pixijs/pixi.js/issues/2233
     */
    Renderer.prototype.destroy = function (removeView) {
        this.runners.destroy.emit();
        for (var r in this.runners) {
            this.runners[r].destroy();
        }
        // call base destroy
        _super.prototype.destroy.call(this, removeView);
        // TODO nullify all the managers..
        this.gl = null;
    };
    Object.defineProperty(Renderer.prototype, "extract", {
        /**
         * Please use `plugins.extract` instead.
         * @member {PIXI.Extract} extract
         * @deprecated since 6.0.0
         * @readonly
         */
        get: function () {
            deprecation('6.0.0', 'Renderer#extract has been deprecated, please use Renderer#plugins.extract instead.');
            return this.plugins.extract;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Use the {@link PIXI.extensions.add} API to register plugins.
     * @deprecated since 6.5.0
     * @param pluginName - The name of the plugin.
     * @param ctor - The constructor function or class for the plugin.
     */
    Renderer.registerPlugin = function (pluginName, ctor) {
        deprecation('6.5.0', 'Renderer.registerPlugin() has been deprecated, please use extensions.add() instead.');
        extensions.add({
            name: pluginName,
            type: ExtensionType.RendererPlugin,
            ref: ctor,
        });
    };
    /**
     * Collection of installed plugins. These are included by default in PIXI, but can be excluded
     * by creating a custom build. Consult the README for more information about creating custom
     * builds and excluding plugins.
     * @readonly
     * @property {PIXI.AccessibilityManager} accessibility Support tabbing interactive elements.
     * @property {PIXI.Extract} extract Extract image data from renderer.
     * @property {PIXI.InteractionManager} interaction Handles mouse, touch and pointer events.
     * @property {PIXI.ParticleRenderer} particle Renderer for ParticleContainer objects.
     * @property {PIXI.Prepare} prepare Pre-render display objects.
     * @property {PIXI.BatchRenderer} batch Batching of Sprite, Graphics and Mesh objects.
     * @property {PIXI.TilingSpriteRenderer} tilingSprite Renderer for TilingSprite objects.
     */
    Renderer.__plugins = {};
    return Renderer;
}(AbstractRenderer));
// Handle registration of extensions
extensions.handleByMap(ExtensionType.RendererPlugin, Renderer.__plugins);

/**
 * This helper function will automatically detect which renderer you should be using.
 * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by
 * the browser then this function will return a canvas renderer
 * @memberof PIXI
 * @function autoDetectRenderer
 * @param {object} [options] - The optional renderer parameters
 * @param {number} [options.width=800] - the width of the renderers view
 * @param {number} [options.height=600] - the height of the renderers view
 * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional
 * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.
 *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the
 *   canvas needs to be opaque, possibly for performance reasons on some older devices.
 * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for
 *   resolutions other than 1
 * @param {boolean} [options.antialias=false] - sets antialias
 * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you
 *  need to call toDataUrl on the webgl context
 * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
 *  (shown if not transparent).
 * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).
 * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or
 *   not before the new render pass.
 * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.
 * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this
 *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise
 *   it is ignored.
 * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to "high-performance"
 *  for devices with dual graphics card **webgl only**
 * @returns {PIXI.Renderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer
 */
function autoDetectRenderer(options) {
    return Renderer.create(options);
}

var $defaultVertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var $defaultFilterVertex = "attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n";

/**
 * Default vertex shader
 * @memberof PIXI
 * @member {string} defaultVertex
 */
/**
 * Default filter vertex shader
 * @memberof PIXI
 * @member {string} defaultFilterVertex
 */
// NOTE: This black magic is so that @microsoft/api-extractor does not complain! This explicitly specifies the types
// of defaultVertex, defaultFilterVertex.
var defaultVertex$1 = (/* unused pure expression or super */ null && ($defaultVertex));
var defaultFilterVertex = (/* unused pure expression or super */ null && ($defaultFilterVertex));

/**
 * Use the ISystem interface instead.
 * @deprecated since 6.1.0
 * @memberof PIXI
 */
var System = /** @class */ (function () {
    /**
     * @param renderer - Reference to Renderer
     */
    function System(renderer) {
        deprecation('6.1.0', 'System class is deprecated, implemement ISystem interface instead.');
        this.renderer = renderer;
    }
    /** Destroy and don't use after this. */
    System.prototype.destroy = function () {
        this.renderer = null;
    };
    return System;
}());

/**
 * Used by the batcher to draw batches.
 * Each one of these contains all information required to draw a bound geometry.
 * @memberof PIXI
 */
var BatchDrawCall = /** @class */ (function () {
    function BatchDrawCall() {
        this.texArray = null;
        this.blend = 0;
        this.type = DRAW_MODES.TRIANGLES;
        this.start = 0;
        this.size = 0;
        this.data = null;
    }
    return BatchDrawCall;
}());

/**
 * Used by the batcher to build texture batches.
 * Holds list of textures and their respective locations.
 * @memberof PIXI
 */
var BatchTextureArray = /** @class */ (function () {
    function BatchTextureArray() {
        this.elements = [];
        this.ids = [];
        this.count = 0;
    }
    BatchTextureArray.prototype.clear = function () {
        for (var i = 0; i < this.count; i++) {
            this.elements[i] = null;
        }
        this.count = 0;
    };
    return BatchTextureArray;
}());

/**
 * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.
 * @memberof PIXI
 */
var ViewableBuffer = /** @class */ (function () {
    function ViewableBuffer(sizeOrBuffer) {
        if (typeof sizeOrBuffer === 'number') {
            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);
        }
        else if (sizeOrBuffer instanceof Uint8Array) {
            this.rawBinaryData = sizeOrBuffer.buffer;
        }
        else {
            this.rawBinaryData = sizeOrBuffer;
        }
        this.uint32View = new Uint32Array(this.rawBinaryData);
        this.float32View = new Float32Array(this.rawBinaryData);
    }
    Object.defineProperty(ViewableBuffer.prototype, "int8View", {
        /** View on the raw binary data as a `Int8Array`. */
        get: function () {
            if (!this._int8View) {
                this._int8View = new Int8Array(this.rawBinaryData);
            }
            return this._int8View;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ViewableBuffer.prototype, "uint8View", {
        /** View on the raw binary data as a `Uint8Array`. */
        get: function () {
            if (!this._uint8View) {
                this._uint8View = new Uint8Array(this.rawBinaryData);
            }
            return this._uint8View;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ViewableBuffer.prototype, "int16View", {
        /**  View on the raw binary data as a `Int16Array`. */
        get: function () {
            if (!this._int16View) {
                this._int16View = new Int16Array(this.rawBinaryData);
            }
            return this._int16View;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ViewableBuffer.prototype, "uint16View", {
        /** View on the raw binary data as a `Uint16Array`. */
        get: function () {
            if (!this._uint16View) {
                this._uint16View = new Uint16Array(this.rawBinaryData);
            }
            return this._uint16View;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ViewableBuffer.prototype, "int32View", {
        /** View on the raw binary data as a `Int32Array`. */
        get: function () {
            if (!this._int32View) {
                this._int32View = new Int32Array(this.rawBinaryData);
            }
            return this._int32View;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the view of the given type.
     * @param type - One of `int8`, `uint8`, `int16`,
     *    `uint16`, `int32`, `uint32`, and `float32`.
     * @returns - typed array of given type
     */
    ViewableBuffer.prototype.view = function (type) {
        return this[type + "View"];
    };
    /** Destroys all buffer references. Do not use after calling this. */
    ViewableBuffer.prototype.destroy = function () {
        this.rawBinaryData = null;
        this._int8View = null;
        this._uint8View = null;
        this._int16View = null;
        this._uint16View = null;
        this._int32View = null;
        this.uint32View = null;
        this.float32View = null;
    };
    ViewableBuffer.sizeOf = function (type) {
        switch (type) {
            case 'int8':
            case 'uint8':
                return 1;
            case 'int16':
            case 'uint16':
                return 2;
            case 'int32':
            case 'uint32':
            case 'float32':
                return 4;
            default:
                throw new Error(type + " isn't a valid view type");
        }
    };
    return ViewableBuffer;
}());

/**
 * Renderer dedicated to drawing and batching sprites.
 *
 * This is the default batch renderer. It buffers objects
 * with texture-based geometries and renders them in
 * batches. It uploads multiple textures to the GPU to
 * reduce to the number of draw calls.
 * @memberof PIXI
 */
var AbstractBatchRenderer = /** @class */ (function (_super) {
    __extends(AbstractBatchRenderer, _super);
    /**
     * This will hook onto the renderer's `contextChange`
     * and `prerender` signals.
     * @param {PIXI.Renderer} renderer - The renderer this works for.
     */
    function AbstractBatchRenderer(renderer) {
        var _this = _super.call(this, renderer) || this;
        _this.shaderGenerator = null;
        _this.geometryClass = null;
        _this.vertexSize = null;
        _this.state = State.for2d();
        _this.size = settings.SPRITE_BATCH_SIZE * 4;
        _this._vertexCount = 0;
        _this._indexCount = 0;
        _this._bufferedElements = [];
        _this._bufferedTextures = [];
        _this._bufferSize = 0;
        _this._shader = null;
        _this._packedGeometries = [];
        _this._packedGeometryPoolSize = 2;
        _this._flushId = 0;
        _this._aBuffers = {};
        _this._iBuffers = {};
        _this.MAX_TEXTURES = 1;
        _this.renderer.on('prerender', _this.onPrerender, _this);
        renderer.runners.contextChange.add(_this);
        _this._dcIndex = 0;
        _this._aIndex = 0;
        _this._iIndex = 0;
        _this._attributeBuffer = null;
        _this._indexBuffer = null;
        _this._tempBoundTextures = [];
        return _this;
    }
    /**
     * Handles the `contextChange` signal.
     *
     * It calculates `this.MAX_TEXTURES` and allocating the packed-geometry object pool.
     */
    AbstractBatchRenderer.prototype.contextChange = function () {
        var gl = this.renderer.gl;
        if (settings.PREFER_ENV === ENV.WEBGL_LEGACY) {
            this.MAX_TEXTURES = 1;
        }
        else {
            // step 1: first check max textures the GPU can handle.
            this.MAX_TEXTURES = Math.min(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), settings.SPRITE_MAX_TEXTURES);
            // step 2: check the maximum number of if statements the shader can have too..
            this.MAX_TEXTURES = checkMaxIfStatementsInShader(this.MAX_TEXTURES, gl);
        }
        this._shader = this.shaderGenerator.generateShader(this.MAX_TEXTURES);
        // we use the second shader as the first one depending on your browser
        // may omit aTextureId as it is not used by the shader so is optimized out.
        for (var i = 0; i < this._packedGeometryPoolSize; i++) {
            /* eslint-disable max-len */
            this._packedGeometries[i] = new (this.geometryClass)();
        }
        this.initFlushBuffers();
    };
    /** Makes sure that static and dynamic flush pooled objects have correct dimensions. */
    AbstractBatchRenderer.prototype.initFlushBuffers = function () {
        var _drawCallPool = AbstractBatchRenderer._drawCallPool, _textureArrayPool = AbstractBatchRenderer._textureArrayPool;
        // max draw calls
        var MAX_SPRITES = this.size / 4;
        // max texture arrays
        var MAX_TA = Math.floor(MAX_SPRITES / this.MAX_TEXTURES) + 1;
        while (_drawCallPool.length < MAX_SPRITES) {
            _drawCallPool.push(new BatchDrawCall());
        }
        while (_textureArrayPool.length < MAX_TA) {
            _textureArrayPool.push(new BatchTextureArray());
        }
        for (var i = 0; i < this.MAX_TEXTURES; i++) {
            this._tempBoundTextures[i] = null;
        }
    };
    /** Handles the `prerender` signal. It ensures that flushes start from the first geometry object again. */
    AbstractBatchRenderer.prototype.onPrerender = function () {
        this._flushId = 0;
    };
    /**
     * Buffers the "batchable" object. It need not be rendered immediately.
     * @param {PIXI.DisplayObject} element - the element to render when
     *    using this renderer
     */
    AbstractBatchRenderer.prototype.render = function (element) {
        if (!element._texture.valid) {
            return;
        }
        if (this._vertexCount + (element.vertexData.length / 2) > this.size) {
            this.flush();
        }
        this._vertexCount += element.vertexData.length / 2;
        this._indexCount += element.indices.length;
        this._bufferedTextures[this._bufferSize] = element._texture.baseTexture;
        this._bufferedElements[this._bufferSize++] = element;
    };
    AbstractBatchRenderer.prototype.buildTexturesAndDrawCalls = function () {
        var _a = this, textures = _a._bufferedTextures, MAX_TEXTURES = _a.MAX_TEXTURES;
        var textureArrays = AbstractBatchRenderer._textureArrayPool;
        var batch = this.renderer.batch;
        var boundTextures = this._tempBoundTextures;
        var touch = this.renderer.textureGC.count;
        var TICK = ++BaseTexture._globalBatch;
        var countTexArrays = 0;
        var texArray = textureArrays[0];
        var start = 0;
        batch.copyBoundTextures(boundTextures, MAX_TEXTURES);
        for (var i = 0; i < this._bufferSize; ++i) {
            var tex = textures[i];
            textures[i] = null;
            if (tex._batchEnabled === TICK) {
                continue;
            }
            if (texArray.count >= MAX_TEXTURES) {
                batch.boundArray(texArray, boundTextures, TICK, MAX_TEXTURES);
                this.buildDrawCalls(texArray, start, i);
                start = i;
                texArray = textureArrays[++countTexArrays];
                ++TICK;
            }
            tex._batchEnabled = TICK;
            tex.touched = touch;
            texArray.elements[texArray.count++] = tex;
        }
        if (texArray.count > 0) {
            batch.boundArray(texArray, boundTextures, TICK, MAX_TEXTURES);
            this.buildDrawCalls(texArray, start, this._bufferSize);
            ++countTexArrays;
            ++TICK;
        }
        // Clean-up
        for (var i = 0; i < boundTextures.length; i++) {
            boundTextures[i] = null;
        }
        BaseTexture._globalBatch = TICK;
    };
    /**
     * Populating drawcalls for rendering
     * @param texArray
     * @param start
     * @param finish
     */
    AbstractBatchRenderer.prototype.buildDrawCalls = function (texArray, start, finish) {
        var _a = this, elements = _a._bufferedElements, _attributeBuffer = _a._attributeBuffer, _indexBuffer = _a._indexBuffer, vertexSize = _a.vertexSize;
        var drawCalls = AbstractBatchRenderer._drawCallPool;
        var dcIndex = this._dcIndex;
        var aIndex = this._aIndex;
        var iIndex = this._iIndex;
        var drawCall = drawCalls[dcIndex];
        drawCall.start = this._iIndex;
        drawCall.texArray = texArray;
        for (var i = start; i < finish; ++i) {
            var sprite = elements[i];
            var tex = sprite._texture.baseTexture;
            var spriteBlendMode = premultiplyBlendMode[tex.alphaMode ? 1 : 0][sprite.blendMode];
            elements[i] = null;
            if (start < i && drawCall.blend !== spriteBlendMode) {
                drawCall.size = iIndex - drawCall.start;
                start = i;
                drawCall = drawCalls[++dcIndex];
                drawCall.texArray = texArray;
                drawCall.start = iIndex;
            }
            this.packInterleavedGeometry(sprite, _attributeBuffer, _indexBuffer, aIndex, iIndex);
            aIndex += sprite.vertexData.length / 2 * vertexSize;
            iIndex += sprite.indices.length;
            drawCall.blend = spriteBlendMode;
        }
        if (start < finish) {
            drawCall.size = iIndex - drawCall.start;
            ++dcIndex;
        }
        this._dcIndex = dcIndex;
        this._aIndex = aIndex;
        this._iIndex = iIndex;
    };
    /**
     * Bind textures for current rendering
     * @param texArray
     */
    AbstractBatchRenderer.prototype.bindAndClearTexArray = function (texArray) {
        var textureSystem = this.renderer.texture;
        for (var j = 0; j < texArray.count; j++) {
            textureSystem.bind(texArray.elements[j], texArray.ids[j]);
            texArray.elements[j] = null;
        }
        texArray.count = 0;
    };
    AbstractBatchRenderer.prototype.updateGeometry = function () {
        var _a = this, packedGeometries = _a._packedGeometries, attributeBuffer = _a._attributeBuffer, indexBuffer = _a._indexBuffer;
        if (!settings.CAN_UPLOAD_SAME_BUFFER) { /* Usually on iOS devices, where the browser doesn't
            like uploads to the same buffer in a single frame. */
            if (this._packedGeometryPoolSize <= this._flushId) {
                this._packedGeometryPoolSize++;
                packedGeometries[this._flushId] = new (this.geometryClass)();
            }
            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);
            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);
            this.renderer.geometry.bind(packedGeometries[this._flushId]);
            this.renderer.geometry.updateBuffers();
            this._flushId++;
        }
        else {
            // lets use the faster option, always use buffer number 0
            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);
            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);
            this.renderer.geometry.updateBuffers();
        }
    };
    AbstractBatchRenderer.prototype.drawBatches = function () {
        var dcCount = this._dcIndex;
        var _a = this.renderer, gl = _a.gl, stateSystem = _a.state;
        var drawCalls = AbstractBatchRenderer._drawCallPool;
        var curTexArray = null;
        // Upload textures and do the draw calls
        for (var i = 0; i < dcCount; i++) {
            var _b = drawCalls[i], texArray = _b.texArray, type = _b.type, size = _b.size, start = _b.start, blend = _b.blend;
            if (curTexArray !== texArray) {
                curTexArray = texArray;
                this.bindAndClearTexArray(texArray);
            }
            this.state.blendMode = blend;
            stateSystem.set(this.state);
            gl.drawElements(type, size, gl.UNSIGNED_SHORT, start * 2);
        }
    };
    /** Renders the content _now_ and empties the current batch. */
    AbstractBatchRenderer.prototype.flush = function () {
        if (this._vertexCount === 0) {
            return;
        }
        this._attributeBuffer = this.getAttributeBuffer(this._vertexCount);
        this._indexBuffer = this.getIndexBuffer(this._indexCount);
        this._aIndex = 0;
        this._iIndex = 0;
        this._dcIndex = 0;
        this.buildTexturesAndDrawCalls();
        this.updateGeometry();
        this.drawBatches();
        // reset elements buffer for the next flush
        this._bufferSize = 0;
        this._vertexCount = 0;
        this._indexCount = 0;
    };
    /** Starts a new sprite batch. */
    AbstractBatchRenderer.prototype.start = function () {
        this.renderer.state.set(this.state);
        this.renderer.texture.ensureSamplerType(this.MAX_TEXTURES);
        this.renderer.shader.bind(this._shader);
        if (settings.CAN_UPLOAD_SAME_BUFFER) {
            // bind buffer #0, we don't need others
            this.renderer.geometry.bind(this._packedGeometries[this._flushId]);
        }
    };
    /** Stops and flushes the current batch. */
    AbstractBatchRenderer.prototype.stop = function () {
        this.flush();
    };
    /** Destroys this `AbstractBatchRenderer`. It cannot be used again. */
    AbstractBatchRenderer.prototype.destroy = function () {
        for (var i = 0; i < this._packedGeometryPoolSize; i++) {
            if (this._packedGeometries[i]) {
                this._packedGeometries[i].destroy();
            }
        }
        this.renderer.off('prerender', this.onPrerender, this);
        this._aBuffers = null;
        this._iBuffers = null;
        this._packedGeometries = null;
        this._attributeBuffer = null;
        this._indexBuffer = null;
        if (this._shader) {
            this._shader.destroy();
            this._shader = null;
        }
        _super.prototype.destroy.call(this);
    };
    /**
     * Fetches an attribute buffer from `this._aBuffers` that can hold atleast `size` floats.
     * @param size - minimum capacity required
     * @returns - buffer than can hold atleast `size` floats
     */
    AbstractBatchRenderer.prototype.getAttributeBuffer = function (size) {
        // 8 vertices is enough for 2 quads
        var roundedP2 = nextPow2(Math.ceil(size / 8));
        var roundedSizeIndex = log2(roundedP2);
        var roundedSize = roundedP2 * 8;
        if (this._aBuffers.length <= roundedSizeIndex) {
            this._iBuffers.length = roundedSizeIndex + 1;
        }
        var buffer = this._aBuffers[roundedSize];
        if (!buffer) {
            this._aBuffers[roundedSize] = buffer = new ViewableBuffer(roundedSize * this.vertexSize * 4);
        }
        return buffer;
    };
    /**
     * Fetches an index buffer from `this._iBuffers` that can
     * have at least `size` capacity.
     * @param size - minimum required capacity
     * @returns - buffer that can fit `size` indices.
     */
    AbstractBatchRenderer.prototype.getIndexBuffer = function (size) {
        // 12 indices is enough for 2 quads
        var roundedP2 = nextPow2(Math.ceil(size / 12));
        var roundedSizeIndex = log2(roundedP2);
        var roundedSize = roundedP2 * 12;
        if (this._iBuffers.length <= roundedSizeIndex) {
            this._iBuffers.length = roundedSizeIndex + 1;
        }
        var buffer = this._iBuffers[roundedSizeIndex];
        if (!buffer) {
            this._iBuffers[roundedSizeIndex] = buffer = new Uint16Array(roundedSize);
        }
        return buffer;
    };
    /**
     * Takes the four batching parameters of `element`, interleaves
     * and pushes them into the batching attribute/index buffers given.
     *
     * It uses these properties: `vertexData` `uvs`, `textureId` and
     * `indicies`. It also uses the "tint" of the base-texture, if
     * present.
     * @param {PIXI.DisplayObject} element - element being rendered
     * @param attributeBuffer - attribute buffer.
     * @param indexBuffer - index buffer
     * @param aIndex - number of floats already in the attribute buffer
     * @param iIndex - number of indices already in `indexBuffer`
     */
    AbstractBatchRenderer.prototype.packInterleavedGeometry = function (element, attributeBuffer, indexBuffer, aIndex, iIndex) {
        var uint32View = attributeBuffer.uint32View, float32View = attributeBuffer.float32View;
        var packedVertices = aIndex / this.vertexSize;
        var uvs = element.uvs;
        var indicies = element.indices;
        var vertexData = element.vertexData;
        var textureId = element._texture.baseTexture._batchLocation;
        var alpha = Math.min(element.worldAlpha, 1.0);
        var argb = (alpha < 1.0
            && element._texture.baseTexture.alphaMode)
            ? premultiplyTint(element._tintRGB, alpha)
            : element._tintRGB + (alpha * 255 << 24);
        // lets not worry about tint! for now..
        for (var i = 0; i < vertexData.length; i += 2) {
            float32View[aIndex++] = vertexData[i];
            float32View[aIndex++] = vertexData[i + 1];
            float32View[aIndex++] = uvs[i];
            float32View[aIndex++] = uvs[i + 1];
            uint32View[aIndex++] = argb;
            float32View[aIndex++] = textureId;
        }
        for (var i = 0; i < indicies.length; i++) {
            indexBuffer[iIndex++] = packedVertices + indicies[i];
        }
    };
    /**
     * Pool of `BatchDrawCall` objects that `flush` used
     * to create "batches" of the objects being rendered.
     *
     * These are never re-allocated again.
     * Shared between all batch renderers because it can be only one "flush" working at the moment.
     * @member {PIXI.BatchDrawCall[]}
     */
    AbstractBatchRenderer._drawCallPool = [];
    /**
     * Pool of `BatchDrawCall` objects that `flush` used
     * to create "batches" of the objects being rendered.
     *
     * These are never re-allocated again.
     * Shared between all batch renderers because it can be only one "flush" working at the moment.
     * @member {PIXI.BatchTextureArray[]}
     */
    AbstractBatchRenderer._textureArrayPool = [];
    return AbstractBatchRenderer;
}(ObjectRenderer));

/**
 * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer
 * @memberof PIXI
 */
var BatchShaderGenerator = /** @class */ (function () {
    /**
     * @param vertexSrc - Vertex shader
     * @param fragTemplate - Fragment shader template
     */
    function BatchShaderGenerator(vertexSrc, fragTemplate) {
        this.vertexSrc = vertexSrc;
        this.fragTemplate = fragTemplate;
        this.programCache = {};
        this.defaultGroupCache = {};
        if (fragTemplate.indexOf('%count%') < 0) {
            throw new Error('Fragment template must contain "%count%".');
        }
        if (fragTemplate.indexOf('%forloop%') < 0) {
            throw new Error('Fragment template must contain "%forloop%".');
        }
    }
    BatchShaderGenerator.prototype.generateShader = function (maxTextures) {
        if (!this.programCache[maxTextures]) {
            var sampleValues = new Int32Array(maxTextures);
            for (var i = 0; i < maxTextures; i++) {
                sampleValues[i] = i;
            }
            this.defaultGroupCache[maxTextures] = UniformGroup.from({ uSamplers: sampleValues }, true);
            var fragmentSrc = this.fragTemplate;
            fragmentSrc = fragmentSrc.replace(/%count%/gi, "" + maxTextures);
            fragmentSrc = fragmentSrc.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));
            this.programCache[maxTextures] = new Program(this.vertexSrc, fragmentSrc);
        }
        var uniforms = {
            tint: new Float32Array([1, 1, 1, 1]),
            translationMatrix: new Matrix(),
            default: this.defaultGroupCache[maxTextures],
        };
        return new Shader(this.programCache[maxTextures], uniforms);
    };
    BatchShaderGenerator.prototype.generateSampleSrc = function (maxTextures) {
        var src = '';
        src += '\n';
        src += '\n';
        for (var i = 0; i < maxTextures; i++) {
            if (i > 0) {
                src += '\nelse ';
            }
            if (i < maxTextures - 1) {
                src += "if(vTextureId < " + i + ".5)";
            }
            src += '\n{';
            src += "\n\tcolor = texture2D(uSamplers[" + i + "], vTextureCoord);";
            src += '\n}';
        }
        src += '\n';
        src += '\n';
        return src;
    };
    return BatchShaderGenerator;
}());

/**
 * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).
 * @memberof PIXI
 */
var BatchGeometry = /** @class */ (function (_super) {
    __extends(BatchGeometry, _super);
    /**
     * @param {boolean} [_static=false] - Optimization flag, where `false`
     *        is updated every frame, `true` doesn't change frame-to-frame.
     */
    function BatchGeometry(_static) {
        if (_static === void 0) { _static = false; }
        var _this = _super.call(this) || this;
        _this._buffer = new Buffer(null, _static, false);
        _this._indexBuffer = new Buffer(null, _static, true);
        _this.addAttribute('aVertexPosition', _this._buffer, 2, false, TYPES.FLOAT)
            .addAttribute('aTextureCoord', _this._buffer, 2, false, TYPES.FLOAT)
            .addAttribute('aColor', _this._buffer, 4, true, TYPES.UNSIGNED_BYTE)
            .addAttribute('aTextureId', _this._buffer, 1, true, TYPES.FLOAT)
            .addIndex(_this._indexBuffer);
        return _this;
    }
    return BatchGeometry;
}(Geometry));

var defaultVertex = "precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform vec4 tint;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vColor = aColor * tint;\n}\n";

var defaultFragment = "varying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\nuniform sampler2D uSamplers[%count%];\n\nvoid main(void){\n    vec4 color;\n    %forloop%\n    gl_FragColor = color * vColor;\n}\n";

/** @memberof PIXI */
var BatchPluginFactory = /** @class */ (function () {
    function BatchPluginFactory() {
    }
    /**
     * Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way
     * to extend BatchRenderer with all the necessary pieces.
     * @example
     * const fragment = `
     * varying vec2 vTextureCoord;
     * varying vec4 vColor;
     * varying float vTextureId;
     * uniform sampler2D uSamplers[%count%];
     *
     * void main(void){
     *     vec4 color;
     *     %forloop%
     *     gl_FragColor = vColor * vec4(color.a - color.rgb, color.a);
     * }
     * `;
     * const InvertBatchRenderer = PIXI.BatchPluginFactory.create({ fragment });
     * PIXI.extensions.add({
     *  name: 'invert',
     *  ref: InvertBatchRenderer,
     *  type: PIXI.ExtensionType.RendererPlugin,
     * });
     * const sprite = new PIXI.Sprite();
     * sprite.pluginName = 'invert';
     * @param {object} [options]
     * @param {string} [options.vertex=PIXI.BatchPluginFactory.defaultVertexSrc] - Vertex shader source
     * @param {string} [options.fragment=PIXI.BatchPluginFactory.defaultFragmentTemplate] - Fragment shader template
     * @param {number} [options.vertexSize=6] - Vertex size
     * @param {object} [options.geometryClass=PIXI.BatchGeometry]
     * @returns {*} New batch renderer plugin
     */
    BatchPluginFactory.create = function (options) {
        var _a = Object.assign({
            vertex: defaultVertex,
            fragment: defaultFragment,
            geometryClass: BatchGeometry,
            vertexSize: 6,
        }, options), vertex = _a.vertex, fragment = _a.fragment, vertexSize = _a.vertexSize, geometryClass = _a.geometryClass;
        return /** @class */ (function (_super) {
            __extends(BatchPlugin, _super);
            function BatchPlugin(renderer) {
                var _this = _super.call(this, renderer) || this;
                _this.shaderGenerator = new BatchShaderGenerator(vertex, fragment);
                _this.geometryClass = geometryClass;
                _this.vertexSize = vertexSize;
                return _this;
            }
            return BatchPlugin;
        }(AbstractBatchRenderer));
    };
    Object.defineProperty(BatchPluginFactory, "defaultVertexSrc", {
        /**
         * The default vertex shader source
         * @readonly
         */
        get: function () {
            return defaultVertex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BatchPluginFactory, "defaultFragmentTemplate", {
        /**
         * The default fragment shader source
         * @readonly
         */
        get: function () {
            return defaultFragment;
        },
        enumerable: false,
        configurable: true
    });
    return BatchPluginFactory;
}());
// Setup the default BatchRenderer plugin, this is what
// we'll actually export at the root level
var BatchRenderer = BatchPluginFactory.create();
Object.assign(BatchRenderer, {
    extension: {
        name: 'batch',
        type: ExtensionType.RendererPlugin,
    },
});

/**
 * @memberof PIXI
 * @namespace resources
 * @see PIXI
 * @deprecated since 6.0.0
 */
var resources = {};
var _loop_1 = function (name) {
    Object.defineProperty(resources, name, {
        get: function () {
            deprecation('6.0.0', "PIXI.systems." + name + " has moved to PIXI." + name);
            return _resources[name];
        },
    });
};
for (var core_name in _resources) {
    _loop_1(core_name);
}
/**
 * @memberof PIXI
 * @namespace systems
 * @see PIXI
 * @deprecated since 6.0.0
 */
var systems = {};
var _loop_2 = function (name) {
    Object.defineProperty(systems, name, {
        get: function () {
            deprecation('6.0.0', "PIXI.resources." + name + " has moved to PIXI." + name);
            return _systems[name];
        },
    });
};
for (var core_name in _systems) {
    _loop_2(core_name);
}

/**
 * @namespace PIXI
 */
/**
 * String of the current PIXI version.
 * @memberof PIXI
 */
var core_VERSION = '6.5.9';


//# sourceMappingURL=core.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/display/dist/esm/display.mjs
/*!
 * @pixi/display - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/display is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */





/**
 * Sets the default value for the container property 'sortableChildren'.
 * If set to true, the container will sort its children by zIndex value
 * when updateTransform() is called, or manually if sortChildren() is called.
 *
 * This actually changes the order of elements in the array, so should be treated
 * as a basic solution that is not performant compared to other solutions,
 * such as @link https://github.com/pixijs/pixi-display
 *
 * Also be aware of that this may not work nicely with the addChildAt() function,
 * as the zIndex sorting may cause the child to automatically sorted to another position.
 * @static
 * @constant
 * @name SORTABLE_CHILDREN
 * @memberof PIXI.settings
 * @type {boolean}
 * @default false
 */
settings.SORTABLE_CHILDREN = false;

/**
 * 'Builder' pattern for bounds rectangles.
 *
 * This could be called an Axis-Aligned Bounding Box.
 * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.
 * @memberof PIXI
 */
var Bounds = /** @class */ (function () {
    function Bounds() {
        this.minX = Infinity;
        this.minY = Infinity;
        this.maxX = -Infinity;
        this.maxY = -Infinity;
        this.rect = null;
        this.updateID = -1;
    }
    /**
     * Checks if bounds are empty.
     * @returns - True if empty.
     */
    Bounds.prototype.isEmpty = function () {
        return this.minX > this.maxX || this.minY > this.maxY;
    };
    /** Clears the bounds and resets. */
    Bounds.prototype.clear = function () {
        this.minX = Infinity;
        this.minY = Infinity;
        this.maxX = -Infinity;
        this.maxY = -Infinity;
    };
    /**
     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle
     * It is not guaranteed that it will return tempRect
     * @param rect - Temporary object will be used if AABB is not empty
     * @returns - A rectangle of the bounds
     */
    Bounds.prototype.getRectangle = function (rect) {
        if (this.minX > this.maxX || this.minY > this.maxY) {
            return Rectangle.EMPTY;
        }
        rect = rect || new Rectangle(0, 0, 1, 1);
        rect.x = this.minX;
        rect.y = this.minY;
        rect.width = this.maxX - this.minX;
        rect.height = this.maxY - this.minY;
        return rect;
    };
    /**
     * This function should be inlined when its possible.
     * @param point - The point to add.
     */
    Bounds.prototype.addPoint = function (point) {
        this.minX = Math.min(this.minX, point.x);
        this.maxX = Math.max(this.maxX, point.x);
        this.minY = Math.min(this.minY, point.y);
        this.maxY = Math.max(this.maxY, point.y);
    };
    /**
     * Adds a point, after transformed. This should be inlined when its possible.
     * @param matrix
     * @param point
     */
    Bounds.prototype.addPointMatrix = function (matrix, point) {
        var a = matrix.a, b = matrix.b, c = matrix.c, d = matrix.d, tx = matrix.tx, ty = matrix.ty;
        var x = (a * point.x) + (c * point.y) + tx;
        var y = (b * point.x) + (d * point.y) + ty;
        this.minX = Math.min(this.minX, x);
        this.maxX = Math.max(this.maxX, x);
        this.minY = Math.min(this.minY, y);
        this.maxY = Math.max(this.maxY, y);
    };
    /**
     * Adds a quad, not transformed
     * @param vertices - The verts to add.
     */
    Bounds.prototype.addQuad = function (vertices) {
        var minX = this.minX;
        var minY = this.minY;
        var maxX = this.maxX;
        var maxY = this.maxY;
        var x = vertices[0];
        var y = vertices[1];
        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
        x = vertices[2];
        y = vertices[3];
        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
        x = vertices[4];
        y = vertices[5];
        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
        x = vertices[6];
        y = vertices[7];
        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
        this.minX = minX;
        this.minY = minY;
        this.maxX = maxX;
        this.maxY = maxY;
    };
    /**
     * Adds sprite frame, transformed.
     * @param transform - transform to apply
     * @param x0 - left X of frame
     * @param y0 - top Y of frame
     * @param x1 - right X of frame
     * @param y1 - bottom Y of frame
     */
    Bounds.prototype.addFrame = function (transform, x0, y0, x1, y1) {
        this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);
    };
    /**
     * Adds sprite frame, multiplied by matrix
     * @param matrix - matrix to apply
     * @param x0 - left X of frame
     * @param y0 - top Y of frame
     * @param x1 - right X of frame
     * @param y1 - bottom Y of frame
     */
    Bounds.prototype.addFrameMatrix = function (matrix, x0, y0, x1, y1) {
        var a = matrix.a;
        var b = matrix.b;
        var c = matrix.c;
        var d = matrix.d;
        var tx = matrix.tx;
        var ty = matrix.ty;
        var minX = this.minX;
        var minY = this.minY;
        var maxX = this.maxX;
        var maxY = this.maxY;
        var x = (a * x0) + (c * y0) + tx;
        var y = (b * x0) + (d * y0) + ty;
        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
        x = (a * x1) + (c * y0) + tx;
        y = (b * x1) + (d * y0) + ty;
        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
        x = (a * x0) + (c * y1) + tx;
        y = (b * x0) + (d * y1) + ty;
        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
        x = (a * x1) + (c * y1) + tx;
        y = (b * x1) + (d * y1) + ty;
        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
        this.minX = minX;
        this.minY = minY;
        this.maxX = maxX;
        this.maxY = maxY;
    };
    /**
     * Adds screen vertices from array
     * @param vertexData - calculated vertices
     * @param beginOffset - begin offset
     * @param endOffset - end offset, excluded
     */
    Bounds.prototype.addVertexData = function (vertexData, beginOffset, endOffset) {
        var minX = this.minX;
        var minY = this.minY;
        var maxX = this.maxX;
        var maxY = this.maxY;
        for (var i = beginOffset; i < endOffset; i += 2) {
            var x = vertexData[i];
            var y = vertexData[i + 1];
            minX = x < minX ? x : minX;
            minY = y < minY ? y : minY;
            maxX = x > maxX ? x : maxX;
            maxY = y > maxY ? y : maxY;
        }
        this.minX = minX;
        this.minY = minY;
        this.maxX = maxX;
        this.maxY = maxY;
    };
    /**
     * Add an array of mesh vertices
     * @param transform - mesh transform
     * @param vertices - mesh coordinates in array
     * @param beginOffset - begin offset
     * @param endOffset - end offset, excluded
     */
    Bounds.prototype.addVertices = function (transform, vertices, beginOffset, endOffset) {
        this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);
    };
    /**
     * Add an array of mesh vertices.
     * @param matrix - mesh matrix
     * @param vertices - mesh coordinates in array
     * @param beginOffset - begin offset
     * @param endOffset - end offset, excluded
     * @param padX - x padding
     * @param padY - y padding
     */
    Bounds.prototype.addVerticesMatrix = function (matrix, vertices, beginOffset, endOffset, padX, padY) {
        if (padX === void 0) { padX = 0; }
        if (padY === void 0) { padY = padX; }
        var a = matrix.a;
        var b = matrix.b;
        var c = matrix.c;
        var d = matrix.d;
        var tx = matrix.tx;
        var ty = matrix.ty;
        var minX = this.minX;
        var minY = this.minY;
        var maxX = this.maxX;
        var maxY = this.maxY;
        for (var i = beginOffset; i < endOffset; i += 2) {
            var rawX = vertices[i];
            var rawY = vertices[i + 1];
            var x = (a * rawX) + (c * rawY) + tx;
            var y = (d * rawY) + (b * rawX) + ty;
            minX = Math.min(minX, x - padX);
            maxX = Math.max(maxX, x + padX);
            minY = Math.min(minY, y - padY);
            maxY = Math.max(maxY, y + padY);
        }
        this.minX = minX;
        this.minY = minY;
        this.maxX = maxX;
        this.maxY = maxY;
    };
    /**
     * Adds other {@link Bounds}.
     * @param bounds - The Bounds to be added
     */
    Bounds.prototype.addBounds = function (bounds) {
        var minX = this.minX;
        var minY = this.minY;
        var maxX = this.maxX;
        var maxY = this.maxY;
        this.minX = bounds.minX < minX ? bounds.minX : minX;
        this.minY = bounds.minY < minY ? bounds.minY : minY;
        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;
        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;
    };
    /**
     * Adds other Bounds, masked with Bounds.
     * @param bounds - The Bounds to be added.
     * @param mask - TODO
     */
    Bounds.prototype.addBoundsMask = function (bounds, mask) {
        var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;
        var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;
        var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;
        var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;
        if (_minX <= _maxX && _minY <= _maxY) {
            var minX = this.minX;
            var minY = this.minY;
            var maxX = this.maxX;
            var maxY = this.maxY;
            this.minX = _minX < minX ? _minX : minX;
            this.minY = _minY < minY ? _minY : minY;
            this.maxX = _maxX > maxX ? _maxX : maxX;
            this.maxY = _maxY > maxY ? _maxY : maxY;
        }
    };
    /**
     * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.
     * @param bounds - other bounds
     * @param matrix - multiplicator
     */
    Bounds.prototype.addBoundsMatrix = function (bounds, matrix) {
        this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);
    };
    /**
     * Adds other Bounds, masked with Rectangle.
     * @param bounds - TODO
     * @param area - TODO
     */
    Bounds.prototype.addBoundsArea = function (bounds, area) {
        var _minX = bounds.minX > area.x ? bounds.minX : area.x;
        var _minY = bounds.minY > area.y ? bounds.minY : area.y;
        var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);
        var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);
        if (_minX <= _maxX && _minY <= _maxY) {
            var minX = this.minX;
            var minY = this.minY;
            var maxX = this.maxX;
            var maxY = this.maxY;
            this.minX = _minX < minX ? _minX : minX;
            this.minY = _minY < minY ? _minY : minY;
            this.maxX = _maxX > maxX ? _maxX : maxX;
            this.maxY = _maxY > maxY ? _maxY : maxY;
        }
    };
    /**
     * Pads bounds object, making it grow in all directions.
     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.
     * @param paddingX - The horizontal padding amount.
     * @param paddingY - The vertical padding amount.
     */
    Bounds.prototype.pad = function (paddingX, paddingY) {
        if (paddingX === void 0) { paddingX = 0; }
        if (paddingY === void 0) { paddingY = paddingX; }
        if (!this.isEmpty()) {
            this.minX -= paddingX;
            this.maxX += paddingX;
            this.minY -= paddingY;
            this.maxY += paddingY;
        }
    };
    /**
     * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)
     * @param x0 - left X of frame
     * @param y0 - top Y of frame
     * @param x1 - right X of frame
     * @param y1 - bottom Y of frame
     * @param padX - padding X
     * @param padY - padding Y
     */
    Bounds.prototype.addFramePad = function (x0, y0, x1, y1, padX, padY) {
        x0 -= padX;
        y0 -= padY;
        x1 += padX;
        y1 += padY;
        this.minX = this.minX < x0 ? this.minX : x0;
        this.maxX = this.maxX > x1 ? this.maxX : x1;
        this.minY = this.minY < y0 ? this.minY : y0;
        this.maxY = this.maxY > y1 ? this.maxY : y1;
    };
    return Bounds;
}());

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var display_extendStatics = function(d, b) {
    display_extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };
    return display_extendStatics(d, b);
};

function display_extends(d, b) {
    display_extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * The base class for all objects that are rendered on the screen.
 *
 * This is an abstract class and can not be used on its own; rather it should be extended.
 *
 * ## Display objects implemented in PixiJS
 *
 * | Display Object                  | Description                                                           |
 * | ------------------------------- | --------------------------------------------------------------------- |
 * | {@link PIXI.Container}          | Adds support for `children` to DisplayObject                          |
 * | {@link PIXI.Graphics}           | Shape-drawing display object similar to the Canvas API                |
 * | {@link PIXI.Sprite}             | Draws textures (i.e. images)                                          |
 * | {@link PIXI.Text}               | Draws text using the Canvas API internally                            |
 * | {@link PIXI.BitmapText}         | More scaleable solution for text rendering, reusing glyph textures    |
 * | {@link PIXI.TilingSprite}       | Draws textures/images in a tiled fashion                              |
 * | {@link PIXI.AnimatedSprite}     | Draws an animation of multiple images                                 |
 * | {@link PIXI.Mesh}               | Provides a lower-level API for drawing meshes with custom data        |
 * | {@link PIXI.NineSlicePlane}     | Mesh-related                                                          |
 * | {@link PIXI.SimpleMesh}         | v4-compatible mesh                                                    |
 * | {@link PIXI.SimplePlane}        | Mesh-related                                                          |
 * | {@link PIXI.SimpleRope}         | Mesh-related                                                          |
 *
 * ## Transforms
 *
 * The [transform]{@link DisplayObject#transform} of a display object describes the projection from its
 * local coordinate space to its parent's local coordinate space. The following properties are derived
 * from the transform:
 *
 * <table>
 *   <thead>
 *     <tr>
 *       <th>Property</th>
 *       <th>Description</th>
 *     </tr>
 *   </thead>
 *   <tbody>
 *     <tr>
 *       <td>[pivot]{@link PIXI.DisplayObject#pivot}</td>
 *       <td>
 *         Invariant under rotation, scaling, and skewing. The projection of into the parent's space of the pivot
 *         is equal to position, regardless of the other three transformations. In other words, It is the center of
 *         rotation, scaling, and skewing.
 *       </td>
 *     </tr>
 *     <tr>
 *       <td>[position]{@link PIXI.DisplayObject#position}</td>
 *       <td>
 *         Translation. This is the position of the [pivot]{@link PIXI.DisplayObject#pivot} in the parent's local
 *         space. The default value of the pivot is the origin (0,0). If the top-left corner of your display object
 *         is (0,0) in its local space, then the position will be its top-left corner in the parent's local space.
 *       </td>
 *     </tr>
 *     <tr>
 *       <td>[scale]{@link PIXI.DisplayObject#scale}</td>
 *       <td>
 *         Scaling. This will stretch (or compress) the display object's projection. The scale factors are along the
 *         local coordinate axes. In other words, the display object is scaled before rotated or skewed. The center
 *         of scaling is the [pivot]{@link PIXI.DisplayObject#pivot}.
 *       </td>
 *     </tr>
 *     <tr>
 *       <td>[rotation]{@link PIXI.DisplayObject#rotation}</td>
 *       <td>
 *          Rotation. This will rotate the display object's projection by this angle (in radians).
 *       </td>
 *     </tr>
 *     <tr>
 *       <td>[skew]{@link PIXI.DisplayObject#skew}</td>
 *       <td>
 *         <p>Skewing. This can be used to deform a rectangular display object into a parallelogram.</p>
 *         <p>
 *         In PixiJS, skew has a slightly different behaviour than the conventional meaning. It can be
 *         thought of the net rotation applied to the coordinate axes (separately). For example, if "skew.x" is
 *         ⍺ and "skew.y" is β, then the line x = 0 will be rotated by ⍺ (y = -x*cot⍺) and the line y = 0 will be
 *         rotated by β (y = x*tanβ). A line y = x*tanϴ (i.e. a line at angle ϴ to the x-axis in local-space) will
 *         be rotated by an angle between ⍺ and β.
 *         </p>
 *         <p>
 *         It can be observed that if skew is applied equally to both axes, then it will be equivalent to applying
 *         a rotation. Indeed, if "skew.x" = -ϴ and "skew.y" = ϴ, it will produce an equivalent of "rotation" = ϴ.
 *         </p>
 *         <p>
 *         Another quite interesting observation is that "skew.x", "skew.y", rotation are communtative operations. Indeed,
 *         because rotation is essentially a careful combination of the two.
 *         </p>
 *       </td>
 *     </tr>
 *     <tr>
 *       <td>angle</td>
 *       <td>Rotation. This is an alias for [rotation]{@link PIXI.DisplayObject#rotation}, but in degrees.</td>
 *     </tr>
 *     <tr>
 *       <td>x</td>
 *       <td>Translation. This is an alias for position.x!</td>
 *     </tr>
 *     <tr>
 *       <td>y</td>
 *       <td>Translation. This is an alias for position.y!</td>
 *     </tr>
 *     <tr>
 *       <td>width</td>
 *       <td>
 *         Implemented in [Container]{@link PIXI.Container}. Scaling. The width property calculates scale.x by dividing
 *         the "requested" width by the local bounding box width. It is indirectly an abstraction over scale.x, and there
 *         is no concept of user-defined width.
 *       </td>
 *     </tr>
 *     <tr>
 *       <td>height</td>
 *       <td>
 *         Implemented in [Container]{@link PIXI.Container}. Scaling. The height property calculates scale.y by dividing
 *         the "requested" height by the local bounding box height. It is indirectly an abstraction over scale.y, and there
 *         is no concept of user-defined height.
 *       </td>
 *     </tr>
 *   </tbody>
 * </table>
 *
 * ## Bounds
 *
 * The bounds of a display object is defined by the minimum axis-aligned rectangle in world space that can fit
 * around it. The abstract `calculateBounds` method is responsible for providing it (and it should use the
 * `worldTransform` to calculate in world space).
 *
 * There are a few additional types of bounding boxes:
 *
 * | Bounds                | Description                                                                              |
 * | --------------------- | ---------------------------------------------------------------------------------------- |
 * | World Bounds          | This is synonymous is the regular bounds described above. See `getBounds()`.             |
 * | Local Bounds          | This the axis-aligned bounding box in the parent's local space. See `getLocalBounds()`.  |
 * | Render Bounds         | The bounds, but including extra rendering effects like filter padding.                   |
 * | Projected Bounds      | The bounds of the projected display object onto the screen. Usually equals world bounds. |
 * | Relative Bounds       | The bounds of a display object when projected onto a ancestor's (or parent's) space.     |
 * | Natural Bounds        | The bounds of an object in its own local space (not parent's space, like in local bounds)|
 * | Content Bounds        | The natural bounds when excluding all children of a `Container`.                         |
 *
 * ### calculateBounds
 *
 * [Container]{@link Container} already implements `calculateBounds` in a manner that includes children.
 *
 * But for a non-Container display object, the `calculateBounds` method must be overridden in order for `getBounds` and
 * `getLocalBounds` to work. This method must write the bounds into `this._bounds`.
 *
 * Generally, the following technique works for most simple cases: take the list of points
 * forming the "hull" of the object (i.e. outline of the object's shape), and then add them
 * using {@link PIXI.Bounds#addPointMatrix}.
 *
 * ```js
 * calculateBounds(): void
 * {
 *     const points = [...];
 *
 *     for (let i = 0, j = points.length; i < j; i++)
 *     {
 *         this._bounds.addPointMatrix(this.worldTransform, points[i]);
 *     }
 * }
 * ```
 *
 * You can optimize this for a large number of points by using {@link PIXI.Bounds#addVerticesMatrix} to pass them
 * in one array together.
 *
 * ## Alpha
 *
 * This alpha sets a display object's **relative opacity** w.r.t its parent. For example, if the alpha of a display
 * object is 0.5 and its parent's alpha is 0.5, then it will be rendered with 25% opacity (assuming alpha is not
 * applied on any ancestor further up the chain).
 *
 * The alpha with which the display object will be rendered is called the [worldAlpha]{@link PIXI.DisplayObject#worldAlpha}.
 *
 * ## Renderable vs Visible
 *
 * The `renderable` and `visible` properties can be used to prevent a display object from being rendered to the
 * screen. However, there is a subtle difference between the two. When using `renderable`, the transforms  of the display
 * object (and its children subtree) will continue to be calculated. When using `visible`, the transforms will not
 * be calculated.
 *
 * It is recommended that applications use the `renderable` property for culling. See
 * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} or
 * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} for more details.
 *
 * Otherwise, to prevent an object from rendering in the general-purpose sense - `visible` is the property to use. This
 * one is also better in terms of performance.
 * @memberof PIXI
 */
var DisplayObject = /** @class */ (function (_super) {
    display_extends(DisplayObject, _super);
    function DisplayObject() {
        var _this = _super.call(this) || this;
        _this.tempDisplayObjectParent = null;
        // TODO: need to create Transform from factory
        _this.transform = new Transform();
        _this.alpha = 1;
        _this.visible = true;
        _this.renderable = true;
        _this.cullable = false;
        _this.cullArea = null;
        _this.parent = null;
        _this.worldAlpha = 1;
        _this._lastSortedIndex = 0;
        _this._zIndex = 0;
        _this.filterArea = null;
        _this.filters = null;
        _this._enabledFilters = null;
        _this._bounds = new Bounds();
        _this._localBounds = null;
        _this._boundsID = 0;
        _this._boundsRect = null;
        _this._localBoundsRect = null;
        _this._mask = null;
        _this._maskRefCount = 0;
        _this._destroyed = false;
        _this.isSprite = false;
        _this.isMask = false;
        return _this;
    }
    /**
     * Mixes all enumerable properties and methods from a source object to DisplayObject.
     * @param source - The source of properties and methods to mix in.
     */
    DisplayObject.mixin = function (source) {
        // in ES8/ES2017, this would be really easy:
        // Object.defineProperties(DisplayObject.prototype, Object.getOwnPropertyDescriptors(source));
        // get all the enumerable property keys
        var keys = Object.keys(source);
        // loop through properties
        for (var i = 0; i < keys.length; ++i) {
            var propertyName = keys[i];
            // Set the property using the property descriptor - this works for accessors and normal value properties
            Object.defineProperty(DisplayObject.prototype, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));
        }
    };
    Object.defineProperty(DisplayObject.prototype, "destroyed", {
        /**
         * Fired when this DisplayObject is added to a Container.
         * @instance
         * @event added
         * @param {PIXI.Container} container - The container added to.
         */
        /**
         * Fired when this DisplayObject is removed from a Container.
         * @instance
         * @event removed
         * @param {PIXI.Container} container - The container removed from.
         */
        /**
         * Fired when this DisplayObject is destroyed. This event is emitted once
         * destroy is finished.
         * @instance
         * @event destroyed
         */
        /** Readonly flag for destroyed display objects. */
        get: function () {
            return this._destroyed;
        },
        enumerable: false,
        configurable: true
    });
    /** Recursively updates transform of all objects from the root to this one internal function for toLocal() */
    DisplayObject.prototype._recursivePostUpdateTransform = function () {
        if (this.parent) {
            this.parent._recursivePostUpdateTransform();
            this.transform.updateTransform(this.parent.transform);
        }
        else {
            this.transform.updateTransform(this._tempDisplayObjectParent.transform);
        }
    };
    /** Updates the object transform for rendering. TODO - Optimization pass! */
    DisplayObject.prototype.updateTransform = function () {
        this._boundsID++;
        this.transform.updateTransform(this.parent.transform);
        // multiply the alphas..
        this.worldAlpha = this.alpha * this.parent.worldAlpha;
    };
    /**
     * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.
     *
     * This method is expensive on containers with a large subtree (like the stage). This is because the bounds
     * of a container depend on its children's bounds, which recursively causes all bounds in the subtree to
     * be recalculated. The upside, however, is that calling `getBounds` once on a container will indeed update
     * the bounds of all children (the whole subtree, in fact). This side effect should be exploited by using
     * `displayObject._bounds.getRectangle()` when traversing through all the bounds in a scene graph. Otherwise,
     * calling `getBounds` on each object in a subtree will cause the total cost to increase quadratically as
     * its height increases.
     *
     * The transforms of all objects in a container's **subtree** and of all **ancestors** are updated.
     * The world bounds of all display objects in a container's **subtree** will also be recalculated.
     *
     * The `_bounds` object stores the last calculation of the bounds. You can use to entirely skip bounds
     * calculation if needed.
     *
     * ```js
     * const lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);
     * ```
     *
     * Do know that usage of `getLocalBounds` can corrupt the `_bounds` of children (the whole subtree, actually). This
     * is a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more
     * details.
     *
     * `getBounds` should be called with `skipUpdate` equal to `true` in a render() call. This is because the transforms
     * are guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain
     * cases.
     * @param skipUpdate - Setting to `true` will stop the transforms of the scene graph from
     *  being updated. This means the calculation returned MAY be out of date BUT will give you a
     *  nice performance boost.
     * @param rect - Optional rectangle to store the result of the bounds calculation.
     * @returns - The minimum axis-aligned rectangle in world space that fits around this object.
     */
    DisplayObject.prototype.getBounds = function (skipUpdate, rect) {
        if (!skipUpdate) {
            if (!this.parent) {
                this.parent = this._tempDisplayObjectParent;
                this.updateTransform();
                this.parent = null;
            }
            else {
                this._recursivePostUpdateTransform();
                this.updateTransform();
            }
        }
        if (this._bounds.updateID !== this._boundsID) {
            this.calculateBounds();
            this._bounds.updateID = this._boundsID;
        }
        if (!rect) {
            if (!this._boundsRect) {
                this._boundsRect = new Rectangle();
            }
            rect = this._boundsRect;
        }
        return this._bounds.getRectangle(rect);
    };
    /**
     * Retrieves the local bounds of the displayObject as a rectangle object.
     * @param rect - Optional rectangle to store the result of the bounds calculation.
     * @returns - The rectangular bounding area.
     */
    DisplayObject.prototype.getLocalBounds = function (rect) {
        if (!rect) {
            if (!this._localBoundsRect) {
                this._localBoundsRect = new Rectangle();
            }
            rect = this._localBoundsRect;
        }
        if (!this._localBounds) {
            this._localBounds = new Bounds();
        }
        var transformRef = this.transform;
        var parentRef = this.parent;
        this.parent = null;
        this.transform = this._tempDisplayObjectParent.transform;
        var worldBounds = this._bounds;
        var worldBoundsID = this._boundsID;
        this._bounds = this._localBounds;
        var bounds = this.getBounds(false, rect);
        this.parent = parentRef;
        this.transform = transformRef;
        this._bounds = worldBounds;
        this._bounds.updateID += this._boundsID - worldBoundsID; // reflect side-effects
        return bounds;
    };
    /**
     * Calculates the global position of the display object.
     * @param position - The world origin to calculate from.
     * @param point - A Point object in which to store the value, optional
     *  (otherwise will create a new Point).
     * @param skipUpdate - Should we skip the update transform.
     * @returns - A point object representing the position of this object.
     */
    DisplayObject.prototype.toGlobal = function (position, point, skipUpdate) {
        if (skipUpdate === void 0) { skipUpdate = false; }
        if (!skipUpdate) {
            this._recursivePostUpdateTransform();
            // this parent check is for just in case the item is a root object.
            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly
            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)
            if (!this.parent) {
                this.parent = this._tempDisplayObjectParent;
                this.displayObjectUpdateTransform();
                this.parent = null;
            }
            else {
                this.displayObjectUpdateTransform();
            }
        }
        // don't need to update the lot
        return this.worldTransform.apply(position, point);
    };
    /**
     * Calculates the local position of the display object relative to another point.
     * @param position - The world origin to calculate from.
     * @param from - The DisplayObject to calculate the global position from.
     * @param point - A Point object in which to store the value, optional
     *  (otherwise will create a new Point).
     * @param skipUpdate - Should we skip the update transform
     * @returns - A point object representing the position of this object
     */
    DisplayObject.prototype.toLocal = function (position, from, point, skipUpdate) {
        if (from) {
            position = from.toGlobal(position, point, skipUpdate);
        }
        if (!skipUpdate) {
            this._recursivePostUpdateTransform();
            // this parent check is for just in case the item is a root object.
            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly
            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)
            if (!this.parent) {
                this.parent = this._tempDisplayObjectParent;
                this.displayObjectUpdateTransform();
                this.parent = null;
            }
            else {
                this.displayObjectUpdateTransform();
            }
        }
        // simply apply the matrix..
        return this.worldTransform.applyInverse(position, point);
    };
    /**
     * Set the parent Container of this DisplayObject.
     * @param container - The Container to add this DisplayObject to.
     * @returns - The Container that this DisplayObject was added to.
     */
    DisplayObject.prototype.setParent = function (container) {
        if (!container || !container.addChild) {
            throw new Error('setParent: Argument must be a Container');
        }
        container.addChild(this);
        return container;
    };
    /**
     * Convenience function to set the position, scale, skew and pivot at once.
     * @param x - The X position
     * @param y - The Y position
     * @param scaleX - The X scale value
     * @param scaleY - The Y scale value
     * @param rotation - The rotation
     * @param skewX - The X skew value
     * @param skewY - The Y skew value
     * @param pivotX - The X pivot value
     * @param pivotY - The Y pivot value
     * @returns - The DisplayObject instance
     */
    DisplayObject.prototype.setTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, pivotX, pivotY) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (scaleX === void 0) { scaleX = 1; }
        if (scaleY === void 0) { scaleY = 1; }
        if (rotation === void 0) { rotation = 0; }
        if (skewX === void 0) { skewX = 0; }
        if (skewY === void 0) { skewY = 0; }
        if (pivotX === void 0) { pivotX = 0; }
        if (pivotY === void 0) { pivotY = 0; }
        this.position.x = x;
        this.position.y = y;
        this.scale.x = !scaleX ? 1 : scaleX;
        this.scale.y = !scaleY ? 1 : scaleY;
        this.rotation = rotation;
        this.skew.x = skewX;
        this.skew.y = skewY;
        this.pivot.x = pivotX;
        this.pivot.y = pivotY;
        return this;
    };
    /**
     * Base destroy method for generic display objects. This will automatically
     * remove the display object from its parent Container as well as remove
     * all current event listeners and internal references. Do not use a DisplayObject
     * after calling `destroy()`.
     * @param _options
     */
    DisplayObject.prototype.destroy = function (_options) {
        if (this.parent) {
            this.parent.removeChild(this);
        }
        this._destroyed = true;
        this.transform = null;
        this.parent = null;
        this._bounds = null;
        this.mask = null;
        this.cullArea = null;
        this.filters = null;
        this.filterArea = null;
        this.hitArea = null;
        this.interactive = false;
        this.interactiveChildren = false;
        this.emit('destroyed');
        this.removeAllListeners();
    };
    Object.defineProperty(DisplayObject.prototype, "_tempDisplayObjectParent", {
        /**
         * @protected
         * @member {PIXI.Container}
         */
        get: function () {
            if (this.tempDisplayObjectParent === null) {
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                this.tempDisplayObjectParent = new TemporaryDisplayObject();
            }
            return this.tempDisplayObjectParent;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
     *
     * ```
     * const cacheParent = elem.enableTempParent();
     * elem.updateTransform();
     * elem.disableTempParent(cacheParent);
     * ```
     * @returns - current parent
     */
    DisplayObject.prototype.enableTempParent = function () {
        var myParent = this.parent;
        this.parent = this._tempDisplayObjectParent;
        return myParent;
    };
    /**
     * Pair method for `enableTempParent`
     * @param cacheParent - Actual parent of element
     */
    DisplayObject.prototype.disableTempParent = function (cacheParent) {
        this.parent = cacheParent;
    };
    Object.defineProperty(DisplayObject.prototype, "x", {
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         */
        get: function () {
            return this.position.x;
        },
        set: function (value) {
            this.transform.position.x = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "y", {
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         */
        get: function () {
            return this.position.y;
        },
        set: function (value) {
            this.transform.position.y = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "worldTransform", {
        /**
         * Current transform of the object based on world (parent) factors.
         * @readonly
         */
        get: function () {
            return this.transform.worldTransform;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "localTransform", {
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         * @readonly
         */
        get: function () {
            return this.transform.localTransform;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "position", {
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * @since 4.0.0
         */
        get: function () {
            return this.transform.position;
        },
        set: function (value) {
            this.transform.position.copyFrom(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "scale", {
        /**
         * The scale factors of this object along the local coordinate axes.
         *
         * The default scale is (1, 1).
         * @since 4.0.0
         */
        get: function () {
            return this.transform.scale;
        },
        set: function (value) {
            this.transform.scale.copyFrom(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "pivot", {
        /**
         * The center of rotation, scaling, and skewing for this display object in its local space. The `position`
         * is the projection of `pivot` in the parent's local space.
         *
         * By default, the pivot is the origin (0, 0).
         * @since 4.0.0
         */
        get: function () {
            return this.transform.pivot;
        },
        set: function (value) {
            this.transform.pivot.copyFrom(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "skew", {
        /**
         * The skew factor for the object in radians.
         * @since 4.0.0
         */
        get: function () {
            return this.transform.skew;
        },
        set: function (value) {
            this.transform.skew.copyFrom(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "rotation", {
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         */
        get: function () {
            return this.transform.rotation;
        },
        set: function (value) {
            this.transform.rotation = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "angle", {
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         */
        get: function () {
            return this.transform.rotation * RAD_TO_DEG;
        },
        set: function (value) {
            this.transform.rotation = value * DEG_TO_RAD;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "zIndex", {
        /**
         * The zIndex of the displayObject.
         *
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other display objects within the same container.
         * @see PIXI.Container#sortableChildren
         */
        get: function () {
            return this._zIndex;
        },
        set: function (value) {
            this._zIndex = value;
            if (this.parent) {
                this.parent.sortDirty = true;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "worldVisible", {
        /**
         * Indicates if the object is globally visible.
         * @readonly
         */
        get: function () {
            var item = this;
            do {
                if (!item.visible) {
                    return false;
                }
                item = item.parent;
            } while (item);
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "mask", {
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.
         * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.
         * To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         */
        get: function () {
            return this._mask;
        },
        set: function (value) {
            if (this._mask === value) {
                return;
            }
            if (this._mask) {
                var maskObject = (this._mask.isMaskData
                    ? this._mask.maskObject : this._mask);
                if (maskObject) {
                    maskObject._maskRefCount--;
                    if (maskObject._maskRefCount === 0) {
                        maskObject.renderable = true;
                        maskObject.isMask = false;
                    }
                }
            }
            this._mask = value;
            if (this._mask) {
                var maskObject = (this._mask.isMaskData
                    ? this._mask.maskObject : this._mask);
                if (maskObject) {
                    if (maskObject._maskRefCount === 0) {
                        maskObject.renderable = false;
                        maskObject.isMask = true;
                    }
                    maskObject._maskRefCount++;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    return DisplayObject;
}(eventemitter3));
/**
 * @private
 */
var TemporaryDisplayObject = /** @class */ (function (_super) {
    display_extends(TemporaryDisplayObject, _super);
    function TemporaryDisplayObject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sortDirty = null;
        return _this;
    }
    return TemporaryDisplayObject;
}(DisplayObject));
/**
 * DisplayObject default updateTransform, does not update children of container.
 * Will crash if there's no parent element.
 * @memberof PIXI.DisplayObject#
 * @method displayObjectUpdateTransform
 */
DisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;

function sortChildren(a, b) {
    if (a.zIndex === b.zIndex) {
        return a._lastSortedIndex - b._lastSortedIndex;
    }
    return a.zIndex - b.zIndex;
}
/**
 * Container is a general-purpose display object that holds children. It also adds built-in support for advanced
 * rendering features like masking and filtering.
 *
 * It is the base class of all display objects that act as a container for other objects, including Graphics
 * and Sprite.
 *
 * ```js
 * import { BlurFilter } from '@pixi/filter-blur';
 * import { Container } from '@pixi/display';
 * import { Graphics } from '@pixi/graphics';
 * import { Sprite } from '@pixi/sprite';
 *
 * let container = new Container();
 * let sprite = Sprite.from("https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png");
 *
 * sprite.width = 512;
 * sprite.height = 512;
 *
 * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container
 * // is rendered.
 * container.addChild(sprite);
 *
 * // Blurs whatever is rendered by the container
 * container.filters = [new BlurFilter()];
 *
 * // Only the contents within a circle at the center should be rendered onto the screen.
 * container.mask = new Graphics()
 *  .beginFill(0xffffff)
 *  .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)
 *  .endFill();
 * ```
 * @memberof PIXI
 */
var Container = /** @class */ (function (_super) {
    display_extends(Container, _super);
    function Container() {
        var _this = _super.call(this) || this;
        _this.children = [];
        _this.sortableChildren = settings.SORTABLE_CHILDREN;
        _this.sortDirty = false;
        return _this;
        /**
         * Fired when a DisplayObject is added to this Container.
         * @event PIXI.Container#childAdded
         * @param {PIXI.DisplayObject} child - The child added to the Container.
         * @param {PIXI.Container} container - The container that added the child.
         * @param {number} index - The children's index of the added child.
         */
        /**
         * Fired when a DisplayObject is removed from this Container.
         * @event PIXI.DisplayObject#childRemoved
         * @param {PIXI.DisplayObject} child - The child removed from the Container.
         * @param {PIXI.Container} container - The container that removed the child.
         * @param {number} index - The former children's index of the removed child
         */
    }
    /**
     * Overridable method that can be used by Container subclasses whenever the children array is modified.
     * @param _length
     */
    Container.prototype.onChildrenChange = function (_length) {
        /* empty */
    };
    /**
     * Adds one or more children to the container.
     *
     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
     * @returns {PIXI.DisplayObject} - The first child that was added.
     */
    Container.prototype.addChild = function () {
        var arguments$1 = arguments;

        var children = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments$1[_i];
        }
        // if there is only one argument we can bypass looping through the them
        if (children.length > 1) {
            // loop through the array and add all children
            for (var i = 0; i < children.length; i++) {
                // eslint-disable-next-line prefer-rest-params
                this.addChild(children[i]);
            }
        }
        else {
            var child = children[0];
            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place
            if (child.parent) {
                child.parent.removeChild(child);
            }
            child.parent = this;
            this.sortDirty = true;
            // ensure child transform will be recalculated
            child.transform._parentID = -1;
            this.children.push(child);
            // ensure bounds will be recalculated
            this._boundsID++;
            // TODO - lets either do all callbacks or all events.. not both!
            this.onChildrenChange(this.children.length - 1);
            this.emit('childAdded', child, this, this.children.length - 1);
            child.emit('added', this);
        }
        return children[0];
    };
    /**
     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
     * @param {PIXI.DisplayObject} child - The child to add
     * @param {number} index - The index to place the child in
     * @returns {PIXI.DisplayObject} The child that was added.
     */
    Container.prototype.addChildAt = function (child, index) {
        if (index < 0 || index > this.children.length) {
            throw new Error(child + "addChildAt: The index " + index + " supplied is out of bounds " + this.children.length);
        }
        if (child.parent) {
            child.parent.removeChild(child);
        }
        child.parent = this;
        this.sortDirty = true;
        // ensure child transform will be recalculated
        child.transform._parentID = -1;
        this.children.splice(index, 0, child);
        // ensure bounds will be recalculated
        this._boundsID++;
        // TODO - lets either do all callbacks or all events.. not both!
        this.onChildrenChange(index);
        child.emit('added', this);
        this.emit('childAdded', child, this, index);
        return child;
    };
    /**
     * Swaps the position of 2 Display Objects within this container.
     * @param child - First display object to swap
     * @param child2 - Second display object to swap
     */
    Container.prototype.swapChildren = function (child, child2) {
        if (child === child2) {
            return;
        }
        var index1 = this.getChildIndex(child);
        var index2 = this.getChildIndex(child2);
        this.children[index1] = child2;
        this.children[index2] = child;
        this.onChildrenChange(index1 < index2 ? index1 : index2);
    };
    /**
     * Returns the index position of a child DisplayObject instance
     * @param child - The DisplayObject instance to identify
     * @returns - The index position of the child display object to identify
     */
    Container.prototype.getChildIndex = function (child) {
        var index = this.children.indexOf(child);
        if (index === -1) {
            throw new Error('The supplied DisplayObject must be a child of the caller');
        }
        return index;
    };
    /**
     * Changes the position of an existing child in the display object container
     * @param child - The child DisplayObject instance for which you want to change the index number
     * @param index - The resulting index number for the child display object
     */
    Container.prototype.setChildIndex = function (child, index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error("The index " + index + " supplied is out of bounds " + this.children.length);
        }
        var currentIndex = this.getChildIndex(child);
        removeItems(this.children, currentIndex, 1); // remove from old position
        this.children.splice(index, 0, child); // add at new position
        this.onChildrenChange(index);
    };
    /**
     * Returns the child at the specified index
     * @param index - The index to get the child at
     * @returns - The child at the given index, if any.
     */
    Container.prototype.getChildAt = function (index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error("getChildAt: Index (" + index + ") does not exist.");
        }
        return this.children[index];
    };
    /**
     * Removes one or more children from the container.
     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
     * @returns {PIXI.DisplayObject} The first child that was removed.
     */
    Container.prototype.removeChild = function () {
        var arguments$1 = arguments;

        var children = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments$1[_i];
        }
        // if there is only one argument we can bypass looping through the them
        if (children.length > 1) {
            // loop through the arguments property and remove all children
            for (var i = 0; i < children.length; i++) {
                this.removeChild(children[i]);
            }
        }
        else {
            var child = children[0];
            var index = this.children.indexOf(child);
            if (index === -1)
                { return null; }
            child.parent = null;
            // ensure child transform will be recalculated
            child.transform._parentID = -1;
            removeItems(this.children, index, 1);
            // ensure bounds will be recalculated
            this._boundsID++;
            // TODO - lets either do all callbacks or all events.. not both!
            this.onChildrenChange(index);
            child.emit('removed', this);
            this.emit('childRemoved', child, this, index);
        }
        return children[0];
    };
    /**
     * Removes a child from the specified index position.
     * @param index - The index to get the child from
     * @returns The child that was removed.
     */
    Container.prototype.removeChildAt = function (index) {
        var child = this.getChildAt(index);
        // ensure child transform will be recalculated..
        child.parent = null;
        child.transform._parentID = -1;
        removeItems(this.children, index, 1);
        // ensure bounds will be recalculated
        this._boundsID++;
        // TODO - lets either do all callbacks or all events.. not both!
        this.onChildrenChange(index);
        child.emit('removed', this);
        this.emit('childRemoved', child, this, index);
        return child;
    };
    /**
     * Removes all children from this container that are within the begin and end indexes.
     * @param beginIndex - The beginning position.
     * @param endIndex - The ending position. Default value is size of the container.
     * @returns - List of removed children
     */
    Container.prototype.removeChildren = function (beginIndex, endIndex) {
        if (beginIndex === void 0) { beginIndex = 0; }
        if (endIndex === void 0) { endIndex = this.children.length; }
        var begin = beginIndex;
        var end = endIndex;
        var range = end - begin;
        var removed;
        if (range > 0 && range <= end) {
            removed = this.children.splice(begin, range);
            for (var i = 0; i < removed.length; ++i) {
                removed[i].parent = null;
                if (removed[i].transform) {
                    removed[i].transform._parentID = -1;
                }
            }
            this._boundsID++;
            this.onChildrenChange(beginIndex);
            for (var i = 0; i < removed.length; ++i) {
                removed[i].emit('removed', this);
                this.emit('childRemoved', removed[i], this, i);
            }
            return removed;
        }
        else if (range === 0 && this.children.length === 0) {
            return [];
        }
        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');
    };
    /** Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex. */
    Container.prototype.sortChildren = function () {
        var sortRequired = false;
        for (var i = 0, j = this.children.length; i < j; ++i) {
            var child = this.children[i];
            child._lastSortedIndex = i;
            if (!sortRequired && child.zIndex !== 0) {
                sortRequired = true;
            }
        }
        if (sortRequired && this.children.length > 1) {
            this.children.sort(sortChildren);
        }
        this.sortDirty = false;
    };
    /** Updates the transform on all children of this container for rendering. */
    Container.prototype.updateTransform = function () {
        if (this.sortableChildren && this.sortDirty) {
            this.sortChildren();
        }
        this._boundsID++;
        this.transform.updateTransform(this.parent.transform);
        // TODO: check render flags, how to process stuff here
        this.worldAlpha = this.alpha * this.parent.worldAlpha;
        for (var i = 0, j = this.children.length; i < j; ++i) {
            var child = this.children[i];
            if (child.visible) {
                child.updateTransform();
            }
        }
    };
    /**
     * Recalculates the bounds of the container.
     *
     * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds
     * is limited to its mask's bounds or filterArea, if any is applied.
     */
    Container.prototype.calculateBounds = function () {
        this._bounds.clear();
        this._calculateBounds();
        for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i];
            if (!child.visible || !child.renderable) {
                continue;
            }
            child.calculateBounds();
            // TODO: filter+mask, need to mask both somehow
            if (child._mask) {
                var maskObject = (child._mask.isMaskData
                    ? child._mask.maskObject : child._mask);
                if (maskObject) {
                    maskObject.calculateBounds();
                    this._bounds.addBoundsMask(child._bounds, maskObject._bounds);
                }
                else {
                    this._bounds.addBounds(child._bounds);
                }
            }
            else if (child.filterArea) {
                this._bounds.addBoundsArea(child._bounds, child.filterArea);
            }
            else {
                this._bounds.addBounds(child._bounds);
            }
        }
        this._bounds.updateID = this._boundsID;
    };
    /**
     * Retrieves the local bounds of the displayObject as a rectangle object.
     *
     * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()
     * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.
     * @param rect - Optional rectangle to store the result of the bounds calculation.
     * @param skipChildrenUpdate - Setting to `true` will stop re-calculation of children transforms,
     *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
     * @returns - The rectangular bounding area.
     */
    Container.prototype.getLocalBounds = function (rect, skipChildrenUpdate) {
        if (skipChildrenUpdate === void 0) { skipChildrenUpdate = false; }
        var result = _super.prototype.getLocalBounds.call(this, rect);
        if (!skipChildrenUpdate) {
            for (var i = 0, j = this.children.length; i < j; ++i) {
                var child = this.children[i];
                if (child.visible) {
                    child.updateTransform();
                }
            }
        }
        return result;
    };
    /**
     * Recalculates the content bounds of this object. This should be overriden to
     * calculate the bounds of this specific object (not including children).
     * @protected
     */
    Container.prototype._calculateBounds = function () {
        // FILL IN//
    };
    /**
     * Renders this object and its children with culling.
     * @protected
     * @param {PIXI.Renderer} renderer - The renderer
     */
    Container.prototype._renderWithCulling = function (renderer) {
        var sourceFrame = renderer.renderTexture.sourceFrame;
        // If the source frame is empty, stop rendering.
        if (!(sourceFrame.width > 0 && sourceFrame.height > 0)) {
            return;
        }
        // Render the content of the container only if its bounds intersect with the source frame.
        // All filters are on the stack at this point, and the filter source frame is bound:
        // therefore, even if the bounds to non intersect the filter frame, the filter
        // is still applied and any filter padding that is in the frame is rendered correctly.
        var bounds;
        var transform;
        // If cullArea is set, we use this rectangle instead of the bounds of the object. The cullArea
        // rectangle must completely contain the container and its children including filter padding.
        if (this.cullArea) {
            bounds = this.cullArea;
            transform = this.worldTransform;
        }
        // If the container doesn't override _render, we can skip the bounds calculation and intersection test.
        else if (this._render !== Container.prototype._render) {
            bounds = this.getBounds(true);
        }
        // Render the container if the source frame intersects the bounds.
        if (bounds && sourceFrame.intersects(bounds, transform)) {
            this._render(renderer);
        }
        // If the bounds are defined by cullArea and do not intersect with the source frame, stop rendering.
        else if (this.cullArea) {
            return;
        }
        // Unless cullArea is set, we cannot skip the children if the bounds of the container do not intersect
        // the source frame, because the children might have filters with nonzero padding, which may intersect
        // with the source frame while the bounds do not: filter padding is not included in the bounds.
        // If cullArea is not set, render the children with culling temporarily enabled so that they are not rendered
        // if they are out of frame; otherwise, render the children normally.
        for (var i = 0, j = this.children.length; i < j; ++i) {
            var child = this.children[i];
            var childCullable = child.cullable;
            child.cullable = childCullable || !this.cullArea;
            child.render(renderer);
            child.cullable = childCullable;
        }
    };
    /**
     * Renders the object using the WebGL renderer.
     *
     * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the
     * container itself. This `render` method will invoke it, and also invoke the `render` methods of all
     * children afterward.
     *
     * If `renderable` or `visible` is false or if `worldAlpha` is not positive or if `cullable` is true and
     * the bounds of this object are out of frame, this implementation will entirely skip rendering.
     * See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,
     * setting alpha to zero is not recommended for purely skipping rendering.
     *
     * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is
     * advised to employ **culling** to automatically skip rendering objects outside of the current screen.
     * See [cullable]{@link PIXI.DisplayObject#cullable} and [cullArea]{@link PIXI.DisplayObject#cullArea}.
     * Other culling methods might be better suited for a large number static objects; see
     * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and
     * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull}.
     *
     * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or
     * filtering is applied on a container. This does, however, break batching and can affect performance when
     * masking and filtering is applied extensively throughout the scene graph.
     * @param renderer - The renderer
     */
    Container.prototype.render = function (renderer) {
        // if the object is not visible or the alpha is 0 then no need to render this element
        if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {
            return;
        }
        // do a quick check to see if this element has a mask or a filter.
        if (this._mask || (this.filters && this.filters.length)) {
            this.renderAdvanced(renderer);
        }
        else if (this.cullable) {
            this._renderWithCulling(renderer);
        }
        else {
            this._render(renderer);
            for (var i = 0, j = this.children.length; i < j; ++i) {
                this.children[i].render(renderer);
            }
        }
    };
    /**
     * Render the object using the WebGL renderer and advanced features.
     * @param renderer - The renderer
     */
    Container.prototype.renderAdvanced = function (renderer) {
        var filters = this.filters;
        var mask = this._mask;
        // push filter first as we need to ensure the stencil buffer is correct for any masking
        if (filters) {
            if (!this._enabledFilters) {
                this._enabledFilters = [];
            }
            this._enabledFilters.length = 0;
            for (var i = 0; i < filters.length; i++) {
                if (filters[i].enabled) {
                    this._enabledFilters.push(filters[i]);
                }
            }
        }
        var flush = (filters && this._enabledFilters && this._enabledFilters.length)
            || (mask && (!mask.isMaskData
                || (mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE))));
        if (flush) {
            renderer.batch.flush();
        }
        if (filters && this._enabledFilters && this._enabledFilters.length) {
            renderer.filter.push(this, this._enabledFilters);
        }
        if (mask) {
            renderer.mask.push(this, this._mask);
        }
        if (this.cullable) {
            this._renderWithCulling(renderer);
        }
        else {
            this._render(renderer);
            for (var i = 0, j = this.children.length; i < j; ++i) {
                this.children[i].render(renderer);
            }
        }
        if (flush) {
            renderer.batch.flush();
        }
        if (mask) {
            renderer.mask.pop(this);
        }
        if (filters && this._enabledFilters && this._enabledFilters.length) {
            renderer.filter.pop();
        }
    };
    /**
     * To be overridden by the subclasses.
     * @param _renderer - The renderer
     */
    Container.prototype._render = function (_renderer) {
        // this is where content itself gets rendered...
    };
    /**
     * Removes all internal references and listeners as well as removes children from the display list.
     * Do not use a Container after calling `destroy`.
     * @param options - Options parameter. A boolean will act as if all options
     *  have been set to that value
     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
     *  method called as well. 'options' will be passed on to those calls.
     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
     *  Should it destroy the texture of the child sprite
     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
     *  Should it destroy the base texture of the child sprite
     */
    Container.prototype.destroy = function (options) {
        _super.prototype.destroy.call(this);
        this.sortDirty = false;
        var destroyChildren = typeof options === 'boolean' ? options : options && options.children;
        var oldChildren = this.removeChildren(0, this.children.length);
        if (destroyChildren) {
            for (var i = 0; i < oldChildren.length; ++i) {
                oldChildren[i].destroy(options);
            }
        }
    };
    Object.defineProperty(Container.prototype, "width", {
        /** The width of the Container, setting this will actually modify the scale to achieve the value set. */
        get: function () {
            return this.scale.x * this.getLocalBounds().width;
        },
        set: function (value) {
            var width = this.getLocalBounds().width;
            if (width !== 0) {
                this.scale.x = value / width;
            }
            else {
                this.scale.x = 1;
            }
            this._width = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "height", {
        /** The height of the Container, setting this will actually modify the scale to achieve the value set. */
        get: function () {
            return this.scale.y * this.getLocalBounds().height;
        },
        set: function (value) {
            var height = this.getLocalBounds().height;
            if (height !== 0) {
                this.scale.y = value / height;
            }
            else {
                this.scale.y = 1;
            }
            this._height = value;
        },
        enumerable: false,
        configurable: true
    });
    return Container;
}(DisplayObject));
/**
 * Container default updateTransform, does update children of container.
 * Will crash if there's no parent element.
 * @memberof PIXI.Container#
 * @method containerUpdateTransform
 */
Container.prototype.containerUpdateTransform = Container.prototype.updateTransform;


//# sourceMappingURL=display.mjs.map

;// CONCATENATED MODULE: ./js/SpineScript/Application.js


extensions.add(BatchRenderer);
class Application {
  /** DOM элемент */
  view = document.createElement("canvas");
  stage = new Container();
  renderer;
  constructor() {
    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;
    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : width;
    this.renderer = new Renderer({
      width,
      height,
      view: this.view,
      backgroundAlpha: 0 // раскоменти, чтобы убрать черный фон за спайном
    });
  }

  /** вызывается каждый кадр, рисует содержимое приложения во view */
  render() {
    this.renderer.render(this.stage);
  }
}
;// CONCATENATED MODULE: ./js/SpineScript/ApplicationTicker.js

class ApplicationTicker extends Ticker {
  constructor() {
    super();
    this.maxFPS = 60;
  }
}
;// CONCATENATED MODULE: ../node_modules/@pixi/sprite/dist/esm/sprite.mjs
/*!
 * @pixi/sprite - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/sprite is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */







/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var sprite_extendStatics = function(d, b) {
    sprite_extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };
    return sprite_extendStatics(d, b);
};

function sprite_extends(d, b) {
    sprite_extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var tempPoint = new Point();
var indices = new Uint16Array([0, 1, 2, 0, 2, 3]);
/**
 * The Sprite object is the base for all textured objects that are rendered to the screen
 *
 * A sprite can be created directly from an image like this:
 *
 * ```js
 * let sprite = PIXI.Sprite.from('assets/image.png');
 * ```
 *
 * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},
 * as swapping base textures when rendering to the screen is inefficient.
 *
 * ```js
 * PIXI.Loader.shared.add("assets/spritesheet.json").load(setup);
 *
 * function setup() {
 *   let sheet = PIXI.Loader.shared.resources["assets/spritesheet.json"].spritesheet;
 *   let sprite = new PIXI.Sprite(sheet.textures["image.png"]);
 *   ...
 * }
 * ```
 * @memberof PIXI
 */
var Sprite = /** @class */ (function (_super) {
    sprite_extends(Sprite, _super);
    /** @param texture - The texture for this sprite. */
    function Sprite(texture) {
        var _this = _super.call(this) || this;
        _this._anchor = new ObservablePoint(_this._onAnchorUpdate, _this, (texture ? texture.defaultAnchor.x : 0), (texture ? texture.defaultAnchor.y : 0));
        _this._texture = null;
        _this._width = 0;
        _this._height = 0;
        _this._tint = null;
        _this._tintRGB = null;
        _this.tint = 0xFFFFFF;
        _this.blendMode = BLEND_MODES.NORMAL;
        _this._cachedTint = 0xFFFFFF;
        _this.uvs = null;
        // call texture setter
        _this.texture = texture || Texture.EMPTY;
        _this.vertexData = new Float32Array(8);
        _this.vertexTrimmedData = null;
        _this._transformID = -1;
        _this._textureID = -1;
        _this._transformTrimmedID = -1;
        _this._textureTrimmedID = -1;
        // Batchable stuff..
        // TODO could make this a mixin?
        _this.indices = indices;
        _this.pluginName = 'batch';
        /**
         * Used to fast check if a sprite is.. a sprite!
         * @member {boolean}
         */
        _this.isSprite = true;
        _this._roundPixels = settings.ROUND_PIXELS;
        return _this;
    }
    /** When the texture is updated, this event will fire to update the scale and frame. */
    Sprite.prototype._onTextureUpdate = function () {
        this._textureID = -1;
        this._textureTrimmedID = -1;
        this._cachedTint = 0xFFFFFF;
        // so if _width is 0 then width was not set..
        if (this._width) {
            this.scale.x = sign(this.scale.x) * this._width / this._texture.orig.width;
        }
        if (this._height) {
            this.scale.y = sign(this.scale.y) * this._height / this._texture.orig.height;
        }
    };
    /** Called when the anchor position updates. */
    Sprite.prototype._onAnchorUpdate = function () {
        this._transformID = -1;
        this._transformTrimmedID = -1;
    };
    /** Calculates worldTransform * vertices, store it in vertexData. */
    Sprite.prototype.calculateVertices = function () {
        var texture = this._texture;
        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID) {
            return;
        }
        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`
        if (this._textureID !== texture._updateID) {
            this.uvs = this._texture._uvs.uvsFloat32;
        }
        this._transformID = this.transform._worldID;
        this._textureID = texture._updateID;
        // set the vertex data
        var wt = this.transform.worldTransform;
        var a = wt.a;
        var b = wt.b;
        var c = wt.c;
        var d = wt.d;
        var tx = wt.tx;
        var ty = wt.ty;
        var vertexData = this.vertexData;
        var trim = texture.trim;
        var orig = texture.orig;
        var anchor = this._anchor;
        var w0 = 0;
        var w1 = 0;
        var h0 = 0;
        var h1 = 0;
        if (trim) {
            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra
            // space before transforming the sprite coords.
            w1 = trim.x - (anchor._x * orig.width);
            w0 = w1 + trim.width;
            h1 = trim.y - (anchor._y * orig.height);
            h0 = h1 + trim.height;
        }
        else {
            w1 = -anchor._x * orig.width;
            w0 = w1 + orig.width;
            h1 = -anchor._y * orig.height;
            h0 = h1 + orig.height;
        }
        // xy
        vertexData[0] = (a * w1) + (c * h1) + tx;
        vertexData[1] = (d * h1) + (b * w1) + ty;
        // xy
        vertexData[2] = (a * w0) + (c * h1) + tx;
        vertexData[3] = (d * h1) + (b * w0) + ty;
        // xy
        vertexData[4] = (a * w0) + (c * h0) + tx;
        vertexData[5] = (d * h0) + (b * w0) + ty;
        // xy
        vertexData[6] = (a * w1) + (c * h0) + tx;
        vertexData[7] = (d * h0) + (b * w1) + ty;
        if (this._roundPixels) {
            var resolution = settings.RESOLUTION;
            for (var i = 0; i < vertexData.length; ++i) {
                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);
            }
        }
    };
    /**
     * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.
     *
     * This is used to ensure that the true width and height of a trimmed texture is respected.
     */
    Sprite.prototype.calculateTrimmedVertices = function () {
        if (!this.vertexTrimmedData) {
            this.vertexTrimmedData = new Float32Array(8);
        }
        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID) {
            return;
        }
        this._transformTrimmedID = this.transform._worldID;
        this._textureTrimmedID = this._texture._updateID;
        // lets do some special trim code!
        var texture = this._texture;
        var vertexData = this.vertexTrimmedData;
        var orig = texture.orig;
        var anchor = this._anchor;
        // lets calculate the new untrimmed bounds..
        var wt = this.transform.worldTransform;
        var a = wt.a;
        var b = wt.b;
        var c = wt.c;
        var d = wt.d;
        var tx = wt.tx;
        var ty = wt.ty;
        var w1 = -anchor._x * orig.width;
        var w0 = w1 + orig.width;
        var h1 = -anchor._y * orig.height;
        var h0 = h1 + orig.height;
        // xy
        vertexData[0] = (a * w1) + (c * h1) + tx;
        vertexData[1] = (d * h1) + (b * w1) + ty;
        // xy
        vertexData[2] = (a * w0) + (c * h1) + tx;
        vertexData[3] = (d * h1) + (b * w0) + ty;
        // xy
        vertexData[4] = (a * w0) + (c * h0) + tx;
        vertexData[5] = (d * h0) + (b * w0) + ty;
        // xy
        vertexData[6] = (a * w1) + (c * h0) + tx;
        vertexData[7] = (d * h0) + (b * w1) + ty;
    };
    /**
     *
     * Renders the object using the WebGL renderer
     * @param renderer - The webgl renderer to use.
     */
    Sprite.prototype._render = function (renderer) {
        this.calculateVertices();
        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);
        renderer.plugins[this.pluginName].render(this);
    };
    /** Updates the bounds of the sprite. */
    Sprite.prototype._calculateBounds = function () {
        var trim = this._texture.trim;
        var orig = this._texture.orig;
        // First lets check to see if the current texture has a trim..
        if (!trim || (trim.width === orig.width && trim.height === orig.height)) {
            // no trim! lets use the usual calculations..
            this.calculateVertices();
            this._bounds.addQuad(this.vertexData);
        }
        else {
            // lets calculate a special trimmed bounds...
            this.calculateTrimmedVertices();
            this._bounds.addQuad(this.vertexTrimmedData);
        }
    };
    /**
     * Gets the local bounds of the sprite object.
     * @param rect - Optional output rectangle.
     * @returns The bounds.
     */
    Sprite.prototype.getLocalBounds = function (rect) {
        // we can do a fast local bounds if the sprite has no children!
        if (this.children.length === 0) {
            if (!this._localBounds) {
                this._localBounds = new Bounds();
            }
            this._localBounds.minX = this._texture.orig.width * -this._anchor._x;
            this._localBounds.minY = this._texture.orig.height * -this._anchor._y;
            this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);
            this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);
            if (!rect) {
                if (!this._localBoundsRect) {
                    this._localBoundsRect = new Rectangle();
                }
                rect = this._localBoundsRect;
            }
            return this._localBounds.getRectangle(rect);
        }
        return _super.prototype.getLocalBounds.call(this, rect);
    };
    /**
     * Tests if a point is inside this sprite
     * @param point - the point to test
     * @returns The result of the test
     */
    Sprite.prototype.containsPoint = function (point) {
        this.worldTransform.applyInverse(point, tempPoint);
        var width = this._texture.orig.width;
        var height = this._texture.orig.height;
        var x1 = -width * this.anchor.x;
        var y1 = 0;
        if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {
            y1 = -height * this.anchor.y;
            if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {
                return true;
            }
        }
        return false;
    };
    /**
     * Destroys this sprite and optionally its texture and children.
     * @param options - Options parameter. A boolean will act as if all options
     *  have been set to that value
     * @param [options.children=false] - if set to true, all the children will have their destroy
     *      method called as well. 'options' will be passed on to those calls.
     * @param [options.texture=false] - Should it destroy the current texture of the sprite as well
     * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well
     */
    Sprite.prototype.destroy = function (options) {
        _super.prototype.destroy.call(this, options);
        this._texture.off('update', this._onTextureUpdate, this);
        this._anchor = null;
        var destroyTexture = typeof options === 'boolean' ? options : options && options.texture;
        if (destroyTexture) {
            var destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;
            this._texture.destroy(!!destroyBaseTexture);
        }
        this._texture = null;
    };
    // some helper functions..
    /**
     * Helper function that creates a new sprite based on the source you provide.
     * The source can be - frame id, image url, video url, canvas element, video element, base texture
     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.
     * @returns The newly created sprite
     */
    Sprite.from = function (source, options) {
        var texture = (source instanceof Texture)
            ? source
            : Texture.from(source, options);
        return new Sprite(texture);
    };
    Object.defineProperty(Sprite.prototype, "roundPixels", {
        get: function () {
            return this._roundPixels;
        },
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         *
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         *
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.
         * @default false
         */
        set: function (value) {
            if (this._roundPixels !== value) {
                this._transformID = -1;
            }
            this._roundPixels = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "width", {
        /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */
        get: function () {
            return Math.abs(this.scale.x) * this._texture.orig.width;
        },
        set: function (value) {
            var s = sign(this.scale.x) || 1;
            this.scale.x = s * value / this._texture.orig.width;
            this._width = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "height", {
        /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */
        get: function () {
            return Math.abs(this.scale.y) * this._texture.orig.height;
        },
        set: function (value) {
            var s = sign(this.scale.y) || 1;
            this.scale.y = s * value / this._texture.orig.height;
            this._height = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "anchor", {
        /**
         * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}
         * and passed to the constructor.
         *
         * The default is `(0,0)`, this means the sprite's origin is the top left.
         *
         * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.
         *
         * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.
         *
         * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).
         */
        get: function () {
            return this._anchor;
        },
        set: function (value) {
            this._anchor.copyFrom(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tint", {
        /**
         * The tint applied to the sprite. This is a hex value.
         *
         * A value of 0xFFFFFF will remove any tint effect.
         * @default 0xFFFFFF
         */
        get: function () {
            return this._tint;
        },
        set: function (value) {
            this._tint = value;
            this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "texture", {
        /** The texture that the sprite is using. */
        get: function () {
            return this._texture;
        },
        set: function (value) {
            if (this._texture === value) {
                return;
            }
            if (this._texture) {
                this._texture.off('update', this._onTextureUpdate, this);
            }
            this._texture = value || Texture.EMPTY;
            this._cachedTint = 0xFFFFFF;
            this._textureID = -1;
            this._textureTrimmedID = -1;
            if (value) {
                // wait for the texture to load
                if (value.baseTexture.valid) {
                    this._onTextureUpdate();
                }
                else {
                    value.once('update', this._onTextureUpdate, this);
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    return Sprite;
}(Container));


//# sourceMappingURL=sprite.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/mesh/dist/esm/mesh.mjs
/*!
 * @pixi/mesh - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/mesh is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */







/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var mesh_extendStatics = function(d, b) {
    mesh_extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };
    return mesh_extendStatics(d, b);
};

function mesh_extends(d, b) {
    mesh_extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.
 * @memberof PIXI
 */
var MeshBatchUvs = /** @class */ (function () {
    /**
     * @param uvBuffer - Buffer with normalized uv's
     * @param uvMatrix - Material UV matrix
     */
    function MeshBatchUvs(uvBuffer, uvMatrix) {
        this.uvBuffer = uvBuffer;
        this.uvMatrix = uvMatrix;
        this.data = null;
        this._bufferUpdateId = -1;
        this._textureUpdateId = -1;
        this._updateID = 0;
    }
    /**
     * Updates
     * @param forceUpdate - force the update
     */
    MeshBatchUvs.prototype.update = function (forceUpdate) {
        if (!forceUpdate
            && this._bufferUpdateId === this.uvBuffer._updateID
            && this._textureUpdateId === this.uvMatrix._updateID) {
            return;
        }
        this._bufferUpdateId = this.uvBuffer._updateID;
        this._textureUpdateId = this.uvMatrix._updateID;
        var data = this.uvBuffer.data;
        if (!this.data || this.data.length !== data.length) {
            this.data = new Float32Array(data.length);
        }
        this.uvMatrix.multiplyUvs(data, this.data);
        this._updateID++;
    };
    return MeshBatchUvs;
}());

var mesh_tempPoint = new Point();
var tempPolygon = new Polygon();
/**
 * Base mesh class.
 *
 * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.
 * This class assumes a certain level of WebGL knowledge.
 * If you know a bit this should abstract enough away to make your life easier!
 *
 * Pretty much ALL WebGL can be broken down into the following:
 * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..
 * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)
 * - State - This is the state of WebGL required to render the mesh.
 *
 * Through a combination of the above elements you can render anything you want, 2D or 3D!
 * @memberof PIXI
 */
var Mesh = /** @class */ (function (_super) {
    mesh_extends(Mesh, _super);
    /**
     * @param geometry - The geometry the mesh will use.
     * @param {PIXI.MeshMaterial} shader - The shader the mesh will use.
     * @param state - The state that the WebGL context is required to be in to render the mesh
     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.
     * @param drawMode - The drawMode, can be any of the {@link PIXI.DRAW_MODES} constants.
     */
    function Mesh(geometry, shader, state, drawMode) {
        if (drawMode === void 0) { drawMode = DRAW_MODES.TRIANGLES; }
        var _this = _super.call(this) || this;
        _this.geometry = geometry;
        _this.shader = shader;
        _this.state = state || State.for2d();
        _this.drawMode = drawMode;
        _this.start = 0;
        _this.size = 0;
        _this.uvs = null;
        _this.indices = null;
        _this.vertexData = new Float32Array(1);
        _this.vertexDirty = -1;
        _this._transformID = -1;
        _this._roundPixels = settings.ROUND_PIXELS;
        _this.batchUvs = null;
        return _this;
    }
    Object.defineProperty(Mesh.prototype, "geometry", {
        /**
         * Includes vertex positions, face indices, normals, colors, UVs, and
         * custom attributes within buffers, reducing the cost of passing all
         * this data to the GPU. Can be shared between multiple Mesh objects.
         */
        get: function () {
            return this._geometry;
        },
        set: function (value) {
            if (this._geometry === value) {
                return;
            }
            if (this._geometry) {
                this._geometry.refCount--;
                if (this._geometry.refCount === 0) {
                    this._geometry.dispose();
                }
            }
            this._geometry = value;
            if (this._geometry) {
                this._geometry.refCount++;
            }
            this.vertexDirty = -1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mesh.prototype, "uvBuffer", {
        /**
         * To change mesh uv's, change its uvBuffer data and increment its _updateID.
         * @readonly
         */
        get: function () {
            return this.geometry.buffers[1];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mesh.prototype, "verticesBuffer", {
        /**
         * To change mesh vertices, change its uvBuffer data and increment its _updateID.
         * Incrementing _updateID is optional because most of Mesh objects do it anyway.
         * @readonly
         */
        get: function () {
            return this.geometry.buffers[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mesh.prototype, "material", {
        get: function () {
            return this.shader;
        },
        /** Alias for {@link PIXI.Mesh#shader}. */
        set: function (value) {
            this.shader = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mesh.prototype, "blendMode", {
        get: function () {
            return this.state.blendMode;
        },
        /**
         * The blend mode to be applied to the Mesh. Apply a value of
         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         * @default PIXI.BLEND_MODES.NORMAL;
         */
        set: function (value) {
            this.state.blendMode = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mesh.prototype, "roundPixels", {
        get: function () {
            return this._roundPixels;
        },
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         * @default false
         */
        set: function (value) {
            if (this._roundPixels !== value) {
                this._transformID = -1;
            }
            this._roundPixels = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mesh.prototype, "tint", {
        /**
         * The multiply tint applied to the Mesh. This is a hex value. A value of
         * `0xFFFFFF` will remove any tint effect.
         *
         * Null for non-MeshMaterial shaders
         * @default 0xFFFFFF
         */
        get: function () {
            return 'tint' in this.shader ? this.shader.tint : null;
        },
        set: function (value) {
            this.shader.tint = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mesh.prototype, "texture", {
        /** The texture that the Mesh uses. Null for non-MeshMaterial shaders */
        get: function () {
            return 'texture' in this.shader ? this.shader.texture : null;
        },
        set: function (value) {
            this.shader.texture = value;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Standard renderer draw.
     * @param renderer - Instance to renderer.
     */
    Mesh.prototype._render = function (renderer) {
        // set properties for batching..
        // TODO could use a different way to grab verts?
        var vertices = this.geometry.buffers[0].data;
        var shader = this.shader;
        // TODO benchmark check for attribute size..
        if (shader.batchable
            && this.drawMode === DRAW_MODES.TRIANGLES
            && vertices.length < Mesh.BATCHABLE_SIZE * 2) {
            this._renderToBatch(renderer);
        }
        else {
            this._renderDefault(renderer);
        }
    };
    /**
     * Standard non-batching way of rendering.
     * @param renderer - Instance to renderer.
     */
    Mesh.prototype._renderDefault = function (renderer) {
        var shader = this.shader;
        shader.alpha = this.worldAlpha;
        if (shader.update) {
            shader.update();
        }
        renderer.batch.flush();
        // bind and sync uniforms..
        shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);
        renderer.shader.bind(shader);
        // set state..
        renderer.state.set(this.state);
        // bind the geometry...
        renderer.geometry.bind(this.geometry, shader);
        // then render it
        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);
    };
    /**
     * Rendering by using the Batch system.
     * @param renderer - Instance to renderer.
     */
    Mesh.prototype._renderToBatch = function (renderer) {
        var geometry = this.geometry;
        var shader = this.shader;
        if (shader.uvMatrix) {
            shader.uvMatrix.update();
            this.calculateUvs();
        }
        // set properties for batching..
        this.calculateVertices();
        this.indices = geometry.indexBuffer.data;
        this._tintRGB = shader._tintRGB;
        this._texture = shader.texture;
        var pluginName = this.material.pluginName;
        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);
        renderer.plugins[pluginName].render(this);
    };
    /** Updates vertexData field based on transform and vertices. */
    Mesh.prototype.calculateVertices = function () {
        var geometry = this.geometry;
        var verticesBuffer = geometry.buffers[0];
        var vertices = verticesBuffer.data;
        var vertexDirtyId = verticesBuffer._updateID;
        if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID) {
            return;
        }
        this._transformID = this.transform._worldID;
        if (this.vertexData.length !== vertices.length) {
            this.vertexData = new Float32Array(vertices.length);
        }
        var wt = this.transform.worldTransform;
        var a = wt.a;
        var b = wt.b;
        var c = wt.c;
        var d = wt.d;
        var tx = wt.tx;
        var ty = wt.ty;
        var vertexData = this.vertexData;
        for (var i = 0; i < vertexData.length / 2; i++) {
            var x = vertices[(i * 2)];
            var y = vertices[(i * 2) + 1];
            vertexData[(i * 2)] = (a * x) + (c * y) + tx;
            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;
        }
        if (this._roundPixels) {
            var resolution = settings.RESOLUTION;
            for (var i = 0; i < vertexData.length; ++i) {
                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);
            }
        }
        this.vertexDirty = vertexDirtyId;
    };
    /** Updates uv field based on from geometry uv's or batchUvs. */
    Mesh.prototype.calculateUvs = function () {
        var geomUvs = this.geometry.buffers[1];
        var shader = this.shader;
        if (!shader.uvMatrix.isSimple) {
            if (!this.batchUvs) {
                this.batchUvs = new MeshBatchUvs(geomUvs, shader.uvMatrix);
            }
            this.batchUvs.update();
            this.uvs = this.batchUvs.data;
        }
        else {
            this.uvs = geomUvs.data;
        }
    };
    /**
     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.
     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.
     */
    Mesh.prototype._calculateBounds = function () {
        this.calculateVertices();
        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);
    };
    /**
     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.
     * @param point - The point to test.
     * @returns - The result of the test.
     */
    Mesh.prototype.containsPoint = function (point) {
        if (!this.getBounds().contains(point.x, point.y)) {
            return false;
        }
        this.worldTransform.applyInverse(point, mesh_tempPoint);
        var vertices = this.geometry.getBuffer('aVertexPosition').data;
        var points = tempPolygon.points;
        var indices = this.geometry.getIndex().data;
        var len = indices.length;
        var step = this.drawMode === 4 ? 3 : 1;
        for (var i = 0; i + 2 < len; i += step) {
            var ind0 = indices[i] * 2;
            var ind1 = indices[i + 1] * 2;
            var ind2 = indices[i + 2] * 2;
            points[0] = vertices[ind0];
            points[1] = vertices[ind0 + 1];
            points[2] = vertices[ind1];
            points[3] = vertices[ind1 + 1];
            points[4] = vertices[ind2];
            points[5] = vertices[ind2 + 1];
            if (tempPolygon.contains(mesh_tempPoint.x, mesh_tempPoint.y)) {
                return true;
            }
        }
        return false;
    };
    Mesh.prototype.destroy = function (options) {
        _super.prototype.destroy.call(this, options);
        if (this._cachedTexture) {
            this._cachedTexture.destroy();
            this._cachedTexture = null;
        }
        this.geometry = null;
        this.shader = null;
        this.state = null;
        this.uvs = null;
        this.indices = null;
        this.vertexData = null;
    };
    /** The maximum number of vertices to consider batchable. Generally, the complexity of the geometry. */
    Mesh.BATCHABLE_SIZE = 100;
    return Mesh;
}(Container));

var mesh_fragment = "varying vec2 vTextureCoord;\nuniform vec4 uColor;\n\nuniform sampler2D uSampler;\n\nvoid main(void)\n{\n    gl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\n}\n";

var mesh_vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform mat3 uTextureMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\n}\n";

/**
 * Slightly opinionated default shader for PixiJS 2D objects.
 * @memberof PIXI
 */
var MeshMaterial = /** @class */ (function (_super) {
    mesh_extends(MeshMaterial, _super);
    /**
     * @param uSampler - Texture that material uses to render.
     * @param options - Additional options
     * @param {number} [options.alpha=1] - Default alpha.
     * @param {number} [options.tint=0xFFFFFF] - Default tint.
     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.
     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.
     * @param {object} [options.uniforms] - Custom uniforms.
     */
    function MeshMaterial(uSampler, options) {
        var _this = this;
        var uniforms = {
            uSampler: uSampler,
            alpha: 1,
            uTextureMatrix: Matrix.IDENTITY,
            uColor: new Float32Array([1, 1, 1, 1]),
        };
        // Set defaults
        options = Object.assign({
            tint: 0xFFFFFF,
            alpha: 1,
            pluginName: 'batch',
        }, options);
        if (options.uniforms) {
            Object.assign(uniforms, options.uniforms);
        }
        _this = _super.call(this, options.program || Program.from(mesh_vertex, mesh_fragment), uniforms) || this;
        _this._colorDirty = false;
        _this.uvMatrix = new TextureMatrix(uSampler);
        _this.batchable = options.program === undefined;
        _this.pluginName = options.pluginName;
        _this.tint = options.tint;
        _this.alpha = options.alpha;
        return _this;
    }
    Object.defineProperty(MeshMaterial.prototype, "texture", {
        /** Reference to the texture being rendered. */
        get: function () {
            return this.uniforms.uSampler;
        },
        set: function (value) {
            if (this.uniforms.uSampler !== value) {
                if (!this.uniforms.uSampler.baseTexture.alphaMode !== !value.baseTexture.alphaMode) {
                    this._colorDirty = true;
                }
                this.uniforms.uSampler = value;
                this.uvMatrix.texture = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MeshMaterial.prototype, "alpha", {
        get: function () {
            return this._alpha;
        },
        /**
         * This gets automatically set by the object using this.
         * @default 1
         */
        set: function (value) {
            if (value === this._alpha)
                { return; }
            this._alpha = value;
            this._colorDirty = true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MeshMaterial.prototype, "tint", {
        get: function () {
            return this._tint;
        },
        /**
         * Multiply tint for the material.
         * @default 0xFFFFFF
         */
        set: function (value) {
            if (value === this._tint)
                { return; }
            this._tint = value;
            this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);
            this._colorDirty = true;
        },
        enumerable: false,
        configurable: true
    });
    /** Gets called automatically by the Mesh. Intended to be overridden for custom {@link MeshMaterial} objects. */
    MeshMaterial.prototype.update = function () {
        if (this._colorDirty) {
            this._colorDirty = false;
            var baseTexture = this.texture.baseTexture;
            premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);
        }
        if (this.uvMatrix.update()) {
            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;
        }
    };
    return MeshMaterial;
}(Shader));

/**
 * Standard 2D geometry used in PixiJS.
 *
 * Geometry can be defined without passing in a style or data if required.
 *
 * ```js
 * const geometry = new PIXI.Geometry();
 *
 * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);
 * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);
 * geometry.addIndex([0,1,2,1,3,2]);
 *
 * ```
 * @memberof PIXI
 */
var MeshGeometry = /** @class */ (function (_super) {
    mesh_extends(MeshGeometry, _super);
    /**
     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.
     * @param {Float32Array|number[]} [uvs] - Texture UVs.
     * @param {Uint16Array|number[]} [index] - IndexBuffer
     */
    function MeshGeometry(vertices, uvs, index) {
        var _this = _super.call(this) || this;
        var verticesBuffer = new Buffer(vertices);
        var uvsBuffer = new Buffer(uvs, true);
        var indexBuffer = new Buffer(index, true, true);
        _this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)
            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)
            .addIndex(indexBuffer);
        _this._updateId = -1;
        return _this;
    }
    Object.defineProperty(MeshGeometry.prototype, "vertexDirtyId", {
        /**
         * If the vertex position is updated.
         * @readonly
         * @private
         */
        get: function () {
            return this.buffers[0]._updateID;
        },
        enumerable: false,
        configurable: true
    });
    return MeshGeometry;
}(Geometry));


//# sourceMappingURL=mesh.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/mesh-extras/dist/esm/mesh-extras.mjs
/*!
 * @pixi/mesh-extras - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/mesh-extras is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */




/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var mesh_extras_extendStatics = function(d, b) {
    mesh_extras_extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };
    return mesh_extras_extendStatics(d, b);
};

function mesh_extras_extends(d, b) {
    mesh_extras_extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * @memberof PIXI
 */
var PlaneGeometry = /** @class */ (function (_super) {
    mesh_extras_extends(PlaneGeometry, _super);
    /**
     * @param width - The width of the plane.
     * @param height - The height of the plane.
     * @param segWidth - Number of horizontal segments.
     * @param segHeight - Number of vertical segments.
     */
    function PlaneGeometry(width, height, segWidth, segHeight) {
        if (width === void 0) { width = 100; }
        if (height === void 0) { height = 100; }
        if (segWidth === void 0) { segWidth = 10; }
        if (segHeight === void 0) { segHeight = 10; }
        var _this = _super.call(this) || this;
        _this.segWidth = segWidth;
        _this.segHeight = segHeight;
        _this.width = width;
        _this.height = height;
        _this.build();
        return _this;
    }
    /**
     * Refreshes plane coordinates
     * @private
     */
    PlaneGeometry.prototype.build = function () {
        var total = this.segWidth * this.segHeight;
        var verts = [];
        var uvs = [];
        var indices = [];
        var segmentsX = this.segWidth - 1;
        var segmentsY = this.segHeight - 1;
        var sizeX = (this.width) / segmentsX;
        var sizeY = (this.height) / segmentsY;
        for (var i = 0; i < total; i++) {
            var x = (i % this.segWidth);
            var y = ((i / this.segWidth) | 0);
            verts.push(x * sizeX, y * sizeY);
            uvs.push(x / segmentsX, y / segmentsY);
        }
        var totalSub = segmentsX * segmentsY;
        for (var i = 0; i < totalSub; i++) {
            var xpos = i % segmentsX;
            var ypos = (i / segmentsX) | 0;
            var value = (ypos * this.segWidth) + xpos;
            var value2 = (ypos * this.segWidth) + xpos + 1;
            var value3 = ((ypos + 1) * this.segWidth) + xpos;
            var value4 = ((ypos + 1) * this.segWidth) + xpos + 1;
            indices.push(value, value2, value3, value2, value4, value3);
        }
        this.buffers[0].data = new Float32Array(verts);
        this.buffers[1].data = new Float32Array(uvs);
        this.indexBuffer.data = new Uint16Array(indices);
        // ensure that the changes are uploaded
        this.buffers[0].update();
        this.buffers[1].update();
        this.indexBuffer.update();
    };
    return PlaneGeometry;
}(MeshGeometry));

/**
 * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.
 *
 * ```js
 * for (let i = 0; i < 20; i++) {
 *     points.push(new PIXI.Point(i * 50, 0));
 * };
 * const rope = new PIXI.RopeGeometry(100, points);
 * ```
 * @memberof PIXI
 */
var RopeGeometry = /** @class */ (function (_super) {
    mesh_extras_extends(RopeGeometry, _super);
    /**
     * @param width - The width (i.e., thickness) of the rope.
     * @param points - An array of {@link PIXI.Point} objects to construct this rope.
     * @param textureScale - By default the rope texture will be stretched to match
     *     rope length. If textureScale is positive this value will be treated as a scaling
     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope
     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,
     *     then set textureScale=1 to keep the original texture pixel size.
     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -
     *     i.e. set textureScale=0.5 to scale it down twice.
     */
    function RopeGeometry(width, points, textureScale) {
        if (width === void 0) { width = 200; }
        if (textureScale === void 0) { textureScale = 0; }
        var _this = _super.call(this, new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6)) || this;
        _this.points = points;
        _this._width = width;
        _this.textureScale = textureScale;
        _this.build();
        return _this;
    }
    Object.defineProperty(RopeGeometry.prototype, "width", {
        /**
         * The width (i.e., thickness) of the rope.
         * @readonly
         */
        get: function () {
            return this._width;
        },
        enumerable: false,
        configurable: true
    });
    /** Refreshes Rope indices and uvs */
    RopeGeometry.prototype.build = function () {
        var points = this.points;
        if (!points)
            { return; }
        var vertexBuffer = this.getBuffer('aVertexPosition');
        var uvBuffer = this.getBuffer('aTextureCoord');
        var indexBuffer = this.getIndex();
        // if too little points, or texture hasn't got UVs set yet just move on.
        if (points.length < 1) {
            return;
        }
        // if the number of points has changed we will need to recreate the arraybuffers
        if (vertexBuffer.data.length / 4 !== points.length) {
            vertexBuffer.data = new Float32Array(points.length * 4);
            uvBuffer.data = new Float32Array(points.length * 4);
            indexBuffer.data = new Uint16Array((points.length - 1) * 6);
        }
        var uvs = uvBuffer.data;
        var indices = indexBuffer.data;
        uvs[0] = 0;
        uvs[1] = 0;
        uvs[2] = 0;
        uvs[3] = 1;
        var amount = 0;
        var prev = points[0];
        var textureWidth = this._width * this.textureScale;
        var total = points.length; // - 1;
        for (var i = 0; i < total; i++) {
            // time to do some smart drawing!
            var index = i * 4;
            if (this.textureScale > 0) {
                // calculate pixel distance from previous point
                var dx = prev.x - points[i].x;
                var dy = prev.y - points[i].y;
                var distance = Math.sqrt((dx * dx) + (dy * dy));
                prev = points[i];
                amount += distance / textureWidth;
            }
            else {
                // stretch texture
                amount = i / (total - 1);
            }
            uvs[index] = amount;
            uvs[index + 1] = 0;
            uvs[index + 2] = amount;
            uvs[index + 3] = 1;
        }
        var indexCount = 0;
        for (var i = 0; i < total - 1; i++) {
            var index = i * 2;
            indices[indexCount++] = index;
            indices[indexCount++] = index + 1;
            indices[indexCount++] = index + 2;
            indices[indexCount++] = index + 2;
            indices[indexCount++] = index + 1;
            indices[indexCount++] = index + 3;
        }
        // ensure that the changes are uploaded
        uvBuffer.update();
        indexBuffer.update();
        this.updateVertices();
    };
    /** refreshes vertices of Rope mesh */
    RopeGeometry.prototype.updateVertices = function () {
        var points = this.points;
        if (points.length < 1) {
            return;
        }
        var lastPoint = points[0];
        var nextPoint;
        var perpX = 0;
        var perpY = 0;
        var vertices = this.buffers[0].data;
        var total = points.length;
        for (var i = 0; i < total; i++) {
            var point = points[i];
            var index = i * 4;
            if (i < points.length - 1) {
                nextPoint = points[i + 1];
            }
            else {
                nextPoint = point;
            }
            perpY = -(nextPoint.x - lastPoint.x);
            perpX = nextPoint.y - lastPoint.y;
            var perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));
            var num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;
            perpX /= perpLength;
            perpY /= perpLength;
            perpX *= num;
            perpY *= num;
            vertices[index] = point.x + perpX;
            vertices[index + 1] = point.y + perpY;
            vertices[index + 2] = point.x - perpX;
            vertices[index + 3] = point.y - perpY;
            lastPoint = point;
        }
        this.buffers[0].update();
    };
    RopeGeometry.prototype.update = function () {
        if (this.textureScale > 0) {
            this.build(); // we need to update UVs
        }
        else {
            this.updateVertices();
        }
    };
    return RopeGeometry;
}(MeshGeometry));

/**
 * The rope allows you to draw a texture across several points and then manipulate these points
 *
 *```js
 * for (let i = 0; i < 20; i++) {
 *     points.push(new PIXI.Point(i * 50, 0));
 * };
 * let rope = new PIXI.SimpleRope(PIXI.Texture.from("snake.png"), points);
 *  ```
 * @memberof PIXI
 */
var SimpleRope = /** @class */ (function (_super) {
    mesh_extras_extends(SimpleRope, _super);
    /**
     * @param texture - The texture to use on the rope.
     * @param points - An array of {@link PIXI.Point} objects to construct this rope.
     * @param {number} textureScale - Optional. Positive values scale rope texture
     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture
     * and downsampling here. If set to zero, texture will be stretched instead.
     */
    function SimpleRope(texture, points, textureScale) {
        if (textureScale === void 0) { textureScale = 0; }
        var _this = this;
        var ropeGeometry = new RopeGeometry(texture.height, points, textureScale);
        var meshMaterial = new MeshMaterial(texture);
        if (textureScale > 0) {
            // attempt to set UV wrapping, will fail on non-power of two textures
            texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;
        }
        _this = _super.call(this, ropeGeometry, meshMaterial) || this;
        /**
         * re-calculate vertices by rope points each frame
         * @member {boolean}
         */
        _this.autoUpdate = true;
        return _this;
    }
    SimpleRope.prototype._render = function (renderer) {
        var geometry = this.geometry;
        if (this.autoUpdate || geometry._width !== this.shader.texture.height) {
            geometry._width = this.shader.texture.height;
            geometry.update();
        }
        _super.prototype._render.call(this, renderer);
    };
    return SimpleRope;
}(Mesh));

/**
 * The SimplePlane allows you to draw a texture across several points and then manipulate these points
 *
 *```js
 * for (let i = 0; i < 20; i++) {
 *     points.push(new PIXI.Point(i * 50, 0));
 * };
 * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from("snake.png"), points);
 *  ```
 * @memberof PIXI
 */
var SimplePlane = /** @class */ (function (_super) {
    mesh_extras_extends(SimplePlane, _super);
    /**
     * @param texture - The texture to use on the SimplePlane.
     * @param verticesX - The number of vertices in the x-axis
     * @param verticesY - The number of vertices in the y-axis
     */
    function SimplePlane(texture, verticesX, verticesY) {
        var _this = this;
        var planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);
        var meshMaterial = new MeshMaterial(Texture.WHITE);
        _this = _super.call(this, planeGeometry, meshMaterial) || this;
        // lets call the setter to ensure all necessary updates are performed
        _this.texture = texture;
        _this.autoResize = true;
        return _this;
    }
    /**
     * Method used for overrides, to do something in case texture frame was changed.
     * Meshes based on plane can override it and change more details based on texture.
     */
    SimplePlane.prototype.textureUpdated = function () {
        this._textureID = this.shader.texture._updateID;
        var geometry = this.geometry;
        var _a = this.shader.texture, width = _a.width, height = _a.height;
        if (this.autoResize && (geometry.width !== width || geometry.height !== height)) {
            geometry.width = this.shader.texture.width;
            geometry.height = this.shader.texture.height;
            geometry.build();
        }
    };
    Object.defineProperty(SimplePlane.prototype, "texture", {
        get: function () {
            return this.shader.texture;
        },
        set: function (value) {
            // Track texture same way sprite does.
            // For generated meshes like NineSlicePlane it can change the geometry.
            // Unfortunately, this method might not work if you directly change texture in material.
            if (this.shader.texture === value) {
                return;
            }
            this.shader.texture = value;
            this._textureID = -1;
            if (value.baseTexture.valid) {
                this.textureUpdated();
            }
            else {
                value.once('update', this.textureUpdated, this);
            }
        },
        enumerable: false,
        configurable: true
    });
    SimplePlane.prototype._render = function (renderer) {
        if (this._textureID !== this.shader.texture._updateID) {
            this.textureUpdated();
        }
        _super.prototype._render.call(this, renderer);
    };
    SimplePlane.prototype.destroy = function (options) {
        this.shader.texture.off('update', this.textureUpdated, this);
        _super.prototype.destroy.call(this, options);
    };
    return SimplePlane;
}(Mesh));

/**
 * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.
 * For more robust customization, use {@link PIXI.Mesh}.
 * @memberof PIXI
 */
var SimpleMesh = /** @class */ (function (_super) {
    mesh_extras_extends(SimpleMesh, _super);
    /**
     * @param texture - The texture to use
     * @param {Float32Array} [vertices] - if you want to specify the vertices
     * @param {Float32Array} [uvs] - if you want to specify the uvs
     * @param {Uint16Array} [indices] - if you want to specify the indices
     * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts
     */
    function SimpleMesh(texture, vertices, uvs, indices, drawMode) {
        if (texture === void 0) { texture = Texture.EMPTY; }
        var _this = this;
        var geometry = new MeshGeometry(vertices, uvs, indices);
        geometry.getBuffer('aVertexPosition').static = false;
        var meshMaterial = new MeshMaterial(texture);
        _this = _super.call(this, geometry, meshMaterial, null, drawMode) || this;
        _this.autoUpdate = true;
        return _this;
    }
    Object.defineProperty(SimpleMesh.prototype, "vertices", {
        /**
         * Collection of vertices data.
         * @type {Float32Array}
         */
        get: function () {
            return this.geometry.getBuffer('aVertexPosition').data;
        },
        set: function (value) {
            this.geometry.getBuffer('aVertexPosition').data = value;
        },
        enumerable: false,
        configurable: true
    });
    SimpleMesh.prototype._render = function (renderer) {
        if (this.autoUpdate) {
            this.geometry.getBuffer('aVertexPosition').update();
        }
        _super.prototype._render.call(this, renderer);
    };
    return SimpleMesh;
}(Mesh));

var DEFAULT_BORDER_SIZE = 10;
/**
 * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful
 * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically
 *
 *```js
 * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);
 *  ```
 * <pre>
 *      A                          B
 *    +---+----------------------+---+
 *  C | 1 |          2           | 3 |
 *    +---+----------------------+---+
 *    |   |                      |   |
 *    | 4 |          5           | 6 |
 *    |   |                      |   |
 *    +---+----------------------+---+
 *  D | 7 |          8           | 9 |
 *    +---+----------------------+---+
 *  When changing this objects width and/or height:
 *     areas 1 3 7 and 9 will remain unscaled.
 *     areas 2 and 8 will be stretched horizontally
 *     areas 4 and 6 will be stretched vertically
 *     area 5 will be stretched both horizontally and vertically
 * </pre>
 * @memberof PIXI
 */
var NineSlicePlane = /** @class */ (function (_super) {
    mesh_extras_extends(NineSlicePlane, _super);
    /**
     * @param texture - The texture to use on the NineSlicePlane.
     * @param {number} [leftWidth=10] - size of the left vertical bar (A)
     * @param {number} [topHeight=10] - size of the top horizontal bar (C)
     * @param {number} [rightWidth=10] - size of the right vertical bar (B)
     * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)
     */
    function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {
        if (leftWidth === void 0) { leftWidth = DEFAULT_BORDER_SIZE; }
        if (topHeight === void 0) { topHeight = DEFAULT_BORDER_SIZE; }
        if (rightWidth === void 0) { rightWidth = DEFAULT_BORDER_SIZE; }
        if (bottomHeight === void 0) { bottomHeight = DEFAULT_BORDER_SIZE; }
        var _this = _super.call(this, Texture.WHITE, 4, 4) || this;
        _this._origWidth = texture.orig.width;
        _this._origHeight = texture.orig.height;
        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */
        _this._width = _this._origWidth;
        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */
        _this._height = _this._origHeight;
        _this._leftWidth = leftWidth;
        _this._rightWidth = rightWidth;
        _this._topHeight = topHeight;
        _this._bottomHeight = bottomHeight;
        // lets call the setter to ensure all necessary updates are performed
        _this.texture = texture;
        return _this;
    }
    NineSlicePlane.prototype.textureUpdated = function () {
        this._textureID = this.shader.texture._updateID;
        this._refresh();
    };
    Object.defineProperty(NineSlicePlane.prototype, "vertices", {
        get: function () {
            return this.geometry.getBuffer('aVertexPosition').data;
        },
        set: function (value) {
            this.geometry.getBuffer('aVertexPosition').data = value;
        },
        enumerable: false,
        configurable: true
    });
    /** Updates the horizontal vertices. */
    NineSlicePlane.prototype.updateHorizontalVertices = function () {
        var vertices = this.vertices;
        var scale = this._getMinScale();
        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;
        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);
        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;
    };
    /** Updates the vertical vertices. */
    NineSlicePlane.prototype.updateVerticalVertices = function () {
        var vertices = this.vertices;
        var scale = this._getMinScale();
        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;
        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);
        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;
    };
    /**
     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.
     * @returns Smaller number of vertical and horizontal scale.
     */
    NineSlicePlane.prototype._getMinScale = function () {
        var w = this._leftWidth + this._rightWidth;
        var scaleW = this._width > w ? 1.0 : this._width / w;
        var h = this._topHeight + this._bottomHeight;
        var scaleH = this._height > h ? 1.0 : this._height / h;
        var scale = Math.min(scaleW, scaleH);
        return scale;
    };
    Object.defineProperty(NineSlicePlane.prototype, "width", {
        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            this._refresh();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NineSlicePlane.prototype, "height", {
        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            this._refresh();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NineSlicePlane.prototype, "leftWidth", {
        /** The width of the left column. */
        get: function () {
            return this._leftWidth;
        },
        set: function (value) {
            this._leftWidth = value;
            this._refresh();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NineSlicePlane.prototype, "rightWidth", {
        /** The width of the right column. */
        get: function () {
            return this._rightWidth;
        },
        set: function (value) {
            this._rightWidth = value;
            this._refresh();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NineSlicePlane.prototype, "topHeight", {
        /** The height of the top row. */
        get: function () {
            return this._topHeight;
        },
        set: function (value) {
            this._topHeight = value;
            this._refresh();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NineSlicePlane.prototype, "bottomHeight", {
        /** The height of the bottom row. */
        get: function () {
            return this._bottomHeight;
        },
        set: function (value) {
            this._bottomHeight = value;
            this._refresh();
        },
        enumerable: false,
        configurable: true
    });
    /** Refreshes NineSlicePlane coords. All of them. */
    NineSlicePlane.prototype._refresh = function () {
        var texture = this.texture;
        var uvs = this.geometry.buffers[1].data;
        this._origWidth = texture.orig.width;
        this._origHeight = texture.orig.height;
        var _uvw = 1.0 / this._origWidth;
        var _uvh = 1.0 / this._origHeight;
        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;
        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;
        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;
        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;
        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;
        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);
        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;
        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);
        this.updateHorizontalVertices();
        this.updateVerticalVertices();
        this.geometry.buffers[0].update();
        this.geometry.buffers[1].update();
    };
    return NineSlicePlane;
}(SimplePlane));


//# sourceMappingURL=mesh-extras.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi/graphics/dist/esm/graphics.mjs
/*!
 * @pixi/graphics - v6.5.9
 * Compiled Wed, 25 Jan 2023 05:01:45 UTC
 *
 * @pixi/graphics is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */






/**
 * Supported line joints in `PIXI.LineStyle` for graphics.
 * @see PIXI.Graphics#lineStyle
 * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator
 * @name LINE_JOIN
 * @memberof PIXI
 * @static
 * @enum {string}
 * @property {string} MITER - 'miter': make a sharp corner where outer part of lines meet
 * @property {string} BEVEL - 'bevel': add a square butt at each end of line segment and fill the triangle at turn
 * @property {string} ROUND - 'round': add an arc at the joint
 */
var LINE_JOIN;
(function (LINE_JOIN) {
    LINE_JOIN["MITER"] = "miter";
    LINE_JOIN["BEVEL"] = "bevel";
    LINE_JOIN["ROUND"] = "round";
})(LINE_JOIN || (LINE_JOIN = {}));
/**
 * Support line caps in `PIXI.LineStyle` for graphics.
 * @see PIXI.Graphics#lineStyle
 * @name LINE_CAP
 * @memberof PIXI
 * @static
 * @enum {string}
 * @property {string} BUTT - 'butt': don't add any cap at line ends (leaves orthogonal edges)
 * @property {string} ROUND - 'round': add semicircle at ends
 * @property {string} SQUARE - 'square': add square at end (like `BUTT` except more length at end)
 */
var LINE_CAP;
(function (LINE_CAP) {
    LINE_CAP["BUTT"] = "butt";
    LINE_CAP["ROUND"] = "round";
    LINE_CAP["SQUARE"] = "square";
})(LINE_CAP || (LINE_CAP = {}));
/**
 * Graphics curves resolution settings. If `adaptive` flag is set to `true`,
 * the resolution is calculated based on the curve's length to ensure better visual quality.
 * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.
 * @static
 * @constant
 * @memberof PIXI
 * @name GRAPHICS_CURVES
 * @type {object}
 * @property {boolean} [adaptive=true] - flag indicating if the resolution should be adaptive
 * @property {number} [maxLength=10] - maximal length of a single segment of the curve (if adaptive = false, ignored)
 * @property {number} [minSegments=8] - minimal number of segments in the curve (if adaptive = false, ignored)
 * @property {number} [maxSegments=2048] - maximal number of segments in the curve (if adaptive = false, ignored)
 */
var GRAPHICS_CURVES = {
    adaptive: true,
    maxLength: 10,
    minSegments: 8,
    maxSegments: 2048,
    epsilon: 0.0001,
    _segmentsCount: function (length, defaultSegments) {
        if (defaultSegments === void 0) { defaultSegments = 20; }
        if (!this.adaptive || !length || isNaN(length)) {
            return defaultSegments;
        }
        var result = Math.ceil(length / this.maxLength);
        if (result < this.minSegments) {
            result = this.minSegments;
        }
        else if (result > this.maxSegments) {
            result = this.maxSegments;
        }
        return result;
    },
};

/**
 * Fill style object for Graphics.
 * @memberof PIXI
 */
var FillStyle = /** @class */ (function () {
    function FillStyle() {
        /**
         * The hex color value used when coloring the Graphics object.
         * @default 0xFFFFFF
         */
        this.color = 0xFFFFFF;
        /** The alpha value used when filling the Graphics object. */
        this.alpha = 1.0;
        /**
         * The texture to be used for the fill.
         * @default 0
         */
        this.texture = Texture.WHITE;
        /**
         * The transform applied to the texture.
         * @default null
         */
        this.matrix = null;
        /** If the current fill is visible. */
        this.visible = false;
        this.reset();
    }
    /** Clones the object */
    FillStyle.prototype.clone = function () {
        var obj = new FillStyle();
        obj.color = this.color;
        obj.alpha = this.alpha;
        obj.texture = this.texture;
        obj.matrix = this.matrix;
        obj.visible = this.visible;
        return obj;
    };
    /** Reset */
    FillStyle.prototype.reset = function () {
        this.color = 0xFFFFFF;
        this.alpha = 1;
        this.texture = Texture.WHITE;
        this.matrix = null;
        this.visible = false;
    };
    /** Destroy and don't use after this. */
    FillStyle.prototype.destroy = function () {
        this.texture = null;
        this.matrix = null;
    };
    return FillStyle;
}());

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var graphics_extendStatics = function(d, b) {
    graphics_extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };
    return graphics_extendStatics(d, b);
};

function graphics_extends(d, b) {
    graphics_extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function fixOrientation(points, hole) {
    var _a, _b;
    if (hole === void 0) { hole = false; }
    var m = points.length;
    if (m < 6) {
        return;
    }
    var area = 0;
    for (var i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2) {
        var x2 = points[i];
        var y2 = points[i + 1];
        area += (x2 - x1) * (y2 + y1);
        x1 = x2;
        y1 = y2;
    }
    if ((!hole && area > 0) || (hole && area <= 0)) {
        var n = m / 2;
        for (var i = n + (n % 2); i < m; i += 2) {
            var i1 = m - i - 2;
            var i2 = m - i - 1;
            var i3 = i;
            var i4 = i + 1;
            _a = [points[i3], points[i1]], points[i1] = _a[0], points[i3] = _a[1];
            _b = [points[i4], points[i2]], points[i2] = _b[0], points[i4] = _b[1];
        }
    }
}
/**
 * Builds a polygon to draw
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape
 * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines
 */
var buildPoly = {
    build: function (graphicsData) {
        graphicsData.points = graphicsData.shape.points.slice();
    },
    triangulate: function (graphicsData, graphicsGeometry) {
        var points = graphicsData.points;
        var holes = graphicsData.holes;
        var verts = graphicsGeometry.points;
        var indices = graphicsGeometry.indices;
        if (points.length >= 6) {
            fixOrientation(points, false);
            var holeArray = [];
            // Process holes..
            for (var i = 0; i < holes.length; i++) {
                var hole = holes[i];
                fixOrientation(hole.points, true);
                holeArray.push(points.length / 2);
                points = points.concat(hole.points);
            }
            // sort color
            var triangles = earcut(points, holeArray, 2);
            if (!triangles) {
                return;
            }
            var vertPos = verts.length / 2;
            for (var i = 0; i < triangles.length; i += 3) {
                indices.push(triangles[i] + vertPos);
                indices.push(triangles[i + 1] + vertPos);
                indices.push(triangles[i + 2] + vertPos);
            }
            for (var i = 0; i < points.length; i++) {
                verts.push(points[i]);
            }
        }
    },
};

// for type only
/**
 * Builds a circle to draw
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw
 * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape
 * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines
 */
var buildCircle = {
    build: function (graphicsData) {
        // need to convert points to a nice regular data
        var points = graphicsData.points;
        var x;
        var y;
        var dx;
        var dy;
        var rx;
        var ry;
        if (graphicsData.type === SHAPES.CIRC) {
            var circle = graphicsData.shape;
            x = circle.x;
            y = circle.y;
            rx = ry = circle.radius;
            dx = dy = 0;
        }
        else if (graphicsData.type === SHAPES.ELIP) {
            var ellipse = graphicsData.shape;
            x = ellipse.x;
            y = ellipse.y;
            rx = ellipse.width;
            ry = ellipse.height;
            dx = dy = 0;
        }
        else {
            var roundedRect = graphicsData.shape;
            var halfWidth = roundedRect.width / 2;
            var halfHeight = roundedRect.height / 2;
            x = roundedRect.x + halfWidth;
            y = roundedRect.y + halfHeight;
            rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));
            dx = halfWidth - rx;
            dy = halfHeight - ry;
        }
        if (!(rx >= 0 && ry >= 0 && dx >= 0 && dy >= 0)) {
            points.length = 0;
            return;
        }
        // Choose a number of segments such that the maximum absolute deviation from the circle is approximately 0.029
        var n = Math.ceil(2.3 * Math.sqrt(rx + ry));
        var m = (n * 8) + (dx ? 4 : 0) + (dy ? 4 : 0);
        points.length = m;
        if (m === 0) {
            return;
        }
        if (n === 0) {
            points.length = 8;
            points[0] = points[6] = x + dx;
            points[1] = points[3] = y + dy;
            points[2] = points[4] = x - dx;
            points[5] = points[7] = y - dy;
            return;
        }
        var j1 = 0;
        var j2 = (n * 4) + (dx ? 2 : 0) + 2;
        var j3 = j2;
        var j4 = m;
        {
            var x0 = dx + rx;
            var y0 = dy;
            var x1 = x + x0;
            var x2 = x - x0;
            var y1 = y + y0;
            points[j1++] = x1;
            points[j1++] = y1;
            points[--j2] = y1;
            points[--j2] = x2;
            if (dy) {
                var y2 = y - y0;
                points[j3++] = x2;
                points[j3++] = y2;
                points[--j4] = y2;
                points[--j4] = x1;
            }
        }
        for (var i = 1; i < n; i++) {
            var a = Math.PI / 2 * (i / n);
            var x0 = dx + (Math.cos(a) * rx);
            var y0 = dy + (Math.sin(a) * ry);
            var x1 = x + x0;
            var x2 = x - x0;
            var y1 = y + y0;
            var y2 = y - y0;
            points[j1++] = x1;
            points[j1++] = y1;
            points[--j2] = y1;
            points[--j2] = x2;
            points[j3++] = x2;
            points[j3++] = y2;
            points[--j4] = y2;
            points[--j4] = x1;
        }
        {
            var x0 = dx;
            var y0 = dy + ry;
            var x1 = x + x0;
            var x2 = x - x0;
            var y1 = y + y0;
            var y2 = y - y0;
            points[j1++] = x1;
            points[j1++] = y1;
            points[--j4] = y2;
            points[--j4] = x1;
            if (dx) {
                points[j1++] = x2;
                points[j1++] = y1;
                points[--j4] = y2;
                points[--j4] = x2;
            }
        }
    },
    triangulate: function (graphicsData, graphicsGeometry) {
        var points = graphicsData.points;
        var verts = graphicsGeometry.points;
        var indices = graphicsGeometry.indices;
        if (points.length === 0) {
            return;
        }
        var vertPos = verts.length / 2;
        var center = vertPos;
        var x;
        var y;
        if (graphicsData.type !== SHAPES.RREC) {
            var circle = graphicsData.shape;
            x = circle.x;
            y = circle.y;
        }
        else {
            var roundedRect = graphicsData.shape;
            x = roundedRect.x + (roundedRect.width / 2);
            y = roundedRect.y + (roundedRect.height / 2);
        }
        var matrix = graphicsData.matrix;
        // Push center (special point)
        verts.push(graphicsData.matrix ? (matrix.a * x) + (matrix.c * y) + matrix.tx : x, graphicsData.matrix ? (matrix.b * x) + (matrix.d * y) + matrix.ty : y);
        vertPos++;
        verts.push(points[0], points[1]);
        for (var i = 2; i < points.length; i += 2) {
            verts.push(points[i], points[i + 1]);
            // add some uvs
            indices.push(vertPos++, center, vertPos);
        }
        indices.push(center + 1, center, vertPos);
    },
};

/**
 * Builds a rectangle to draw
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape
 * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines
 */
var buildRectangle = {
    build: function (graphicsData) {
        // --- //
        // need to convert points to a nice regular data
        //
        var rectData = graphicsData.shape;
        var x = rectData.x;
        var y = rectData.y;
        var width = rectData.width;
        var height = rectData.height;
        var points = graphicsData.points;
        points.length = 0;
        points.push(x, y, x + width, y, x + width, y + height, x, y + height);
    },
    triangulate: function (graphicsData, graphicsGeometry) {
        var points = graphicsData.points;
        var verts = graphicsGeometry.points;
        var vertPos = verts.length / 2;
        verts.push(points[0], points[1], points[2], points[3], points[6], points[7], points[4], points[5]);
        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2, vertPos + 1, vertPos + 2, vertPos + 3);
    },
};

/**
 * Calculate a single point for a quadratic bezier curve.
 * Utility function used by quadraticBezierCurve.
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {number} n1 - first number
 * @param {number} n2 - second number
 * @param {number} perc - percentage
 * @returns {number} the result
 */
function getPt(n1, n2, perc) {
    var diff = n2 - n1;
    return n1 + (diff * perc);
}
/**
 * Calculate the points for a quadratic bezier curve. (helper function..)
 * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {number} fromX - Origin point x
 * @param {number} fromY - Origin point x
 * @param {number} cpX - Control point x
 * @param {number} cpY - Control point y
 * @param {number} toX - Destination point x
 * @param {number} toY - Destination point y
 * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.
 * @returns {number[]} an array of points
 */
function quadraticBezierCurve(fromX, fromY, cpX, cpY, toX, toY, out) {
    if (out === void 0) { out = []; }
    var n = 20;
    var points = out;
    var xa = 0;
    var ya = 0;
    var xb = 0;
    var yb = 0;
    var x = 0;
    var y = 0;
    for (var i = 0, j = 0; i <= n; ++i) {
        j = i / n;
        // The Green Line
        xa = getPt(fromX, cpX, j);
        ya = getPt(fromY, cpY, j);
        xb = getPt(cpX, toX, j);
        yb = getPt(cpY, toY, j);
        // The Black Dot
        x = getPt(xa, xb, j);
        y = getPt(ya, yb, j);
        // Handle case when first curve points overlaps and earcut fails to triangulate
        if (i === 0 && points[points.length - 2] === x && points[points.length - 1] === y) {
            continue;
        }
        points.push(x, y);
    }
    return points;
}
/**
 * Builds a rounded rectangle to draw
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape
 * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines
 */
var buildRoundedRectangle = {
    build: function (graphicsData) {
        if (Graphics.nextRoundedRectBehavior) {
            buildCircle.build(graphicsData);
            return;
        }
        var rrectData = graphicsData.shape;
        var points = graphicsData.points;
        var x = rrectData.x;
        var y = rrectData.y;
        var width = rrectData.width;
        var height = rrectData.height;
        // Don't allow negative radius or greater than half the smallest width
        var radius = Math.max(0, Math.min(rrectData.radius, Math.min(width, height) / 2));
        points.length = 0;
        // No radius, do a simple rectangle
        if (!radius) {
            points.push(x, y, x + width, y, x + width, y + height, x, y + height);
        }
        else {
            quadraticBezierCurve(x, y + radius, x, y, x + radius, y, points);
            quadraticBezierCurve(x + width - radius, y, x + width, y, x + width, y + radius, points);
            quadraticBezierCurve(x + width, y + height - radius, x + width, y + height, x + width - radius, y + height, points);
            quadraticBezierCurve(x + radius, y + height, x, y + height, x, y + height - radius, points);
        }
    },
    triangulate: function (graphicsData, graphicsGeometry) {
        if (Graphics.nextRoundedRectBehavior) {
            buildCircle.triangulate(graphicsData, graphicsGeometry);
            return;
        }
        var points = graphicsData.points;
        var verts = graphicsGeometry.points;
        var indices = graphicsGeometry.indices;
        var vecPos = verts.length / 2;
        var triangles = earcut(points, null, 2);
        for (var i = 0, j = triangles.length; i < j; i += 3) {
            indices.push(triangles[i] + vecPos);
            //     indices.push(triangles[i] + vecPos);
            indices.push(triangles[i + 1] + vecPos);
            //   indices.push(triangles[i + 2] + vecPos);
            indices.push(triangles[i + 2] + vecPos);
        }
        for (var i = 0, j = points.length; i < j; i++) {
            verts.push(points[i], points[++i]);
        }
    },
};

/**
 * Buffers vertices to draw a square cap.
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {number} x - X-coord of end point
 * @param {number} y - Y-coord of end point
 * @param {number} nx - X-coord of line normal pointing inside
 * @param {number} ny - Y-coord of line normal pointing inside
 * @param {number} innerWeight - Weight of inner points
 * @param {number} outerWeight - Weight of outer points
 * @param {boolean} clockwise - Whether the cap is drawn clockwise
 * @param {Array<number>} verts - vertex buffer
 * @returns {number} - no. of vertices pushed
 */
function square(x, y, nx, ny, innerWeight, outerWeight, clockwise, /* rotation for square (true at left end, false at right end) */ verts) {
    var ix = x - (nx * innerWeight);
    var iy = y - (ny * innerWeight);
    var ox = x + (nx * outerWeight);
    var oy = y + (ny * outerWeight);
    /* Rotate nx,ny for extension vector */
    var exx;
    var eyy;
    if (clockwise) {
        exx = ny;
        eyy = -nx;
    }
    else {
        exx = -ny;
        eyy = nx;
    }
    /* [i|0]x,y extended at cap */
    var eix = ix + exx;
    var eiy = iy + eyy;
    var eox = ox + exx;
    var eoy = oy + eyy;
    /* Square itself must be inserted clockwise*/
    verts.push(eix, eiy);
    verts.push(eox, eoy);
    return 2;
}
/**
 * Buffers vertices to draw an arc at the line joint or cap.
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {number} cx - X-coord of center
 * @param {number} cy - Y-coord of center
 * @param {number} sx - X-coord of arc start
 * @param {number} sy - Y-coord of arc start
 * @param {number} ex - X-coord of arc end
 * @param {number} ey - Y-coord of arc end
 * @param {Array<number>} verts - buffer of vertices
 * @param {boolean} clockwise - orientation of vertices
 * @returns {number} - no. of vertices pushed
 */
function round(cx, cy, sx, sy, ex, ey, verts, clockwise) {
    var cx2p0x = sx - cx;
    var cy2p0y = sy - cy;
    var angle0 = Math.atan2(cx2p0x, cy2p0y);
    var angle1 = Math.atan2(ex - cx, ey - cy);
    if (clockwise && angle0 < angle1) {
        angle0 += Math.PI * 2;
    }
    else if (!clockwise && angle0 > angle1) {
        angle1 += Math.PI * 2;
    }
    var startAngle = angle0;
    var angleDiff = angle1 - angle0;
    var absAngleDiff = Math.abs(angleDiff);
    /* if (absAngleDiff >= PI_LBOUND && absAngleDiff <= PI_UBOUND)
    {
        const r1x = cx - nxtPx;
        const r1y = cy - nxtPy;

        if (r1x === 0)
        {
            if (r1y > 0)
            {
                angleDiff = -angleDiff;
            }
        }
        else if (r1x >= -GRAPHICS_CURVES.epsilon)
        {
            angleDiff = -angleDiff;
        }
    }*/
    var radius = Math.sqrt((cx2p0x * cx2p0x) + (cy2p0y * cy2p0y));
    var segCount = ((15 * absAngleDiff * Math.sqrt(radius) / Math.PI) >> 0) + 1;
    var angleInc = angleDiff / segCount;
    startAngle += angleInc;
    if (clockwise) {
        verts.push(cx, cy);
        verts.push(sx, sy);
        for (var i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {
            verts.push(cx, cy);
            verts.push(cx + ((Math.sin(angle) * radius)), cy + ((Math.cos(angle) * radius)));
        }
        verts.push(cx, cy);
        verts.push(ex, ey);
    }
    else {
        verts.push(sx, sy);
        verts.push(cx, cy);
        for (var i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {
            verts.push(cx + ((Math.sin(angle) * radius)), cy + ((Math.cos(angle) * radius)));
            verts.push(cx, cy);
        }
        verts.push(ex, ey);
        verts.push(cx, cy);
    }
    return segCount * 2;
}
/**
 * Builds a line to draw using the polygon method.
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output
 */
function buildNonNativeLine(graphicsData, graphicsGeometry) {
    var shape = graphicsData.shape;
    var points = graphicsData.points || shape.points.slice();
    var eps = graphicsGeometry.closePointEps;
    if (points.length === 0) {
        return;
    }
    // if the line width is an odd number add 0.5 to align to a whole pixel
    // commenting this out fixes #711 and #1620
    // if (graphicsData.lineWidth%2)
    // {
    //     for (i = 0; i < points.length; i++)
    //     {
    //         points[i] += 0.5;
    //     }
    // }
    var style = graphicsData.lineStyle;
    // get first and last point.. figure out the middle!
    var firstPoint = new Point(points[0], points[1]);
    var lastPoint = new Point(points[points.length - 2], points[points.length - 1]);
    var closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;
    var closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps
        && Math.abs(firstPoint.y - lastPoint.y) < eps;
    // if the first point is the last point - gonna have issues :)
    if (closedShape) {
        // need to clone as we are going to slightly modify the shape..
        points = points.slice();
        if (closedPath) {
            points.pop();
            points.pop();
            lastPoint.set(points[points.length - 2], points[points.length - 1]);
        }
        var midPointX = (firstPoint.x + lastPoint.x) * 0.5;
        var midPointY = (lastPoint.y + firstPoint.y) * 0.5;
        points.unshift(midPointX, midPointY);
        points.push(midPointX, midPointY);
    }
    var verts = graphicsGeometry.points;
    var length = points.length / 2;
    var indexCount = points.length;
    var indexStart = verts.length / 2;
    // Max. inner and outer width
    var width = style.width / 2;
    var widthSquared = width * width;
    var miterLimitSquared = style.miterLimit * style.miterLimit;
    /* Line segments of interest where (x1,y1) forms the corner. */
    var x0 = points[0];
    var y0 = points[1];
    var x1 = points[2];
    var y1 = points[3];
    var x2 = 0;
    var y2 = 0;
    /* perp[?](x|y) = the line normal with magnitude lineWidth. */
    var perpx = -(y0 - y1);
    var perpy = x0 - x1;
    var perp1x = 0;
    var perp1y = 0;
    var dist = Math.sqrt((perpx * perpx) + (perpy * perpy));
    perpx /= dist;
    perpy /= dist;
    perpx *= width;
    perpy *= width;
    var ratio = style.alignment; // 0.5;
    var innerWeight = (1 - ratio) * 2;
    var outerWeight = ratio * 2;
    if (!closedShape) {
        if (style.cap === LINE_CAP.ROUND) {
            indexCount += round(x0 - (perpx * (innerWeight - outerWeight) * 0.5), y0 - (perpy * (innerWeight - outerWeight) * 0.5), x0 - (perpx * innerWeight), y0 - (perpy * innerWeight), x0 + (perpx * outerWeight), y0 + (perpy * outerWeight), verts, true) + 2;
        }
        else if (style.cap === LINE_CAP.SQUARE) {
            indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, true, verts);
        }
    }
    // Push first point (below & above vertices)
    verts.push(x0 - (perpx * innerWeight), y0 - (perpy * innerWeight));
    verts.push(x0 + (perpx * outerWeight), y0 + (perpy * outerWeight));
    for (var i = 1; i < length - 1; ++i) {
        x0 = points[(i - 1) * 2];
        y0 = points[((i - 1) * 2) + 1];
        x1 = points[i * 2];
        y1 = points[(i * 2) + 1];
        x2 = points[(i + 1) * 2];
        y2 = points[((i + 1) * 2) + 1];
        perpx = -(y0 - y1);
        perpy = x0 - x1;
        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));
        perpx /= dist;
        perpy /= dist;
        perpx *= width;
        perpy *= width;
        perp1x = -(y1 - y2);
        perp1y = x1 - x2;
        dist = Math.sqrt((perp1x * perp1x) + (perp1y * perp1y));
        perp1x /= dist;
        perp1y /= dist;
        perp1x *= width;
        perp1y *= width;
        /* d[x|y](0|1) = the component displacement between points p(0,1|1,2) */
        var dx0 = x1 - x0;
        var dy0 = y0 - y1;
        var dx1 = x1 - x2;
        var dy1 = y2 - y1;
        /* +ve if internal angle < 90 degree, -ve if internal angle > 90 degree. */
        var dot = (dx0 * dx1) + (dy0 * dy1);
        /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */
        var cross = (dy0 * dx1) - (dy1 * dx0);
        var clockwise = (cross < 0);
        /* Going nearly parallel? */
        /* atan(0.001) ~= 0.001 rad ~= 0.057 degree */
        if (Math.abs(cross) < 0.001 * Math.abs(dot)) {
            verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));
            verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));
            /* 180 degree corner? */
            if (dot >= 0) {
                if (style.join === LINE_JOIN.ROUND) {
                    indexCount += round(x1, y1, x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight), verts, false) + 4;
                }
                else {
                    indexCount += 2;
                }
                verts.push(x1 - (perp1x * outerWeight), y1 - (perp1y * outerWeight));
                verts.push(x1 + (perp1x * innerWeight), y1 + (perp1y * innerWeight));
            }
            continue;
        }
        /* p[x|y] is the miter point. pdist is the distance between miter point and p1. */
        var c1 = ((-perpx + x0) * (-perpy + y1)) - ((-perpx + x1) * (-perpy + y0));
        var c2 = ((-perp1x + x2) * (-perp1y + y1)) - ((-perp1x + x1) * (-perp1y + y2));
        var px = ((dx0 * c2) - (dx1 * c1)) / cross;
        var py = ((dy1 * c1) - (dy0 * c2)) / cross;
        var pdist = ((px - x1) * (px - x1)) + ((py - y1) * (py - y1));
        /* Inner miter point */
        var imx = x1 + ((px - x1) * innerWeight);
        var imy = y1 + ((py - y1) * innerWeight);
        /* Outer miter point */
        var omx = x1 - ((px - x1) * outerWeight);
        var omy = y1 - ((py - y1) * outerWeight);
        /* Is the inside miter point too far away, creating a spike? */
        var smallerInsideSegmentSq = Math.min((dx0 * dx0) + (dy0 * dy0), (dx1 * dx1) + (dy1 * dy1));
        var insideWeight = clockwise ? innerWeight : outerWeight;
        var smallerInsideDiagonalSq = smallerInsideSegmentSq + (insideWeight * insideWeight * widthSquared);
        var insideMiterOk = pdist <= smallerInsideDiagonalSq;
        if (insideMiterOk) {
            if (style.join === LINE_JOIN.BEVEL || pdist / widthSquared > miterLimitSquared) {
                if (clockwise) /* rotating at inner angle */ {
                    verts.push(imx, imy); // inner miter point
                    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight)); // first segment's outer vertex
                    verts.push(imx, imy); // inner miter point
                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex
                }
                else /* rotating at outer angle */ {
                    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight)); // first segment's inner vertex
                    verts.push(omx, omy); // outer miter point
                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's outer vertex
                    verts.push(omx, omy); // outer miter point
                }
                indexCount += 2;
            }
            else if (style.join === LINE_JOIN.ROUND) {
                if (clockwise) /* arc is outside */ {
                    verts.push(imx, imy);
                    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));
                    indexCount += round(x1, y1, x1 + (perpx * outerWeight), y1 + (perpy * outerWeight), x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight), verts, true) + 4;
                    verts.push(imx, imy);
                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));
                }
                else /* arc is inside */ {
                    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));
                    verts.push(omx, omy);
                    indexCount += round(x1, y1, x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight), verts, false) + 4;
                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight));
                    verts.push(omx, omy);
                }
            }
            else {
                verts.push(imx, imy);
                verts.push(omx, omy);
            }
        }
        else // inside miter is NOT ok
         {
            verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight)); // first segment's inner vertex
            verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight)); // first segment's outer vertex
            if (style.join === LINE_JOIN.ROUND) {
                if (clockwise) /* arc is outside */ {
                    indexCount += round(x1, y1, x1 + (perpx * outerWeight), y1 + (perpy * outerWeight), x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight), verts, true) + 2;
                }
                else /* arc is inside */ {
                    indexCount += round(x1, y1, x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight), verts, false) + 2;
                }
            }
            else if (style.join === LINE_JOIN.MITER && pdist / widthSquared <= miterLimitSquared) {
                if (clockwise) {
                    verts.push(omx, omy); // inner miter point
                    verts.push(omx, omy); // inner miter point
                }
                else {
                    verts.push(imx, imy); // outer miter point
                    verts.push(imx, imy); // outer miter point
                }
                indexCount += 2;
            }
            verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's inner vertex
            verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex
            indexCount += 2;
        }
    }
    x0 = points[(length - 2) * 2];
    y0 = points[((length - 2) * 2) + 1];
    x1 = points[(length - 1) * 2];
    y1 = points[((length - 1) * 2) + 1];
    perpx = -(y0 - y1);
    perpy = x0 - x1;
    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));
    perpx /= dist;
    perpy /= dist;
    perpx *= width;
    perpy *= width;
    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));
    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));
    if (!closedShape) {
        if (style.cap === LINE_CAP.ROUND) {
            indexCount += round(x1 - (perpx * (innerWeight - outerWeight) * 0.5), y1 - (perpy * (innerWeight - outerWeight) * 0.5), x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), x1 + (perpx * outerWeight), y1 + (perpy * outerWeight), verts, false) + 2;
        }
        else if (style.cap === LINE_CAP.SQUARE) {
            indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, false, verts);
        }
    }
    var indices = graphicsGeometry.indices;
    var eps2 = GRAPHICS_CURVES.epsilon * GRAPHICS_CURVES.epsilon;
    // indices.push(indexStart);
    for (var i = indexStart; i < indexCount + indexStart - 2; ++i) {
        x0 = verts[(i * 2)];
        y0 = verts[(i * 2) + 1];
        x1 = verts[(i + 1) * 2];
        y1 = verts[((i + 1) * 2) + 1];
        x2 = verts[(i + 2) * 2];
        y2 = verts[((i + 2) * 2) + 1];
        /* Skip zero area triangles */
        if (Math.abs((x0 * (y1 - y2)) + (x1 * (y2 - y0)) + (x2 * (y0 - y1))) < eps2) {
            continue;
        }
        indices.push(i, i + 1, i + 2);
    }
}
/**
 * Builds a line to draw using the gl.drawArrays(gl.LINES) method
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output
 */
function buildNativeLine(graphicsData, graphicsGeometry) {
    var i = 0;
    var shape = graphicsData.shape;
    var points = graphicsData.points || shape.points;
    var closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;
    if (points.length === 0)
        { return; }
    var verts = graphicsGeometry.points;
    var indices = graphicsGeometry.indices;
    var length = points.length / 2;
    var startIndex = verts.length / 2;
    var currentIndex = startIndex;
    verts.push(points[0], points[1]);
    for (i = 1; i < length; i++) {
        verts.push(points[i * 2], points[(i * 2) + 1]);
        indices.push(currentIndex, currentIndex + 1);
        currentIndex++;
    }
    if (closedShape) {
        indices.push(currentIndex, startIndex);
    }
}
/**
 * Builds a line to draw
 *
 * Ignored from docs since it is not directly exposed.
 * @ignore
 * @private
 * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output
 */
function buildLine(graphicsData, graphicsGeometry) {
    if (graphicsData.lineStyle.native) {
        buildNativeLine(graphicsData, graphicsGeometry);
    }
    else {
        buildNonNativeLine(graphicsData, graphicsGeometry);
    }
}

/**
 * Utilities for arc curves.
 * @private
 */
var ArcUtils = /** @class */ (function () {
    function ArcUtils() {
    }
    /**
     * The arcTo() method creates an arc/curve between two tangents on the canvas.
     *
     * "borrowed" from https://code.google.com/p/fxcanvas/ - thanks google!
     * @private
     * @param x1 - The x-coordinate of the beginning of the arc
     * @param y1 - The y-coordinate of the beginning of the arc
     * @param x2 - The x-coordinate of the end of the arc
     * @param y2 - The y-coordinate of the end of the arc
     * @param radius - The radius of the arc
     * @param points -
     * @returns - If the arc length is valid, return center of circle, radius and other info otherwise `null`.
     */
    ArcUtils.curveTo = function (x1, y1, x2, y2, radius, points) {
        var fromX = points[points.length - 2];
        var fromY = points[points.length - 1];
        var a1 = fromY - y1;
        var b1 = fromX - x1;
        var a2 = y2 - y1;
        var b2 = x2 - x1;
        var mm = Math.abs((a1 * b2) - (b1 * a2));
        if (mm < 1.0e-8 || radius === 0) {
            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {
                points.push(x1, y1);
            }
            return null;
        }
        var dd = (a1 * a1) + (b1 * b1);
        var cc = (a2 * a2) + (b2 * b2);
        var tt = (a1 * a2) + (b1 * b2);
        var k1 = radius * Math.sqrt(dd) / mm;
        var k2 = radius * Math.sqrt(cc) / mm;
        var j1 = k1 * tt / dd;
        var j2 = k2 * tt / cc;
        var cx = (k1 * b2) + (k2 * b1);
        var cy = (k1 * a2) + (k2 * a1);
        var px = b1 * (k2 + j1);
        var py = a1 * (k2 + j1);
        var qx = b2 * (k1 + j2);
        var qy = a2 * (k1 + j2);
        var startAngle = Math.atan2(py - cy, px - cx);
        var endAngle = Math.atan2(qy - cy, qx - cx);
        return {
            cx: (cx + x1),
            cy: (cy + y1),
            radius: radius,
            startAngle: startAngle,
            endAngle: endAngle,
            anticlockwise: (b1 * a2 > b2 * a1),
        };
    };
    /* eslint-disable max-len */
    /**
     * The arc method creates an arc/curve (used to create circles, or parts of circles).
     * @private
     * @param _startX - Start x location of arc
     * @param _startY - Start y location of arc
     * @param cx - The x-coordinate of the center of the circle
     * @param cy - The y-coordinate of the center of the circle
     * @param radius - The radius of the circle
     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position
     *  of the arc's circle)
     * @param endAngle - The ending angle, in radians
     * @param _anticlockwise - Specifies whether the drawing should be
     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true
     *  indicates counter-clockwise.
     * @param points - Collection of points to add to
     */
    ArcUtils.arc = function (_startX, _startY, cx, cy, radius, startAngle, endAngle, _anticlockwise, points) {
        var sweep = endAngle - startAngle;
        var n = GRAPHICS_CURVES._segmentsCount(Math.abs(sweep) * radius, Math.ceil(Math.abs(sweep) / PI_2) * 40);
        var theta = (sweep) / (n * 2);
        var theta2 = theta * 2;
        var cTheta = Math.cos(theta);
        var sTheta = Math.sin(theta);
        var segMinus = n - 1;
        var remainder = (segMinus % 1) / segMinus;
        for (var i = 0; i <= segMinus; ++i) {
            var real = i + (remainder * i);
            var angle = ((theta) + startAngle + (theta2 * real));
            var c = Math.cos(angle);
            var s = -Math.sin(angle);
            points.push((((cTheta * c) + (sTheta * s)) * radius) + cx, (((cTheta * -s) + (sTheta * c)) * radius) + cy);
        }
    };
    return ArcUtils;
}());

/**
 * Utilities for bezier curves
 * @private
 */
var BezierUtils = /** @class */ (function () {
    function BezierUtils() {
    }
    /**
     * Calculate length of bezier curve.
     * Analytical solution is impossible, since it involves an integral that does not integrate in general.
     * Therefore numerical solution is used.
     * @private
     * @param fromX - Starting point x
     * @param fromY - Starting point y
     * @param cpX - Control point x
     * @param cpY - Control point y
     * @param cpX2 - Second Control point x
     * @param cpY2 - Second Control point y
     * @param toX - Destination point x
     * @param toY - Destination point y
     * @returns - Length of bezier curve
     */
    BezierUtils.curveLength = function (fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {
        var n = 10;
        var result = 0.0;
        var t = 0.0;
        var t2 = 0.0;
        var t3 = 0.0;
        var nt = 0.0;
        var nt2 = 0.0;
        var nt3 = 0.0;
        var x = 0.0;
        var y = 0.0;
        var dx = 0.0;
        var dy = 0.0;
        var prevX = fromX;
        var prevY = fromY;
        for (var i = 1; i <= n; ++i) {
            t = i / n;
            t2 = t * t;
            t3 = t2 * t;
            nt = (1.0 - t);
            nt2 = nt * nt;
            nt3 = nt2 * nt;
            x = (nt3 * fromX) + (3.0 * nt2 * t * cpX) + (3.0 * nt * t2 * cpX2) + (t3 * toX);
            y = (nt3 * fromY) + (3.0 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);
            dx = prevX - x;
            dy = prevY - y;
            prevX = x;
            prevY = y;
            result += Math.sqrt((dx * dx) + (dy * dy));
        }
        return result;
    };
    /**
     * Calculate the points for a bezier curve and then draws it.
     *
     * Ignored from docs since it is not directly exposed.
     * @ignore
     * @param cpX - Control point x
     * @param cpY - Control point y
     * @param cpX2 - Second Control point x
     * @param cpY2 - Second Control point y
     * @param toX - Destination point x
     * @param toY - Destination point y
     * @param points - Path array to push points into
     */
    BezierUtils.curveTo = function (cpX, cpY, cpX2, cpY2, toX, toY, points) {
        var fromX = points[points.length - 2];
        var fromY = points[points.length - 1];
        points.length -= 2;
        var n = GRAPHICS_CURVES._segmentsCount(BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY));
        var dt = 0;
        var dt2 = 0;
        var dt3 = 0;
        var t2 = 0;
        var t3 = 0;
        points.push(fromX, fromY);
        for (var i = 1, j = 0; i <= n; ++i) {
            j = i / n;
            dt = (1 - j);
            dt2 = dt * dt;
            dt3 = dt2 * dt;
            t2 = j * j;
            t3 = t2 * j;
            points.push((dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX), (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY));
        }
    };
    return BezierUtils;
}());

/**
 * Utilities for quadratic curves.
 * @private
 */
var QuadraticUtils = /** @class */ (function () {
    function QuadraticUtils() {
    }
    /**
     * Calculate length of quadratic curve
     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}
     * for the detailed explanation of math behind this.
     * @private
     * @param fromX - x-coordinate of curve start point
     * @param fromY - y-coordinate of curve start point
     * @param cpX - x-coordinate of curve control point
     * @param cpY - y-coordinate of curve control point
     * @param toX - x-coordinate of curve end point
     * @param toY - y-coordinate of curve end point
     * @returns - Length of quadratic curve
     */
    QuadraticUtils.curveLength = function (fromX, fromY, cpX, cpY, toX, toY) {
        var ax = fromX - (2.0 * cpX) + toX;
        var ay = fromY - (2.0 * cpY) + toY;
        var bx = (2.0 * cpX) - (2.0 * fromX);
        var by = (2.0 * cpY) - (2.0 * fromY);
        var a = 4.0 * ((ax * ax) + (ay * ay));
        var b = 4.0 * ((ax * bx) + (ay * by));
        var c = (bx * bx) + (by * by);
        var s = 2.0 * Math.sqrt(a + b + c);
        var a2 = Math.sqrt(a);
        var a32 = 2.0 * a * a2;
        var c2 = 2.0 * Math.sqrt(c);
        var ba = b / a2;
        return ((a32 * s)
            + (a2 * b * (s - c2))
            + (((4.0 * c * a) - (b * b))
                * Math.log(((2.0 * a2) + ba + s) / (ba + c2)))) / (4.0 * a32);
    };
    /**
     * Calculate the points for a quadratic bezier curve and then draws it.
     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
     * @private
     * @param cpX - Control point x
     * @param cpY - Control point y
     * @param toX - Destination point x
     * @param toY - Destination point y
     * @param points - Points to add segments to.
     */
    QuadraticUtils.curveTo = function (cpX, cpY, toX, toY, points) {
        var fromX = points[points.length - 2];
        var fromY = points[points.length - 1];
        var n = GRAPHICS_CURVES._segmentsCount(QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY));
        var xa = 0;
        var ya = 0;
        for (var i = 1; i <= n; ++i) {
            var j = i / n;
            xa = fromX + ((cpX - fromX) * j);
            ya = fromY + ((cpY - fromY) * j);
            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j), ya + (((cpY + ((toY - cpY) * j)) - ya) * j));
        }
    };
    return QuadraticUtils;
}());

/**
 * A structure to hold interim batch objects for Graphics.
 * @memberof PIXI.graphicsUtils
 */
var BatchPart = /** @class */ (function () {
    function BatchPart() {
        this.reset();
    }
    /**
     * Begin batch part.
     * @param style
     * @param startIndex
     * @param attribStart
     */
    BatchPart.prototype.begin = function (style, startIndex, attribStart) {
        this.reset();
        this.style = style;
        this.start = startIndex;
        this.attribStart = attribStart;
    };
    /**
     * End batch part.
     * @param endIndex
     * @param endAttrib
     */
    BatchPart.prototype.end = function (endIndex, endAttrib) {
        this.attribSize = endAttrib - this.attribStart;
        this.size = endIndex - this.start;
    };
    BatchPart.prototype.reset = function () {
        this.style = null;
        this.size = 0;
        this.start = 0;
        this.attribStart = 0;
        this.attribSize = 0;
    };
    return BatchPart;
}());

/**
 * Generalized convenience utilities for Graphics.
 * @namespace graphicsUtils
 * @memberof PIXI
 */
var _a;
/**
 * Map of fill commands for each shape type.
 * @memberof PIXI.graphicsUtils
 * @member {object} FILL_COMMANDS
 */
var FILL_COMMANDS = (_a = {},
    _a[SHAPES.POLY] = buildPoly,
    _a[SHAPES.CIRC] = buildCircle,
    _a[SHAPES.ELIP] = buildCircle,
    _a[SHAPES.RECT] = buildRectangle,
    _a[SHAPES.RREC] = buildRoundedRectangle,
    _a);
/**
 * Batch pool, stores unused batches for preventing allocations.
 * @memberof PIXI.graphicsUtils
 * @member {Array<PIXI.graphicsUtils.BatchPart>} BATCH_POOL
 */
var BATCH_POOL = [];
/**
 * Draw call pool, stores unused draw calls for preventing allocations.
 * @memberof PIXI.graphicsUtils
 * @member {Array<PIXI.BatchDrawCall>} DRAW_CALL_POOL
 */
var DRAW_CALL_POOL = [];

/**
 * A class to contain data useful for Graphics objects
 * @memberof PIXI
 */
var GraphicsData = /** @class */ (function () {
    /**
     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.
     * @param fillStyle - the width of the line to draw
     * @param lineStyle - the color of the line to draw
     * @param matrix - Transform matrix
     */
    function GraphicsData(shape, fillStyle, lineStyle, matrix) {
        if (fillStyle === void 0) { fillStyle = null; }
        if (lineStyle === void 0) { lineStyle = null; }
        if (matrix === void 0) { matrix = null; }
        /** The collection of points. */
        this.points = [];
        /** The collection of holes. */
        this.holes = [];
        this.shape = shape;
        this.lineStyle = lineStyle;
        this.fillStyle = fillStyle;
        this.matrix = matrix;
        this.type = shape.type;
    }
    /**
     * Creates a new GraphicsData object with the same values as this one.
     * @returns - Cloned GraphicsData object
     */
    GraphicsData.prototype.clone = function () {
        return new GraphicsData(this.shape, this.fillStyle, this.lineStyle, this.matrix);
    };
    /** Destroys the Graphics data. */
    GraphicsData.prototype.destroy = function () {
        this.shape = null;
        this.holes.length = 0;
        this.holes = null;
        this.points.length = 0;
        this.points = null;
        this.lineStyle = null;
        this.fillStyle = null;
    };
    return GraphicsData;
}());

var tmpPoint = new Point();
/**
 * The Graphics class contains methods used to draw primitive shapes such as lines, circles and
 * rectangles to the display, and to color and fill them.
 *
 * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive
 * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.
 * @memberof PIXI
 */
var GraphicsGeometry = /** @class */ (function (_super) {
    graphics_extends(GraphicsGeometry, _super);
    // eslint-disable-next-line @typescript-eslint/no-useless-constructor
    function GraphicsGeometry() {
        var _this = _super.call(this) || this;
        /** Minimal distance between points that are considered different. Affects line tesselation. */
        _this.closePointEps = 1e-4;
        /** Padding to add to the bounds. */
        _this.boundsPadding = 0;
        _this.uvsFloat32 = null;
        _this.indicesUint16 = null;
        _this.batchable = false;
        /** An array of points to draw, 2 numbers per point */
        _this.points = [];
        /** The collection of colors */
        _this.colors = [];
        /** The UVs collection */
        _this.uvs = [];
        /** The indices of the vertices */
        _this.indices = [];
        /** Reference to the texture IDs. */
        _this.textureIds = [];
        /**
         * The collection of drawn shapes.
         * @member {PIXI.GraphicsData[]}
         */
        _this.graphicsData = [];
        /**
         * List of current draw calls drived from the batches.
         * @member {PIXI.BatchDrawCall[]}
         */
        _this.drawCalls = [];
        /** Batches need to regenerated if the geometry is updated. */
        _this.batchDirty = -1;
        /**
         * Intermediate abstract format sent to batch system.
         * Can be converted to drawCalls or to batchable objects.
         * @member {PIXI.graphicsUtils.BatchPart[]}
         */
        _this.batches = [];
        /** Used to detect if the graphics object has changed. */
        _this.dirty = 0;
        /** Used to check if the cache is dirty. */
        _this.cacheDirty = -1;
        /** Used to detect if we cleared the graphicsData. */
        _this.clearDirty = 0;
        /** Index of the last batched shape in the stack of calls. */
        _this.shapeIndex = 0;
        /** Cached bounds. */
        _this._bounds = new Bounds();
        /** The bounds dirty flag. */
        _this.boundsDirty = -1;
        return _this;
    }
    Object.defineProperty(GraphicsGeometry.prototype, "bounds", {
        /**
         * Get the current bounds of the graphic geometry.
         * @readonly
         */
        get: function () {
            this.updateBatches();
            if (this.boundsDirty !== this.dirty) {
                this.boundsDirty = this.dirty;
                this.calculateBounds();
            }
            return this._bounds;
        },
        enumerable: false,
        configurable: true
    });
    /** Call if you changed graphicsData manually. Empties all batch buffers. */
    GraphicsGeometry.prototype.invalidate = function () {
        this.boundsDirty = -1;
        this.dirty++;
        this.batchDirty++;
        this.shapeIndex = 0;
        this.points.length = 0;
        this.colors.length = 0;
        this.uvs.length = 0;
        this.indices.length = 0;
        this.textureIds.length = 0;
        for (var i = 0; i < this.drawCalls.length; i++) {
            this.drawCalls[i].texArray.clear();
            DRAW_CALL_POOL.push(this.drawCalls[i]);
        }
        this.drawCalls.length = 0;
        for (var i = 0; i < this.batches.length; i++) {
            var batchPart = this.batches[i];
            batchPart.reset();
            BATCH_POOL.push(batchPart);
        }
        this.batches.length = 0;
    };
    /**
     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
     * @returns - This GraphicsGeometry object. Good for chaining method calls
     */
    GraphicsGeometry.prototype.clear = function () {
        if (this.graphicsData.length > 0) {
            this.invalidate();
            this.clearDirty++;
            this.graphicsData.length = 0;
        }
        return this;
    };
    /**
     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.
     * @param fillStyle - Defines style of the fill.
     * @param lineStyle - Defines style of the lines.
     * @param matrix - Transform applied to the points of the shape.
     * @returns - Returns geometry for chaining.
     */
    GraphicsGeometry.prototype.drawShape = function (shape, fillStyle, lineStyle, matrix) {
        if (fillStyle === void 0) { fillStyle = null; }
        if (lineStyle === void 0) { lineStyle = null; }
        if (matrix === void 0) { matrix = null; }
        var data = new GraphicsData(shape, fillStyle, lineStyle, matrix);
        this.graphicsData.push(data);
        this.dirty++;
        return this;
    };
    /**
     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.
     * @param matrix - Transform applied to the points of the shape.
     * @returns - Returns geometry for chaining.
     */
    GraphicsGeometry.prototype.drawHole = function (shape, matrix) {
        if (matrix === void 0) { matrix = null; }
        if (!this.graphicsData.length) {
            return null;
        }
        var data = new GraphicsData(shape, null, null, matrix);
        var lastShape = this.graphicsData[this.graphicsData.length - 1];
        data.lineStyle = lastShape.lineStyle;
        lastShape.holes.push(data);
        this.dirty++;
        return this;
    };
    /** Destroys the GraphicsGeometry object. */
    GraphicsGeometry.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        // destroy each of the GraphicsData objects
        for (var i = 0; i < this.graphicsData.length; ++i) {
            this.graphicsData[i].destroy();
        }
        this.points.length = 0;
        this.points = null;
        this.colors.length = 0;
        this.colors = null;
        this.uvs.length = 0;
        this.uvs = null;
        this.indices.length = 0;
        this.indices = null;
        this.indexBuffer.destroy();
        this.indexBuffer = null;
        this.graphicsData.length = 0;
        this.graphicsData = null;
        this.drawCalls.length = 0;
        this.drawCalls = null;
        this.batches.length = 0;
        this.batches = null;
        this._bounds = null;
    };
    /**
     * Check to see if a point is contained within this geometry.
     * @param point - Point to check if it's contained.
     * @returns {boolean} `true` if the point is contained within geometry.
     */
    GraphicsGeometry.prototype.containsPoint = function (point) {
        var graphicsData = this.graphicsData;
        for (var i = 0; i < graphicsData.length; ++i) {
            var data = graphicsData[i];
            if (!data.fillStyle.visible) {
                continue;
            }
            // only deal with fills..
            if (data.shape) {
                if (data.matrix) {
                    data.matrix.applyInverse(point, tmpPoint);
                }
                else {
                    tmpPoint.copyFrom(point);
                }
                if (data.shape.contains(tmpPoint.x, tmpPoint.y)) {
                    var hitHole = false;
                    if (data.holes) {
                        for (var i_1 = 0; i_1 < data.holes.length; i_1++) {
                            var hole = data.holes[i_1];
                            if (hole.shape.contains(tmpPoint.x, tmpPoint.y)) {
                                hitHole = true;
                                break;
                            }
                        }
                    }
                    if (!hitHole) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    /**
     * Generates intermediate batch data. Either gets converted to drawCalls
     * or used to convert to batch objects directly by the Graphics object.
     */
    GraphicsGeometry.prototype.updateBatches = function () {
        if (!this.graphicsData.length) {
            this.batchable = true;
            return;
        }
        if (!this.validateBatching()) {
            return;
        }
        this.cacheDirty = this.dirty;
        var uvs = this.uvs;
        var graphicsData = this.graphicsData;
        var batchPart = null;
        var currentStyle = null;
        if (this.batches.length > 0) {
            batchPart = this.batches[this.batches.length - 1];
            currentStyle = batchPart.style;
        }
        for (var i = this.shapeIndex; i < graphicsData.length; i++) {
            this.shapeIndex++;
            var data = graphicsData[i];
            var fillStyle = data.fillStyle;
            var lineStyle = data.lineStyle;
            var command = FILL_COMMANDS[data.type];
            // build out the shapes points..
            command.build(data);
            if (data.matrix) {
                this.transformPoints(data.points, data.matrix);
            }
            if (fillStyle.visible || lineStyle.visible) {
                this.processHoles(data.holes);
            }
            for (var j = 0; j < 2; j++) {
                var style = (j === 0) ? fillStyle : lineStyle;
                if (!style.visible)
                    { continue; }
                var nextTexture = style.texture.baseTexture;
                var index_1 = this.indices.length;
                var attribIndex = this.points.length / 2;
                nextTexture.wrapMode = WRAP_MODES.REPEAT;
                if (j === 0) {
                    this.processFill(data);
                }
                else {
                    this.processLine(data);
                }
                var size = (this.points.length / 2) - attribIndex;
                if (size === 0)
                    { continue; }
                // close batch if style is different
                if (batchPart && !this._compareStyles(currentStyle, style)) {
                    batchPart.end(index_1, attribIndex);
                    batchPart = null;
                }
                // spawn new batch if its first batch or previous was closed
                if (!batchPart) {
                    batchPart = BATCH_POOL.pop() || new BatchPart();
                    batchPart.begin(style, index_1, attribIndex);
                    this.batches.push(batchPart);
                    currentStyle = style;
                }
                this.addUvs(this.points, uvs, style.texture, attribIndex, size, style.matrix);
            }
        }
        var index = this.indices.length;
        var attrib = this.points.length / 2;
        if (batchPart) {
            batchPart.end(index, attrib);
        }
        if (this.batches.length === 0) {
            // there are no visible styles in GraphicsData
            // its possible that someone wants Graphics just for the bounds
            this.batchable = true;
            return;
        }
        var need32 = attrib > 0xffff;
        // prevent allocation when length is same as buffer
        if (this.indicesUint16 && this.indices.length === this.indicesUint16.length
            && need32 === (this.indicesUint16.BYTES_PER_ELEMENT > 2)) {
            this.indicesUint16.set(this.indices);
        }
        else {
            this.indicesUint16 = need32 ? new Uint32Array(this.indices) : new Uint16Array(this.indices);
        }
        // TODO make this a const..
        this.batchable = this.isBatchable();
        if (this.batchable) {
            this.packBatches();
        }
        else {
            this.buildDrawCalls();
        }
    };
    /**
     * Affinity check
     * @param styleA
     * @param styleB
     */
    GraphicsGeometry.prototype._compareStyles = function (styleA, styleB) {
        if (!styleA || !styleB) {
            return false;
        }
        if (styleA.texture.baseTexture !== styleB.texture.baseTexture) {
            return false;
        }
        if (styleA.color + styleA.alpha !== styleB.color + styleB.alpha) {
            return false;
        }
        if (!!styleA.native !== !!styleB.native) {
            return false;
        }
        return true;
    };
    /** Test geometry for batching process. */
    GraphicsGeometry.prototype.validateBatching = function () {
        if (this.dirty === this.cacheDirty || !this.graphicsData.length) {
            return false;
        }
        for (var i = 0, l = this.graphicsData.length; i < l; i++) {
            var data = this.graphicsData[i];
            var fill = data.fillStyle;
            var line = data.lineStyle;
            if (fill && !fill.texture.baseTexture.valid)
                { return false; }
            if (line && !line.texture.baseTexture.valid)
                { return false; }
        }
        return true;
    };
    /** Offset the indices so that it works with the batcher. */
    GraphicsGeometry.prototype.packBatches = function () {
        this.batchDirty++;
        this.uvsFloat32 = new Float32Array(this.uvs);
        var batches = this.batches;
        for (var i = 0, l = batches.length; i < l; i++) {
            var batch = batches[i];
            for (var j = 0; j < batch.size; j++) {
                var index = batch.start + j;
                this.indicesUint16[index] = this.indicesUint16[index] - batch.attribStart;
            }
        }
    };
    /**
     * Checks to see if this graphics geometry can be batched.
     * Currently it needs to be small enough and not contain any native lines.
     */
    GraphicsGeometry.prototype.isBatchable = function () {
        // prevent heavy mesh batching
        if (this.points.length > 0xffff * 2) {
            return false;
        }
        var batches = this.batches;
        for (var i = 0; i < batches.length; i++) {
            if (batches[i].style.native) {
                return false;
            }
        }
        return (this.points.length < GraphicsGeometry.BATCHABLE_SIZE * 2);
    };
    /** Converts intermediate batches data to drawCalls. */
    GraphicsGeometry.prototype.buildDrawCalls = function () {
        var TICK = ++BaseTexture._globalBatch;
        for (var i = 0; i < this.drawCalls.length; i++) {
            this.drawCalls[i].texArray.clear();
            DRAW_CALL_POOL.push(this.drawCalls[i]);
        }
        this.drawCalls.length = 0;
        var colors = this.colors;
        var textureIds = this.textureIds;
        var currentGroup = DRAW_CALL_POOL.pop();
        if (!currentGroup) {
            currentGroup = new BatchDrawCall();
            currentGroup.texArray = new BatchTextureArray();
        }
        currentGroup.texArray.count = 0;
        currentGroup.start = 0;
        currentGroup.size = 0;
        currentGroup.type = DRAW_MODES.TRIANGLES;
        var textureCount = 0;
        var currentTexture = null;
        var textureId = 0;
        var native = false;
        var drawMode = DRAW_MODES.TRIANGLES;
        var index = 0;
        this.drawCalls.push(currentGroup);
        // TODO - this can be simplified
        for (var i = 0; i < this.batches.length; i++) {
            var data = this.batches[i];
            // TODO add some full on MAX_TEXTURE CODE..
            var MAX_TEXTURES = 8;
            // Forced cast for checking `native` without errors
            var style = data.style;
            var nextTexture = style.texture.baseTexture;
            if (native !== !!style.native) {
                native = !!style.native;
                drawMode = native ? DRAW_MODES.LINES : DRAW_MODES.TRIANGLES;
                // force the batch to break!
                currentTexture = null;
                textureCount = MAX_TEXTURES;
                TICK++;
            }
            if (currentTexture !== nextTexture) {
                currentTexture = nextTexture;
                if (nextTexture._batchEnabled !== TICK) {
                    if (textureCount === MAX_TEXTURES) {
                        TICK++;
                        textureCount = 0;
                        if (currentGroup.size > 0) {
                            currentGroup = DRAW_CALL_POOL.pop();
                            if (!currentGroup) {
                                currentGroup = new BatchDrawCall();
                                currentGroup.texArray = new BatchTextureArray();
                            }
                            this.drawCalls.push(currentGroup);
                        }
                        currentGroup.start = index;
                        currentGroup.size = 0;
                        currentGroup.texArray.count = 0;
                        currentGroup.type = drawMode;
                    }
                    // TODO add this to the render part..
                    // Hack! Because texture has protected `touched`
                    nextTexture.touched = 1; // touch;
                    nextTexture._batchEnabled = TICK;
                    nextTexture._batchLocation = textureCount;
                    nextTexture.wrapMode = WRAP_MODES.REPEAT;
                    currentGroup.texArray.elements[currentGroup.texArray.count++] = nextTexture;
                    textureCount++;
                }
            }
            currentGroup.size += data.size;
            index += data.size;
            textureId = nextTexture._batchLocation;
            this.addColors(colors, style.color, style.alpha, data.attribSize, data.attribStart);
            this.addTextureIds(textureIds, textureId, data.attribSize, data.attribStart);
        }
        BaseTexture._globalBatch = TICK;
        // upload..
        // merge for now!
        this.packAttributes();
    };
    /** Packs attributes to single buffer. */
    GraphicsGeometry.prototype.packAttributes = function () {
        var verts = this.points;
        var uvs = this.uvs;
        var colors = this.colors;
        var textureIds = this.textureIds;
        // verts are 2 positions.. so we * by 3 as there are 6 properties.. then 4 cos its bytes
        var glPoints = new ArrayBuffer(verts.length * 3 * 4);
        var f32 = new Float32Array(glPoints);
        var u32 = new Uint32Array(glPoints);
        var p = 0;
        for (var i = 0; i < verts.length / 2; i++) {
            f32[p++] = verts[i * 2];
            f32[p++] = verts[(i * 2) + 1];
            f32[p++] = uvs[i * 2];
            f32[p++] = uvs[(i * 2) + 1];
            u32[p++] = colors[i];
            f32[p++] = textureIds[i];
        }
        this._buffer.update(glPoints);
        this._indexBuffer.update(this.indicesUint16);
    };
    /**
     * Process fill part of Graphics.
     * @param data
     */
    GraphicsGeometry.prototype.processFill = function (data) {
        if (data.holes.length) {
            buildPoly.triangulate(data, this);
        }
        else {
            var command = FILL_COMMANDS[data.type];
            command.triangulate(data, this);
        }
    };
    /**
     * Process line part of Graphics.
     * @param data
     */
    GraphicsGeometry.prototype.processLine = function (data) {
        buildLine(data, this);
        for (var i = 0; i < data.holes.length; i++) {
            buildLine(data.holes[i], this);
        }
    };
    /**
     * Process the holes data.
     * @param holes
     */
    GraphicsGeometry.prototype.processHoles = function (holes) {
        for (var i = 0; i < holes.length; i++) {
            var hole = holes[i];
            var command = FILL_COMMANDS[hole.type];
            command.build(hole);
            if (hole.matrix) {
                this.transformPoints(hole.points, hole.matrix);
            }
        }
    };
    /** Update the local bounds of the object. Expensive to use performance-wise. */
    GraphicsGeometry.prototype.calculateBounds = function () {
        var bounds = this._bounds;
        bounds.clear();
        bounds.addVertexData(this.points, 0, this.points.length);
        bounds.pad(this.boundsPadding, this.boundsPadding);
    };
    /**
     * Transform points using matrix.
     * @param points - Points to transform
     * @param matrix - Transform matrix
     */
    GraphicsGeometry.prototype.transformPoints = function (points, matrix) {
        for (var i = 0; i < points.length / 2; i++) {
            var x = points[(i * 2)];
            var y = points[(i * 2) + 1];
            points[(i * 2)] = (matrix.a * x) + (matrix.c * y) + matrix.tx;
            points[(i * 2) + 1] = (matrix.b * x) + (matrix.d * y) + matrix.ty;
        }
    };
    /**
     * Add colors.
     * @param colors - List of colors to add to
     * @param color - Color to add
     * @param alpha - Alpha to use
     * @param size - Number of colors to add
     * @param offset
     */
    GraphicsGeometry.prototype.addColors = function (colors, color, alpha, size, offset) {
        if (offset === void 0) { offset = 0; }
        // TODO use the premultiply bits Ivan added
        var rgb = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);
        var rgba = premultiplyTint(rgb, alpha);
        colors.length = Math.max(colors.length, offset + size);
        for (var i = 0; i < size; i++) {
            colors[offset + i] = rgba;
        }
    };
    /**
     * Add texture id that the shader/fragment wants to use.
     * @param textureIds
     * @param id
     * @param size
     * @param offset
     */
    GraphicsGeometry.prototype.addTextureIds = function (textureIds, id, size, offset) {
        if (offset === void 0) { offset = 0; }
        textureIds.length = Math.max(textureIds.length, offset + size);
        for (var i = 0; i < size; i++) {
            textureIds[offset + i] = id;
        }
    };
    /**
     * Generates the UVs for a shape.
     * @param verts - Vertices
     * @param uvs - UVs
     * @param texture - Reference to Texture
     * @param start - Index buffer start index.
     * @param size - The size/length for index buffer.
     * @param matrix - Optional transform for all points.
     */
    GraphicsGeometry.prototype.addUvs = function (verts, uvs, texture, start, size, matrix) {
        if (matrix === void 0) { matrix = null; }
        var index = 0;
        var uvsStart = uvs.length;
        var frame = texture.frame;
        while (index < size) {
            var x = verts[(start + index) * 2];
            var y = verts[((start + index) * 2) + 1];
            if (matrix) {
                var nx = (matrix.a * x) + (matrix.c * y) + matrix.tx;
                y = (matrix.b * x) + (matrix.d * y) + matrix.ty;
                x = nx;
            }
            index++;
            uvs.push(x / frame.width, y / frame.height);
        }
        var baseTexture = texture.baseTexture;
        if (frame.width < baseTexture.width
            || frame.height < baseTexture.height) {
            this.adjustUvs(uvs, texture, uvsStart, size);
        }
    };
    /**
     * Modify uvs array according to position of texture region
     * Does not work with rotated or trimmed textures
     * @param uvs - array
     * @param texture - region
     * @param start - starting index for uvs
     * @param size - how many points to adjust
     */
    GraphicsGeometry.prototype.adjustUvs = function (uvs, texture, start, size) {
        var baseTexture = texture.baseTexture;
        var eps = 1e-6;
        var finish = start + (size * 2);
        var frame = texture.frame;
        var scaleX = frame.width / baseTexture.width;
        var scaleY = frame.height / baseTexture.height;
        var offsetX = frame.x / frame.width;
        var offsetY = frame.y / frame.height;
        var minX = Math.floor(uvs[start] + eps);
        var minY = Math.floor(uvs[start + 1] + eps);
        for (var i = start + 2; i < finish; i += 2) {
            minX = Math.min(minX, Math.floor(uvs[i] + eps));
            minY = Math.min(minY, Math.floor(uvs[i + 1] + eps));
        }
        offsetX -= minX;
        offsetY -= minY;
        for (var i = start; i < finish; i += 2) {
            uvs[i] = (uvs[i] + offsetX) * scaleX;
            uvs[i + 1] = (uvs[i + 1] + offsetY) * scaleY;
        }
    };
    /**
     * The maximum number of points to consider an object "batchable",
     * able to be batched by the renderer's batch system.
\
     */
    GraphicsGeometry.BATCHABLE_SIZE = 100;
    return GraphicsGeometry;
}(BatchGeometry));

/**
 * Represents the line style for Graphics.
 * @memberof PIXI
 */
var LineStyle = /** @class */ (function (_super) {
    graphics_extends(LineStyle, _super);
    function LineStyle() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** The width (thickness) of any lines drawn. */
        _this.width = 0;
        /** The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner). WebGL only. */
        _this.alignment = 0.5;
        /** If true the lines will be draw using LINES instead of TRIANGLE_STRIP. */
        _this.native = false;
        /**
         * Line cap style.
         * @member {PIXI.LINE_CAP}
         * @default PIXI.LINE_CAP.BUTT
         */
        _this.cap = LINE_CAP.BUTT;
        /**
         * Line join style.
         * @member {PIXI.LINE_JOIN}
         * @default PIXI.LINE_JOIN.MITER
         */
        _this.join = LINE_JOIN.MITER;
        /** Miter limit. */
        _this.miterLimit = 10;
        return _this;
    }
    /** Clones the object. */
    LineStyle.prototype.clone = function () {
        var obj = new LineStyle();
        obj.color = this.color;
        obj.alpha = this.alpha;
        obj.texture = this.texture;
        obj.matrix = this.matrix;
        obj.visible = this.visible;
        obj.width = this.width;
        obj.alignment = this.alignment;
        obj.native = this.native;
        obj.cap = this.cap;
        obj.join = this.join;
        obj.miterLimit = this.miterLimit;
        return obj;
    };
    /** Reset the line style to default. */
    LineStyle.prototype.reset = function () {
        _super.prototype.reset.call(this);
        // Override default line style color
        this.color = 0x0;
        this.alignment = 0.5;
        this.width = 0;
        this.native = false;
    };
    return LineStyle;
}(FillStyle));

var temp = new Float32Array(3);
// a default shaders map used by graphics..
var DEFAULT_SHADERS = {};
/**
 * The Graphics class is primarily used to render primitive shapes such as lines, circles and
 * rectangles to the display, and to color and fill them.  However, you can also use a Graphics
 * object to build a list of primitives to use as a mask, or as a complex hitArea.
 *
 * Please note that due to legacy naming conventions, the behavior of some functions in this class
 * can be confusing.  Each call to `drawRect()`, `drawPolygon()`, etc. actually stores that primitive
 * in the Geometry class's GraphicsGeometry object for later use in rendering or hit testing - the
 * functions do not directly draw anything to the screen.  Similarly, the `clear()` function doesn't
 * change the screen, it simply resets the list of primitives, which can be useful if you want to
 * rebuild the contents of an existing Graphics object.
 *
 * Once a GraphicsGeometry list is built, you can re-use it in other Geometry objects as
 * an optimization, by passing it into a new Geometry object's constructor.  Because of this
 * ability, it's important to call `destroy()` on Geometry objects once you are done with them, to
 * properly dereference each GraphicsGeometry and prevent memory leaks.
 * @memberof PIXI
 */
var Graphics = /** @class */ (function (_super) {
    graphics_extends(Graphics, _super);
    /**
     * @param geometry - Geometry to use, if omitted will create a new GraphicsGeometry instance.
     */
    function Graphics(geometry) {
        if (geometry === void 0) { geometry = null; }
        var _this = _super.call(this) || this;
        /**
         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.
         * Can be shared between multiple Graphics objects.
         */
        _this.shader = null;
        /** Renderer plugin for batching */
        _this.pluginName = 'batch';
        /**
         * Current path
         * @readonly
         */
        _this.currentPath = null;
        /** A collections of batches! These can be drawn by the renderer batch system. */
        _this.batches = [];
        /** Update dirty for limiting calculating tints for batches. */
        _this.batchTint = -1;
        /** Update dirty for limiting calculating batches.*/
        _this.batchDirty = -1;
        /** Copy of the object vertex data. */
        _this.vertexData = null;
        /** Current fill style. */
        _this._fillStyle = new FillStyle();
        /** Current line style. */
        _this._lineStyle = new LineStyle();
        /** Current shape transform matrix. */
        _this._matrix = null;
        /** Current hole mode is enabled. */
        _this._holeMode = false;
        /**
         * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,
         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.
         */
        _this.state = State.for2d();
        _this._geometry = geometry || new GraphicsGeometry();
        _this._geometry.refCount++;
        /**
         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.
         * This is useful if your graphics element does not change often, as it will speed up the rendering
         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics
         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if
         * you are constantly redrawing the graphics element.
         * @name cacheAsBitmap
         * @member {boolean}
         * @memberof PIXI.Graphics#
         * @default false
         */
        _this._transformID = -1;
        // Set default
        _this.tint = 0xFFFFFF;
        _this.blendMode = BLEND_MODES.NORMAL;
        return _this;
    }
    Object.defineProperty(Graphics.prototype, "geometry", {
        /**
         * Includes vertex positions, face indices, normals, colors, UVs, and
         * custom attributes within buffers, reducing the cost of passing all
         * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.
         * @readonly
         */
        get: function () {
            return this._geometry;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a new Graphics object with the same values as this one.
     * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)
     * @returns - A clone of the graphics object
     */
    Graphics.prototype.clone = function () {
        this.finishPoly();
        return new Graphics(this._geometry);
    };
    Object.defineProperty(Graphics.prototype, "blendMode", {
        get: function () {
            return this.state.blendMode;
        },
        /**
         * The blend mode to be applied to the graphic shape. Apply a value of
         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.  Note that, since each
         * primitive in the GraphicsGeometry list is rendered sequentially, modes
         * such as `PIXI.BLEND_MODES.ADD` and `PIXI.BLEND_MODES.MULTIPLY` will
         * be applied per-primitive.
         * @default PIXI.BLEND_MODES.NORMAL
         */
        set: function (value) {
            this.state.blendMode = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Graphics.prototype, "tint", {
        /**
         * The tint applied to each graphic shape. This is a hex value. A value of
         * 0xFFFFFF will remove any tint effect.
         * @default 0xFFFFFF
         */
        get: function () {
            return this._tint;
        },
        set: function (value) {
            this._tint = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Graphics.prototype, "fill", {
        /**
         * The current fill style.
         * @readonly
         */
        get: function () {
            return this._fillStyle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Graphics.prototype, "line", {
        /**
         * The current line style.
         * @readonly
         */
        get: function () {
            return this._lineStyle;
        },
        enumerable: false,
        configurable: true
    });
    Graphics.prototype.lineStyle = function (options, color, alpha, alignment, native) {
        if (options === void 0) { options = null; }
        if (color === void 0) { color = 0x0; }
        if (alpha === void 0) { alpha = 1; }
        if (alignment === void 0) { alignment = 0.5; }
        if (native === void 0) { native = false; }
        // Support non-object params: (width, color, alpha, alignment, native)
        if (typeof options === 'number') {
            options = { width: options, color: color, alpha: alpha, alignment: alignment, native: native };
        }
        return this.lineTextureStyle(options);
    };
    /**
     * Like line style but support texture for line fill.
     * @param [options] - Collection of options for setting line style.
     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style
     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use
     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.
     *  Default 0xFFFFFF if texture present.
     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style
     * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture
     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).
     *        WebGL only.
     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP
     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style
     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style
     * @param {number}[options.miterLimit=10] - miter limit ratio
     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.lineTextureStyle = function (options) {
        // Apply defaults
        options = Object.assign({
            width: 0,
            texture: Texture.WHITE,
            color: (options && options.texture) ? 0xFFFFFF : 0x0,
            alpha: 1,
            matrix: null,
            alignment: 0.5,
            native: false,
            cap: LINE_CAP.BUTT,
            join: LINE_JOIN.MITER,
            miterLimit: 10,
        }, options);
        if (this.currentPath) {
            this.startPoly();
        }
        var visible = options.width > 0 && options.alpha > 0;
        if (!visible) {
            this._lineStyle.reset();
        }
        else {
            if (options.matrix) {
                options.matrix = options.matrix.clone();
                options.matrix.invert();
            }
            Object.assign(this._lineStyle, { visible: visible }, options);
        }
        return this;
    };
    /**
     * Start a polygon object internally.
     * @protected
     */
    Graphics.prototype.startPoly = function () {
        if (this.currentPath) {
            var points = this.currentPath.points;
            var len = this.currentPath.points.length;
            if (len > 2) {
                this.drawShape(this.currentPath);
                this.currentPath = new Polygon();
                this.currentPath.closeStroke = false;
                this.currentPath.points.push(points[len - 2], points[len - 1]);
            }
        }
        else {
            this.currentPath = new Polygon();
            this.currentPath.closeStroke = false;
        }
    };
    /**
     * Finish the polygon object.
     * @protected
     */
    Graphics.prototype.finishPoly = function () {
        if (this.currentPath) {
            if (this.currentPath.points.length > 2) {
                this.drawShape(this.currentPath);
                this.currentPath = null;
            }
            else {
                this.currentPath.points.length = 0;
            }
        }
    };
    /**
     * Moves the current drawing position to x, y.
     * @param x - the X coordinate to move to
     * @param y - the Y coordinate to move to
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.moveTo = function (x, y) {
        this.startPoly();
        this.currentPath.points[0] = x;
        this.currentPath.points[1] = y;
        return this;
    };
    /**
     * Draws a line using the current line style from the current drawing position to (x, y);
     * The current drawing position is then set to (x, y).
     * @param x - the X coordinate to draw to
     * @param y - the Y coordinate to draw to
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.lineTo = function (x, y) {
        if (!this.currentPath) {
            this.moveTo(0, 0);
        }
        // remove duplicates..
        var points = this.currentPath.points;
        var fromX = points[points.length - 2];
        var fromY = points[points.length - 1];
        if (fromX !== x || fromY !== y) {
            points.push(x, y);
        }
        return this;
    };
    /**
     * Initialize the curve
     * @param x
     * @param y
     */
    Graphics.prototype._initCurve = function (x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (this.currentPath) {
            if (this.currentPath.points.length === 0) {
                this.currentPath.points = [x, y];
            }
        }
        else {
            this.moveTo(x, y);
        }
    };
    /**
     * Calculate the points for a quadratic bezier curve and then draws it.
     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
     * @param cpX - Control point x
     * @param cpY - Control point y
     * @param toX - Destination point x
     * @param toY - Destination point y
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.quadraticCurveTo = function (cpX, cpY, toX, toY) {
        this._initCurve();
        var points = this.currentPath.points;
        if (points.length === 0) {
            this.moveTo(0, 0);
        }
        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);
        return this;
    };
    /**
     * Calculate the points for a bezier curve and then draws it.
     * @param cpX - Control point x
     * @param cpY - Control point y
     * @param cpX2 - Second Control point x
     * @param cpY2 - Second Control point y
     * @param toX - Destination point x
     * @param toY - Destination point y
     * @returns This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.bezierCurveTo = function (cpX, cpY, cpX2, cpY2, toX, toY) {
        this._initCurve();
        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);
        return this;
    };
    /**
     * The arcTo() method creates an arc/curve between two tangents on the canvas.
     *
     * "borrowed" from https://code.google.com/p/fxcanvas/ - thanks google!
     * @param x1 - The x-coordinate of the first tangent point of the arc
     * @param y1 - The y-coordinate of the first tangent point of the arc
     * @param x2 - The x-coordinate of the end of the arc
     * @param y2 - The y-coordinate of the end of the arc
     * @param radius - The radius of the arc
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.arcTo = function (x1, y1, x2, y2, radius) {
        this._initCurve(x1, y1);
        var points = this.currentPath.points;
        var result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);
        if (result) {
            var cx = result.cx, cy = result.cy, radius_1 = result.radius, startAngle = result.startAngle, endAngle = result.endAngle, anticlockwise = result.anticlockwise;
            this.arc(cx, cy, radius_1, startAngle, endAngle, anticlockwise);
        }
        return this;
    };
    /**
     * The arc method creates an arc/curve (used to create circles, or parts of circles).
     * @param cx - The x-coordinate of the center of the circle
     * @param cy - The y-coordinate of the center of the circle
     * @param radius - The radius of the circle
     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position
     *  of the arc's circle)
     * @param endAngle - The ending angle, in radians
     * @param anticlockwise - Specifies whether the drawing should be
     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true
     *  indicates counter-clockwise.
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.arc = function (cx, cy, radius, startAngle, endAngle, anticlockwise) {
        if (anticlockwise === void 0) { anticlockwise = false; }
        if (startAngle === endAngle) {
            return this;
        }
        if (!anticlockwise && endAngle <= startAngle) {
            endAngle += PI_2;
        }
        else if (anticlockwise && startAngle <= endAngle) {
            startAngle += PI_2;
        }
        var sweep = endAngle - startAngle;
        if (sweep === 0) {
            return this;
        }
        var startX = cx + (Math.cos(startAngle) * radius);
        var startY = cy + (Math.sin(startAngle) * radius);
        var eps = this._geometry.closePointEps;
        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.
        var points = this.currentPath ? this.currentPath.points : null;
        if (points) {
            // TODO: make a better fix.
            // We check how far our start is from the last existing point
            var xDiff = Math.abs(points[points.length - 2] - startX);
            var yDiff = Math.abs(points[points.length - 1] - startY);
            if (xDiff < eps && yDiff < eps) ;
            else {
                points.push(startX, startY);
            }
        }
        else {
            this.moveTo(startX, startY);
            points = this.currentPath.points;
        }
        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);
        return this;
    };
    /**
     * Specifies a simple one-color fill that subsequent calls to other Graphics methods
     * (such as lineTo() or drawCircle()) use when drawing.
     * @param color - the color of the fill
     * @param alpha - the alpha of the fill
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.beginFill = function (color, alpha) {
        if (color === void 0) { color = 0; }
        if (alpha === void 0) { alpha = 1; }
        return this.beginTextureFill({ texture: Texture.WHITE, color: color, alpha: alpha });
    };
    /**
     * Begin the texture fill
     * @param options - Object object.
     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill
     * @param {number} [options.color=0xffffff] - Background to fill behind texture
     * @param {number} [options.alpha=1] - Alpha of fill
     * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix
     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.beginTextureFill = function (options) {
        // Apply defaults
        options = Object.assign({
            texture: Texture.WHITE,
            color: 0xFFFFFF,
            alpha: 1,
            matrix: null,
        }, options);
        if (this.currentPath) {
            this.startPoly();
        }
        var visible = options.alpha > 0;
        if (!visible) {
            this._fillStyle.reset();
        }
        else {
            if (options.matrix) {
                options.matrix = options.matrix.clone();
                options.matrix.invert();
            }
            Object.assign(this._fillStyle, { visible: visible }, options);
        }
        return this;
    };
    /**
     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.endFill = function () {
        this.finishPoly();
        this._fillStyle.reset();
        return this;
    };
    /**
     * Draws a rectangle shape.
     * @param x - The X coord of the top-left of the rectangle
     * @param y - The Y coord of the top-left of the rectangle
     * @param width - The width of the rectangle
     * @param height - The height of the rectangle
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.drawRect = function (x, y, width, height) {
        return this.drawShape(new Rectangle(x, y, width, height));
    };
    /**
     * Draw a rectangle shape with rounded/beveled corners.
     * @param x - The X coord of the top-left of the rectangle
     * @param y - The Y coord of the top-left of the rectangle
     * @param width - The width of the rectangle
     * @param height - The height of the rectangle
     * @param radius - Radius of the rectangle corners
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.drawRoundedRect = function (x, y, width, height, radius) {
        return this.drawShape(new RoundedRectangle(x, y, width, height, radius));
    };
    /**
     * Draws a circle.
     * @param x - The X coordinate of the center of the circle
     * @param y - The Y coordinate of the center of the circle
     * @param radius - The radius of the circle
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.drawCircle = function (x, y, radius) {
        return this.drawShape(new Circle(x, y, radius));
    };
    /**
     * Draws an ellipse.
     * @param x - The X coordinate of the center of the ellipse
     * @param y - The Y coordinate of the center of the ellipse
     * @param width - The half width of the ellipse
     * @param height - The half height of the ellipse
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.drawEllipse = function (x, y, width, height) {
        return this.drawShape(new Ellipse(x, y, width, height));
    };
    /**
     * Draws a polygon using the given path.
     * @param {number[]|PIXI.IPointData[]|PIXI.Polygon} path - The path data used to construct the polygon.
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.drawPolygon = function () {
        var arguments$1 = arguments;

        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i] = arguments$1[_i];
        }
        var points;
        var closeStroke = true; // !!this._fillStyle;
        var poly = path[0];
        // check if data has points..
        if (poly.points) {
            closeStroke = poly.closeStroke;
            points = poly.points;
        }
        else if (Array.isArray(path[0])) {
            points = path[0];
        }
        else {
            points = path;
        }
        var shape = new Polygon(points);
        shape.closeStroke = closeStroke;
        this.drawShape(shape);
        return this;
    };
    /**
     * Draw any shape.
     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.drawShape = function (shape) {
        if (!this._holeMode) {
            this._geometry.drawShape(shape, this._fillStyle.clone(), this._lineStyle.clone(), this._matrix);
        }
        else {
            this._geometry.drawHole(shape, this._matrix);
        }
        return this;
    };
    /**
     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
     * @returns - This Graphics object. Good for chaining method calls
     */
    Graphics.prototype.clear = function () {
        this._geometry.clear();
        this._lineStyle.reset();
        this._fillStyle.reset();
        this._boundsID++;
        this._matrix = null;
        this._holeMode = false;
        this.currentPath = null;
        return this;
    };
    /**
     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and
     * masked with gl.scissor.
     * @returns - True if only 1 rect.
     */
    Graphics.prototype.isFastRect = function () {
        var data = this._geometry.graphicsData;
        return data.length === 1
            && data[0].shape.type === SHAPES.RECT
            && !data[0].matrix
            && !data[0].holes.length
            && !(data[0].lineStyle.visible && data[0].lineStyle.width);
    };
    /**
     * Renders the object using the WebGL renderer
     * @param renderer - The renderer
     */
    Graphics.prototype._render = function (renderer) {
        this.finishPoly();
        var geometry = this._geometry;
        // batch part..
        // batch it!
        geometry.updateBatches();
        if (geometry.batchable) {
            if (this.batchDirty !== geometry.batchDirty) {
                this._populateBatches();
            }
            this._renderBatched(renderer);
        }
        else {
            // no batching...
            renderer.batch.flush();
            this._renderDirect(renderer);
        }
    };
    /** Populating batches for rendering. */
    Graphics.prototype._populateBatches = function () {
        var geometry = this._geometry;
        var blendMode = this.blendMode;
        var len = geometry.batches.length;
        this.batchTint = -1;
        this._transformID = -1;
        this.batchDirty = geometry.batchDirty;
        this.batches.length = len;
        this.vertexData = new Float32Array(geometry.points);
        for (var i = 0; i < len; i++) {
            var gI = geometry.batches[i];
            var color = gI.style.color;
            var vertexData = new Float32Array(this.vertexData.buffer, gI.attribStart * 4 * 2, gI.attribSize * 2);
            var uvs = new Float32Array(geometry.uvsFloat32.buffer, gI.attribStart * 4 * 2, gI.attribSize * 2);
            var indices = new Uint16Array(geometry.indicesUint16.buffer, gI.start * 2, gI.size);
            var batch = {
                vertexData: vertexData,
                blendMode: blendMode,
                indices: indices,
                uvs: uvs,
                _batchRGB: hex2rgb(color),
                _tintRGB: color,
                _texture: gI.style.texture,
                alpha: gI.style.alpha,
                worldAlpha: 1
            };
            this.batches[i] = batch;
        }
    };
    /**
     * Renders the batches using the BathedRenderer plugin
     * @param renderer - The renderer
     */
    Graphics.prototype._renderBatched = function (renderer) {
        if (!this.batches.length) {
            return;
        }
        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);
        this.calculateVertices();
        this.calculateTints();
        for (var i = 0, l = this.batches.length; i < l; i++) {
            var batch = this.batches[i];
            batch.worldAlpha = this.worldAlpha * batch.alpha;
            renderer.plugins[this.pluginName].render(batch);
        }
    };
    /**
     * Renders the graphics direct
     * @param renderer - The renderer
     */
    Graphics.prototype._renderDirect = function (renderer) {
        var shader = this._resolveDirectShader(renderer);
        var geometry = this._geometry;
        var tint = this.tint;
        var worldAlpha = this.worldAlpha;
        var uniforms = shader.uniforms;
        var drawCalls = geometry.drawCalls;
        // lets set the transfomr
        uniforms.translationMatrix = this.transform.worldTransform;
        // and then lets set the tint..
        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;
        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;
        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;
        uniforms.tint[3] = worldAlpha;
        // the first draw call, we can set the uniforms of the shader directly here.
        // this means that we can tack advantage of the sync function of pixi!
        // bind and sync uniforms..
        // there is a way to optimise this..
        renderer.shader.bind(shader);
        renderer.geometry.bind(geometry, shader);
        // set state..
        renderer.state.set(this.state);
        // then render the rest of them...
        for (var i = 0, l = drawCalls.length; i < l; i++) {
            this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);
        }
    };
    /**
     * Renders specific DrawCall
     * @param renderer
     * @param drawCall
     */
    Graphics.prototype._renderDrawCallDirect = function (renderer, drawCall) {
        var texArray = drawCall.texArray, type = drawCall.type, size = drawCall.size, start = drawCall.start;
        var groupTextureCount = texArray.count;
        for (var j = 0; j < groupTextureCount; j++) {
            renderer.texture.bind(texArray.elements[j], j);
        }
        renderer.geometry.draw(type, size, start);
    };
    /**
     * Resolves shader for direct rendering
     * @param renderer - The renderer
     */
    Graphics.prototype._resolveDirectShader = function (renderer) {
        var shader = this.shader;
        var pluginName = this.pluginName;
        if (!shader) {
            // if there is no shader here, we can use the default shader.
            // and that only gets created if we actually need it..
            // but may be more than one plugins for graphics
            if (!DEFAULT_SHADERS[pluginName]) {
                var MAX_TEXTURES = renderer.plugins[pluginName].MAX_TEXTURES;
                var sampleValues = new Int32Array(MAX_TEXTURES);
                for (var i = 0; i < MAX_TEXTURES; i++) {
                    sampleValues[i] = i;
                }
                var uniforms = {
                    tint: new Float32Array([1, 1, 1, 1]),
                    translationMatrix: new Matrix(),
                    default: UniformGroup.from({ uSamplers: sampleValues }, true),
                };
                var program = renderer.plugins[pluginName]._shader.program;
                DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);
            }
            shader = DEFAULT_SHADERS[pluginName];
        }
        return shader;
    };
    /** Retrieves the bounds of the graphic shape as a rectangle object. */
    Graphics.prototype._calculateBounds = function () {
        this.finishPoly();
        var geometry = this._geometry;
        // skipping when graphics is empty, like a container
        if (!geometry.graphicsData.length) {
            return;
        }
        var _a = geometry.bounds, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;
        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);
    };
    /**
     * Tests if a point is inside this graphics object
     * @param point - the point to test
     * @returns - the result of the test
     */
    Graphics.prototype.containsPoint = function (point) {
        this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);
        return this._geometry.containsPoint(Graphics._TEMP_POINT);
    };
    /** Recalculate the tint by applying tint to batches using Graphics tint. */
    Graphics.prototype.calculateTints = function () {
        if (this.batchTint !== this.tint) {
            this.batchTint = this.tint;
            var tintRGB = hex2rgb(this.tint, temp);
            for (var i = 0; i < this.batches.length; i++) {
                var batch = this.batches[i];
                var batchTint = batch._batchRGB;
                var r = (tintRGB[0] * batchTint[0]) * 255;
                var g = (tintRGB[1] * batchTint[1]) * 255;
                var b = (tintRGB[2] * batchTint[2]) * 255;
                // TODO Ivan, can this be done in one go?
                var color = (r << 16) + (g << 8) + (b | 0);
                batch._tintRGB = (color >> 16)
                    + (color & 0xff00)
                    + ((color & 0xff) << 16);
            }
        }
    };
    /** If there's a transform update or a change to the shape of the geometry, recalculate the vertices. */
    Graphics.prototype.calculateVertices = function () {
        var wtID = this.transform._worldID;
        if (this._transformID === wtID) {
            return;
        }
        this._transformID = wtID;
        var wt = this.transform.worldTransform;
        var a = wt.a;
        var b = wt.b;
        var c = wt.c;
        var d = wt.d;
        var tx = wt.tx;
        var ty = wt.ty;
        var data = this._geometry.points; // batch.vertexDataOriginal;
        var vertexData = this.vertexData;
        var count = 0;
        for (var i = 0; i < data.length; i += 2) {
            var x = data[i];
            var y = data[i + 1];
            vertexData[count++] = (a * x) + (c * y) + tx;
            vertexData[count++] = (d * y) + (b * x) + ty;
        }
    };
    /**
     * Closes the current path.
     * @returns - Returns itself.
     */
    Graphics.prototype.closePath = function () {
        var currentPath = this.currentPath;
        if (currentPath) {
            // we don't need to add extra point in the end because buildLine will take care of that
            currentPath.closeStroke = true;
            // ensure that the polygon is completed, and is available for hit detection
            // (even if the graphics is not rendered yet)
            this.finishPoly();
        }
        return this;
    };
    /**
     * Apply a matrix to the positional data.
     * @param matrix - Matrix to use for transform current shape.
     * @returns - Returns itself.
     */
    Graphics.prototype.setMatrix = function (matrix) {
        this._matrix = matrix;
        return this;
    };
    /**
     * Begin adding holes to the last draw shape
     * IMPORTANT: holes must be fully inside a shape to work
     * Also weirdness ensues if holes overlap!
     * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,
     * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.
     * @returns - Returns itself.
     */
    Graphics.prototype.beginHole = function () {
        this.finishPoly();
        this._holeMode = true;
        return this;
    };
    /**
     * End adding holes to the last draw shape.
     * @returns - Returns itself.
     */
    Graphics.prototype.endHole = function () {
        this.finishPoly();
        this._holeMode = false;
        return this;
    };
    /**
     * Destroys the Graphics object.
     * @param options - Options parameter. A boolean will act as if all
     *  options have been set to that value
     * @param {boolean} [options.children=false] - if set to true, all the children will have
     *  their destroy method called as well. 'options' will be passed on to those calls.
     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
     *  Should it destroy the texture of the child sprite
     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
     *  Should it destroy the base texture of the child sprite
     */
    Graphics.prototype.destroy = function (options) {
        this._geometry.refCount--;
        if (this._geometry.refCount === 0) {
            this._geometry.dispose();
        }
        this._matrix = null;
        this.currentPath = null;
        this._lineStyle.destroy();
        this._lineStyle = null;
        this._fillStyle.destroy();
        this._fillStyle = null;
        this._geometry = null;
        this.shader = null;
        this.vertexData = null;
        this.batches.length = 0;
        this.batches = null;
        _super.prototype.destroy.call(this, options);
    };
    /**
     * New rendering behavior for rounded rectangles: circular arcs instead of quadratic bezier curves.
     * In the next major release, we'll enable this by default.
     */
    Graphics.nextRoundedRectBehavior = false;
    /**
     * Temporary point to use for containsPoint.
     * @private
     */
    Graphics._TEMP_POINT = new Point();
    return Graphics;
}(Container));

var graphicsUtils = {
    buildPoly: buildPoly,
    buildCircle: buildCircle,
    buildRectangle: buildRectangle,
    buildRoundedRectangle: buildRoundedRectangle,
    buildLine: buildLine,
    ArcUtils: ArcUtils,
    BezierUtils: BezierUtils,
    QuadraticUtils: QuadraticUtils,
    BatchPart: BatchPart,
    FILL_COMMANDS: FILL_COMMANDS,
    BATCH_POOL: BATCH_POOL,
    DRAW_CALL_POOL: DRAW_CALL_POOL
};


//# sourceMappingURL=graphics.mjs.map

;// CONCATENATED MODULE: ../node_modules/@pixi-spine/base/lib/base.es.js
/* eslint-disable */
 
/*!
 * @pixi-spine/base - v3.1.2
 * Compiled Tue, 10 Jan 2023 14:17:29 UTC
 *
 * @pixi-spine/base is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2019-2020, Ivan Igorevich Popelyshev <ivan.popelyshev@gmail.com>, All Rights Reserved
 */









/**
 * @public
 */
var AttachmentType;
(function (AttachmentType) {
    AttachmentType[AttachmentType["Region"] = 0] = "Region";
    AttachmentType[AttachmentType["BoundingBox"] = 1] = "BoundingBox";
    AttachmentType[AttachmentType["Mesh"] = 2] = "Mesh";
    AttachmentType[AttachmentType["LinkedMesh"] = 3] = "LinkedMesh";
    AttachmentType[AttachmentType["Path"] = 4] = "Path";
    AttachmentType[AttachmentType["Point"] = 5] = "Point";
    AttachmentType[AttachmentType["Clipping"] = 6] = "Clipping";
})(AttachmentType || (AttachmentType = {}));

/**
 * @public
 */
var BinaryInput = /** @class */ (function () {
    function BinaryInput(data, strings, index, buffer) {
        if (strings === void 0) { strings = new Array(); }
        if (index === void 0) { index = 0; }
        if (buffer === void 0) { buffer = new DataView(data.buffer); }
        this.strings = strings;
        this.index = index;
        this.buffer = buffer;
    }
    BinaryInput.prototype.readByte = function () {
        return this.buffer.getInt8(this.index++);
    };
    BinaryInput.prototype.readUnsignedByte = function () {
        return this.buffer.getUint8(this.index++);
    };
    BinaryInput.prototype.readShort = function () {
        var value = this.buffer.getInt16(this.index);
        this.index += 2;
        return value;
    };
    BinaryInput.prototype.readInt32 = function () {
        var value = this.buffer.getInt32(this.index);
        this.index += 4;
        return value;
    };
    BinaryInput.prototype.readInt = function (optimizePositive) {
        var b = this.readByte();
        var result = b & 0x7F;
        if ((b & 0x80) != 0) {
            b = this.readByte();
            result |= (b & 0x7F) << 7;
            if ((b & 0x80) != 0) {
                b = this.readByte();
                result |= (b & 0x7F) << 14;
                if ((b & 0x80) != 0) {
                    b = this.readByte();
                    result |= (b & 0x7F) << 21;
                    if ((b & 0x80) != 0) {
                        b = this.readByte();
                        result |= (b & 0x7F) << 28;
                    }
                }
            }
        }
        return optimizePositive ? result : ((result >>> 1) ^ -(result & 1));
    };
    BinaryInput.prototype.readStringRef = function () {
        var index = this.readInt(true);
        return index == 0 ? null : this.strings[index - 1];
    };
    BinaryInput.prototype.readString = function () {
        var byteCount = this.readInt(true);
        switch (byteCount) {
            case 0:
                return null;
            case 1:
                return "";
        }
        byteCount--;
        var chars = "";
        for (var i = 0; i < byteCount;) {
            var b = this.readUnsignedByte();
            switch (b >> 4) {
                case 12:
                case 13:
                    chars += String.fromCharCode(((b & 0x1F) << 6 | this.readByte() & 0x3F));
                    i += 2;
                    break;
                case 14:
                    chars += String.fromCharCode(((b & 0x0F) << 12 | (this.readByte() & 0x3F) << 6 | this.readByte() & 0x3F));
                    i += 3;
                    break;
                default:
                    chars += String.fromCharCode(b);
                    i++;
            }
        }
        return chars;
    };
    BinaryInput.prototype.readFloat = function () {
        var value = this.buffer.getFloat32(this.index);
        this.index += 4;
        return value;
    };
    BinaryInput.prototype.readBoolean = function () {
        return this.readByte() != 0;
    };
    return BinaryInput;
}());

// Those enums were moved from Animation.ts of spine 3.8 and 4.0
/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`
 * < 1.
 *
 * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.
 * @public
 * */
var MixBlend;
(function (MixBlend) {
    /** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup
     * value is set. */
    MixBlend[MixBlend["setup"] = 0] = "setup";
    /** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to
     * the setup value. Timelines which perform instant transitions, such as DrawOrderTimeline or
     * AttachmentTimeline, use the setup value before the first key.
     *
     * `first` is intended for the first animations applied, not for animations layered on top of those. */
    MixBlend[MixBlend["first"] = 1] = "first";
    /** Transitions from the current value to the timeline value. No change is made before the first key (the current value is
     * kept until the first key).
     *
     * `replace` is intended for animations layered on top of others, not for the first animations applied. */
    MixBlend[MixBlend["replace"] = 2] = "replace";
    /** Transitions from the current value to the current value plus the timeline value. No change is made before the first key
     * (the current value is kept until the first key).
     *
     * `add` is intended for animations layered on top of others, not for the first animations applied. Properties
     * keyed by additive animations must be set manually or by another animation before applying the additive animations, else
     * the property values will increase continually. */
    MixBlend[MixBlend["add"] = 3] = "add";
})(MixBlend || (MixBlend = {}));
/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or
 * mixing in toward 1 (the timeline's value).
 *
 * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.
 * @public
 * */
var MixDirection;
(function (MixDirection) {
    MixDirection[MixDirection["mixIn"] = 0] = "mixIn";
    MixDirection[MixDirection["mixOut"] = 1] = "mixOut";
})(MixDirection || (MixDirection = {}));

// These enums were moved from PathConstraintData.ts of spine 3.7, 3.8 and 4.0
/** Controls how the first bone is positioned along the path.
 *
 * See [Position mode](http://esotericsoftware.com/spine-path-constraints#Position-mode) in the Spine User Guide.
 * @public
 * */
var PositionMode;
(function (PositionMode) {
    PositionMode[PositionMode["Fixed"] = 0] = "Fixed";
    PositionMode[PositionMode["Percent"] = 1] = "Percent";
})(PositionMode || (PositionMode = {}));
/** Controls how bones are rotated, translated, and scaled to match the path.
 *
 * [Rotate mode](http://esotericsoftware.com/spine-path-constraints#Rotate-mod) in the Spine User Guide.
 * @public
 * */
var RotateMode;
(function (RotateMode) {
    RotateMode[RotateMode["Tangent"] = 0] = "Tangent";
    RotateMode[RotateMode["Chain"] = 1] = "Chain";
    RotateMode[RotateMode["ChainScale"] = 2] = "ChainScale";
})(RotateMode || (RotateMode = {}));

// This enum was moved from BoneData.ts of spine 3.7, 3.8 and 4.0
/** Determines how a bone inherits world transforms from parent bones.
 * @public
 * */
var TransformMode;
(function (TransformMode) {
    TransformMode[TransformMode["Normal"] = 0] = "Normal";
    TransformMode[TransformMode["OnlyTranslation"] = 1] = "OnlyTranslation";
    TransformMode[TransformMode["NoRotationOrReflection"] = 2] = "NoRotationOrReflection";
    TransformMode[TransformMode["NoScale"] = 3] = "NoScale";
    TransformMode[TransformMode["NoScaleOrReflection"] = 4] = "NoScaleOrReflection";
})(TransformMode || (TransformMode = {}));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var base_es_extendStatics = function(d, b) {
    base_es_extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return base_es_extendStatics(d, b);
};

function base_es_extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    base_es_extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * @public
 */
function filterFromString(text) {
    switch (text.toLowerCase()) {
        case "nearest": return TextureFilter.Nearest;
        case "linear": return TextureFilter.Linear;
        case "mipmap": return TextureFilter.MipMap;
        case "mipmapnearestnearest": return TextureFilter.MipMapNearestNearest;
        case "mipmaplinearnearest": return TextureFilter.MipMapLinearNearest;
        case "mipmapnearestlinear": return TextureFilter.MipMapNearestLinear;
        case "mipmaplinearlinear": return TextureFilter.MipMapLinearLinear;
        default: throw new Error("Unknown texture filter " + text);
    }
}
/**
 * @public
 */
function wrapFromString(text) {
    switch (text.toLowerCase()) {
        case "mirroredtepeat": return TextureWrap.MirroredRepeat;
        case "clamptoedge": return TextureWrap.ClampToEdge;
        case "repeat": return TextureWrap.Repeat;
        default: throw new Error("Unknown texture wrap " + text);
    }
}
/**
 * @public
 */
var TextureFilter;
(function (TextureFilter) {
    TextureFilter[TextureFilter["Nearest"] = 9728] = "Nearest";
    TextureFilter[TextureFilter["Linear"] = 9729] = "Linear";
    TextureFilter[TextureFilter["MipMap"] = 9987] = "MipMap";
    TextureFilter[TextureFilter["MipMapNearestNearest"] = 9984] = "MipMapNearestNearest";
    TextureFilter[TextureFilter["MipMapLinearNearest"] = 9985] = "MipMapLinearNearest";
    TextureFilter[TextureFilter["MipMapNearestLinear"] = 9986] = "MipMapNearestLinear";
    TextureFilter[TextureFilter["MipMapLinearLinear"] = 9987] = "MipMapLinearLinear"; // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR
})(TextureFilter || (TextureFilter = {}));
/**
 * @public
 */
var TextureWrap;
(function (TextureWrap) {
    TextureWrap[TextureWrap["MirroredRepeat"] = 33648] = "MirroredRepeat";
    TextureWrap[TextureWrap["ClampToEdge"] = 33071] = "ClampToEdge";
    TextureWrap[TextureWrap["Repeat"] = 10497] = "Repeat"; // WebGLRenderingContext.REPEAT
})(TextureWrap || (TextureWrap = {}));
/**
 * @public
 */
var TextureRegion = /** @class */ (function () {
    function TextureRegion() {
        //thats for overrides
        this.size = null;
        this.names = null;
        this.values = null;
        this.renderObject = null;
    }
    Object.defineProperty(TextureRegion.prototype, "width", {
        get: function () {
            var tex = this.texture;
            if (tex.trim) {
                return tex.trim.width;
            }
            return tex.orig.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "height", {
        get: function () {
            var tex = this.texture;
            if (tex.trim) {
                return tex.trim.height;
            }
            return tex.orig.height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "u", {
        get: function () {
            return this.texture._uvs.x0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "v", {
        get: function () {
            return this.texture._uvs.y0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "u2", {
        get: function () {
            return this.texture._uvs.x2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "v2", {
        get: function () {
            return this.texture._uvs.y2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "offsetX", {
        get: function () {
            var tex = this.texture;
            return tex.trim ? tex.trim.x : 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "offsetY", {
        get: function () {
            // console.warn("Deprecation Warning: @Hackerham: I guess, if you are using PIXI-SPINE ATLAS region.offsetY, you want a texture, right? Use region.texture from now on.");
            return this.spineOffsetY;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "pixiOffsetY", {
        get: function () {
            var tex = this.texture;
            return tex.trim ? tex.trim.y : 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "spineOffsetY", {
        get: function () {
            var tex = this.texture;
            return this.originalHeight - this.height - (tex.trim ? tex.trim.y : 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "originalWidth", {
        get: function () {
            return this.texture.orig.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "originalHeight", {
        get: function () {
            return this.texture.orig.height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "x", {
        get: function () {
            return this.texture.frame.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "y", {
        get: function () {
            return this.texture.frame.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "rotate", {
        get: function () {
            return this.texture.rotate !== 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureRegion.prototype, "degrees", {
        get: function () {
            return (360 - this.texture.rotate * 45) % 360;
        },
        enumerable: false,
        configurable: true
    });
    return TextureRegion;
}());

var RegionFields = /** @class */ (function () {
    function RegionFields() {
        this.x = 0;
        this.y = 0;
        this.width = 0;
        this.height = 0;
        this.offsetX = 0;
        this.offsetY = 0;
        this.originalWidth = 0;
        this.originalHeight = 0;
        this.rotate = 0;
        this.index = 0;
    }
    return RegionFields;
}());
/**
 * @public
 */
var TextureAtlas = /** @class */ (function () {
    function TextureAtlas(atlasText, textureLoader, callback) {
        this.pages = new Array();
        this.regions = new Array();
        if (atlasText) {
            this.addSpineAtlas(atlasText, textureLoader, callback);
        }
    }
    TextureAtlas.prototype.addTexture = function (name, texture) {
        var pages = this.pages;
        var page = null;
        for (var i = 0; i < pages.length; i++) {
            if (pages[i].baseTexture === texture.baseTexture) {
                page = pages[i];
                break;
            }
        }
        if (page === null) {
            page = new TextureAtlasPage();
            page.name = 'texturePage';
            var baseTexture = texture.baseTexture;
            page.width = baseTexture.realWidth;
            page.height = baseTexture.realHeight;
            page.baseTexture = baseTexture;
            //those fields are not relevant in Pixi
            page.minFilter = page.magFilter = TextureFilter.Nearest;
            page.uWrap = TextureWrap.ClampToEdge;
            page.vWrap = TextureWrap.ClampToEdge;
            pages.push(page);
        }
        var region = new TextureAtlasRegion();
        region.name = name;
        region.page = page;
        region.texture = texture;
        region.index = -1;
        this.regions.push(region);
        return region;
    };
    TextureAtlas.prototype.addTextureHash = function (textures, stripExtension) {
        for (var key in textures) {
            if (textures.hasOwnProperty(key)) {
                this.addTexture(stripExtension && key.indexOf('.') !== -1 ? key.substr(0, key.lastIndexOf('.')) : key, textures[key]);
            }
        }
    };
    TextureAtlas.prototype.addSpineAtlas = function (atlasText, textureLoader, callback) {
        return this.load(atlasText, textureLoader, callback);
    };
    TextureAtlas.prototype.load = function (atlasText, textureLoader, callback) {
        var _this = this;
        if (textureLoader == null)
            throw new Error("textureLoader cannot be null.");
        var reader = new TextureAtlasReader(atlasText);
        var entry = new Array(4);
        var page = null;
        var pageFields = {};
        var region = null;
        pageFields["size"] = function () {
            page.width = parseInt(entry[1]);
            page.height = parseInt(entry[2]);
        };
        pageFields["format"] = function () {
            // page.format = Format[tuple[0]]; we don't need format in WebGL
        };
        pageFields["filter"] = function () {
            page.minFilter = filterFromString(entry[1]);
            page.magFilter = filterFromString(entry[2]);
        };
        pageFields["repeat"] = function () {
            if (entry[1].indexOf('x') != -1)
                page.uWrap = TextureWrap.Repeat;
            if (entry[1].indexOf('y') != -1)
                page.vWrap = TextureWrap.Repeat;
        };
        pageFields["pma"] = function () {
            page.pma = entry[1] == "true";
        };
        var regionFields = {};
        regionFields["xy"] = function () {
            region.x = parseInt(entry[1]);
            region.y = parseInt(entry[2]);
        };
        regionFields["size"] = function () {
            region.width = parseInt(entry[1]);
            region.height = parseInt(entry[2]);
        };
        regionFields["bounds"] = function () {
            region.x = parseInt(entry[1]);
            region.y = parseInt(entry[2]);
            region.width = parseInt(entry[3]);
            region.height = parseInt(entry[4]);
        };
        regionFields["offset"] = function () {
            region.offsetX = parseInt(entry[1]);
            region.offsetY = parseInt(entry[2]);
        };
        regionFields["orig"] = function () {
            region.originalWidth = parseInt(entry[1]);
            region.originalHeight = parseInt(entry[2]);
        };
        regionFields["offsets"] = function () {
            region.offsetX = parseInt(entry[1]);
            region.offsetY = parseInt(entry[2]);
            region.originalWidth = parseInt(entry[3]);
            region.originalHeight = parseInt(entry[4]);
        };
        regionFields["rotate"] = function () {
            var rotateValue = entry[1];
            var rotate = 0;
            if (rotateValue.toLocaleLowerCase() == "true") {
                rotate = 6;
            }
            else if (rotateValue.toLocaleLowerCase() == "false") {
                rotate = 0;
            }
            else {
                rotate = ((720 - parseFloat(rotateValue)) % 360) / 45;
            }
            region.rotate = rotate;
        };
        regionFields["index"] = function () {
            region.index = parseInt(entry[1]);
        };
        var line = reader.readLine();
        // Ignore empty lines before first entry.
        while (line != null && line.trim().length == 0)
            line = reader.readLine();
        // Header entries.
        while (true) {
            if (line == null || line.trim().length == 0)
                break;
            if (reader.readEntry(entry, line) == 0)
                break; // Silently ignore all header fields.
            line = reader.readLine();
        }
        var iterateParser = function () {
            while (true) {
                if (line == null) {
                    return callback && callback(_this);
                }
                if (line.trim().length == 0) {
                    page = null;
                    line = reader.readLine();
                }
                else if (page === null) {
                    page = new TextureAtlasPage();
                    page.name = line.trim();
                    while (true) {
                        if (reader.readEntry(entry, line = reader.readLine()) == 0)
                            break;
                        var field = pageFields[entry[0]];
                        if (field)
                            field();
                    }
                    _this.pages.push(page);
                    textureLoader(page.name, function (texture) {
                        if (texture === null) {
                            _this.pages.splice(_this.pages.indexOf(page), 1);
                            return callback && callback(null);
                        }
                        page.baseTexture = texture;
                        //TODO: set scaleMode and mipmapMode from spine
                        if (page.pma) {
                            texture.alphaMode = ALPHA_MODES.PMA;
                        }
                        if (!texture.valid) {
                            texture.setSize(page.width, page.height);
                        }
                        page.setFilters();
                        if (!page.width || !page.height) {
                            page.width = texture.realWidth;
                            page.height = texture.realHeight;
                            if (!page.width || !page.height) {
                                console.log("ERROR spine atlas page " + page.name + ": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)");
                            }
                        }
                        iterateParser();
                    });
                    break;
                }
                else {
                    region = new RegionFields();
                    var atlasRegion = new TextureAtlasRegion();
                    atlasRegion.name = line;
                    atlasRegion.page = page;
                    var names = null;
                    var values = null;
                    while (true) {
                        var count = reader.readEntry(entry, line = reader.readLine());
                        if (count == 0)
                            break;
                        var field = regionFields[entry[0]];
                        if (field)
                            field();
                        else {
                            if (names == null) {
                                names = [];
                                values = [];
                            }
                            names.push(entry[0]);
                            var entryValues = [];
                            for (var i = 0; i < count; i++)
                                entryValues.push(parseInt(entry[i + 1]));
                            values.push(entryValues);
                        }
                    }
                    if (region.originalWidth == 0 && region.originalHeight == 0) {
                        region.originalWidth = region.width;
                        region.originalHeight = region.height;
                    }
                    var resolution = page.baseTexture.resolution;
                    region.x /= resolution;
                    region.y /= resolution;
                    region.width /= resolution;
                    region.height /= resolution;
                    region.originalWidth /= resolution;
                    region.originalHeight /= resolution;
                    region.offsetX /= resolution;
                    region.offsetY /= resolution;
                    var swapWH = region.rotate % 4 !== 0;
                    var frame = new Rectangle(region.x, region.y, swapWH ? region.height : region.width, swapWH ? region.width : region.height);
                    var orig = new Rectangle(0, 0, region.originalWidth, region.originalHeight);
                    var trim = new Rectangle(region.offsetX, region.originalHeight - region.height - region.offsetY, region.width, region.height);
                    atlasRegion.texture = new Texture(atlasRegion.page.baseTexture, frame, orig, trim, region.rotate);
                    atlasRegion.index = region.index;
                    atlasRegion.texture.updateUvs();
                    _this.regions.push(atlasRegion);
                }
            }
        };
        iterateParser();
    };
    TextureAtlas.prototype.findRegion = function (name) {
        for (var i = 0; i < this.regions.length; i++) {
            if (this.regions[i].name == name) {
                return this.regions[i];
            }
        }
        return null;
    };
    TextureAtlas.prototype.dispose = function () {
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].baseTexture.dispose();
        }
    };
    return TextureAtlas;
}());
/**
 * @public
 */
var TextureAtlasReader = /** @class */ (function () {
    function TextureAtlasReader(text) {
        this.index = 0;
        this.lines = text.split(/\r\n|\r|\n/);
    }
    TextureAtlasReader.prototype.readLine = function () {
        if (this.index >= this.lines.length)
            return null;
        return this.lines[this.index++];
    };
    TextureAtlasReader.prototype.readEntry = function (entry, line) {
        if (line == null)
            return 0;
        line = line.trim();
        if (line.length == 0)
            return 0;
        var colon = line.indexOf(':');
        if (colon == -1)
            return 0;
        entry[0] = line.substr(0, colon).trim();
        for (var i = 1, lastMatch = colon + 1;; i++) {
            var comma = line.indexOf(',', lastMatch);
            if (comma == -1) {
                entry[i] = line.substr(lastMatch).trim();
                return i;
            }
            entry[i] = line.substr(lastMatch, comma - lastMatch).trim();
            lastMatch = comma + 1;
            if (i == 4)
                return 4;
        }
    };
    return TextureAtlasReader;
}());
/**
 * @public
 */
var TextureAtlasPage = /** @class */ (function () {
    function TextureAtlasPage() {
        this.minFilter = TextureFilter.Nearest;
        this.magFilter = TextureFilter.Nearest;
        this.uWrap = TextureWrap.ClampToEdge;
        this.vWrap = TextureWrap.ClampToEdge;
    }
    TextureAtlasPage.prototype.setFilters = function () {
        var tex = this.baseTexture;
        var filter = this.minFilter;
        if (filter == TextureFilter.Linear) {
            tex.scaleMode = SCALE_MODES.LINEAR;
        }
        else if (this.minFilter == TextureFilter.Nearest) {
            tex.scaleMode = SCALE_MODES.NEAREST;
        }
        else {
            tex.mipmap = MIPMAP_MODES.POW2;
            if (filter == TextureFilter.MipMapNearestNearest) {
                tex.scaleMode = SCALE_MODES.NEAREST;
            }
            else {
                tex.scaleMode = SCALE_MODES.LINEAR;
            }
        }
    };
    return TextureAtlasPage;
}());
/**
 * @public
 */
var TextureAtlasRegion = /** @class */ (function (_super) {
    base_es_extends(TextureAtlasRegion, _super);
    function TextureAtlasRegion() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TextureAtlasRegion;
}(TextureRegion));

var fround_polyfill = (function (array) {
    return function (x) {
        return array[0] = x, array[0];
    };
})(new Float32Array(1));
var fround = Math.fround || fround_polyfill;
/**
 * @public
 */
var IntSet = /** @class */ (function () {
    function IntSet() {
        this.array = new Array();
    }
    IntSet.prototype.add = function (value) {
        var contains = this.contains(value);
        this.array[value | 0] = value | 0;
        return !contains;
    };
    IntSet.prototype.contains = function (value) {
        return this.array[value | 0] != undefined;
    };
    IntSet.prototype.remove = function (value) {
        this.array[value | 0] = undefined;
    };
    IntSet.prototype.clear = function () {
        this.array.length = 0;
    };
    return IntSet;
}());
/**
 * @public
 */
var StringSet = /** @class */ (function () {
    function StringSet() {
        this.entries = {};
        this.size = 0;
    }
    StringSet.prototype.add = function (value) {
        var contains = this.entries[value];
        this.entries[value] = true;
        if (!contains) {
            this.size++;
            return true;
        }
        return false;
    };
    StringSet.prototype.addAll = function (values) {
        var oldSize = this.size;
        for (var i = 0, n = values.length; i < n; i++)
            this.add(values[i]);
        return oldSize != this.size;
    };
    StringSet.prototype.contains = function (value) {
        return this.entries[value];
    };
    StringSet.prototype.clear = function () {
        this.entries = {};
        this.size = 0;
    };
    return StringSet;
}());
/**
 * @public
 */
var Color = /** @class */ (function () {
    function Color(r, g, b, a) {
        if (r === void 0) { r = 0; }
        if (g === void 0) { g = 0; }
        if (b === void 0) { b = 0; }
        if (a === void 0) { a = 0; }
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
    Color.prototype.set = function (r, g, b, a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
        return this.clamp();
    };
    Color.prototype.setFromColor = function (c) {
        this.r = c.r;
        this.g = c.g;
        this.b = c.b;
        this.a = c.a;
        return this;
    };
    Color.prototype.setFromString = function (hex) {
        hex = hex.charAt(0) == '#' ? hex.substr(1) : hex;
        this.r = parseInt(hex.substr(0, 2), 16) / 255;
        this.g = parseInt(hex.substr(2, 2), 16) / 255;
        this.b = parseInt(hex.substr(4, 2), 16) / 255;
        this.a = hex.length != 8 ? 1 : parseInt(hex.substr(6, 2), 16) / 255;
        return this;
    };
    Color.prototype.add = function (r, g, b, a) {
        this.r += r;
        this.g += g;
        this.b += b;
        this.a += a;
        return this.clamp();
    };
    Color.prototype.clamp = function () {
        if (this.r < 0)
            this.r = 0;
        else if (this.r > 1)
            this.r = 1;
        if (this.g < 0)
            this.g = 0;
        else if (this.g > 1)
            this.g = 1;
        if (this.b < 0)
            this.b = 0;
        else if (this.b > 1)
            this.b = 1;
        if (this.a < 0)
            this.a = 0;
        else if (this.a > 1)
            this.a = 1;
        return this;
    };
    Color.rgba8888ToColor = function (color, value) {
        color.r = ((value & 0xff000000) >>> 24) / 255;
        color.g = ((value & 0x00ff0000) >>> 16) / 255;
        color.b = ((value & 0x0000ff00) >>> 8) / 255;
        color.a = ((value & 0x000000ff)) / 255;
    };
    Color.rgb888ToColor = function (color, value) {
        color.r = ((value & 0x00ff0000) >>> 16) / 255;
        color.g = ((value & 0x0000ff00) >>> 8) / 255;
        color.b = ((value & 0x000000ff)) / 255;
    };
    Color.fromString = function (hex) {
        return new Color().setFromString(hex);
    };
    Color.WHITE = new Color(1, 1, 1, 1);
    Color.RED = new Color(1, 0, 0, 1);
    Color.GREEN = new Color(0, 1, 0, 1);
    Color.BLUE = new Color(0, 0, 1, 1);
    Color.MAGENTA = new Color(1, 0, 1, 1);
    return Color;
}());
/**
 * @public
 */
var MathUtils = /** @class */ (function () {
    function MathUtils() {
    }
    MathUtils.clamp = function (value, min, max) {
        if (value < min)
            return min;
        if (value > max)
            return max;
        return value;
    };
    MathUtils.cosDeg = function (degrees) {
        return Math.cos(degrees * MathUtils.degRad);
    };
    MathUtils.sinDeg = function (degrees) {
        return Math.sin(degrees * MathUtils.degRad);
    };
    MathUtils.signum = function (value) {
        return value > 0 ? 1 : value < 0 ? -1 : 0;
    };
    MathUtils.toInt = function (x) {
        return x > 0 ? Math.floor(x) : Math.ceil(x);
    };
    MathUtils.cbrt = function (x) {
        var y = Math.pow(Math.abs(x), 1 / 3);
        return x < 0 ? -y : y;
    };
    MathUtils.randomTriangular = function (min, max) {
        return MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);
    };
    MathUtils.randomTriangularWith = function (min, max, mode) {
        var u = Math.random();
        var d = max - min;
        if (u <= (mode - min) / d)
            return min + Math.sqrt(u * d * (mode - min));
        return max - Math.sqrt((1 - u) * d * (max - mode));
    };
    MathUtils.isPowerOfTwo = function (value) {
        return value && (value & (value - 1)) === 0;
    };
    MathUtils.PI = 3.1415927;
    MathUtils.PI2 = MathUtils.PI * 2;
    MathUtils.radiansToDegrees = 180 / MathUtils.PI;
    MathUtils.radDeg = MathUtils.radiansToDegrees;
    MathUtils.degreesToRadians = MathUtils.PI / 180;
    MathUtils.degRad = MathUtils.degreesToRadians;
    return MathUtils;
}());
/**
 * @public
 */
var Interpolation = /** @class */ (function () {
    function Interpolation() {
    }
    Interpolation.prototype.apply = function (start, end, a) {
        return start + (end - start) * this.applyInternal(a);
    };
    return Interpolation;
}());
/**
 * @public
 */
var Pow = /** @class */ (function (_super) {
    base_es_extends(Pow, _super);
    function Pow(power) {
        var _this = _super.call(this) || this;
        _this.power = 2;
        _this.power = power;
        return _this;
    }
    Pow.prototype.applyInternal = function (a) {
        if (a <= 0.5)
            return Math.pow(a * 2, this.power) / 2;
        return Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;
    };
    return Pow;
}(Interpolation));
/**
 * @public
 */
var PowOut = /** @class */ (function (_super) {
    base_es_extends(PowOut, _super);
    function PowOut(power) {
        return _super.call(this, power) || this;
    }
    PowOut.prototype.applyInternal = function (a) {
        return Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;
    };
    return PowOut;
}(Pow));
/**
 * @public
 */
var Utils = /** @class */ (function () {
    function Utils() {
    }
    Utils.arrayCopy = function (source, sourceStart, dest, destStart, numElements) {
        for (var i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {
            dest[j] = source[i];
        }
    };
    Utils.arrayFill = function (array, fromIndex, toIndex, value) {
        for (var i = fromIndex; i < toIndex; i++)
            array[i] = value;
    };
    Utils.setArraySize = function (array, size, value) {
        if (value === void 0) { value = 0; }
        var oldSize = array.length;
        if (oldSize == size)
            return array;
        array.length = size;
        if (oldSize < size) {
            for (var i = oldSize; i < size; i++)
                array[i] = value;
        }
        return array;
    };
    Utils.ensureArrayCapacity = function (array, size, value) {
        if (value === void 0) { value = 0; }
        if (array.length >= size)
            return array;
        return Utils.setArraySize(array, size, value);
    };
    Utils.newArray = function (size, defaultValue) {
        var array = new Array(size);
        for (var i = 0; i < size; i++)
            array[i] = defaultValue;
        return array;
    };
    Utils.newFloatArray = function (size) {
        if (Utils.SUPPORTS_TYPED_ARRAYS)
            return new Float32Array(size);
        else {
            var array = new Array(size);
            for (var i = 0; i < array.length; i++)
                array[i] = 0;
            return array;
        }
    };
    Utils.newShortArray = function (size) {
        if (Utils.SUPPORTS_TYPED_ARRAYS)
            return new Int16Array(size);
        else {
            var array = new Array(size);
            for (var i = 0; i < array.length; i++)
                array[i] = 0;
            return array;
        }
    };
    Utils.toFloatArray = function (array) {
        return Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;
    };
    Utils.toSinglePrecision = function (value) {
        return Utils.SUPPORTS_TYPED_ARRAYS ? fround(value) : value;
    };
    // This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109
    Utils.webkit602BugfixHelper = function (alpha, blend) {
    };
    Utils.contains = function (array, element, identity) {
        for (var i = 0; i < array.length; i++)
            if (array[i] == element)
                return true;
        return false;
    };
    Utils.enumValue = function (type, name) {
        return type[name[0].toUpperCase() + name.slice(1)];
    };
    Utils.SUPPORTS_TYPED_ARRAYS = typeof (Float32Array) !== "undefined";
    return Utils;
}());
/**
 * @public
 */
var DebugUtils = /** @class */ (function () {
    function DebugUtils() {
    }
    DebugUtils.logBones = function (skeleton) {
        for (var i = 0; i < skeleton.bones.length; i++) {
            var bone = skeleton.bones[i];
            var mat = bone.matrix;
            console.log(bone.data.name + ", " + mat.a + ", " + mat.b + ", " + mat.c + ", " + mat.d + ", " + mat.tx + ", " + mat.ty);
        }
    };
    return DebugUtils;
}());
/**
 * @public
 */
var Pool = /** @class */ (function () {
    function Pool(instantiator) {
        this.items = new Array();
        this.instantiator = instantiator;
    }
    Pool.prototype.obtain = function () {
        return this.items.length > 0 ? this.items.pop() : this.instantiator();
    };
    Pool.prototype.free = function (item) {
        if (item.reset)
            item.reset();
        this.items.push(item);
    };
    Pool.prototype.freeAll = function (items) {
        for (var i = 0; i < items.length; i++)
            this.free(items[i]);
    };
    Pool.prototype.clear = function () {
        this.items.length = 0;
    };
    return Pool;
}());
/**
 * @public
 */
var Vector2 = /** @class */ (function () {
    function Vector2(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = x;
        this.y = y;
    }
    Vector2.prototype.set = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    Vector2.prototype.length = function () {
        var x = this.x;
        var y = this.y;
        return Math.sqrt(x * x + y * y);
    };
    Vector2.prototype.normalize = function () {
        var len = this.length();
        if (len != 0) {
            this.x /= len;
            this.y /= len;
        }
        return this;
    };
    return Vector2;
}());
/**
 * @public
 */
var TimeKeeper = /** @class */ (function () {
    function TimeKeeper() {
        this.maxDelta = 0.064;
        this.framesPerSecond = 0;
        this.delta = 0;
        this.totalTime = 0;
        this.lastTime = Date.now() / 1000;
        this.frameCount = 0;
        this.frameTime = 0;
    }
    TimeKeeper.prototype.update = function () {
        var now = Date.now() / 1000;
        this.delta = now - this.lastTime;
        this.frameTime += this.delta;
        this.totalTime += this.delta;
        if (this.delta > this.maxDelta)
            this.delta = this.maxDelta;
        this.lastTime = now;
        this.frameCount++;
        if (this.frameTime > 1) {
            this.framesPerSecond = this.frameCount / this.frameTime;
            this.frameTime = 0;
            this.frameCount = 0;
        }
    };
    return TimeKeeper;
}());
/**
 * @public
 */
var WindowedMean = /** @class */ (function () {
    function WindowedMean(windowSize) {
        if (windowSize === void 0) { windowSize = 32; }
        this.addedValues = 0;
        this.lastValue = 0;
        this.mean = 0;
        this.dirty = true;
        this.values = new Array(windowSize);
    }
    WindowedMean.prototype.hasEnoughData = function () {
        return this.addedValues >= this.values.length;
    };
    WindowedMean.prototype.addValue = function (value) {
        if (this.addedValues < this.values.length)
            this.addedValues++;
        this.values[this.lastValue++] = value;
        if (this.lastValue > this.values.length - 1)
            this.lastValue = 0;
        this.dirty = true;
    };
    WindowedMean.prototype.getMean = function () {
        if (this.hasEnoughData()) {
            if (this.dirty) {
                var mean = 0;
                for (var i = 0; i < this.values.length; i++)
                    mean += this.values[i];
                this.mean = mean / this.values.length;
                this.dirty = false;
            }
            return this.mean;
        }
        return 0;
    };
    return WindowedMean;
}());

/** Collects each visible BoundingBoxAttachment and computes the world vertices for its polygon. The polygon vertices are
 * provided along with convenience methods for doing hit detection.
 * @public
 * */
var SkeletonBoundsBase = /** @class */ (function () {
    function SkeletonBoundsBase() {
        /** The left edge of the axis aligned bounding box. */
        this.minX = 0;
        /** The bottom edge of the axis aligned bounding box. */
        this.minY = 0;
        /** The right edge of the axis aligned bounding box. */
        this.maxX = 0;
        /** The top edge of the axis aligned bounding box. */
        this.maxY = 0;
        /** The visible bounding boxes. */
        this.boundingBoxes = new Array();
        /** The world vertices for the bounding box polygons. */
        this.polygons = new Array();
        this.polygonPool = new Pool(function () {
            return Utils.newFloatArray(16);
        });
    }
    /** Clears any previous polygons, finds all visible bounding box attachments, and computes the world vertices for each bounding
     * box's polygon.
     * @param updateAabb If true, the axis aligned bounding box containing all the polygons is computed. If false, the
     *           SkeletonBounds AABB methods will always return true. */
    SkeletonBoundsBase.prototype.update = function (skeleton, updateAabb) {
        if (!skeleton)
            throw new Error("skeleton cannot be null.");
        var boundingBoxes = this.boundingBoxes;
        var polygons = this.polygons;
        var polygonPool = this.polygonPool;
        var slots = skeleton.slots;
        var slotCount = slots.length;
        boundingBoxes.length = 0;
        polygonPool.freeAll(polygons);
        polygons.length = 0;
        for (var i = 0; i < slotCount; i++) {
            var slot = slots[i];
            if (!slot.bone.active)
                continue;
            var attachment = slot.getAttachment();
            if (attachment != null && attachment.type === AttachmentType.BoundingBox) {
                var boundingBox = attachment;
                boundingBoxes.push(boundingBox);
                var polygon = polygonPool.obtain();
                if (polygon.length != boundingBox.worldVerticesLength) {
                    polygon = Utils.newFloatArray(boundingBox.worldVerticesLength);
                }
                polygons.push(polygon);
                boundingBox.computeWorldVertices(slot, 0, boundingBox.worldVerticesLength, polygon, 0, 2);
            }
        }
        if (updateAabb) {
            this.aabbCompute();
        }
        else {
            this.minX = Number.POSITIVE_INFINITY;
            this.minY = Number.POSITIVE_INFINITY;
            this.maxX = Number.NEGATIVE_INFINITY;
            this.maxY = Number.NEGATIVE_INFINITY;
        }
    };
    SkeletonBoundsBase.prototype.aabbCompute = function () {
        var minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;
        var polygons = this.polygons;
        for (var i = 0, n = polygons.length; i < n; i++) {
            var polygon = polygons[i];
            var vertices = polygon;
            for (var ii = 0, nn = polygon.length; ii < nn; ii += 2) {
                var x = vertices[ii];
                var y = vertices[ii + 1];
                minX = Math.min(minX, x);
                minY = Math.min(minY, y);
                maxX = Math.max(maxX, x);
                maxY = Math.max(maxY, y);
            }
        }
        this.minX = minX;
        this.minY = minY;
        this.maxX = maxX;
        this.maxY = maxY;
    };
    /** Returns true if the axis aligned bounding box contains the point. */
    SkeletonBoundsBase.prototype.aabbContainsPoint = function (x, y) {
        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;
    };
    /** Returns true if the axis aligned bounding box intersects the line segment. */
    SkeletonBoundsBase.prototype.aabbIntersectsSegment = function (x1, y1, x2, y2) {
        var minX = this.minX;
        var minY = this.minY;
        var maxX = this.maxX;
        var maxY = this.maxY;
        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))
            return false;
        var m = (y2 - y1) / (x2 - x1);
        var y = m * (minX - x1) + y1;
        if (y > minY && y < maxY)
            return true;
        y = m * (maxX - x1) + y1;
        if (y > minY && y < maxY)
            return true;
        var x = (minY - y1) / m + x1;
        if (x > minX && x < maxX)
            return true;
        x = (maxY - y1) / m + x1;
        if (x > minX && x < maxX)
            return true;
        return false;
    };
    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */
    SkeletonBoundsBase.prototype.aabbIntersectsSkeleton = function (bounds) {
        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;
    };
    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more
     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true.
     * Cannot be done here because BoundingBoxAttachment is not a thing yet*/
    SkeletonBoundsBase.prototype.containsPoint = function (x, y) {
        var polygons = this.polygons;
        for (var i = 0, n = polygons.length; i < n; i++)
            if (this.containsPointPolygon(polygons[i], x, y))
                return this.boundingBoxes[i];
        return null;
    };
    /** Returns true if the polygon contains the point. */
    SkeletonBoundsBase.prototype.containsPointPolygon = function (polygon, x, y) {
        var vertices = polygon;
        var nn = polygon.length;
        var prevIndex = nn - 2;
        var inside = false;
        for (var ii = 0; ii < nn; ii += 2) {
            var vertexY = vertices[ii + 1];
            var prevY = vertices[prevIndex + 1];
            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {
                var vertexX = vertices[ii];
                if (vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x)
                    inside = !inside;
            }
            prevIndex = ii;
        }
        return inside;
    };
    /** Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it
     * is usually more efficient to only call this method if {@link #aabbIntersectsSegment()} returns
     * true. */
    SkeletonBoundsBase.prototype.intersectsSegment = function (x1, y1, x2, y2) {
        var polygons = this.polygons;
        for (var i = 0, n = polygons.length; i < n; i++)
            if (this.intersectsSegmentPolygon(polygons[i], x1, y1, x2, y2))
                return this.boundingBoxes[i];
        return null;
    };
    /** Returns true if the polygon contains any part of the line segment. */
    SkeletonBoundsBase.prototype.intersectsSegmentPolygon = function (polygon, x1, y1, x2, y2) {
        var vertices = polygon;
        var nn = polygon.length;
        var width12 = x1 - x2, height12 = y1 - y2;
        var det1 = x1 * y2 - y1 * x2;
        var x3 = vertices[nn - 2], y3 = vertices[nn - 1];
        for (var ii = 0; ii < nn; ii += 2) {
            var x4 = vertices[ii], y4 = vertices[ii + 1];
            var det2 = x3 * y4 - y3 * x4;
            var width34 = x3 - x4, height34 = y3 - y4;
            var det3 = width12 * height34 - height12 * width34;
            var x = (det1 * width34 - width12 * det2) / det3;
            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {
                var y = (det1 * height34 - height12 * det2) / det3;
                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1)))
                    return true;
            }
            x3 = x4;
            y3 = y4;
        }
        return false;
    };
    /** Returns the polygon for the specified bounding box, or null. */
    SkeletonBoundsBase.prototype.getPolygon = function (boundingBox) {
        if (!boundingBox)
            throw new Error("boundingBox cannot be null.");
        var index = this.boundingBoxes.indexOf(boundingBox);
        return index == -1 ? null : this.polygons[index];
    };
    /** The width of the axis aligned bounding box. */
    SkeletonBoundsBase.prototype.getWidth = function () {
        return this.maxX - this.minX;
    };
    /** The height of the axis aligned bounding box. */
    SkeletonBoundsBase.prototype.getHeight = function () {
        return this.maxY - this.minY;
    };
    return SkeletonBoundsBase;
}());

/**
 * @public
 */
var base_es_settings = {
    yDown: true,
    /**
     * pixi-spine gives option to not fail at certain parsing errors
     * spine-ts fails here
     */
    FAIL_ON_NON_EXISTING_SKIN: false,
    /**
     * past Spine.globalAutoUpdate
     */
    GLOBAL_AUTO_UPDATE: true,
    /**
     * past Spine.globalDelayLimit
     */
    GLOBAL_DELAY_LIMIT: 0,
};

var tempRgb = [0, 0, 0];
/**
 * @public
 */
var SpineSprite = /** @class */ (function (_super) {
    base_es_extends(SpineSprite, _super);
    function SpineSprite() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.region = null;
        _this.attachment = null;
        return _this;
    }
    return SpineSprite;
}(Sprite));
/**
 * @public
 */
var SpineMesh = /** @class */ (function (_super) {
    base_es_extends(SpineMesh, _super);
    function SpineMesh(texture, vertices, uvs, indices, drawMode) {
        var _this = _super.call(this, texture, vertices, uvs, indices, drawMode) || this;
        _this.region = null;
        _this.attachment = null;
        return _this;
    }
    return SpineMesh;
}(SimpleMesh));
/**
 * A class that enables the you to import and run your spine animations in pixi.
 * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class
 * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source
 *
 * ```js
 * let spineAnimation = new spine(spineData);
 * ```
 *
 * @public
 * @class
 * @extends Container
 * @memberof spine
 * @param spineData {object} The spine data loaded from a spine atlas.
 */
var SpineBase = /** @class */ (function (_super) {
    base_es_extends(SpineBase, _super);
    function SpineBase(spineData) {
        var _this = _super.call(this) || this;
        if (!spineData) {
            throw new Error('The spineData param is required.');
        }
        if ((typeof spineData) === "string") {
            throw new Error('spineData param cant be string. Please use spine.Spine.fromAtlas("YOUR_RESOURCE_NAME") from now on.');
        }
        /**
         * The spineData object
         *
         * @member {object}
         */
        _this.spineData = spineData;
        /**
         * A spine Skeleton object
         *
         * @member {object}
         */
        _this.createSkeleton(spineData);
        /**
         * An array of containers
         *
         * @member {Container[]}
         */
        _this.slotContainers = [];
        _this.tempClipContainers = [];
        for (var i = 0, n = _this.skeleton.slots.length; i < n; i++) {
            var slot = _this.skeleton.slots[i];
            var attachment = slot.getAttachment();
            var slotContainer = _this.newContainer();
            _this.slotContainers.push(slotContainer);
            _this.addChild(slotContainer);
            _this.tempClipContainers.push(null);
            if (!attachment) {
                continue;
            }
            if (attachment.type === AttachmentType.Region) {
                var spriteName = attachment.name;
                var sprite = _this.createSprite(slot, attachment, spriteName);
                slot.currentSprite = sprite;
                slot.currentSpriteName = spriteName;
                slotContainer.addChild(sprite);
            }
            else if (attachment.type === AttachmentType.Mesh) {
                var mesh = _this.createMesh(slot, attachment);
                slot.currentMesh = mesh;
                slot.currentMeshId = attachment.id;
                slot.currentMeshName = attachment.name;
                slotContainer.addChild(mesh);
            }
            else if (attachment.type === AttachmentType.Clipping) {
                _this.createGraphics(slot, attachment);
                slotContainer.addChild(slot.clippingContainer);
                slotContainer.addChild(slot.currentGraphics);
            }
        }
        /**
         * The tint applied to all spine slots. This is a [r,g,b] value. A value of [1,1,1] will remove any tint effect.
         *
         * @member {number}
         * @memberof spine.Spine#
         */
        _this.tintRgb = new Float32Array([1, 1, 1]);
        _this.autoUpdate = true;
        _this.visible = true;
        return _this;
    }
    Object.defineProperty(SpineBase.prototype, "debug", {
        get: function () {
            return this._debug;
        },
        set: function (value) {
            var _a;
            if (value == this._debug) { // soft equality allows null == undefined
                return;
            }
            (_a = this._debug) === null || _a === void 0 ? void 0 : _a.unregisterSpine(this);
            value === null || value === void 0 ? void 0 : value.registerSpine(this);
            this._debug = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpineBase.prototype, "autoUpdate", {
        /**
         * If this flag is set to true, the spine animation will be automatically updated every
         * time the object id drawn. The down side of this approach is that the delta time is
         * automatically calculated and you could miss out on cool effects like slow motion,
         * pause, skip ahead and the sorts. Most of these effects can be achieved even with
         * autoUpdate enabled but are harder to achieve.
         *
         * @member {boolean}
         * @memberof spine.Spine#
         * @default true
         */
        get: function () {
            return this._autoUpdate;
        },
        set: function (value) {
            if (value !== this._autoUpdate) {
                this._autoUpdate = value;
                this.updateTransform = value ? SpineBase.prototype.autoUpdateTransform : Container.prototype.updateTransform;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpineBase.prototype, "tint", {
        /**
         * The tint applied to the spine object. This is a hex value. A value of 0xFFFFFF will remove any tint effect.
         *
         * @member {number}
         * @memberof spine.Spine#
         * @default 0xFFFFFF
         */
        get: function () {
            return rgb2hex(this.tintRgb);
        },
        set: function (value) {
            this.tintRgb = hex2rgb(value, this.tintRgb);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpineBase.prototype, "delayLimit", {
        /**
         * Limit value for the update dt with Spine.globalDelayLimit
         * that can be overridden with localDelayLimit
         * @return {number} - Maximum processed dt value for the update
         */
        get: function () {
            var limit = typeof this.localDelayLimit !== "undefined" ?
                this.localDelayLimit : base_es_settings.GLOBAL_DELAY_LIMIT;
            // If limit is 0, this means there is no limit for the delay
            return limit || Number.MAX_VALUE;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Update the spine skeleton and its animations by delta time (dt)
     *
     * @param dt {number} Delta time. Time by which the animation should be updated
     */
    SpineBase.prototype.update = function (dt) {
        var _a;
        // Limit delta value to avoid animation jumps
        var delayLimit = this.delayLimit;
        if (dt > delayLimit)
            dt = delayLimit;
        this.state.update(dt);
        this.state.apply(this.skeleton);
        //check we haven't been destroyed via a spine event callback in state update
        if (!this.skeleton)
            return;
        this.skeleton.updateWorldTransform();
        var slots = this.skeleton.slots;
        // in case pixi has double tint
        var globalClr = this.color;
        var light = null, dark = null;
        if (globalClr) {
            light = globalClr.light;
            dark = globalClr.dark;
        }
        else {
            light = this.tintRgb;
        }
        // let thack = false;
        for (var i = 0, n = slots.length; i < n; i++) {
            var slot = slots[i];
            var attachment = slot.getAttachment();
            var slotContainer = this.slotContainers[i];
            if (!attachment) {
                slotContainer.visible = false;
                continue;
            }
            var spriteColor = null;
            if (attachment.sequence) {
                attachment.sequence.apply(slot, attachment);
            }
            var region = attachment.region;
            var attColor = attachment.color;
            switch (attachment != null && attachment.type) {
                case AttachmentType.Region:
                    var transform = slotContainer.transform;
                    transform.setFromMatrix(slot.bone.matrix);
                    region = attachment.region;
                    if (slot.currentMesh) {
                        slot.currentMesh.visible = false;
                        slot.currentMesh = null;
                        slot.currentMeshId = undefined;
                        slot.currentMeshName = undefined;
                    }
                    if (!region) {
                        if (slot.currentSprite) {
                            slot.currentSprite.renderable = false;
                        }
                        break;
                    }
                    if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.name) {
                        var spriteName = attachment.name;
                        if (slot.currentSprite) {
                            slot.currentSprite.visible = false;
                        }
                        slot.sprites = slot.sprites || {};
                        if (slot.sprites[spriteName] !== undefined) {
                            slot.sprites[spriteName].visible = true;
                        }
                        else {
                            var sprite = this.createSprite(slot, attachment, spriteName);
                            slotContainer.addChild(sprite);
                        }
                        slot.currentSprite = slot.sprites[spriteName];
                        slot.currentSpriteName = spriteName;
                        // force sprite update when attachment name is same.
                        // issues https://github.com/pixijs/pixi-spine/issues/318
                    }
                    slot.currentSprite.renderable = true;
                    if (!slot.hackRegion) {
                        this.setSpriteRegion(attachment, slot.currentSprite, region);
                    }
                    if (slot.currentSprite.color) {
                        //YAY! double - tint!
                        spriteColor = slot.currentSprite.color;
                    }
                    else {
                        tempRgb[0] = light[0] * slot.color.r * attColor.r;
                        tempRgb[1] = light[1] * slot.color.g * attColor.g;
                        tempRgb[2] = light[2] * slot.color.b * attColor.b;
                        slot.currentSprite.tint = rgb2hex(tempRgb);
                    }
                    slot.currentSprite.blendMode = slot.blendMode;
                    break;
                case AttachmentType.Mesh:
                    if (slot.currentSprite) {
                        //TODO: refactor this thing, switch it on and off for container
                        slot.currentSprite.visible = false;
                        slot.currentSprite = null;
                        slot.currentSpriteName = undefined;
                        //TODO: refactor this shit
                        var transform_1 = new Transform();
                        transform_1._parentID = -1;
                        transform_1._worldID = slotContainer.transform._worldID;
                        slotContainer.transform = transform_1;
                    }
                    if (!region) {
                        if (slot.currentMesh) {
                            slot.currentMesh.renderable = false;
                        }
                        break;
                    }
                    var id = attachment.id;
                    if (slot.currentMeshId === undefined || slot.currentMeshId !== id) {
                        var meshId = id;
                        if (slot.currentMesh) {
                            slot.currentMesh.visible = false;
                        }
                        slot.meshes = slot.meshes || {};
                        if (slot.meshes[meshId] !== undefined) {
                            slot.meshes[meshId].visible = true;
                        }
                        else {
                            var mesh = this.createMesh(slot, attachment);
                            slotContainer.addChild(mesh);
                        }
                        slot.currentMesh = slot.meshes[meshId];
                        slot.currentMeshName = attachment.name;
                        slot.currentMeshId = meshId;
                    }
                    slot.currentMesh.renderable = true;
                    attachment.computeWorldVerticesOld(slot, slot.currentMesh.vertices);
                    if (slot.currentMesh.color) {
                        // pixi-heaven
                        spriteColor = slot.currentMesh.color;
                    }
                    else {
                        tempRgb[0] = light[0] * slot.color.r * attColor.r;
                        tempRgb[1] = light[1] * slot.color.g * attColor.g;
                        tempRgb[2] = light[2] * slot.color.b * attColor.b;
                        slot.currentMesh.tint = rgb2hex(tempRgb);
                    }
                    slot.currentMesh.blendMode = slot.blendMode;
                    if (!slot.hackRegion) {
                        this.setMeshRegion(attachment, slot.currentMesh, region);
                    }
                    break;
                case AttachmentType.Clipping:
                    if (!slot.currentGraphics) {
                        this.createGraphics(slot, attachment);
                        slotContainer.addChild(slot.clippingContainer);
                        slotContainer.addChild(slot.currentGraphics);
                    }
                    this.updateGraphics(slot, attachment);
                    slotContainer.alpha = 1.0;
                    slotContainer.visible = true;
                    continue;
                default:
                    slotContainer.visible = false;
                    continue;
            }
            slotContainer.visible = true;
            // pixi has double tint
            if (spriteColor) {
                var r0 = slot.color.r * attColor.r;
                var g0 = slot.color.g * attColor.g;
                var b0 = slot.color.b * attColor.b;
                //YAY! double-tint!
                spriteColor.setLight(light[0] * r0 + dark[0] * (1.0 - r0), light[1] * g0 + dark[1] * (1.0 - g0), light[2] * b0 + dark[2] * (1.0 - b0));
                if (slot.darkColor) {
                    r0 = slot.darkColor.r;
                    g0 = slot.darkColor.g;
                    b0 = slot.darkColor.b;
                }
                else {
                    r0 = 0.0;
                    g0 = 0.0;
                    b0 = 0.0;
                }
                spriteColor.setDark(light[0] * r0 + dark[0] * (1 - r0), light[1] * g0 + dark[1] * (1 - g0), light[2] * b0 + dark[2] * (1 - b0));
            }
            slotContainer.alpha = slot.color.a;
        }
        //== this is clipping implementation ===
        //TODO: remove parent hacks when pixi masks allow it
        var drawOrder = this.skeleton.drawOrder;
        var clippingAttachment = null;
        var clippingContainer = null;
        for (var i = 0, n = drawOrder.length; i < n; i++) {
            var slot = slots[drawOrder[i].data.index];
            var slotContainer = this.slotContainers[drawOrder[i].data.index];
            if (!clippingContainer) {
                //Adding null check as it is possible for slotContainer.parent to be null in the event of a spine being disposed off in its loop callback
                if (slotContainer.parent !== null && slotContainer.parent !== this) {
                    slotContainer.parent.removeChild(slotContainer);
                    //silend add hack
                    slotContainer.parent = this;
                }
            }
            if (slot.currentGraphics && slot.getAttachment()) {
                clippingContainer = slot.clippingContainer;
                clippingAttachment = slot.getAttachment();
                clippingContainer.children.length = 0;
                this.children[i] = slotContainer;
                if (clippingAttachment.endSlot === slot.data) {
                    clippingAttachment.endSlot = null;
                }
            }
            else {
                if (clippingContainer) {
                    var c = this.tempClipContainers[i];
                    if (!c) {
                        c = this.tempClipContainers[i] = this.newContainer();
                        c.visible = false;
                    }
                    this.children[i] = c;
                    //silent remove hack
                    slotContainer.parent = null;
                    clippingContainer.addChild(slotContainer);
                    if (clippingAttachment.endSlot == slot.data) {
                        clippingContainer.renderable = true;
                        clippingContainer = null;
                        clippingAttachment = null;
                    }
                }
                else {
                    this.children[i] = slotContainer;
                }
            }
        }
        // if you can debug, then debug!
        (_a = this._debug) === null || _a === void 0 ? void 0 : _a.renderDebug(this);
    };
    SpineBase.prototype.setSpriteRegion = function (attachment, sprite, region) {
        // prevent setters calling when attachment and region is same
        if (sprite.attachment === attachment && sprite.region === region) {
            return;
        }
        sprite.region = region;
        sprite.attachment = attachment;
        sprite.texture = region.texture;
        sprite.rotation = attachment.rotation * MathUtils.degRad;
        sprite.position.x = attachment.x;
        sprite.position.y = attachment.y;
        sprite.alpha = attachment.color.a;
        if (!region.size) {
            sprite.scale.x = attachment.scaleX * attachment.width / region.originalWidth;
            sprite.scale.y = -attachment.scaleY * attachment.height / region.originalHeight;
        }
        else {
            //hacked!
            sprite.scale.x = region.size.width / region.originalWidth;
            sprite.scale.y = -region.size.height / region.originalHeight;
        }
    };
    SpineBase.prototype.setMeshRegion = function (attachment, mesh, region) {
        if (mesh.attachment === attachment && mesh.region === region) {
            return;
        }
        mesh.region = region;
        mesh.attachment = attachment;
        mesh.texture = region.texture;
        region.texture.updateUvs();
        mesh.uvBuffer.update(attachment.regionUVs);
    };
    /**
     * When autoupdate is set to yes this function is used as pixi's updateTransform function
     *
     * @private
     */
    SpineBase.prototype.autoUpdateTransform = function () {
        if (base_es_settings.GLOBAL_AUTO_UPDATE) {
            this.lastTime = this.lastTime || Date.now();
            var timeDelta = (Date.now() - this.lastTime) * 0.001;
            this.lastTime = Date.now();
            this.update(timeDelta);
        }
        else {
            this.lastTime = 0;
        }
        Container.prototype.updateTransform.call(this);
    };
    /**
     * Create a new sprite to be used with core.RegionAttachment
     *
     * @param slot {spine.Slot} The slot to which the attachment is parented
     * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent
     * @private
     */
    SpineBase.prototype.createSprite = function (slot, attachment, defName) {
        var region = attachment.region;
        if (slot.hackAttachment === attachment) {
            region = slot.hackRegion;
        }
        var texture = region ? region.texture : null;
        var sprite = this.newSprite(texture);
        sprite.anchor.set(0.5);
        if (region) {
            this.setSpriteRegion(attachment, sprite, attachment.region);
        }
        slot.sprites = slot.sprites || {};
        slot.sprites[defName] = sprite;
        return sprite;
    };
    /**
     * Creates a Strip from the spine data
     * @param slot {spine.Slot} The slot to which the attachment is parented
     * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent
     * @private
     */
    SpineBase.prototype.createMesh = function (slot, attachment) {
        var region = attachment.region;
        if (slot.hackAttachment === attachment) {
            region = slot.hackRegion;
            slot.hackAttachment = null;
            slot.hackRegion = null;
        }
        var strip = this.newMesh(region ? region.texture : null, new Float32Array(attachment.regionUVs.length), attachment.regionUVs, new Uint16Array(attachment.triangles), DRAW_MODES.TRIANGLES);
        if (typeof strip._canvasPadding !== "undefined") {
            strip._canvasPadding = 1.5;
        }
        strip.alpha = attachment.color.a;
        strip.region = attachment.region;
        if (region) {
            this.setMeshRegion(attachment, strip, region);
        }
        slot.meshes = slot.meshes || {};
        slot.meshes[attachment.id] = strip;
        return strip;
    };
    //@ts-ignore
    SpineBase.prototype.createGraphics = function (slot, clip) {
        var graphics = this.newGraphics();
        var poly = new Polygon([]);
        graphics.clear();
        graphics.beginFill(0xffffff, 1);
        graphics.drawPolygon(poly);
        graphics.renderable = false;
        slot.currentGraphics = graphics;
        slot.clippingContainer = this.newContainer();
        slot.clippingContainer.mask = slot.currentGraphics;
        return graphics;
    };
    SpineBase.prototype.updateGraphics = function (slot, clip) {
        var geom = slot.currentGraphics.geometry;
        var vertices = geom.graphicsData[0].shape.points;
        var n = clip.worldVerticesLength;
        vertices.length = n;
        clip.computeWorldVertices(slot, 0, n, vertices, 0, 2);
        geom.invalidate();
    };
    /**
     * Changes texture in attachment in specific slot.
     *
     * PIXI runtime feature, it was made to satisfy our users.
     *
     * @param slotIndex {number}
     * @param [texture = null] {PIXI.Texture} If null, take default (original) texture
     * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there
     * @returns {boolean} Success flag
     */
    SpineBase.prototype.hackTextureBySlotIndex = function (slotIndex, texture, size) {
        if (texture === void 0) { texture = null; }
        if (size === void 0) { size = null; }
        var slot = this.skeleton.slots[slotIndex];
        if (!slot) {
            return false;
        }
        var attachment = slot.getAttachment();
        var region = attachment.region;
        if (texture) {
            region = new TextureRegion();
            region.texture = texture;
            region.size = size;
            slot.hackRegion = region;
            slot.hackAttachment = attachment;
        }
        else {
            slot.hackRegion = null;
            slot.hackAttachment = null;
        }
        if (slot.currentSprite) {
            this.setSpriteRegion(attachment, slot.currentSprite, region);
        }
        else if (slot.currentMesh) {
            this.setMeshRegion(attachment, slot.currentMesh, region);
        }
        return true;
    };
    /**
     * Changes texture in attachment in specific slot.
     *
     * PIXI runtime feature, it was made to satisfy our users.
     *
     * @param slotName {string}
     * @param [texture = null] {PIXI.Texture} If null, take default (original) texture
     * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there
     * @returns {boolean} Success flag
     */
    SpineBase.prototype.hackTextureBySlotName = function (slotName, texture, size) {
        if (texture === void 0) { texture = null; }
        if (size === void 0) { size = null; }
        var index = this.skeleton.findSlotIndex(slotName);
        if (index == -1) {
            return false;
        }
        return this.hackTextureBySlotIndex(index, texture, size);
    };
    /**
     * Changes texture of an attachment
     *
     * PIXI runtime feature, it was made to satisfy our users.
     *
     * @param slotName {string}
     * @param attachmentName {string}
     * @param [texture = null] {PIXI.Texture} If null, take default (original) texture
     * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there
     * @returns {boolean} Success flag
     */
    SpineBase.prototype.hackTextureAttachment = function (slotName, attachmentName, texture, size) {
        if (size === void 0) { size = null; }
        // changes the texture of an attachment at the skeleton level
        var slotIndex = this.skeleton.findSlotIndex(slotName);
        var attachment = this.skeleton.getAttachmentByName(slotName, attachmentName);
        attachment.region.texture = texture;
        var slot = this.skeleton.slots[slotIndex];
        if (!slot) {
            return false;
        }
        // gets the currently active attachment in this slot
        var currentAttachment = slot.getAttachment();
        if (attachmentName === currentAttachment.name) {
            // if the attachment we are changing is currently active, change the the live texture
            var region = attachment.region;
            if (texture) {
                region = new TextureRegion();
                region.texture = texture;
                region.size = size;
                slot.hackRegion = region;
                slot.hackAttachment = currentAttachment;
            }
            else {
                slot.hackRegion = null;
                slot.hackAttachment = null;
            }
            if (slot.currentSprite && slot.currentSprite.region != region) {
                this.setSpriteRegion(currentAttachment, slot.currentSprite, region);
                slot.currentSprite.region = region;
            }
            else if (slot.currentMesh && slot.currentMesh.region != region) {
                this.setMeshRegion(currentAttachment, slot.currentMesh, region);
            }
            return true;
        }
        return false;
    };
    //those methods can be overriden to spawn different classes
    SpineBase.prototype.newContainer = function () {
        return new Container();
    };
    SpineBase.prototype.newSprite = function (tex) {
        return new SpineSprite(tex);
    };
    SpineBase.prototype.newGraphics = function () {
        return new Graphics();
    };
    SpineBase.prototype.newMesh = function (texture, vertices, uvs, indices, drawMode) {
        return new SpineMesh(texture, vertices, uvs, indices, drawMode);
    };
    SpineBase.prototype.transformHack = function () {
        return 1;
    };
    /**
     * Hack for pixi-display and pixi-lights. Every attachment name ending with a suffix will be added to different layer
     * @param nameSuffix
     * @param group
     * @param outGroup
     */
    SpineBase.prototype.hackAttachmentGroups = function (nameSuffix, group, outGroup) {
        if (!nameSuffix) {
            return undefined;
        }
        var list_d = [], list_n = [];
        for (var i = 0, len = this.skeleton.slots.length; i < len; i++) {
            var slot = this.skeleton.slots[i];
            var name_1 = slot.currentSpriteName || slot.currentMeshName || "";
            var target = slot.currentSprite || slot.currentMesh;
            if (name_1.endsWith(nameSuffix)) {
                target.parentGroup = group;
                list_n.push(target);
            }
            else if (outGroup && target) {
                target.parentGroup = outGroup;
                list_d.push(target);
            }
        }
        return [list_d, list_n];
    };
    SpineBase.prototype.destroy = function (options) {
        this.debug = null; // setter will do the cleanup
        for (var i = 0, n = this.skeleton.slots.length; i < n; i++) {
            var slot = this.skeleton.slots[i];
            for (var name_2 in slot.meshes) {
                slot.meshes[name_2].destroy(options);
            }
            slot.meshes = null;
            for (var name_3 in slot.sprites) {
                slot.sprites[name_3].destroy(options);
            }
            slot.sprites = null;
        }
        for (var i = 0, n = this.slotContainers.length; i < n; i++) {
            this.slotContainers[i].destroy(options);
        }
        this.spineData = null;
        this.skeleton = null;
        this.slotContainers = null;
        this.stateData = null;
        this.state = null;
        this.tempClipContainers = null;
        _super.prototype.destroy.call(this, options);
    };
    SpineBase.clippingPolygon = [];
    return SpineBase;
}(Container));
/**
 * The visibility of the spine object. If false the object will not be drawn,
 * the updateTransform function will not be called, and the spine will not be automatically updated.
 *
 * @member {boolean}
 * @memberof spine.Spine#
 * @default true
 */
Object.defineProperty(SpineBase.prototype, 'visible', {
    get: function () {
        return this._visible;
    },
    set: function (value) {
        if (value !== this._visible) {
            this._visible = value;
            if (value) {
                this.lastTime = 0;
            }
        }
    }
});

/**
 * This is a debug renderer that uses PixiJS Graphics under the hood.
 * @public
 */
var SpineDebugRenderer = /** @class */ (function () {
    function SpineDebugRenderer() {
        this.registeredSpines = new Map();
        this.drawDebug = true;
        this.drawMeshHull = true;
        this.drawMeshTriangles = true;
        this.drawBones = true;
        this.drawPaths = true;
        this.drawBoundingBoxes = true;
        this.drawClipping = true;
        this.drawRegionAttachments = true;
        this.lineWidth = 1;
        this.regionAttachmentsColor = 0x0078ff;
        this.meshHullColor = 0x0078ff;
        this.meshTrianglesColor = 0xffcc00;
        this.clippingPolygonColor = 0xff00ff;
        this.boundingBoxesRectColor = 0x00ff00;
        this.boundingBoxesPolygonColor = 0x00ff00;
        this.boundingBoxesCircleColor = 0x00ff00;
        this.pathsCurveColor = 0xff0000;
        this.pathsLineColor = 0xff00ff;
        this.skeletonXYColor = 0xff0000;
        this.bonesColor = 0x00eecc;
    }
    /**
     * The debug is attached by force to each spine object. So we need to create it inside the spine when we get the first update
     */
    SpineDebugRenderer.prototype.registerSpine = function (spine) {
        if (this.registeredSpines.has(spine)) {
            console.warn("SpineDebugRenderer.registerSpine() - this spine is already registered!", spine);
        }
        var debugDisplayObjects = {
            parentDebugContainer: new Container(),
            bones: new Container(),
            skeletonXY: new Graphics(),
            regionAttachmentsShape: new Graphics(),
            meshTrianglesLine: new Graphics(),
            meshHullLine: new Graphics(),
            clippingPolygon: new Graphics(),
            boundingBoxesRect: new Graphics(),
            boundingBoxesCircle: new Graphics(),
            boundingBoxesPolygon: new Graphics(),
            pathsCurve: new Graphics(),
            pathsLine: new Graphics(),
        };
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.bones);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.skeletonXY);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.regionAttachmentsShape);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.meshTrianglesLine);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.meshHullLine);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.clippingPolygon);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.boundingBoxesRect);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.boundingBoxesCircle);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.boundingBoxesPolygon);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.pathsCurve);
        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.pathsLine);
        spine.addChild(debugDisplayObjects.parentDebugContainer);
        this.registeredSpines.set(spine, debugDisplayObjects);
    };
    SpineDebugRenderer.prototype.renderDebug = function (spine) {
        if (!this.registeredSpines.has(spine)) {
            // This should never happen. Spines are registered when you assign spine.debug
            this.registerSpine(spine);
        }
        var debugDisplayObjects = this.registeredSpines.get(spine);
        debugDisplayObjects.skeletonXY.clear();
        debugDisplayObjects.regionAttachmentsShape.clear();
        debugDisplayObjects.meshTrianglesLine.clear();
        debugDisplayObjects.meshHullLine.clear();
        debugDisplayObjects.clippingPolygon.clear();
        debugDisplayObjects.boundingBoxesRect.clear();
        debugDisplayObjects.boundingBoxesCircle.clear();
        debugDisplayObjects.boundingBoxesPolygon.clear();
        debugDisplayObjects.pathsCurve.clear();
        debugDisplayObjects.pathsLine.clear();
        for (var len = debugDisplayObjects.bones.children.length; len > 0; len--) {
            debugDisplayObjects.bones.children[len - 1].destroy({ children: true, texture: true, baseTexture: true });
        }
        var scale = spine.scale.x || spine.scale.y || 1;
        var lineWidth = this.lineWidth / scale;
        if (this.drawBones) {
            this.drawBonesFunc(spine, debugDisplayObjects, lineWidth, scale);
        }
        if (this.drawPaths) {
            this.drawPathsFunc(spine, debugDisplayObjects, lineWidth);
        }
        if (this.drawBoundingBoxes) {
            this.drawBoundingBoxesFunc(spine, debugDisplayObjects, lineWidth);
        }
        if (this.drawClipping) {
            this.drawClippingFunc(spine, debugDisplayObjects, lineWidth);
        }
        if (this.drawMeshHull || this.drawMeshTriangles) {
            this.drawMeshHullAndMeshTriangles(spine, debugDisplayObjects, lineWidth);
        }
        if (this.drawRegionAttachments) {
            this.drawRegionAttachmentsFunc(spine, debugDisplayObjects, lineWidth);
        }
    };
    SpineDebugRenderer.prototype.drawBonesFunc = function (spine, debugDisplayObjects, lineWidth, scale) {
        var skeleton = spine.skeleton;
        var skeletonX = skeleton.x;
        var skeletonY = skeleton.y;
        var bones = skeleton.bones;
        debugDisplayObjects.skeletonXY.lineStyle(lineWidth, this.skeletonXYColor, 1);
        for (var i = 0, len = bones.length; i < len; i++) {
            var bone = bones[i], boneLen = bone.data.length, starX = skeletonX + bone.matrix.tx, starY = skeletonY + bone.matrix.ty, endX = skeletonX + boneLen * bone.matrix.a + bone.matrix.tx, endY = skeletonY + boneLen * bone.matrix.b + bone.matrix.ty;
            if (bone.data.name === "root" || bone.data.parent === null) {
                continue;
            }
            // Triangle calculation formula
            // area: A=sqrt((a+b+c)*(-a+b+c)*(a-b+c)*(a+b-c))/4
            // alpha: alpha=acos((pow(b, 2)+pow(c, 2)-pow(a, 2))/(2*b*c))
            // beta: beta=acos((pow(a, 2)+pow(c, 2)-pow(b, 2))/(2*a*c))
            // gamma: gamma=acos((pow(a, 2)+pow(b, 2)-pow(c, 2))/(2*a*b))
            var w = Math.abs(starX - endX), h = Math.abs(starY - endY), 
            // a = w, // side length a
            a2 = Math.pow(w, 2), // square root of side length a
            b = h, // side length b
            b2 = Math.pow(h, 2), // square root of side length b
            c = Math.sqrt(a2 + b2), // side length c
            c2 = Math.pow(c, 2), // square root of side length c
            rad = Math.PI / 180, 
            // A = Math.acos([a2 + c2 - b2] / [2 * a * c]) || 0, // Angle A
            // C = Math.acos([a2 + b2 - c2] / [2 * a * b]) || 0, // C angle
            B = Math.acos((c2 + b2 - a2) / (2 * b * c)) || 0; // angle of corner B
            if (c === 0) {
                continue;
            }
            var gp = new Graphics();
            debugDisplayObjects.bones.addChild(gp);
            // draw bone
            var refRation = c / 50 / scale;
            gp.beginFill(this.bonesColor, 1);
            gp.drawPolygon(0, 0, 0 - refRation, c - refRation * 3, 0, c - refRation, 0 + refRation, c - refRation * 3);
            gp.endFill();
            gp.x = starX;
            gp.y = starY;
            gp.pivot.y = c;
            // Calculate bone rotation angle
            var rotation = 0;
            if (starX < endX && starY < endY) {
                // bottom right
                rotation = -B + 180 * rad;
            }
            else if (starX > endX && starY < endY) {
                // bottom left
                rotation = 180 * rad + B;
            }
            else if (starX > endX && starY > endY) {
                // top left
                rotation = -B;
            }
            else if (starX < endX && starY > endY) {
                // bottom left
                rotation = B;
            }
            else if (starY === endY && starX < endX) {
                // To the right
                rotation = 90 * rad;
            }
            else if (starY === endY && starX > endX) {
                // go left
                rotation = -90 * rad;
            }
            else if (starX === endX && starY < endY) {
                // down
                rotation = 180 * rad;
            }
            else if (starX === endX && starY > endY) {
                // up
                rotation = 0;
            }
            gp.rotation = rotation;
            // Draw the starting rotation point of the bone
            gp.lineStyle(lineWidth + refRation / 2.4, this.bonesColor, 1);
            gp.beginFill(0x000000, 0.6);
            gp.drawCircle(0, c, refRation * 1.2);
            gp.endFill();
        }
        // Draw the skeleton starting point "X" form
        var startDotSize = lineWidth * 3;
        debugDisplayObjects.skeletonXY.moveTo(skeletonX - startDotSize, skeletonY - startDotSize);
        debugDisplayObjects.skeletonXY.lineTo(skeletonX + startDotSize, skeletonY + startDotSize);
        debugDisplayObjects.skeletonXY.moveTo(skeletonX + startDotSize, skeletonY - startDotSize);
        debugDisplayObjects.skeletonXY.lineTo(skeletonX - startDotSize, skeletonY + startDotSize);
    };
    SpineDebugRenderer.prototype.drawRegionAttachmentsFunc = function (spine, debugDisplayObjects, lineWidth) {
        var skeleton = spine.skeleton;
        var slots = skeleton.slots;
        debugDisplayObjects.regionAttachmentsShape.lineStyle(lineWidth, this.regionAttachmentsColor, 1);
        for (var i = 0, len = slots.length; i < len; i++) {
            var slot = slots[i], attachment = slot.getAttachment();
            if (attachment == null || attachment.type !== AttachmentType.Region) {
                continue;
            }
            var regionAttachment = attachment;
            var vertices = new Float32Array(8);
            regionAttachment === null || regionAttachment === void 0 ? void 0 : regionAttachment.updateOffset(); // We don't need this on all versions
            regionAttachment.computeWorldVertices(slot, vertices, 0, 2);
            debugDisplayObjects.regionAttachmentsShape.drawPolygon(Array.from(vertices.slice(0, 8)));
        }
    };
    SpineDebugRenderer.prototype.drawMeshHullAndMeshTriangles = function (spine, debugDisplayObjects, lineWidth) {
        var skeleton = spine.skeleton;
        var slots = skeleton.slots;
        debugDisplayObjects.meshHullLine.lineStyle(lineWidth, this.meshHullColor, 1);
        debugDisplayObjects.meshTrianglesLine.lineStyle(lineWidth, this.meshTrianglesColor, 1);
        for (var i = 0, len = slots.length; i < len; i++) {
            var slot = slots[i];
            if (!slot.bone.active) {
                continue;
            }
            var attachment = slot.getAttachment();
            if (attachment == null || attachment.type !== AttachmentType.Mesh) {
                continue;
            }
            var meshAttachment = attachment;
            var vertices = new Float32Array(meshAttachment.worldVerticesLength), triangles = meshAttachment.triangles;
            var hullLength = meshAttachment.hullLength;
            meshAttachment.computeWorldVertices(slot, 0, meshAttachment.worldVerticesLength, vertices, 0, 2);
            // draw the skinned mesh (triangle)
            if (this.drawMeshTriangles) {
                for (var i_1 = 0, len_1 = triangles.length; i_1 < len_1; i_1 += 3) {
                    var v1 = triangles[i_1] * 2, v2 = triangles[i_1 + 1] * 2, v3 = triangles[i_1 + 2] * 2;
                    debugDisplayObjects.meshTrianglesLine.moveTo(vertices[v1], vertices[v1 + 1]);
                    debugDisplayObjects.meshTrianglesLine.lineTo(vertices[v2], vertices[v2 + 1]);
                    debugDisplayObjects.meshTrianglesLine.lineTo(vertices[v3], vertices[v3 + 1]);
                }
            }
            // draw skin border
            if (this.drawMeshHull && hullLength > 0) {
                hullLength = (hullLength >> 1) * 2;
                var lastX = vertices[hullLength - 2], lastY = vertices[hullLength - 1];
                for (var i_2 = 0, len_2 = hullLength; i_2 < len_2; i_2 += 2) {
                    var x = vertices[i_2], y = vertices[i_2 + 1];
                    debugDisplayObjects.meshHullLine.moveTo(x, y);
                    debugDisplayObjects.meshHullLine.lineTo(lastX, lastY);
                    lastX = x;
                    lastY = y;
                }
            }
        }
    };
    SpineDebugRenderer.prototype.drawClippingFunc = function (spine, debugDisplayObjects, lineWidth) {
        var skeleton = spine.skeleton;
        var slots = skeleton.slots;
        debugDisplayObjects.clippingPolygon.lineStyle(lineWidth, this.clippingPolygonColor, 1);
        for (var i = 0, len = slots.length; i < len; i++) {
            var slot = slots[i];
            if (!slot.bone.active) {
                continue;
            }
            var attachment = slot.getAttachment();
            if (attachment == null || attachment.type !== AttachmentType.Clipping) {
                continue;
            }
            var clippingAttachment = attachment;
            var nn = clippingAttachment.worldVerticesLength, world = new Float32Array(nn);
            clippingAttachment.computeWorldVertices(slot, 0, nn, world, 0, 2);
            debugDisplayObjects.clippingPolygon.drawPolygon(Array.from(world));
        }
    };
    SpineDebugRenderer.prototype.drawBoundingBoxesFunc = function (spine, debugDisplayObjects, lineWidth) {
        var _this = this;
        // draw the total outline of the bounding box
        debugDisplayObjects.boundingBoxesRect.lineStyle(lineWidth, this.boundingBoxesRectColor, 5);
        var bounds = new SkeletonBoundsBase();
        bounds.update(spine.skeleton, true);
        debugDisplayObjects.boundingBoxesRect.drawRect(bounds.minX, bounds.minY, bounds.getWidth(), bounds.getHeight());
        var polygons = bounds.polygons, drawPolygon = function (polygonVertices, _offset, count) {
            debugDisplayObjects.boundingBoxesPolygon.lineStyle(lineWidth, _this.boundingBoxesPolygonColor, 1);
            debugDisplayObjects.boundingBoxesPolygon.beginFill(_this.boundingBoxesPolygonColor, 0.1);
            if (count < 3) {
                throw new Error("Polygon must contain at least 3 vertices");
            }
            var paths = [], dotSize = lineWidth * 2;
            for (var i = 0, len = polygonVertices.length; i < len; i += 2) {
                var x1 = polygonVertices[i], y1 = polygonVertices[i + 1];
                // draw the bounding box node
                debugDisplayObjects.boundingBoxesCircle.lineStyle(0);
                debugDisplayObjects.boundingBoxesCircle.beginFill(_this.boundingBoxesCircleColor);
                debugDisplayObjects.boundingBoxesCircle.drawCircle(x1, y1, dotSize);
                debugDisplayObjects.boundingBoxesCircle.endFill();
                paths.push(x1, y1);
            }
            // draw the bounding box area
            debugDisplayObjects.boundingBoxesPolygon.drawPolygon(paths);
            debugDisplayObjects.boundingBoxesPolygon.endFill();
        };
        for (var i = 0, len = polygons.length; i < len; i++) {
            var polygon = polygons[i];
            drawPolygon(polygon, 0, polygon.length);
        }
    };
    SpineDebugRenderer.prototype.drawPathsFunc = function (spine, debugDisplayObjects, lineWidth) {
        var skeleton = spine.skeleton;
        var slots = skeleton.slots;
        debugDisplayObjects.pathsCurve.lineStyle(lineWidth, this.pathsCurveColor, 1);
        debugDisplayObjects.pathsLine.lineStyle(lineWidth, this.pathsLineColor, 1);
        for (var i = 0, len = slots.length; i < len; i++) {
            var slot = slots[i];
            if (!slot.bone.active) {
                continue;
            }
            var attachment = slot.getAttachment();
            if (attachment == null || attachment.type !== AttachmentType.Path) {
                continue;
            }
            var pathAttachment = attachment;
            var nn = pathAttachment.worldVerticesLength;
            var world = new Float32Array(nn);
            pathAttachment.computeWorldVertices(slot, 0, nn, world, 0, 2);
            var x1 = world[2], y1 = world[3], x2 = 0, y2 = 0;
            if (pathAttachment.closed) {
                var cx1 = world[0], cy1 = world[1], cx2 = world[nn - 2], cy2 = world[nn - 1];
                x2 = world[nn - 4];
                y2 = world[nn - 3];
                // curve
                debugDisplayObjects.pathsCurve.moveTo(x1, y1);
                debugDisplayObjects.pathsCurve.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);
                // handle
                debugDisplayObjects.pathsLine.moveTo(x1, y1);
                debugDisplayObjects.pathsLine.lineTo(cx1, cy1);
                debugDisplayObjects.pathsLine.moveTo(x2, y2);
                debugDisplayObjects.pathsLine.lineTo(cx2, cy2);
            }
            nn -= 4;
            for (var ii = 4; ii < nn; ii += 6) {
                var cx1 = world[ii], cy1 = world[ii + 1], cx2 = world[ii + 2], cy2 = world[ii + 3];
                x2 = world[ii + 4];
                y2 = world[ii + 5];
                // curve
                debugDisplayObjects.pathsCurve.moveTo(x1, y1);
                debugDisplayObjects.pathsCurve.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);
                // handle
                debugDisplayObjects.pathsLine.moveTo(x1, y1);
                debugDisplayObjects.pathsLine.lineTo(cx1, cy1);
                debugDisplayObjects.pathsLine.moveTo(x2, y2);
                debugDisplayObjects.pathsLine.lineTo(cx2, cy2);
                x1 = x2;
                y1 = y2;
            }
        }
    };
    SpineDebugRenderer.prototype.unregisterSpine = function (spine) {
        if (!this.registeredSpines.has(spine)) {
            console.warn("SpineDebugRenderer.unregisterSpine() - spine is not registered, can't unregister!", spine);
        }
        var debugDisplayObjects = this.registeredSpines.get(spine);
        debugDisplayObjects.parentDebugContainer.destroy({ baseTexture: true, children: true, texture: true });
        this.registeredSpines.delete(spine);
    };
    return SpineDebugRenderer;
}());


//# sourceMappingURL=base.es.js.map

;// CONCATENATED MODULE: ../node_modules/@pixi-spine/runtime-3.8/lib/runtime-3.8.es.js
/* eslint-disable */
 
/*!
 * @pixi-spine/runtime-3.8 - v3.1.2
 * Compiled Tue, 10 Jan 2023 14:17:32 UTC
 *
 * @pixi-spine/runtime-3.8 is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2019-2020, Ivan Igorevich Popelyshev <ivan.popelyshev@gmail.com>, All Rights Reserved
 */




/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var runtime_3_8_es_extendStatics = function(d, b) {
    runtime_3_8_es_extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return runtime_3_8_es_extendStatics(d, b);
};

function runtime_3_8_es_extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    runtime_3_8_es_extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * @public
 */
var Attachment = /** @class */ (function () {
    function Attachment(name) {
        if (name == null)
            throw new Error("name cannot be null.");
        this.name = name;
    }
    return Attachment;
}());
/**
 * @public
 */
var VertexAttachment = /** @class */ (function (_super) {
    runtime_3_8_es_extends(VertexAttachment, _super);
    function VertexAttachment(name) {
        var _this = _super.call(this, name) || this;
        _this.id = (VertexAttachment.nextID++ & 65535) << 11;
        _this.worldVerticesLength = 0;
        _this.deformAttachment = _this;
        return _this;
    }
    VertexAttachment.prototype.computeWorldVerticesOld = function (slot, worldVertices) {
        this.computeWorldVertices(slot, 0, this.worldVerticesLength, worldVertices, 0, 2);
    };
    /** Transforms local vertices to world coordinates.
     * @param start The index of the first local vertex value to transform. Each vertex has 2 values, x and y.
     * @param count The number of world vertex values to output. Must be <= {@link #getWorldVerticesLength()} - start.
     * @param worldVertices The output world vertices. Must have a length >= offset + count.
     * @param offset The worldVertices index to begin writing values. */
    VertexAttachment.prototype.computeWorldVertices = function (slot, start, count, worldVertices, offset, stride) {
        count = offset + (count >> 1) * stride;
        var skeleton = slot.bone.skeleton;
        var deformArray = slot.deform;
        var vertices = this.vertices;
        var bones = this.bones;
        if (bones == null) {
            if (deformArray.length > 0)
                vertices = deformArray;
            var mat = slot.bone.matrix;
            var x = mat.tx;
            var y = mat.ty;
            var a = mat.a, b = mat.c, c = mat.b, d = mat.d;
            for (var v_1 = start, w = offset; w < count; v_1 += 2, w += stride) {
                var vx = vertices[v_1], vy = vertices[v_1 + 1];
                worldVertices[w] = vx * a + vy * b + x;
                worldVertices[w + 1] = vx * c + vy * d + y;
            }
            return;
        }
        var v = 0, skip = 0;
        for (var i = 0; i < start; i += 2) {
            var n = bones[v];
            v += n + 1;
            skip += n;
        }
        var skeletonBones = skeleton.bones;
        if (deformArray.length == 0) {
            for (var w = offset, b = skip * 3; w < count; w += stride) {
                var wx = 0, wy = 0;
                var n = bones[v++];
                n += v;
                for (; v < n; v++, b += 3) {
                    var mat = skeletonBones[bones[v]].matrix;
                    var vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];
                    wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;
                    wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;
                }
                worldVertices[w] = wx;
                worldVertices[w + 1] = wy;
            }
        }
        else {
            var deform = deformArray;
            for (var w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {
                var wx = 0, wy = 0;
                var n = bones[v++];
                n += v;
                for (; v < n; v++, b += 3, f += 2) {
                    var mat = skeletonBones[bones[v]].matrix;
                    var vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];
                    wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;
                    wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;
                }
                worldVertices[w] = wx;
                worldVertices[w + 1] = wy;
            }
        }
    };
    VertexAttachment.prototype.copyTo = function (attachment) {
        if (this.bones != null) {
            attachment.bones = new Array(this.bones.length);
            Utils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);
        }
        else
            attachment.bones = null;
        if (this.vertices != null) {
            attachment.vertices = Utils.newFloatArray(this.vertices.length);
            Utils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);
        }
        else
            attachment.vertices = null;
        attachment.worldVerticesLength = this.worldVerticesLength;
        attachment.deformAttachment = this.deformAttachment;
    };
    VertexAttachment.nextID = 0;
    return VertexAttachment;
}(Attachment));

/**
 * @public
 */
var BoundingBoxAttachment = /** @class */ (function (_super) {
    runtime_3_8_es_extends(BoundingBoxAttachment, _super);
    function BoundingBoxAttachment(name) {
        var _this = _super.call(this, name) || this;
        _this.type = AttachmentType.BoundingBox;
        _this.color = new Color(1, 1, 1, 1);
        return _this;
    }
    BoundingBoxAttachment.prototype.copy = function () {
        var copy = new BoundingBoxAttachment(this.name);
        this.copyTo(copy);
        copy.color.setFromColor(this.color);
        return copy;
    };
    return BoundingBoxAttachment;
}(VertexAttachment));

/**
 * @public
 */
var ClippingAttachment = /** @class */ (function (_super) {
    runtime_3_8_es_extends(ClippingAttachment, _super);
    function ClippingAttachment(name) {
        var _this = _super.call(this, name) || this;
        _this.type = AttachmentType.Clipping;
        // Nonessential.
        _this.color = new Color(0.2275, 0.2275, 0.8078, 1); // ce3a3aff
        return _this;
    }
    ClippingAttachment.prototype.copy = function () {
        var copy = new ClippingAttachment(this.name);
        this.copyTo(copy);
        copy.endSlot = this.endSlot;
        copy.color.setFromColor(this.color);
        return copy;
    };
    return ClippingAttachment;
}(VertexAttachment));

/**
 * @public
 */
var MeshAttachment = /** @class */ (function (_super) {
    runtime_3_8_es_extends(MeshAttachment, _super);
    function MeshAttachment(name) {
        var _this = _super.call(this, name) || this;
        _this.type = AttachmentType.Mesh;
        _this.color = new Color(1, 1, 1, 1);
        _this.tempColor = new Color(0, 0, 0, 0);
        return _this;
    }
    MeshAttachment.prototype.getParentMesh = function () {
        return this.parentMesh;
    };
    /** @param parentMesh May be null. */
    MeshAttachment.prototype.setParentMesh = function (parentMesh) {
        this.parentMesh = parentMesh;
        if (parentMesh != null) {
            this.bones = parentMesh.bones;
            this.vertices = parentMesh.vertices;
            this.worldVerticesLength = parentMesh.worldVerticesLength;
            this.regionUVs = parentMesh.regionUVs;
            this.triangles = parentMesh.triangles;
            this.hullLength = parentMesh.hullLength;
            this.worldVerticesLength = parentMesh.worldVerticesLength;
        }
    };
    MeshAttachment.prototype.copy = function () {
        if (this.parentMesh != null)
            return this.newLinkedMesh();
        var copy = new MeshAttachment(this.name);
        copy.region = this.region;
        copy.path = this.path;
        copy.color.setFromColor(this.color);
        this.copyTo(copy);
        copy.regionUVs = new Float32Array(this.regionUVs.length);
        Utils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);
        copy.triangles = new Array(this.triangles.length);
        Utils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);
        copy.hullLength = this.hullLength;
        // Nonessential.
        if (this.edges != null) {
            copy.edges = new Array(this.edges.length);
            Utils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);
        }
        copy.width = this.width;
        copy.height = this.height;
        return copy;
    };
    MeshAttachment.prototype.newLinkedMesh = function () {
        var copy = new MeshAttachment(this.name);
        copy.region = this.region;
        copy.path = this.path;
        copy.color.setFromColor(this.color);
        copy.deformAttachment = this.deformAttachment;
        copy.setParentMesh(this.parentMesh != null ? this.parentMesh : this);
        // copy.updateUVs();
        return copy;
    };
    return MeshAttachment;
}(VertexAttachment));

/**
 * @public
 */
var PathAttachment = /** @class */ (function (_super) {
    runtime_3_8_es_extends(PathAttachment, _super);
    function PathAttachment(name) {
        var _this = _super.call(this, name) || this;
        _this.type = AttachmentType.Path;
        _this.closed = false;
        _this.constantSpeed = false;
        _this.color = new Color(1, 1, 1, 1);
        return _this;
    }
    PathAttachment.prototype.copy = function () {
        var copy = new PathAttachment(this.name);
        this.copyTo(copy);
        copy.lengths = new Array(this.lengths.length);
        Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);
        copy.closed = closed;
        copy.constantSpeed = this.constantSpeed;
        copy.color.setFromColor(this.color);
        return copy;
    };
    return PathAttachment;
}(VertexAttachment));

/**
 * @public
 */
var PointAttachment = /** @class */ (function (_super) {
    runtime_3_8_es_extends(PointAttachment, _super);
    function PointAttachment(name) {
        var _this = _super.call(this, name) || this;
        _this.type = AttachmentType.Point;
        _this.color = new Color(0.38, 0.94, 0, 1);
        return _this;
    }
    PointAttachment.prototype.computeWorldPosition = function (bone, point) {
        var mat = bone.matrix;
        point.x = this.x * mat.a + this.y * mat.c + bone.worldX;
        point.y = this.x * mat.b + this.y * mat.d + bone.worldY;
        return point;
    };
    PointAttachment.prototype.computeWorldRotation = function (bone) {
        var mat = bone.matrix;
        var cos = MathUtils.cosDeg(this.rotation), sin = MathUtils.sinDeg(this.rotation);
        var x = cos * mat.a + sin * mat.c;
        var y = cos * mat.b + sin * mat.d;
        return Math.atan2(y, x) * MathUtils.radDeg;
    };
    PointAttachment.prototype.copy = function () {
        var copy = new PointAttachment(this.name);
        copy.x = this.x;
        copy.y = this.y;
        copy.rotation = this.rotation;
        copy.color.setFromColor(this.color);
        return copy;
    };
    return PointAttachment;
}(VertexAttachment));

/**
 * @public
 */
var Slot = /** @class */ (function () {
    function Slot(data, bone) {
        this.deform = new Array();
        if (data == null)
            throw new Error("data cannot be null.");
        if (bone == null)
            throw new Error("bone cannot be null.");
        this.data = data;
        this.bone = bone;
        this.color = new Color();
        this.darkColor = data.darkColor == null ? null : new Color();
        this.setToSetupPose();
        this.blendMode = this.data.blendMode;
    }
    /** @return May be null. */
    Slot.prototype.getAttachment = function () {
        return this.attachment;
    };
    /** Sets the attachment and if it changed, resets {@link #getAttachmentTime()} and clears {@link #getAttachmentVertices()}.
     * @param attachment May be null. */
    Slot.prototype.setAttachment = function (attachment) {
        if (this.attachment == attachment)
            return;
        this.attachment = attachment;
        this.attachmentTime = this.bone.skeleton.time;
        this.deform.length = 0;
    };
    Slot.prototype.setAttachmentTime = function (time) {
        this.attachmentTime = this.bone.skeleton.time - time;
    };
    /** Returns the time since the attachment was set. */
    Slot.prototype.getAttachmentTime = function () {
        return this.bone.skeleton.time - this.attachmentTime;
    };
    Slot.prototype.setToSetupPose = function () {
        this.color.setFromColor(this.data.color);
        if (this.darkColor != null)
            this.darkColor.setFromColor(this.data.darkColor);
        if (this.data.attachmentName == null)
            this.attachment = null;
        else {
            this.attachment = null;
            this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));
        }
    };
    return Slot;
}());

/**
 * @public
 */
var RegionAttachment = /** @class */ (function (_super) {
    runtime_3_8_es_extends(RegionAttachment, _super);
    function RegionAttachment(name) {
        var _this = _super.call(this, name) || this;
        _this.type = AttachmentType.Region;
        _this.x = 0;
        _this.y = 0;
        _this.scaleX = 1;
        _this.scaleY = 1;
        _this.rotation = 0;
        _this.width = 0;
        _this.height = 0;
        _this.color = new Color(1, 1, 1, 1);
        _this.offset = Utils.newFloatArray(8);
        _this.uvs = Utils.newFloatArray(8);
        _this.tempColor = new Color(1, 1, 1, 1);
        return _this;
    }
    RegionAttachment.prototype.updateOffset = function () {
        var regionScaleX = this.width / this.region.originalWidth * this.scaleX;
        var regionScaleY = this.height / this.region.originalHeight * this.scaleY;
        var localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;
        var localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;
        var localX2 = localX + this.region.width * regionScaleX;
        var localY2 = localY + this.region.height * regionScaleY;
        var radians = this.rotation * Math.PI / 180;
        var cos = Math.cos(radians);
        var sin = Math.sin(radians);
        var localXCos = localX * cos + this.x;
        var localXSin = localX * sin;
        var localYCos = localY * cos + this.y;
        var localYSin = localY * sin;
        var localX2Cos = localX2 * cos + this.x;
        var localX2Sin = localX2 * sin;
        var localY2Cos = localY2 * cos + this.y;
        var localY2Sin = localY2 * sin;
        var offset = this.offset;
        offset[RegionAttachment.OX1] = localXCos - localYSin;
        offset[RegionAttachment.OY1] = localYCos + localXSin;
        offset[RegionAttachment.OX2] = localXCos - localY2Sin;
        offset[RegionAttachment.OY2] = localY2Cos + localXSin;
        offset[RegionAttachment.OX3] = localX2Cos - localY2Sin;
        offset[RegionAttachment.OY3] = localY2Cos + localX2Sin;
        offset[RegionAttachment.OX4] = localX2Cos - localYSin;
        offset[RegionAttachment.OY4] = localYCos + localX2Sin;
    };
    RegionAttachment.prototype.setRegion = function (region) {
        this.region = region;
        var uvs = this.uvs;
        if (region.rotate) {
            uvs[2] = region.u;
            uvs[3] = region.v2;
            uvs[4] = region.u;
            uvs[5] = region.v;
            uvs[6] = region.u2;
            uvs[7] = region.v;
            uvs[0] = region.u2;
            uvs[1] = region.v2;
        }
        else {
            uvs[0] = region.u;
            uvs[1] = region.v2;
            uvs[2] = region.u;
            uvs[3] = region.v;
            uvs[4] = region.u2;
            uvs[5] = region.v;
            uvs[6] = region.u2;
            uvs[7] = region.v2;
        }
    };
    RegionAttachment.prototype.computeWorldVertices = function (bone, worldVertices, offset, stride) {
        var vertexOffset = this.offset;
        var mat = bone instanceof Slot ? bone.bone.matrix : bone.matrix;
        var x = mat.tx, y = mat.ty;
        var a = mat.a, b = mat.c, c = mat.b, d = mat.d;
        var offsetX = 0, offsetY = 0;
        offsetX = vertexOffset[RegionAttachment.OX1];
        offsetY = vertexOffset[RegionAttachment.OY1];
        worldVertices[offset] = offsetX * a + offsetY * b + x; // br
        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
        offset += stride;
        offsetX = vertexOffset[RegionAttachment.OX2];
        offsetY = vertexOffset[RegionAttachment.OY2];
        worldVertices[offset] = offsetX * a + offsetY * b + x; // bl
        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
        offset += stride;
        offsetX = vertexOffset[RegionAttachment.OX3];
        offsetY = vertexOffset[RegionAttachment.OY3];
        worldVertices[offset] = offsetX * a + offsetY * b + x; // ul
        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
        offset += stride;
        offsetX = vertexOffset[RegionAttachment.OX4];
        offsetY = vertexOffset[RegionAttachment.OY4];
        worldVertices[offset] = offsetX * a + offsetY * b + x; // ur
        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
    };
    RegionAttachment.prototype.copy = function () {
        var copy = new RegionAttachment(this.name);
        copy.region = this.region;
        copy.rendererObject = this.rendererObject;
        copy.path = this.path;
        copy.x = this.x;
        copy.y = this.y;
        copy.scaleX = this.scaleX;
        copy.scaleY = this.scaleY;
        copy.rotation = this.rotation;
        copy.width = this.width;
        copy.height = this.height;
        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);
        Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);
        copy.color.setFromColor(this.color);
        return copy;
    };
    RegionAttachment.OX1 = 0;
    RegionAttachment.OY1 = 1;
    RegionAttachment.OX2 = 2;
    RegionAttachment.OY2 = 3;
    RegionAttachment.OX3 = 4;
    RegionAttachment.OY3 = 5;
    RegionAttachment.OX4 = 6;
    RegionAttachment.OY4 = 7;
    RegionAttachment.X1 = 0;
    RegionAttachment.Y1 = 1;
    RegionAttachment.C1R = 2;
    RegionAttachment.C1G = 3;
    RegionAttachment.C1B = 4;
    RegionAttachment.C1A = 5;
    RegionAttachment.U1 = 6;
    RegionAttachment.V1 = 7;
    RegionAttachment.X2 = 8;
    RegionAttachment.Y2 = 9;
    RegionAttachment.C2R = 10;
    RegionAttachment.C2G = 11;
    RegionAttachment.C2B = 12;
    RegionAttachment.C2A = 13;
    RegionAttachment.U2 = 14;
    RegionAttachment.V2 = 15;
    RegionAttachment.X3 = 16;
    RegionAttachment.Y3 = 17;
    RegionAttachment.C3R = 18;
    RegionAttachment.C3G = 19;
    RegionAttachment.C3B = 20;
    RegionAttachment.C3A = 21;
    RegionAttachment.U3 = 22;
    RegionAttachment.V3 = 23;
    RegionAttachment.X4 = 24;
    RegionAttachment.Y4 = 25;
    RegionAttachment.C4R = 26;
    RegionAttachment.C4G = 27;
    RegionAttachment.C4B = 28;
    RegionAttachment.C4A = 29;
    RegionAttachment.U4 = 30;
    RegionAttachment.V4 = 31;
    return RegionAttachment;
}(Attachment));

/**
 * @public
 */
var JitterEffect = /** @class */ (function () {
    function JitterEffect(jitterX, jitterY) {
        this.jitterX = 0;
        this.jitterY = 0;
        this.jitterX = jitterX;
        this.jitterY = jitterY;
    }
    JitterEffect.prototype.begin = function (skeleton) {
    };
    JitterEffect.prototype.transform = function (position, uv, light, dark) {
        position.x += MathUtils.randomTriangular(-this.jitterX, this.jitterY);
        position.y += MathUtils.randomTriangular(-this.jitterX, this.jitterY);
    };
    JitterEffect.prototype.end = function () {
    };
    return JitterEffect;
}());

/**
 * @public
 */
var SwirlEffect = /** @class */ (function () {
    function SwirlEffect(radius) {
        this.centerX = 0;
        this.centerY = 0;
        this.radius = 0;
        this.angle = 0;
        this.worldX = 0;
        this.worldY = 0;
        this.radius = radius;
    }
    SwirlEffect.prototype.begin = function (skeleton) {
        this.worldX = skeleton.x + this.centerX;
        this.worldY = skeleton.y + this.centerY;
    };
    SwirlEffect.prototype.transform = function (position, uv, light, dark) {
        var radAngle = this.angle * MathUtils.degreesToRadians;
        var x = position.x - this.worldX;
        var y = position.y - this.worldY;
        var dist = Math.sqrt(x * x + y * y);
        if (dist < this.radius) {
            var theta = SwirlEffect.interpolation.apply(0, radAngle, (this.radius - dist) / this.radius);
            var cos = Math.cos(theta);
            var sin = Math.sin(theta);
            position.x = cos * x - sin * y + this.worldX;
            position.y = sin * x + cos * y + this.worldY;
        }
    };
    SwirlEffect.prototype.end = function () {
    };
    SwirlEffect.interpolation = new PowOut(2);
    return SwirlEffect;
}());

/** A simple container for a list of timelines and a name. */
/**
 * @public
 */
var Animation = /** @class */ (function () {
    function Animation(name, timelines, duration) {
        if (name == null)
            throw new Error("name cannot be null.");
        if (timelines == null)
            throw new Error("timelines cannot be null.");
        this.name = name;
        this.timelines = timelines;
        this.timelineIds = [];
        for (var i = 0; i < timelines.length; i++)
            this.timelineIds[timelines[i].getPropertyId()] = true;
        this.duration = duration;
    }
    Animation.prototype.hasTimeline = function (id) {
        return this.timelineIds[id] == true;
    };
    /** Applies all the animation's timelines to the specified skeleton.
     *
     * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.
     * @param loop If true, the animation repeats after {@link #getDuration()}.
     * @param events May be null to ignore fired events. */
    Animation.prototype.apply = function (skeleton, lastTime, time, loop, events, alpha, blend, direction) {
        if (skeleton == null)
            throw new Error("skeleton cannot be null.");
        if (loop && this.duration != 0) {
            time %= this.duration;
            if (lastTime > 0)
                lastTime %= this.duration;
        }
        var timelines = this.timelines;
        for (var i = 0, n = timelines.length; i < n; i++)
            timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);
    };
    /** @param target After the first and before the last value.
     * @returns index of first value greater than the target. */
    Animation.binarySearch = function (values, target, step) {
        if (step === void 0) { step = 1; }
        var low = 0;
        var high = values.length / step - 2;
        if (high == 0)
            return step;
        var current = high >>> 1;
        while (true) {
            if (values[(current + 1) * step] <= target)
                low = current + 1;
            else
                high = current;
            if (low == high)
                return (low + 1) * step;
            current = (low + high) >>> 1;
        }
    };
    Animation.linearSearch = function (values, target, step) {
        for (var i = 0, last = values.length - step; i <= last; i += step)
            if (values[i] > target)
                return i;
        return -1;
    };
    return Animation;
}());
/**
 * @public
 */
var TimelineType;
(function (TimelineType) {
    TimelineType[TimelineType["rotate"] = 0] = "rotate";
    TimelineType[TimelineType["translate"] = 1] = "translate";
    TimelineType[TimelineType["scale"] = 2] = "scale";
    TimelineType[TimelineType["shear"] = 3] = "shear";
    TimelineType[TimelineType["attachment"] = 4] = "attachment";
    TimelineType[TimelineType["color"] = 5] = "color";
    TimelineType[TimelineType["deform"] = 6] = "deform";
    TimelineType[TimelineType["event"] = 7] = "event";
    TimelineType[TimelineType["drawOrder"] = 8] = "drawOrder";
    TimelineType[TimelineType["ikConstraint"] = 9] = "ikConstraint";
    TimelineType[TimelineType["transformConstraint"] = 10] = "transformConstraint";
    TimelineType[TimelineType["pathConstraintPosition"] = 11] = "pathConstraintPosition";
    TimelineType[TimelineType["pathConstraintSpacing"] = 12] = "pathConstraintSpacing";
    TimelineType[TimelineType["pathConstraintMix"] = 13] = "pathConstraintMix";
    TimelineType[TimelineType["twoColor"] = 14] = "twoColor";
})(TimelineType || (TimelineType = {}));
/** The base class for timelines that use interpolation between key frame values. */
/**
 * @public
 */
var CurveTimeline = /** @class */ (function () {
    function CurveTimeline(frameCount) {
        if (frameCount <= 0)
            throw new Error("frameCount must be > 0: " + frameCount);
        this.curves = Utils.newFloatArray((frameCount - 1) * CurveTimeline.BEZIER_SIZE);
    }
    /** The number of key frames for this timeline. */
    CurveTimeline.prototype.getFrameCount = function () {
        return this.curves.length / CurveTimeline.BEZIER_SIZE + 1;
    };
    /** Sets the specified key frame to linear interpolation. */
    CurveTimeline.prototype.setLinear = function (frameIndex) {
        this.curves[frameIndex * CurveTimeline.BEZIER_SIZE] = CurveTimeline.LINEAR;
    };
    /** Sets the specified key frame to stepped interpolation. */
    CurveTimeline.prototype.setStepped = function (frameIndex) {
        this.curves[frameIndex * CurveTimeline.BEZIER_SIZE] = CurveTimeline.STEPPED;
    };
    /** Returns the interpolation type for the specified key frame.
     * @returns Linear is 0, stepped is 1, Bezier is 2. */
    CurveTimeline.prototype.getCurveType = function (frameIndex) {
        var index = frameIndex * CurveTimeline.BEZIER_SIZE;
        if (index == this.curves.length)
            return CurveTimeline.LINEAR;
        var type = this.curves[index];
        if (type == CurveTimeline.LINEAR)
            return CurveTimeline.LINEAR;
        if (type == CurveTimeline.STEPPED)
            return CurveTimeline.STEPPED;
        return CurveTimeline.BEZIER;
    };
    /** Sets the specified key frame to Bezier interpolation. `cx1` and `cx2` are from 0 to 1,
     * representing the percent of time between the two key frames. `cy1` and `cy2` are the percent of the
     * difference between the key frame's values. */
    CurveTimeline.prototype.setCurve = function (frameIndex, cx1, cy1, cx2, cy2) {
        var tmpx = (-cx1 * 2 + cx2) * 0.03, tmpy = (-cy1 * 2 + cy2) * 0.03;
        var dddfx = ((cx1 - cx2) * 3 + 1) * 0.006, dddfy = ((cy1 - cy2) * 3 + 1) * 0.006;
        var ddfx = tmpx * 2 + dddfx, ddfy = tmpy * 2 + dddfy;
        var dfx = cx1 * 0.3 + tmpx + dddfx * 0.16666667, dfy = cy1 * 0.3 + tmpy + dddfy * 0.16666667;
        var i = frameIndex * CurveTimeline.BEZIER_SIZE;
        var curves = this.curves;
        curves[i++] = CurveTimeline.BEZIER;
        var x = dfx, y = dfy;
        for (var n = i + CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {
            curves[i] = x;
            curves[i + 1] = y;
            dfx += ddfx;
            dfy += ddfy;
            ddfx += dddfx;
            ddfy += dddfy;
            x += dfx;
            y += dfy;
        }
    };
    /** Returns the interpolated percentage for the specified key frame and linear percentage. */
    CurveTimeline.prototype.getCurvePercent = function (frameIndex, percent) {
        percent = MathUtils.clamp(percent, 0, 1);
        var curves = this.curves;
        var i = frameIndex * CurveTimeline.BEZIER_SIZE;
        var type = curves[i];
        if (type == CurveTimeline.LINEAR)
            return percent;
        if (type == CurveTimeline.STEPPED)
            return 0;
        i++;
        var x = 0;
        for (var start = i, n = i + CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {
            x = curves[i];
            if (x >= percent) {
                var prevX = void 0, prevY = void 0;
                if (i == start) {
                    prevX = 0;
                    prevY = 0;
                }
                else {
                    prevX = curves[i - 2];
                    prevY = curves[i - 1];
                }
                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);
            }
        }
        var y = curves[i - 1];
        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.
    };
    CurveTimeline.LINEAR = 0;
    CurveTimeline.STEPPED = 1;
    CurveTimeline.BEZIER = 2;
    CurveTimeline.BEZIER_SIZE = 10 * 2 - 1;
    return CurveTimeline;
}());
/** Changes a bone's local {@link Bone#rotation}. */
/**
 * @public
 */
var RotateTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(RotateTimeline, _super);
    function RotateTimeline(frameCount) {
        var _this = _super.call(this, frameCount) || this;
        _this.frames = Utils.newFloatArray(frameCount << 1);
        return _this;
    }
    RotateTimeline.prototype.getPropertyId = function () {
        return (TimelineType.rotate << 24) + this.boneIndex;
    };
    /** Sets the time and angle of the specified keyframe. */
    RotateTimeline.prototype.setFrame = function (frameIndex, time, degrees) {
        frameIndex <<= 1;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + RotateTimeline.ROTATION] = degrees;
    };
    RotateTimeline.prototype.apply = function (skeleton, lastTime, time, events, alpha, blend, direction) {
        var frames = this.frames;
        var bone = skeleton.bones[this.boneIndex];
        if (!bone.active)
            return;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    bone.rotation = bone.data.rotation;
                    return;
                case MixBlend.first:
                    var r_1 = bone.data.rotation - bone.rotation;
                    bone.rotation += (r_1 - (16384 - ((16384.499999999996 - r_1 / 360) | 0)) * 360) * alpha;
            }
            return;
        }
        if (time >= frames[frames.length - RotateTimeline.ENTRIES]) { // Time is after last frame.
            var r_2 = frames[frames.length + RotateTimeline.PREV_ROTATION];
            switch (blend) {
                case MixBlend.setup:
                    bone.rotation = bone.data.rotation + r_2 * alpha;
                    break;
                case MixBlend.first:
                case MixBlend.replace:
                    r_2 += bone.data.rotation - bone.rotation;
                    r_2 -= (16384 - ((16384.499999999996 - r_2 / 360) | 0)) * 360; // Wrap within -180 and 180.
                case MixBlend.add:
                    bone.rotation += r_2 * alpha;
            }
            return;
        }
        // Interpolate between the previous frame and the current frame.
        var frame = Animation.binarySearch(frames, time, RotateTimeline.ENTRIES);
        var prevRotation = frames[frame + RotateTimeline.PREV_ROTATION];
        var frameTime = frames[frame];
        var percent = this.getCurvePercent((frame >> 1) - 1, 1 - (time - frameTime) / (frames[frame + RotateTimeline.PREV_TIME] - frameTime));
        var r = frames[frame + RotateTimeline.ROTATION] - prevRotation;
        r = prevRotation + (r - (16384 - ((16384.499999999996 - r / 360) | 0)) * 360) * percent;
        switch (blend) {
            case MixBlend.setup:
                bone.rotation = bone.data.rotation + (r - (16384 - ((16384.499999999996 - r / 360) | 0)) * 360) * alpha;
                break;
            case MixBlend.first:
            case MixBlend.replace:
                r += bone.data.rotation - bone.rotation;
            case MixBlend.add:
                bone.rotation += (r - (16384 - ((16384.499999999996 - r / 360) | 0)) * 360) * alpha;
        }
    };
    RotateTimeline.ENTRIES = 2;
    RotateTimeline.PREV_TIME = -2;
    RotateTimeline.PREV_ROTATION = -1;
    RotateTimeline.ROTATION = 1;
    return RotateTimeline;
}(CurveTimeline));
/** Changes a bone's local {@link Bone#x} and {@link Bone#y}. */
/**
 * @public
 */
var TranslateTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(TranslateTimeline, _super);
    function TranslateTimeline(frameCount) {
        var _this = _super.call(this, frameCount) || this;
        _this.frames = Utils.newFloatArray(frameCount * TranslateTimeline.ENTRIES);
        return _this;
    }
    TranslateTimeline.prototype.getPropertyId = function () {
        return (TimelineType.translate << 24) + this.boneIndex;
    };
    /** Sets the time in seconds, x, and y values for the specified key frame. */
    TranslateTimeline.prototype.setFrame = function (frameIndex, time, x, y) {
        frameIndex *= TranslateTimeline.ENTRIES;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + TranslateTimeline.X] = x;
        this.frames[frameIndex + TranslateTimeline.Y] = y;
    };
    TranslateTimeline.prototype.apply = function (skeleton, lastTime, time, events, alpha, blend, direction) {
        var frames = this.frames;
        var bone = skeleton.bones[this.boneIndex];
        if (!bone.active)
            return;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    bone.x = bone.data.x;
                    bone.y = bone.data.y;
                    return;
                case MixBlend.first:
                    bone.x += (bone.data.x - bone.x) * alpha;
                    bone.y += (bone.data.y - bone.y) * alpha;
            }
            return;
        }
        var x = 0, y = 0;
        if (time >= frames[frames.length - TranslateTimeline.ENTRIES]) { // Time is after last frame.
            x = frames[frames.length + TranslateTimeline.PREV_X];
            y = frames[frames.length + TranslateTimeline.PREV_Y];
        }
        else {
            // Interpolate between the previous frame and the current frame.
            var frame = Animation.binarySearch(frames, time, TranslateTimeline.ENTRIES);
            x = frames[frame + TranslateTimeline.PREV_X];
            y = frames[frame + TranslateTimeline.PREV_Y];
            var frameTime = frames[frame];
            var percent = this.getCurvePercent(frame / TranslateTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + TranslateTimeline.PREV_TIME] - frameTime));
            x += (frames[frame + TranslateTimeline.X] - x) * percent;
            y += (frames[frame + TranslateTimeline.Y] - y) * percent;
        }
        switch (blend) {
            case MixBlend.setup:
                bone.x = bone.data.x + x * alpha;
                bone.y = bone.data.y + y * alpha;
                break;
            case MixBlend.first:
            case MixBlend.replace:
                bone.x += (bone.data.x + x - bone.x) * alpha;
                bone.y += (bone.data.y + y - bone.y) * alpha;
                break;
            case MixBlend.add:
                bone.x += x * alpha;
                bone.y += y * alpha;
        }
    };
    TranslateTimeline.ENTRIES = 3;
    TranslateTimeline.PREV_TIME = -3;
    TranslateTimeline.PREV_X = -2;
    TranslateTimeline.PREV_Y = -1;
    TranslateTimeline.X = 1;
    TranslateTimeline.Y = 2;
    return TranslateTimeline;
}(CurveTimeline));
/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */
/**
 * @public
 */
var ScaleTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(ScaleTimeline, _super);
    function ScaleTimeline(frameCount) {
        return _super.call(this, frameCount) || this;
    }
    ScaleTimeline.prototype.getPropertyId = function () {
        return (TimelineType.scale << 24) + this.boneIndex;
    };
    ScaleTimeline.prototype.apply = function (skeleton, lastTime, time, events, alpha, blend, direction) {
        var frames = this.frames;
        var bone = skeleton.bones[this.boneIndex];
        if (!bone.active)
            return;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    bone.scaleX = bone.data.scaleX;
                    bone.scaleY = bone.data.scaleY;
                    return;
                case MixBlend.first:
                    bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;
                    bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;
            }
            return;
        }
        var x = 0, y = 0;
        if (time >= frames[frames.length - ScaleTimeline.ENTRIES]) { // Time is after last frame.
            x = frames[frames.length + ScaleTimeline.PREV_X] * bone.data.scaleX;
            y = frames[frames.length + ScaleTimeline.PREV_Y] * bone.data.scaleY;
        }
        else {
            // Interpolate between the previous frame and the current frame.
            var frame = Animation.binarySearch(frames, time, ScaleTimeline.ENTRIES);
            x = frames[frame + ScaleTimeline.PREV_X];
            y = frames[frame + ScaleTimeline.PREV_Y];
            var frameTime = frames[frame];
            var percent = this.getCurvePercent(frame / ScaleTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + ScaleTimeline.PREV_TIME] - frameTime));
            x = (x + (frames[frame + ScaleTimeline.X] - x) * percent) * bone.data.scaleX;
            y = (y + (frames[frame + ScaleTimeline.Y] - y) * percent) * bone.data.scaleY;
        }
        if (alpha == 1) {
            if (blend == MixBlend.add) {
                bone.scaleX += x - bone.data.scaleX;
                bone.scaleY += y - bone.data.scaleY;
            }
            else {
                bone.scaleX = x;
                bone.scaleY = y;
            }
        }
        else {
            var bx = 0, by = 0;
            if (direction == MixDirection.mixOut) {
                switch (blend) {
                    case MixBlend.setup:
                        bx = bone.data.scaleX;
                        by = bone.data.scaleY;
                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;
                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;
                        break;
                    case MixBlend.first:
                    case MixBlend.replace:
                        bx = bone.scaleX;
                        by = bone.scaleY;
                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;
                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;
                        break;
                    case MixBlend.add:
                        bx = bone.scaleX;
                        by = bone.scaleY;
                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bone.data.scaleX) * alpha;
                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - bone.data.scaleY) * alpha;
                }
            }
            else {
                switch (blend) {
                    case MixBlend.setup:
                        bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);
                        by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);
                        bone.scaleX = bx + (x - bx) * alpha;
                        bone.scaleY = by + (y - by) * alpha;
                        break;
                    case MixBlend.first:
                    case MixBlend.replace:
                        bx = Math.abs(bone.scaleX) * MathUtils.signum(x);
                        by = Math.abs(bone.scaleY) * MathUtils.signum(y);
                        bone.scaleX = bx + (x - bx) * alpha;
                        bone.scaleY = by + (y - by) * alpha;
                        break;
                    case MixBlend.add:
                        bx = MathUtils.signum(x);
                        by = MathUtils.signum(y);
                        bone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;
                        bone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;
                }
            }
        }
    };
    return ScaleTimeline;
}(TranslateTimeline));
/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */
/**
 * @public
 */
var ShearTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(ShearTimeline, _super);
    function ShearTimeline(frameCount) {
        return _super.call(this, frameCount) || this;
    }
    ShearTimeline.prototype.getPropertyId = function () {
        return (TimelineType.shear << 24) + this.boneIndex;
    };
    ShearTimeline.prototype.apply = function (skeleton, lastTime, time, events, alpha, blend, direction) {
        var frames = this.frames;
        var bone = skeleton.bones[this.boneIndex];
        if (!bone.active)
            return;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    bone.shearX = bone.data.shearX;
                    bone.shearY = bone.data.shearY;
                    return;
                case MixBlend.first:
                    bone.shearX += (bone.data.shearX - bone.shearX) * alpha;
                    bone.shearY += (bone.data.shearY - bone.shearY) * alpha;
            }
            return;
        }
        var x = 0, y = 0;
        if (time >= frames[frames.length - ShearTimeline.ENTRIES]) { // Time is after last frame.
            x = frames[frames.length + ShearTimeline.PREV_X];
            y = frames[frames.length + ShearTimeline.PREV_Y];
        }
        else {
            // Interpolate between the previous frame and the current frame.
            var frame = Animation.binarySearch(frames, time, ShearTimeline.ENTRIES);
            x = frames[frame + ShearTimeline.PREV_X];
            y = frames[frame + ShearTimeline.PREV_Y];
            var frameTime = frames[frame];
            var percent = this.getCurvePercent(frame / ShearTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + ShearTimeline.PREV_TIME] - frameTime));
            x = x + (frames[frame + ShearTimeline.X] - x) * percent;
            y = y + (frames[frame + ShearTimeline.Y] - y) * percent;
        }
        switch (blend) {
            case MixBlend.setup:
                bone.shearX = bone.data.shearX + x * alpha;
                bone.shearY = bone.data.shearY + y * alpha;
                break;
            case MixBlend.first:
            case MixBlend.replace:
                bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;
                bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;
                break;
            case MixBlend.add:
                bone.shearX += x * alpha;
                bone.shearY += y * alpha;
        }
    };
    return ShearTimeline;
}(TranslateTimeline));
/** Changes a slot's {@link Slot#color}. */
/**
 * @public
 */
var ColorTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(ColorTimeline, _super);
    function ColorTimeline(frameCount) {
        var _this = _super.call(this, frameCount) || this;
        _this.frames = Utils.newFloatArray(frameCount * ColorTimeline.ENTRIES);
        return _this;
    }
    ColorTimeline.prototype.getPropertyId = function () {
        return (TimelineType.color << 24) + this.slotIndex;
    };
    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */
    ColorTimeline.prototype.setFrame = function (frameIndex, time, r, g, b, a) {
        frameIndex *= ColorTimeline.ENTRIES;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + ColorTimeline.R] = r;
        this.frames[frameIndex + ColorTimeline.G] = g;
        this.frames[frameIndex + ColorTimeline.B] = b;
        this.frames[frameIndex + ColorTimeline.A] = a;
    };
    ColorTimeline.prototype.apply = function (skeleton, lastTime, time, events, alpha, blend, direction) {
        var slot = skeleton.slots[this.slotIndex];
        if (!slot.bone.active)
            return;
        var frames = this.frames;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    slot.color.setFromColor(slot.data.color);
                    return;
                case MixBlend.first:
                    var color = slot.color, setup = slot.data.color;
                    color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha, (setup.a - color.a) * alpha);
            }
            return;
        }
        var r = 0, g = 0, b = 0, a = 0;
        if (time >= frames[frames.length - ColorTimeline.ENTRIES]) { // Time is after last frame.
            var i = frames.length;
            r = frames[i + ColorTimeline.PREV_R];
            g = frames[i + ColorTimeline.PREV_G];
            b = frames[i + ColorTimeline.PREV_B];
            a = frames[i + ColorTimeline.PREV_A];
        }
        else {
            // Interpolate between the previous frame and the current frame.
            var frame = Animation.binarySearch(frames, time, ColorTimeline.ENTRIES);
            r = frames[frame + ColorTimeline.PREV_R];
            g = frames[frame + ColorTimeline.PREV_G];
            b = frames[frame + ColorTimeline.PREV_B];
            a = frames[frame + ColorTimeline.PREV_A];
            var frameTime = frames[frame];
            var percent = this.getCurvePercent(frame / ColorTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + ColorTimeline.PREV_TIME] - frameTime));
            r += (frames[frame + ColorTimeline.R] - r) * percent;
            g += (frames[frame + ColorTimeline.G] - g) * percent;
            b += (frames[frame + ColorTimeline.B] - b) * percent;
            a += (frames[frame + ColorTimeline.A] - a) * percent;
        }
        if (alpha == 1)
            slot.color.set(r, g, b, a);
        else {
            var color = slot.color;
            if (blend == MixBlend.setup)
                color.setFromColor(slot.data.color);
            color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);
        }
    };
    ColorTimeline.ENTRIES = 5;
    ColorTimeline.PREV_TIME = -5;
    ColorTimeline.PREV_R = -4;
    ColorTimeline.PREV_G = -3;
    ColorTimeline.PREV_B = -2;
    ColorTimeline.PREV_A = -1;
    ColorTimeline.R = 1;
    ColorTimeline.G = 2;
    ColorTimeline.B = 3;
    ColorTimeline.A = 4;
    return ColorTimeline;
}(CurveTimeline));
/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */
/**
 * @public
 */
var TwoColorTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(TwoColorTimeline, _super);
    function TwoColorTimeline(frameCount) {
        var _this = _super.call(this, frameCount) || this;
        _this.frames = Utils.newFloatArray(frameCount * TwoColorTimeline.ENTRIES);
        return _this;
    }
    TwoColorTimeline.prototype.getPropertyId = function () {
        return (TimelineType.twoColor << 24) + this.slotIndex;
    };
    /** Sets the time in seconds, light, and dark colors for the specified key frame. */
    TwoColorTimeline.prototype.setFrame = function (frameIndex, time, r, g, b, a, r2, g2, b2) {
        frameIndex *= TwoColorTimeline.ENTRIES;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + TwoColorTimeline.R] = r;
        this.frames[frameIndex + TwoColorTimeline.G] = g;
        this.frames[frameIndex + TwoColorTimeline.B] = b;
        this.frames[frameIndex + TwoColorTimeline.A] = a;
        this.frames[frameIndex + TwoColorTimeline.R2] = r2;
        this.frames[frameIndex + TwoColorTimeline.G2] = g2;
        this.frames[frameIndex + TwoColorTimeline.B2] = b2;
    };
    TwoColorTimeline.prototype.apply = function (skeleton, lastTime, time, events, alpha, blend, direction) {
        var slot = skeleton.slots[this.slotIndex];
        if (!slot.bone.active)
            return;
        var frames = this.frames;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    slot.color.setFromColor(slot.data.color);
                    slot.darkColor.setFromColor(slot.data.darkColor);
                    return;
                case MixBlend.first:
                    var light = slot.color, dark = slot.darkColor, setupLight = slot.data.color, setupDark = slot.data.darkColor;
                    light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha, (setupLight.a - light.a) * alpha);
                    dark.add((setupDark.r - dark.r) * alpha, (setupDark.g - dark.g) * alpha, (setupDark.b - dark.b) * alpha, 0);
            }
            return;
        }
        var r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;
        if (time >= frames[frames.length - TwoColorTimeline.ENTRIES]) { // Time is after last frame.
            var i = frames.length;
            r = frames[i + TwoColorTimeline.PREV_R];
            g = frames[i + TwoColorTimeline.PREV_G];
            b = frames[i + TwoColorTimeline.PREV_B];
            a = frames[i + TwoColorTimeline.PREV_A];
            r2 = frames[i + TwoColorTimeline.PREV_R2];
            g2 = frames[i + TwoColorTimeline.PREV_G2];
            b2 = frames[i + TwoColorTimeline.PREV_B2];
        }
        else {
            // Interpolate between the previous frame and the current frame.
            var frame = Animation.binarySearch(frames, time, TwoColorTimeline.ENTRIES);
            r = frames[frame + TwoColorTimeline.PREV_R];
            g = frames[frame + TwoColorTimeline.PREV_G];
            b = frames[frame + TwoColorTimeline.PREV_B];
            a = frames[frame + TwoColorTimeline.PREV_A];
            r2 = frames[frame + TwoColorTimeline.PREV_R2];
            g2 = frames[frame + TwoColorTimeline.PREV_G2];
            b2 = frames[frame + TwoColorTimeline.PREV_B2];
            var frameTime = frames[frame];
            var percent = this.getCurvePercent(frame / TwoColorTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + TwoColorTimeline.PREV_TIME] - frameTime));
            r += (frames[frame + TwoColorTimeline.R] - r) * percent;
            g += (frames[frame + TwoColorTimeline.G] - g) * percent;
            b += (frames[frame + TwoColorTimeline.B] - b) * percent;
            a += (frames[frame + TwoColorTimeline.A] - a) * percent;
            r2 += (frames[frame + TwoColorTimeline.R2] - r2) * percent;
            g2 += (frames[frame + TwoColorTimeline.G2] - g2) * percent;
            b2 += (frames[frame + TwoColorTimeline.B2] - b2) * percent;
        }
        if (alpha == 1) {
            slot.color.set(r, g, b, a);
            slot.darkColor.set(r2, g2, b2, 1);
        }
        else {
            var light = slot.color, dark = slot.darkColor;
            if (blend == MixBlend.setup) {
                light.setFromColor(slot.data.color);
                dark.setFromColor(slot.data.darkColor);
            }
            light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);
            dark.add((r2 - dark.r) * alpha, (g2 - dark.g) * alpha, (b2 - dark.b) * alpha, 0);
        }
    };
    TwoColorTimeline.ENTRIES = 8;
    TwoColorTimeline.PREV_TIME = -8;
    TwoColorTimeline.PREV_R = -7;
    TwoColorTimeline.PREV_G = -6;
    TwoColorTimeline.PREV_B = -5;
    TwoColorTimeline.PREV_A = -4;
    TwoColorTimeline.PREV_R2 = -3;
    TwoColorTimeline.PREV_G2 = -2;
    TwoColorTimeline.PREV_B2 = -1;
    TwoColorTimeline.R = 1;
    TwoColorTimeline.G = 2;
    TwoColorTimeline.B = 3;
    TwoColorTimeline.A = 4;
    TwoColorTimeline.R2 = 5;
    TwoColorTimeline.G2 = 6;
    TwoColorTimeline.B2 = 7;
    return TwoColorTimeline;
}(CurveTimeline));
/** Changes a slot's {@link Slot#attachment}. */
/**
 * @public
 */
var AttachmentTimeline = /** @class */ (function () {
    function AttachmentTimeline(frameCount) {
        this.frames = Utils.newFloatArray(frameCount);
        this.attachmentNames = new Array(frameCount);
    }
    AttachmentTimeline.prototype.getPropertyId = function () {
        return (TimelineType.attachment << 24) + this.slotIndex;
    };
    /** The number of key frames for this timeline. */
    AttachmentTimeline.prototype.getFrameCount = function () {
        return this.frames.length;
    };
    /** Sets the time in seconds and the attachment name for the specified key frame. */
    AttachmentTimeline.prototype.setFrame = function (frameIndex, time, attachmentName) {
        this.frames[frameIndex] = time;
        this.attachmentNames[frameIndex] = attachmentName;
    };
    AttachmentTimeline.prototype.apply = function (skeleton, lastTime, time, events, alpha, blend, direction) {
        var slot = skeleton.slots[this.slotIndex];
        if (!slot.bone.active)
            return;
        if (direction == MixDirection.mixOut) {
            if (blend == MixBlend.setup)
                this.setAttachment(skeleton, slot, slot.data.attachmentName);
            return;
        }
        var frames = this.frames;
        if (time < frames[0]) {
            if (blend == MixBlend.setup || blend == MixBlend.first)
                this.setAttachment(skeleton, slot, slot.data.attachmentName);
            return;
        }
        var frameIndex = 0;
        if (time >= frames[frames.length - 1]) // Time is after last frame.
            frameIndex = frames.length - 1;
        else
            frameIndex = Animation.binarySearch(frames, time, 1) - 1;
        var attachmentName = this.attachmentNames[frameIndex];
        skeleton.slots[this.slotIndex]
            .setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));
    };
    AttachmentTimeline.prototype.setAttachment = function (skeleton, slot, attachmentName) {
        slot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));
    };
    return AttachmentTimeline;
}());
var zeros = null;
/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}. */
/**
 * @public
 */
var DeformTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(DeformTimeline, _super);
    function DeformTimeline(frameCount) {
        var _this = _super.call(this, frameCount) || this;
        _this.frames = Utils.newFloatArray(frameCount);
        _this.frameVertices = new Array(frameCount);
        if (zeros == null)
            zeros = Utils.newFloatArray(64);
        return _this;
    }
    DeformTimeline.prototype.getPropertyId = function () {
        return (TimelineType.deform << 27) + +this.attachment.id + this.slotIndex;
    };
    /** Sets the time in seconds and the vertices for the specified key frame.
     * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */
    DeformTimeline.prototype.setFrame = function (frameIndex, time, vertices) {
        this.frames[frameIndex] = time;
        this.frameVertices[frameIndex] = vertices;
    };
    DeformTimeline.prototype.apply = function (skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
        var slot = skeleton.slots[this.slotIndex];
        if (!slot.bone.active)
            return;
        var slotAttachment = slot.getAttachment();
        if (!(slotAttachment instanceof VertexAttachment) || !(slotAttachment.deformAttachment == this.attachment))
            return;
        var deformArray = slot.deform;
        if (deformArray.length == 0)
            blend = MixBlend.setup;
        var frameVertices = this.frameVertices;
        var vertexCount = frameVertices[0].length;
        var frames = this.frames;
        if (time < frames[0]) {
            var vertexAttachment = slotAttachment;
            switch (blend) {
                case MixBlend.setup:
                    deformArray.length = 0;
                    return;
                case MixBlend.first:
                    if (alpha == 1) {
                        deformArray.length = 0;
                        break;
                    }
                    var deform_1 = Utils.setArraySize(deformArray, vertexCount);
                    if (vertexAttachment.bones == null) {
                        // Unweighted vertex positions.
                        var setupVertices = vertexAttachment.vertices;
                        for (var i = 0; i < vertexCount; i++)
                            deform_1[i] += (setupVertices[i] - deform_1[i]) * alpha;
                    }
                    else {
                        // Weighted deform offsets.
                        alpha = 1 - alpha;
                        for (var i = 0; i < vertexCount; i++)
                            deform_1[i] *= alpha;
                    }
            }
            return;
        }
        var deform = Utils.setArraySize(deformArray, vertexCount);
        if (time >= frames[frames.length - 1]) { // Time is after last frame.
            var lastVertices = frameVertices[frames.length - 1];
            if (alpha == 1) {
                if (blend == MixBlend.add) {
                    var vertexAttachment = slotAttachment;
                    if (vertexAttachment.bones == null) {
                        // Unweighted vertex positions, with alpha.
                        var setupVertices = vertexAttachment.vertices;
                        for (var i_1 = 0; i_1 < vertexCount; i_1++) {
                            deform[i_1] += lastVertices[i_1] - setupVertices[i_1];
                        }
                    }
                    else {
                        // Weighted deform offsets, with alpha.
                        for (var i_2 = 0; i_2 < vertexCount; i_2++)
                            deform[i_2] += lastVertices[i_2];
                    }
                }
                else {
                    Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);
                }
            }
            else {
                switch (blend) {
                    case MixBlend.setup: {
                        var vertexAttachment_1 = slotAttachment;
                        if (vertexAttachment_1.bones == null) {
                            // Unweighted vertex positions, with alpha.
                            var setupVertices = vertexAttachment_1.vertices;
                            for (var i_3 = 0; i_3 < vertexCount; i_3++) {
                                var setup = setupVertices[i_3];
                                deform[i_3] = setup + (lastVertices[i_3] - setup) * alpha;
                            }
                        }
                        else {
                            // Weighted deform offsets, with alpha.
                            for (var i_4 = 0; i_4 < vertexCount; i_4++)
                                deform[i_4] = lastVertices[i_4] * alpha;
                        }
                        break;
                    }
                    case MixBlend.first:
                    case MixBlend.replace:
                        for (var i_5 = 0; i_5 < vertexCount; i_5++)
                            deform[i_5] += (lastVertices[i_5] - deform[i_5]) * alpha;
                        break;
                    case MixBlend.add:
                        var vertexAttachment = slotAttachment;
                        if (vertexAttachment.bones == null) {
                            // Unweighted vertex positions, with alpha.
                            var setupVertices = vertexAttachment.vertices;
                            for (var i_6 = 0; i_6 < vertexCount; i_6++) {
                                deform[i_6] += (lastVertices[i_6] - setupVertices[i_6]) * alpha;
                            }
                        }
                        else {
                            // Weighted deform offsets, with alpha.
                            for (var i_7 = 0; i_7 < vertexCount; i_7++)
                                deform[i_7] += lastVertices[i_7] * alpha;
                        }
                }
            }
            return;
        }
        // Interpolate between the previous frame and the current frame.
        var frame = Animation.binarySearch(frames, time);
        var prevVertices = frameVertices[frame - 1];
        var nextVertices = frameVertices[frame];
        var frameTime = frames[frame];
        var percent = this.getCurvePercent(frame - 1, 1 - (time - frameTime) / (frames[frame - 1] - frameTime));
        if (alpha == 1) {
            if (blend == MixBlend.add) {
                var vertexAttachment = slotAttachment;
                if (vertexAttachment.bones == null) {
                    // Unweighted vertex positions, with alpha.
                    var setupVertices = vertexAttachment.vertices;
                    for (var i_8 = 0; i_8 < vertexCount; i_8++) {
                        var prev = prevVertices[i_8];
                        deform[i_8] += prev + (nextVertices[i_8] - prev) * percent - setupVertices[i_8];
                    }
                }
                else {
                    // Weighted deform offsets, with alpha.
                    for (var i_9 = 0; i_9 < vertexCount; i_9++) {
                        var prev = prevVertices[i_9];
                        deform[i_9] += prev + (nextVertices[i_9] - prev) * percent;
                    }
                }
            }
            else {
                for (var i_10 = 0; i_10 < vertexCount; i_10++) {
                    var prev = prevVertices[i_10];
                    deform[i_10] = prev + (nextVertices[i_10] - prev) * percent;
                }
            }
        }
        else {
            switch (blend) {
                case MixBlend.setup: {
                    var vertexAttachment_2 = slotAttachment;
                    if (vertexAttachment_2.bones == null) {
                        // Unweighted vertex positions, with alpha.
                        var setupVertices = vertexAttachment_2.vertices;
                        for (var i_11 = 0; i_11 < vertexCount; i_11++) {
                            var prev = prevVertices[i_11], setup = setupVertices[i_11];
                            deform[i_11] = setup + (prev + (nextVertices[i_11] - prev) * percent - setup) * alpha;
                        }
                    }
                    else {
                        // Weighted deform offsets, with alpha.
                        for (var i_12 = 0; i_12 < vertexCount; i_12++) {
                            var prev = prevVertices[i_12];
                            deform[i_12] = (prev + (nextVertices[i_12] - prev) * percent) * alpha;
                        }
                    }
                    break;
                }
                case MixBlend.first:
                case MixBlend.replace:
                    for (var i_13 = 0; i_13 < vertexCount; i_13++) {
                        var prev = prevVertices[i_13];
                        deform[i_13] += (prev + (nextVertices[i_13] - prev) * percent - deform[i_13]) * alpha;
                    }
                    break;
                case MixBlend.add:
                    var vertexAttachment = slotAttachment;
                    if (vertexAttachment.bones == null) {
                        // Unweighted vertex positions, with alpha.
                        var setupVertices = vertexAttachment.vertices;
                        for (var i_14 = 0; i_14 < vertexCount; i_14++) {
                            var prev = prevVertices[i_14];
                            deform[i_14] += (prev + (nextVertices[i_14] - prev) * percent - setupVertices[i_14]) * alpha;
                        }
                    }
                    else {
                        // Weighted deform offsets, with alpha.
                        for (var i_15 = 0; i_15 < vertexCount; i_15++) {
                            var prev = prevVertices[i_15];
                            deform[i_15] += (prev + (nextVertices[i_15] - prev) * percent) * alpha;
                        }
                    }
            }
        }
    };
    return DeformTimeline;
}(CurveTimeline));
/** Fires an {@link Event} when specific animation times are reached. */
/**
 * @public
 */
var EventTimeline = /** @class */ (function () {
    function EventTimeline(frameCount) {
        this.frames = Utils.newFloatArray(frameCount);
        this.events = new Array(frameCount);
    }
    EventTimeline.prototype.getPropertyId = function () {
        return TimelineType.event << 24;
    };
    /** The number of key frames for this timeline. */
    EventTimeline.prototype.getFrameCount = function () {
        return this.frames.length;
    };
    /** Sets the time in seconds and the event for the specified key frame. */
    EventTimeline.prototype.setFrame = function (frameIndex, event) {
        this.frames[frameIndex] = event.time;
        this.events[frameIndex] = event;
    };
    /** Fires events for frames > `lastTime` and <= `time`. */
    EventTimeline.prototype.apply = function (skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
        if (firedEvents == null)
            return;
        var frames = this.frames;
        var frameCount = this.frames.length;
        if (lastTime > time) { // Fire events after last time for looped animations.
            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);
            lastTime = -1;
        }
        else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.
            return;
        if (time < frames[0])
            return; // Time is before first frame.
        var frame = 0;
        if (lastTime < frames[0])
            frame = 0;
        else {
            frame = Animation.binarySearch(frames, lastTime);
            var frameTime = frames[frame];
            while (frame > 0) { // Fire multiple events with the same frame.
                if (frames[frame - 1] != frameTime)
                    break;
                frame--;
            }
        }
        for (; frame < frameCount && time >= frames[frame]; frame++)
            firedEvents.push(this.events[frame]);
    };
    return EventTimeline;
}());
/** Changes a skeleton's {@link Skeleton#drawOrder}. */
/**
 * @public
 */
var DrawOrderTimeline = /** @class */ (function () {
    function DrawOrderTimeline(frameCount) {
        this.frames = Utils.newFloatArray(frameCount);
        this.drawOrders = new Array(frameCount);
    }
    DrawOrderTimeline.prototype.getPropertyId = function () {
        return TimelineType.drawOrder << 24;
    };
    /** The number of key frames for this timeline. */
    DrawOrderTimeline.prototype.getFrameCount = function () {
        return this.frames.length;
    };
    /** Sets the time in seconds and the draw order for the specified key frame.
     * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose
     *           draw order. */
    DrawOrderTimeline.prototype.setFrame = function (frameIndex, time, drawOrder) {
        this.frames[frameIndex] = time;
        this.drawOrders[frameIndex] = drawOrder;
    };
    DrawOrderTimeline.prototype.apply = function (skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
        var drawOrder = skeleton.drawOrder;
        var slots = skeleton.slots;
        if (direction == MixDirection.mixOut && blend == MixBlend.setup) {
            Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);
            return;
        }
        var frames = this.frames;
        if (time < frames[0]) {
            if (blend == MixBlend.setup || blend == MixBlend.first)
                Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);
            return;
        }
        var frame = 0;
        if (time >= frames[frames.length - 1]) // Time is after last frame.
            frame = frames.length - 1;
        else
            frame = Animation.binarySearch(frames, time) - 1;
        var drawOrderToSetupIndex = this.drawOrders[frame];
        if (drawOrderToSetupIndex == null)
            Utils.arrayCopy(slots, 0, drawOrder, 0, slots.length);
        else {
            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)
                drawOrder[i] = slots[drawOrderToSetupIndex[i]];
        }
    };
    return DrawOrderTimeline;
}());
/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},
 * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}. */
/**
 * @public
 */
var IkConstraintTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(IkConstraintTimeline, _super);
    function IkConstraintTimeline(frameCount) {
        var _this = _super.call(this, frameCount) || this;
        _this.frames = Utils.newFloatArray(frameCount * IkConstraintTimeline.ENTRIES);
        return _this;
    }
    IkConstraintTimeline.prototype.getPropertyId = function () {
        return (TimelineType.ikConstraint << 24) + this.ikConstraintIndex;
    };
    /** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */
    IkConstraintTimeline.prototype.setFrame = function (frameIndex, time, mix, softness, bendDirection, compress, stretch) {
        frameIndex *= IkConstraintTimeline.ENTRIES;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + IkConstraintTimeline.MIX] = mix;
        this.frames[frameIndex + IkConstraintTimeline.SOFTNESS] = softness;
        this.frames[frameIndex + IkConstraintTimeline.BEND_DIRECTION] = bendDirection;
        this.frames[frameIndex + IkConstraintTimeline.COMPRESS] = compress ? 1 : 0;
        this.frames[frameIndex + IkConstraintTimeline.STRETCH] = stretch ? 1 : 0;
    };
    IkConstraintTimeline.prototype.apply = function (skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
        var frames = this.frames;
        var constraint = skeleton.ikConstraints[this.ikConstraintIndex];
        if (!constraint.active)
            return;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    constraint.mix = constraint.data.mix;
                    constraint.softness = constraint.data.softness;
                    constraint.bendDirection = constraint.data.bendDirection;
                    constraint.compress = constraint.data.compress;
                    constraint.stretch = constraint.data.stretch;
                    return;
                case MixBlend.first:
                    constraint.mix += (constraint.data.mix - constraint.mix) * alpha;
                    constraint.softness += (constraint.data.softness - constraint.softness) * alpha;
                    constraint.bendDirection = constraint.data.bendDirection;
                    constraint.compress = constraint.data.compress;
                    constraint.stretch = constraint.data.stretch;
            }
            return;
        }
        if (time >= frames[frames.length - IkConstraintTimeline.ENTRIES]) { // Time is after last frame.
            if (blend == MixBlend.setup) {
                constraint.mix = constraint.data.mix + (frames[frames.length + IkConstraintTimeline.PREV_MIX] - constraint.data.mix) * alpha;
                constraint.softness = constraint.data.softness
                    + (frames[frames.length + IkConstraintTimeline.PREV_SOFTNESS] - constraint.data.softness) * alpha;
                if (direction == MixDirection.mixOut) {
                    constraint.bendDirection = constraint.data.bendDirection;
                    constraint.compress = constraint.data.compress;
                    constraint.stretch = constraint.data.stretch;
                }
                else {
                    constraint.bendDirection = frames[frames.length + IkConstraintTimeline.PREV_BEND_DIRECTION];
                    constraint.compress = frames[frames.length + IkConstraintTimeline.PREV_COMPRESS] != 0;
                    constraint.stretch = frames[frames.length + IkConstraintTimeline.PREV_STRETCH] != 0;
                }
            }
            else {
                constraint.mix += (frames[frames.length + IkConstraintTimeline.PREV_MIX] - constraint.mix) * alpha;
                constraint.softness += (frames[frames.length + IkConstraintTimeline.PREV_SOFTNESS] - constraint.softness) * alpha;
                if (direction == MixDirection.mixIn) {
                    constraint.bendDirection = frames[frames.length + IkConstraintTimeline.PREV_BEND_DIRECTION];
                    constraint.compress = frames[frames.length + IkConstraintTimeline.PREV_COMPRESS] != 0;
                    constraint.stretch = frames[frames.length + IkConstraintTimeline.PREV_STRETCH] != 0;
                }
            }
            return;
        }
        // Interpolate between the previous frame and the current frame.
        var frame = Animation.binarySearch(frames, time, IkConstraintTimeline.ENTRIES);
        var mix = frames[frame + IkConstraintTimeline.PREV_MIX];
        var softness = frames[frame + IkConstraintTimeline.PREV_SOFTNESS];
        var frameTime = frames[frame];
        var percent = this.getCurvePercent(frame / IkConstraintTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + IkConstraintTimeline.PREV_TIME] - frameTime));
        if (blend == MixBlend.setup) {
            constraint.mix = constraint.data.mix + (mix + (frames[frame + IkConstraintTimeline.MIX] - mix) * percent - constraint.data.mix) * alpha;
            constraint.softness = constraint.data.softness
                + (softness + (frames[frame + IkConstraintTimeline.SOFTNESS] - softness) * percent - constraint.data.softness) * alpha;
            if (direction == MixDirection.mixOut) {
                constraint.bendDirection = constraint.data.bendDirection;
                constraint.compress = constraint.data.compress;
                constraint.stretch = constraint.data.stretch;
            }
            else {
                constraint.bendDirection = frames[frame + IkConstraintTimeline.PREV_BEND_DIRECTION];
                constraint.compress = frames[frame + IkConstraintTimeline.PREV_COMPRESS] != 0;
                constraint.stretch = frames[frame + IkConstraintTimeline.PREV_STRETCH] != 0;
            }
        }
        else {
            constraint.mix += (mix + (frames[frame + IkConstraintTimeline.MIX] - mix) * percent - constraint.mix) * alpha;
            constraint.softness += (softness + (frames[frame + IkConstraintTimeline.SOFTNESS] - softness) * percent - constraint.softness) * alpha;
            if (direction == MixDirection.mixIn) {
                constraint.bendDirection = frames[frame + IkConstraintTimeline.PREV_BEND_DIRECTION];
                constraint.compress = frames[frame + IkConstraintTimeline.PREV_COMPRESS] != 0;
                constraint.stretch = frames[frame + IkConstraintTimeline.PREV_STRETCH] != 0;
            }
        }
    };
    IkConstraintTimeline.ENTRIES = 6;
    IkConstraintTimeline.PREV_TIME = -6;
    IkConstraintTimeline.PREV_MIX = -5;
    IkConstraintTimeline.PREV_SOFTNESS = -4;
    IkConstraintTimeline.PREV_BEND_DIRECTION = -3;
    IkConstraintTimeline.PREV_COMPRESS = -2;
    IkConstraintTimeline.PREV_STRETCH = -1;
    IkConstraintTimeline.MIX = 1;
    IkConstraintTimeline.SOFTNESS = 2;
    IkConstraintTimeline.BEND_DIRECTION = 3;
    IkConstraintTimeline.COMPRESS = 4;
    IkConstraintTimeline.STRETCH = 5;
    return IkConstraintTimeline;
}(CurveTimeline));
/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},
 * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}. */
/**
 * @public
 */
var TransformConstraintTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(TransformConstraintTimeline, _super);
    function TransformConstraintTimeline(frameCount) {
        var _this = _super.call(this, frameCount) || this;
        _this.frames = Utils.newFloatArray(frameCount * TransformConstraintTimeline.ENTRIES);
        return _this;
    }
    TransformConstraintTimeline.prototype.getPropertyId = function () {
        return (TimelineType.transformConstraint << 24) + this.transformConstraintIndex;
    };
    /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */
    TransformConstraintTimeline.prototype.setFrame = function (frameIndex, time, rotateMix, translateMix, scaleMix, shearMix) {
        frameIndex *= TransformConstraintTimeline.ENTRIES;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + TransformConstraintTimeline.ROTATE] = rotateMix;
        this.frames[frameIndex + TransformConstraintTimeline.TRANSLATE] = translateMix;
        this.frames[frameIndex + TransformConstraintTimeline.SCALE] = scaleMix;
        this.frames[frameIndex + TransformConstraintTimeline.SHEAR] = shearMix;
    };
    TransformConstraintTimeline.prototype.apply = function (skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
        var frames = this.frames;
        var constraint = skeleton.transformConstraints[this.transformConstraintIndex];
        if (!constraint.active)
            return;
        if (time < frames[0]) {
            var data = constraint.data;
            switch (blend) {
                case MixBlend.setup:
                    constraint.rotateMix = data.rotateMix;
                    constraint.translateMix = data.translateMix;
                    constraint.scaleMix = data.scaleMix;
                    constraint.shearMix = data.shearMix;
                    return;
                case MixBlend.first:
                    constraint.rotateMix += (data.rotateMix - constraint.rotateMix) * alpha;
                    constraint.translateMix += (data.translateMix - constraint.translateMix) * alpha;
                    constraint.scaleMix += (data.scaleMix - constraint.scaleMix) * alpha;
                    constraint.shearMix += (data.shearMix - constraint.shearMix) * alpha;
            }
            return;
        }
        var rotate = 0, translate = 0, scale = 0, shear = 0;
        if (time >= frames[frames.length - TransformConstraintTimeline.ENTRIES]) { // Time is after last frame.
            var i = frames.length;
            rotate = frames[i + TransformConstraintTimeline.PREV_ROTATE];
            translate = frames[i + TransformConstraintTimeline.PREV_TRANSLATE];
            scale = frames[i + TransformConstraintTimeline.PREV_SCALE];
            shear = frames[i + TransformConstraintTimeline.PREV_SHEAR];
        }
        else {
            // Interpolate between the previous frame and the current frame.
            var frame = Animation.binarySearch(frames, time, TransformConstraintTimeline.ENTRIES);
            rotate = frames[frame + TransformConstraintTimeline.PREV_ROTATE];
            translate = frames[frame + TransformConstraintTimeline.PREV_TRANSLATE];
            scale = frames[frame + TransformConstraintTimeline.PREV_SCALE];
            shear = frames[frame + TransformConstraintTimeline.PREV_SHEAR];
            var frameTime = frames[frame];
            var percent = this.getCurvePercent(frame / TransformConstraintTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + TransformConstraintTimeline.PREV_TIME] - frameTime));
            rotate += (frames[frame + TransformConstraintTimeline.ROTATE] - rotate) * percent;
            translate += (frames[frame + TransformConstraintTimeline.TRANSLATE] - translate) * percent;
            scale += (frames[frame + TransformConstraintTimeline.SCALE] - scale) * percent;
            shear += (frames[frame + TransformConstraintTimeline.SHEAR] - shear) * percent;
        }
        if (blend == MixBlend.setup) {
            var data = constraint.data;
            constraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha;
            constraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha;
            constraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha;
            constraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha;
        }
        else {
            constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
            constraint.translateMix += (translate - constraint.translateMix) * alpha;
            constraint.scaleMix += (scale - constraint.scaleMix) * alpha;
            constraint.shearMix += (shear - constraint.shearMix) * alpha;
        }
    };
    TransformConstraintTimeline.ENTRIES = 5;
    TransformConstraintTimeline.PREV_TIME = -5;
    TransformConstraintTimeline.PREV_ROTATE = -4;
    TransformConstraintTimeline.PREV_TRANSLATE = -3;
    TransformConstraintTimeline.PREV_SCALE = -2;
    TransformConstraintTimeline.PREV_SHEAR = -1;
    TransformConstraintTimeline.ROTATE = 1;
    TransformConstraintTimeline.TRANSLATE = 2;
    TransformConstraintTimeline.SCALE = 3;
    TransformConstraintTimeline.SHEAR = 4;
    return TransformConstraintTimeline;
}(CurveTimeline));
/** Changes a path constraint's {@link PathConstraint#position}. */
/**
 * @public
 */
var PathConstraintPositionTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(PathConstraintPositionTimeline, _super);
    function PathConstraintPositionTimeline(frameCount) {
        var _this = _super.call(this, frameCount) || this;
        _this.frames = Utils.newFloatArray(frameCount * PathConstraintPositionTimeline.ENTRIES);
        return _this;
    }
    PathConstraintPositionTimeline.prototype.getPropertyId = function () {
        return (TimelineType.pathConstraintPosition << 24) + this.pathConstraintIndex;
    };
    /** Sets the time in seconds and path constraint position for the specified key frame. */
    PathConstraintPositionTimeline.prototype.setFrame = function (frameIndex, time, value) {
        frameIndex *= PathConstraintPositionTimeline.ENTRIES;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + PathConstraintPositionTimeline.VALUE] = value;
    };
    PathConstraintPositionTimeline.prototype.apply = function (skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
        var frames = this.frames;
        var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
        if (!constraint.active)
            return;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    constraint.position = constraint.data.position;
                    return;
                case MixBlend.first:
                    constraint.position += (constraint.data.position - constraint.position) * alpha;
            }
            return;
        }
        var position = 0;
        if (time >= frames[frames.length - PathConstraintPositionTimeline.ENTRIES]) // Time is after last frame.
            position = frames[frames.length + PathConstraintPositionTimeline.PREV_VALUE];
        else {
            // Interpolate between the previous frame and the current frame.
            var frame = Animation.binarySearch(frames, time, PathConstraintPositionTimeline.ENTRIES);
            position = frames[frame + PathConstraintPositionTimeline.PREV_VALUE];
            var frameTime = frames[frame];
            var percent = this.getCurvePercent(frame / PathConstraintPositionTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + PathConstraintPositionTimeline.PREV_TIME] - frameTime));
            position += (frames[frame + PathConstraintPositionTimeline.VALUE] - position) * percent;
        }
        if (blend == MixBlend.setup)
            constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;
        else
            constraint.position += (position - constraint.position) * alpha;
    };
    PathConstraintPositionTimeline.ENTRIES = 2;
    PathConstraintPositionTimeline.PREV_TIME = -2;
    PathConstraintPositionTimeline.PREV_VALUE = -1;
    PathConstraintPositionTimeline.VALUE = 1;
    return PathConstraintPositionTimeline;
}(CurveTimeline));
/** Changes a path constraint's {@link PathConstraint#spacing}. */
/**
 * @public
 */
var PathConstraintSpacingTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(PathConstraintSpacingTimeline, _super);
    function PathConstraintSpacingTimeline(frameCount) {
        return _super.call(this, frameCount) || this;
    }
    PathConstraintSpacingTimeline.prototype.getPropertyId = function () {
        return (TimelineType.pathConstraintSpacing << 24) + this.pathConstraintIndex;
    };
    PathConstraintSpacingTimeline.prototype.apply = function (skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
        var frames = this.frames;
        var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
        if (!constraint.active)
            return;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    constraint.spacing = constraint.data.spacing;
                    return;
                case MixBlend.first:
                    constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;
            }
            return;
        }
        var spacing = 0;
        if (time >= frames[frames.length - PathConstraintSpacingTimeline.ENTRIES]) // Time is after last frame.
            spacing = frames[frames.length + PathConstraintSpacingTimeline.PREV_VALUE];
        else {
            // Interpolate between the previous frame and the current frame.
            var frame = Animation.binarySearch(frames, time, PathConstraintSpacingTimeline.ENTRIES);
            spacing = frames[frame + PathConstraintSpacingTimeline.PREV_VALUE];
            var frameTime = frames[frame];
            var percent = this.getCurvePercent(frame / PathConstraintSpacingTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + PathConstraintSpacingTimeline.PREV_TIME] - frameTime));
            spacing += (frames[frame + PathConstraintSpacingTimeline.VALUE] - spacing) * percent;
        }
        if (blend == MixBlend.setup)
            constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;
        else
            constraint.spacing += (spacing - constraint.spacing) * alpha;
    };
    return PathConstraintSpacingTimeline;
}(PathConstraintPositionTimeline));
/** Changes a transform constraint's {@link PathConstraint#rotateMix} and
 * {@link TransformConstraint#translateMix}. */
/**
 * @public
 */
var PathConstraintMixTimeline = /** @class */ (function (_super) {
    runtime_3_8_es_extends(PathConstraintMixTimeline, _super);
    function PathConstraintMixTimeline(frameCount) {
        var _this = _super.call(this, frameCount) || this;
        _this.frames = Utils.newFloatArray(frameCount * PathConstraintMixTimeline.ENTRIES);
        return _this;
    }
    PathConstraintMixTimeline.prototype.getPropertyId = function () {
        return (TimelineType.pathConstraintMix << 24) + this.pathConstraintIndex;
    };
    /** The time in seconds, rotate mix, and translate mix for the specified key frame. */
    PathConstraintMixTimeline.prototype.setFrame = function (frameIndex, time, rotateMix, translateMix) {
        frameIndex *= PathConstraintMixTimeline.ENTRIES;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + PathConstraintMixTimeline.ROTATE] = rotateMix;
        this.frames[frameIndex + PathConstraintMixTimeline.TRANSLATE] = translateMix;
    };
    PathConstraintMixTimeline.prototype.apply = function (skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
        var frames = this.frames;
        var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
        if (!constraint.active)
            return;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    constraint.rotateMix = constraint.data.rotateMix;
                    constraint.translateMix = constraint.data.translateMix;
                    return;
                case MixBlend.first:
                    constraint.rotateMix += (constraint.data.rotateMix - constraint.rotateMix) * alpha;
                    constraint.translateMix += (constraint.data.translateMix - constraint.translateMix) * alpha;
            }
            return;
        }
        var rotate = 0, translate = 0;
        if (time >= frames[frames.length - PathConstraintMixTimeline.ENTRIES]) { // Time is after last frame.
            rotate = frames[frames.length + PathConstraintMixTimeline.PREV_ROTATE];
            translate = frames[frames.length + PathConstraintMixTimeline.PREV_TRANSLATE];
        }
        else {
            // Interpolate between the previous frame and the current frame.
            var frame = Animation.binarySearch(frames, time, PathConstraintMixTimeline.ENTRIES);
            rotate = frames[frame + PathConstraintMixTimeline.PREV_ROTATE];
            translate = frames[frame + PathConstraintMixTimeline.PREV_TRANSLATE];
            var frameTime = frames[frame];
            var percent = this.getCurvePercent(frame / PathConstraintMixTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + PathConstraintMixTimeline.PREV_TIME] - frameTime));
            rotate += (frames[frame + PathConstraintMixTimeline.ROTATE] - rotate) * percent;
            translate += (frames[frame + PathConstraintMixTimeline.TRANSLATE] - translate) * percent;
        }
        if (blend == MixBlend.setup) {
            constraint.rotateMix = constraint.data.rotateMix + (rotate - constraint.data.rotateMix) * alpha;
            constraint.translateMix = constraint.data.translateMix + (translate - constraint.data.translateMix) * alpha;
        }
        else {
            constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
            constraint.translateMix += (translate - constraint.translateMix) * alpha;
        }
    };
    PathConstraintMixTimeline.ENTRIES = 3;
    PathConstraintMixTimeline.PREV_TIME = -3;
    PathConstraintMixTimeline.PREV_ROTATE = -2;
    PathConstraintMixTimeline.PREV_TRANSLATE = -1;
    PathConstraintMixTimeline.ROTATE = 1;
    PathConstraintMixTimeline.TRANSLATE = 2;
    return PathConstraintMixTimeline;
}(CurveTimeline));

/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies
 * multiple animations on top of each other (layering).
 *
 * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide. */
/**
 * @public
 */
var AnimationState = /** @class */ (function () {
    function AnimationState(data) {
        /** The list of tracks that currently have animations, which may contain null entries. */
        this.tracks = new Array();
        /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower
         * or faster. Defaults to 1.
         *
         * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */
        this.timeScale = 1;
        this.unkeyedState = 0;
        this.events = new Array();
        this.listeners = new Array();
        this.queue = new EventQueue(this);
        this.propertyIDs = new IntSet();
        this.animationsChanged = false;
        this.trackEntryPool = new Pool(function () { return new TrackEntry(); });
        this.data = data;
    }
    /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */
    AnimationState.prototype.update = function (delta) {
        delta *= this.timeScale;
        var tracks = this.tracks;
        for (var i = 0, n = tracks.length; i < n; i++) {
            var current = tracks[i];
            if (current == null)
                continue;
            current.animationLast = current.nextAnimationLast;
            current.trackLast = current.nextTrackLast;
            var currentDelta = delta * current.timeScale;
            if (current.delay > 0) {
                current.delay -= currentDelta;
                if (current.delay > 0)
                    continue;
                currentDelta = -current.delay;
                current.delay = 0;
            }
            var next = current.next;
            if (next != null) {
                // When the next entry's delay is passed, change to the next entry, preserving leftover time.
                var nextTime = current.trackLast - next.delay;
                if (nextTime >= 0) {
                    next.delay = 0;
                    next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;
                    current.trackTime += currentDelta;
                    this.setCurrent(i, next, true);
                    while (next.mixingFrom != null) {
                        next.mixTime += delta;
                        next = next.mixingFrom;
                    }
                    continue;
                }
            }
            else if (current.trackLast >= current.trackEnd && current.mixingFrom == null) {
                tracks[i] = null;
                this.queue.end(current);
                this.disposeNext(current);
                continue;
            }
            if (current.mixingFrom != null && this.updateMixingFrom(current, delta)) {
                // End mixing from entries once all have completed.
                var from = current.mixingFrom;
                current.mixingFrom = null;
                if (from != null)
                    from.mixingTo = null;
                while (from != null) {
                    this.queue.end(from);
                    from = from.mixingFrom;
                }
            }
            current.trackTime += currentDelta;
        }
        this.queue.drain();
    };
    /** Returns true when all mixing from entries are complete. */
    AnimationState.prototype.updateMixingFrom = function (to, delta) {
        var from = to.mixingFrom;
        if (from == null)
            return true;
        var finished = this.updateMixingFrom(from, delta);
        from.animationLast = from.nextAnimationLast;
        from.trackLast = from.nextTrackLast;
        // Require mixTime > 0 to ensure the mixing from entry was applied at least once.
        if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {
            // Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).
            if (from.totalAlpha == 0 || to.mixDuration == 0) {
                to.mixingFrom = from.mixingFrom;
                if (from.mixingFrom != null)
                    from.mixingFrom.mixingTo = to;
                to.interruptAlpha = from.interruptAlpha;
                this.queue.end(from);
            }
            return finished;
        }
        from.trackTime += delta * from.timeScale;
        to.mixTime += delta;
        return false;
    };
    /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the
     * animation state can be applied to multiple skeletons to pose them identically.
     * @returns True if any animations were applied. */
    AnimationState.prototype.apply = function (skeleton) {
        if (skeleton == null)
            throw new Error("skeleton cannot be null.");
        if (this.animationsChanged)
            this._animationsChanged();
        var events = this.events;
        var tracks = this.tracks;
        var applied = false;
        for (var i_1 = 0, n_1 = tracks.length; i_1 < n_1; i_1++) {
            var current = tracks[i_1];
            if (current == null || current.delay > 0)
                continue;
            applied = true;
            var blend = i_1 == 0 ? MixBlend.first : current.mixBlend;
            // Apply mixing from entries first.
            var mix = current.alpha;
            if (current.mixingFrom != null)
                mix *= this.applyMixingFrom(current, skeleton, blend);
            else if (current.trackTime >= current.trackEnd && current.next == null)
                mix = 0;
            // Apply current entry.
            var animationLast = current.animationLast, animationTime = current.getAnimationTime();
            var timelineCount = current.animation.timelines.length;
            var timelines = current.animation.timelines;
            if ((i_1 == 0 && mix == 1) || blend == MixBlend.add) {
                for (var ii = 0; ii < timelineCount; ii++) {
                    // Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets
                    // to sometimes stop rendering when using color correction, as their RGBA values become NaN.
                    // (https://github.com/pixijs/pixi-spine/issues/302)
                    Utils.webkit602BugfixHelper(mix, blend);
                    var timeline = timelines[ii];
                    if (timeline instanceof AttachmentTimeline)
                        this.applyAttachmentTimeline(timeline, skeleton, animationTime, blend, true);
                    else
                        timeline.apply(skeleton, animationLast, animationTime, events, mix, blend, MixDirection.mixIn);
                }
            }
            else {
                var timelineMode = current.timelineMode;
                var firstFrame = current.timelinesRotation.length == 0;
                if (firstFrame)
                    Utils.setArraySize(current.timelinesRotation, timelineCount << 1, null);
                var timelinesRotation = current.timelinesRotation;
                for (var ii = 0; ii < timelineCount; ii++) {
                    var timeline_1 = timelines[ii];
                    var timelineBlend = timelineMode[ii] == AnimationState.SUBSEQUENT ? blend : MixBlend.setup;
                    if (timeline_1 instanceof RotateTimeline) {
                        this.applyRotateTimeline(timeline_1, skeleton, animationTime, mix, timelineBlend, timelinesRotation, ii << 1, firstFrame);
                    }
                    else if (timeline_1 instanceof AttachmentTimeline) {
                        this.applyAttachmentTimeline(timeline_1, skeleton, animationTime, blend, true);
                    }
                    else {
                        // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109
                        Utils.webkit602BugfixHelper(mix, blend);
                        timeline_1.apply(skeleton, animationLast, animationTime, events, mix, timelineBlend, MixDirection.mixIn);
                    }
                }
            }
            this.queueEvents(current, animationTime);
            events.length = 0;
            current.nextAnimationLast = animationTime;
            current.nextTrackLast = current.trackTime;
        }
        // Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so
        // subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or
        // the time is before the first key).
        var setupState = this.unkeyedState + AnimationState.SETUP;
        var slots = skeleton.slots;
        for (var i = 0, n = skeleton.slots.length; i < n; i++) {
            var slot = slots[i];
            if (slot.attachmentState == setupState) {
                var attachmentName = slot.data.attachmentName;
                slot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(slot.data.index, attachmentName));
            }
        }
        this.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.
        this.queue.drain();
        return applied;
    };
    AnimationState.prototype.applyMixingFrom = function (to, skeleton, blend) {
        var from = to.mixingFrom;
        if (from.mixingFrom != null)
            this.applyMixingFrom(from, skeleton, blend);
        var mix = 0;
        if (to.mixDuration == 0) { // Single frame mix to undo mixingFrom changes.
            mix = 1;
            if (blend == MixBlend.first)
                blend = MixBlend.setup;
        }
        else {
            mix = to.mixTime / to.mixDuration;
            if (mix > 1)
                mix = 1;
            if (blend != MixBlend.first)
                blend = from.mixBlend;
        }
        var events = mix < from.eventThreshold ? this.events : null;
        var attachments = mix < from.attachmentThreshold, drawOrder = mix < from.drawOrderThreshold;
        var animationLast = from.animationLast, animationTime = from.getAnimationTime();
        var timelineCount = from.animation.timelines.length;
        var timelines = from.animation.timelines;
        var alphaHold = from.alpha * to.interruptAlpha, alphaMix = alphaHold * (1 - mix);
        if (blend == MixBlend.add) {
            for (var i = 0; i < timelineCount; i++)
                timelines[i].apply(skeleton, animationLast, animationTime, events, alphaMix, blend, MixDirection.mixOut);
        }
        else {
            var timelineMode = from.timelineMode;
            var timelineHoldMix = from.timelineHoldMix;
            var firstFrame = from.timelinesRotation.length == 0;
            if (firstFrame)
                Utils.setArraySize(from.timelinesRotation, timelineCount << 1, null);
            var timelinesRotation = from.timelinesRotation;
            from.totalAlpha = 0;
            for (var i = 0; i < timelineCount; i++) {
                var timeline = timelines[i];
                var direction = MixDirection.mixOut;
                var timelineBlend = void 0;
                var alpha = 0;
                switch (timelineMode[i]) {
                    case AnimationState.SUBSEQUENT:
                        if (!drawOrder && timeline instanceof DrawOrderTimeline)
                            continue;
                        timelineBlend = blend;
                        alpha = alphaMix;
                        break;
                    case AnimationState.FIRST:
                        timelineBlend = MixBlend.setup;
                        alpha = alphaMix;
                        break;
                    case AnimationState.HOLD_SUBSEQUENT:
                        timelineBlend = blend;
                        alpha = alphaHold;
                        break;
                    case AnimationState.HOLD_FIRST:
                        timelineBlend = MixBlend.setup;
                        alpha = alphaHold;
                        break;
                    default:
                        timelineBlend = MixBlend.setup;
                        var holdMix = timelineHoldMix[i];
                        alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);
                        break;
                }
                from.totalAlpha += alpha;
                if (timeline instanceof RotateTimeline)
                    this.applyRotateTimeline(timeline, skeleton, animationTime, alpha, timelineBlend, timelinesRotation, i << 1, firstFrame);
                else if (timeline instanceof AttachmentTimeline)
                    this.applyAttachmentTimeline(timeline, skeleton, animationTime, timelineBlend, attachments);
                else {
                    // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109
                    Utils.webkit602BugfixHelper(alpha, blend);
                    if (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup)
                        direction = MixDirection.mixIn;
                    timeline.apply(skeleton, animationLast, animationTime, events, alpha, timelineBlend, direction);
                }
            }
        }
        if (to.mixDuration > 0)
            this.queueEvents(from, animationTime);
        this.events.length = 0;
        from.nextAnimationLast = animationTime;
        from.nextTrackLast = from.trackTime;
        return mix;
    };
    AnimationState.prototype.applyAttachmentTimeline = function (timeline, skeleton, time, blend, attachments) {
        var slot = skeleton.slots[timeline.slotIndex];
        if (!slot.bone.active)
            return;
        var frames = timeline.frames;
        if (time < frames[0]) { // Time is before first frame.
            if (blend == MixBlend.setup || blend == MixBlend.first)
                this.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);
        }
        else {
            var frameIndex;
            if (time >= frames[frames.length - 1]) // Time is after last frame.
                frameIndex = frames.length - 1;
            else
                frameIndex = Animation.binarySearch(frames, time) - 1;
            this.setAttachment(skeleton, slot, timeline.attachmentNames[frameIndex], attachments);
        }
        // If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.
        if (slot.attachmentState <= this.unkeyedState)
            slot.attachmentState = this.unkeyedState + AnimationState.SETUP;
    };
    AnimationState.prototype.setAttachment = function (skeleton, slot, attachmentName, attachments) {
        slot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(slot.data.index, attachmentName));
        if (attachments)
            slot.attachmentState = this.unkeyedState + AnimationState.CURRENT;
    };
    AnimationState.prototype.applyRotateTimeline = function (timeline, skeleton, time, alpha, blend, timelinesRotation, i, firstFrame) {
        if (firstFrame)
            timelinesRotation[i] = 0;
        if (alpha == 1) {
            timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);
            return;
        }
        var rotateTimeline = timeline;
        var frames = rotateTimeline.frames;
        var bone = skeleton.bones[rotateTimeline.boneIndex];
        if (!bone.active)
            return;
        var r1 = 0, r2 = 0;
        if (time < frames[0]) {
            switch (blend) {
                case MixBlend.setup:
                    bone.rotation = bone.data.rotation;
                default:
                    return;
                case MixBlend.first:
                    r1 = bone.rotation;
                    r2 = bone.data.rotation;
            }
        }
        else {
            r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;
            if (time >= frames[frames.length - RotateTimeline.ENTRIES]) // Time is after last frame.
                r2 = bone.data.rotation + frames[frames.length + RotateTimeline.PREV_ROTATION];
            else {
                // Interpolate between the previous frame and the current frame.
                var frame = Animation.binarySearch(frames, time, RotateTimeline.ENTRIES);
                var prevRotation = frames[frame + RotateTimeline.PREV_ROTATION];
                var frameTime = frames[frame];
                var percent = rotateTimeline.getCurvePercent((frame >> 1) - 1, 1 - (time - frameTime) / (frames[frame + RotateTimeline.PREV_TIME] - frameTime));
                r2 = frames[frame + RotateTimeline.ROTATION] - prevRotation;
                r2 -= (16384 - ((16384.499999999996 - r2 / 360) | 0)) * 360;
                r2 = prevRotation + r2 * percent + bone.data.rotation;
                r2 -= (16384 - ((16384.499999999996 - r2 / 360) | 0)) * 360;
            }
        }
        // Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.
        var total = 0, diff = r2 - r1;
        diff -= (16384 - ((16384.499999999996 - diff / 360) | 0)) * 360;
        if (diff == 0) {
            total = timelinesRotation[i];
        }
        else {
            var lastTotal = 0, lastDiff = 0;
            if (firstFrame) {
                lastTotal = 0;
                lastDiff = diff;
            }
            else {
                lastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.
                lastDiff = timelinesRotation[i + 1]; // Difference between bones.
            }
            var current = diff > 0, dir = lastTotal >= 0;
            // Detect cross at 0 (not 180).
            if (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {
                // A cross after a 360 rotation is a loop.
                if (Math.abs(lastTotal) > 180)
                    lastTotal += 360 * MathUtils.signum(lastTotal);
                dir = current;
            }
            total = diff + lastTotal - lastTotal % 360; // Store loops as part of lastTotal.
            if (dir != current)
                total += 360 * MathUtils.signum(lastTotal);
            timelinesRotation[i] = total;
        }
        timelinesRotation[i + 1] = diff;
        r1 += total * alpha;
        bone.rotation = r1 - (16384 - ((16384.499999999996 - r1 / 360) | 0)) * 360;
    };
    AnimationState.prototype.queueEvents = function (entry, animationTime) {
        var animationStart = entry.animationStart, animationEnd = entry.animationEnd;
        var duration = animationEnd - animationStart;
        var trackLastWrapped = entry.trackLast % duration;
        // Queue events before complete.
        var events = this.events;
        var i = 0, n = events.length;
        for (; i < n; i++) {
            var event_1 = events[i];
            if (event_1.time < trackLastWrapped)
                break;
            if (event_1.time > animationEnd)
                continue; // Discard events outside animation start/end.
            this.queue.event(entry, event_1);
        }
        // Queue complete if completed a loop iteration or the animation.
        var complete = false;
        if (entry.loop)
            complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;
        else
            complete = animationTime >= animationEnd && entry.animationLast < animationEnd;
        if (complete)
            this.queue.complete(entry);
        // Queue events after complete.
        for (; i < n; i++) {
            var event_2 = events[i];
            if (event_2.time < animationStart)
                continue; // Discard events outside animation start/end.
            this.queue.event(entry, events[i]);
        }
    };
    /** Removes all animations from all tracks, leaving skeletons in their current pose.
     *
     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,
     * rather than leaving them in their current pose. */
    AnimationState.prototype.clearTracks = function () {
        var oldDrainDisabled = this.queue.drainDisabled;
        this.queue.drainDisabled = true;
        for (var i = 0, n = this.tracks.length; i < n; i++)
            this.clearTrack(i);
        this.tracks.length = 0;
        this.queue.drainDisabled = oldDrainDisabled;
        this.queue.drain();
    };
    /** Removes all animations from the track, leaving skeletons in their current pose.
     *
     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,
     * rather than leaving them in their current pose. */
    AnimationState.prototype.clearTrack = function (trackIndex) {
        if (trackIndex >= this.tracks.length)
            return;
        var current = this.tracks[trackIndex];
        if (current == null)
            return;
        this.queue.end(current);
        this.disposeNext(current);
        var entry = current;
        while (true) {
            var from = entry.mixingFrom;
            if (from == null)
                break;
            this.queue.end(from);
            entry.mixingFrom = null;
            entry.mixingTo = null;
            entry = from;
        }
        this.tracks[current.trackIndex] = null;
        this.queue.drain();
    };
    AnimationState.prototype.setCurrent = function (index, current, interrupt) {
        var from = this.expandToIndex(index);
        this.tracks[index] = current;
        if (from != null) {
            if (interrupt)
                this.queue.interrupt(from);
            current.mixingFrom = from;
            from.mixingTo = current;
            current.mixTime = 0;
            // Store the interrupted mix percentage.
            if (from.mixingFrom != null && from.mixDuration > 0)
                current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);
            from.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.
        }
        this.queue.start(current);
    };
    /** Sets an animation by name.
     *
     * {@link #setAnimationWith(}. */
    AnimationState.prototype.setAnimation = function (trackIndex, animationName, loop) {
        var animation = this.data.skeletonData.findAnimation(animationName);
        if (animation == null)
            throw new Error("Animation not found: " + animationName);
        return this.setAnimationWith(trackIndex, animation, loop);
    };
    /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never
     * applied to a skeleton, it is replaced (not mixed from).
     * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its
     *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.
     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept
     *         after the {@link AnimationStateListener#dispose()} event occurs. */
    AnimationState.prototype.setAnimationWith = function (trackIndex, animation, loop) {
        if (animation == null)
            throw new Error("animation cannot be null.");
        var interrupt = true;
        var current = this.expandToIndex(trackIndex);
        if (current != null) {
            if (current.nextTrackLast == -1) {
                // Don't mix from an entry that was never applied.
                this.tracks[trackIndex] = current.mixingFrom;
                this.queue.interrupt(current);
                this.queue.end(current);
                this.disposeNext(current);
                current = current.mixingFrom;
                interrupt = false;
            }
            else
                this.disposeNext(current);
        }
        var entry = this.trackEntry(trackIndex, animation, loop, current);
        this.setCurrent(trackIndex, entry, interrupt);
        this.queue.drain();
        return entry;
    };
    /** Queues an animation by name.
     *
     * See {@link #addAnimationWith()}. */
    AnimationState.prototype.addAnimation = function (trackIndex, animationName, loop, delay) {
        var animation = this.data.skeletonData.findAnimation(animationName);
        if (animation == null)
            throw new Error("Animation not found: " + animationName);
        return this.addAnimationWith(trackIndex, animation, loop, delay);
    };
    /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is
     * equivalent to calling {@link #setAnimationWith()}.
     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry
     *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix
     *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the
     *           previous entry is looping, its next loop completion is used instead of its duration.
     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept
     *         after the {@link AnimationStateListener#dispose()} event occurs. */
    AnimationState.prototype.addAnimationWith = function (trackIndex, animation, loop, delay) {
        if (animation == null)
            throw new Error("animation cannot be null.");
        var last = this.expandToIndex(trackIndex);
        if (last != null) {
            while (last.next != null)
                last = last.next;
        }
        var entry = this.trackEntry(trackIndex, animation, loop, last);
        if (last == null) {
            this.setCurrent(trackIndex, entry, true);
            this.queue.drain();
        }
        else {
            last.next = entry;
            if (delay <= 0) {
                var duration = last.animationEnd - last.animationStart;
                if (duration != 0) {
                    if (last.loop)
                        delay += duration * (1 + ((last.trackTime / duration) | 0));
                    else
                        delay += Math.max(duration, last.trackTime);
                    delay -= this.data.getMix(last.animation, animation);
                }
                else
                    delay = last.trackTime;
            }
        }
        entry.delay = delay;
        return entry;
    };
    /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's
     * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.
     *
     * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},
     * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes
     * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation
     * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of
     * 0 still mixes out over one frame.
     *
     * Mixing in is done by first setting an empty animation, then adding an animation using
     * {@link #addAnimation()} and on the returned track entry, set the
     * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and
     * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the
     * setup pose value if no lower tracks key the property to the value keyed in the new animation. */
    AnimationState.prototype.setEmptyAnimation = function (trackIndex, mixDuration) {
        var entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation, false);
        entry.mixDuration = mixDuration;
        entry.trackEnd = mixDuration;
        return entry;
    };
    /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's
     * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling
     * {@link #setEmptyAnimation()}.
     *
     * See {@link #setEmptyAnimation()}.
     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry
     *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or
     *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next
     *           loop completion is used instead of its duration.
     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept
     *         after the {@link AnimationStateListener#dispose()} event occurs. */
    AnimationState.prototype.addEmptyAnimation = function (trackIndex, mixDuration, delay) {
        if (delay <= 0)
            delay -= mixDuration;
        var entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation, false, delay);
        entry.mixDuration = mixDuration;
        entry.trackEnd = mixDuration;
        return entry;
    };
    /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix
     * duration. */
    AnimationState.prototype.setEmptyAnimations = function (mixDuration) {
        var oldDrainDisabled = this.queue.drainDisabled;
        this.queue.drainDisabled = true;
        for (var i = 0, n = this.tracks.length; i < n; i++) {
            var current = this.tracks[i];
            if (current != null)
                this.setEmptyAnimation(current.trackIndex, mixDuration);
        }
        this.queue.drainDisabled = oldDrainDisabled;
        this.queue.drain();
    };
    AnimationState.prototype.expandToIndex = function (index) {
        if (index < this.tracks.length)
            return this.tracks[index];
        Utils.ensureArrayCapacity(this.tracks, index + 1, null);
        this.tracks.length = index + 1;
        return null;
    };
    /** @param last May be null. */
    AnimationState.prototype.trackEntry = function (trackIndex, animation, loop, last) {
        var entry = this.trackEntryPool.obtain();
        entry.trackIndex = trackIndex;
        entry.animation = animation;
        entry.loop = loop;
        entry.holdPrevious = false;
        entry.eventThreshold = 0;
        entry.attachmentThreshold = 0;
        entry.drawOrderThreshold = 0;
        entry.animationStart = 0;
        entry.animationEnd = animation.duration;
        entry.animationLast = -1;
        entry.nextAnimationLast = -1;
        entry.delay = 0;
        entry.trackTime = 0;
        entry.trackLast = -1;
        entry.nextTrackLast = -1;
        entry.trackEnd = Number.MAX_VALUE;
        entry.timeScale = 1;
        entry.alpha = 1;
        entry.interruptAlpha = 1;
        entry.mixTime = 0;
        entry.mixDuration = last == null ? 0 : this.data.getMix(last.animation, animation);
        entry.mixBlend = MixBlend.replace;
        return entry;
    };
    AnimationState.prototype.disposeNext = function (entry) {
        var next = entry.next;
        while (next != null) {
            this.queue.dispose(next);
            next = next.next;
        }
        entry.next = null;
    };
    AnimationState.prototype._animationsChanged = function () {
        this.animationsChanged = false;
        this.propertyIDs.clear();
        for (var i = 0, n = this.tracks.length; i < n; i++) {
            var entry = this.tracks[i];
            if (entry == null)
                continue;
            while (entry.mixingFrom != null)
                entry = entry.mixingFrom;
            do {
                if (entry.mixingFrom == null || entry.mixBlend != MixBlend.add)
                    this.computeHold(entry);
                entry = entry.mixingTo;
            } while (entry != null);
        }
    };
    AnimationState.prototype.computeHold = function (entry) {
        var to = entry.mixingTo;
        var timelines = entry.animation.timelines;
        var timelinesCount = entry.animation.timelines.length;
        var timelineMode = Utils.setArraySize(entry.timelineMode, timelinesCount);
        entry.timelineHoldMix.length = 0;
        var timelineDipMix = Utils.setArraySize(entry.timelineHoldMix, timelinesCount);
        var propertyIDs = this.propertyIDs;
        if (to != null && to.holdPrevious) {
            for (var i = 0; i < timelinesCount; i++) {
                timelineMode[i] = propertyIDs.add(timelines[i].getPropertyId()) ? AnimationState.HOLD_FIRST : AnimationState.HOLD_SUBSEQUENT;
            }
            return;
        }
        outer: for (var i = 0; i < timelinesCount; i++) {
            var timeline = timelines[i];
            var id = timeline.getPropertyId();
            if (!propertyIDs.add(id))
                timelineMode[i] = AnimationState.SUBSEQUENT;
            else if (to == null || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline
                || timeline instanceof EventTimeline || !to.animation.hasTimeline(id)) {
                timelineMode[i] = AnimationState.FIRST;
            }
            else {
                for (var next = to.mixingTo; next != null; next = next.mixingTo) {
                    if (next.animation.hasTimeline(id))
                        continue;
                    if (entry.mixDuration > 0) {
                        timelineMode[i] = AnimationState.HOLD_MIX;
                        timelineDipMix[i] = next;
                        continue outer;
                    }
                    break;
                }
                timelineMode[i] = AnimationState.HOLD_FIRST;
            }
        }
    };
    /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */
    AnimationState.prototype.getCurrent = function (trackIndex) {
        if (trackIndex >= this.tracks.length)
            return null;
        return this.tracks[trackIndex];
    };
    /** Adds a listener to receive events for all track entries. */
    AnimationState.prototype.addListener = function (listener) {
        if (listener == null)
            throw new Error("listener cannot be null.");
        this.listeners.push(listener);
    };
    /** Removes the listener added with {@link #addListener()}. */
    AnimationState.prototype.removeListener = function (listener) {
        var index = this.listeners.indexOf(listener);
        if (index >= 0)
            this.listeners.splice(index, 1);
    };
    /** Removes all listeners added with {@link #addListener()}. */
    AnimationState.prototype.clearListeners = function () {
        this.listeners.length = 0;
    };
    /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an
     * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery
     * are not wanted because new animations are being set. */
    AnimationState.prototype.clearListenerNotifications = function () {
        this.queue.clear();
    };
    AnimationState.prototype.setAnimationByName = function (trackIndex, animationName, loop) {
        if (!AnimationState.deprecatedWarning1) {
            AnimationState.deprecatedWarning1 = true;
            console.warn("Spine Deprecation Warning: AnimationState.setAnimationByName is deprecated, please use setAnimation from now on.");
        }
        this.setAnimation(trackIndex, animationName, loop);
    };
    AnimationState.prototype.addAnimationByName = function (trackIndex, animationName, loop, delay) {
        if (!AnimationState.deprecatedWarning2) {
            AnimationState.deprecatedWarning2 = true;
            console.warn("Spine Deprecation Warning: AnimationState.addAnimationByName is deprecated, please use addAnimation from now on.");
        }
        this.addAnimation(trackIndex, animationName, loop, delay);
    };
    AnimationState.prototype.hasAnimation = function (animationName) {
        var animation = this.data.skeletonData.findAnimation(animationName);
        return animation !== null;
    };
    AnimationState.prototype.hasAnimationByName = function (animationName) {
        if (!AnimationState.deprecatedWarning3) {
            AnimationState.deprecatedWarning3 = true;
            console.warn("Spine Deprecation Warning: AnimationState.hasAnimationByName is deprecated, please use hasAnimation from now on.");
        }
        return this.hasAnimation(animationName);
    };
    AnimationState.emptyAnimation = new Animation("<empty>", [], 0);
    /** 1. A previously applied timeline has set this property.
     *
     * Result: Mix from the current pose to the timeline pose. */
    AnimationState.SUBSEQUENT = 0;
    /** 1. This is the first timeline to set this property.
     * 2. The next track entry applied after this one does not have a timeline to set this property.
     *
     * Result: Mix from the setup pose to the timeline pose. */
    AnimationState.FIRST = 1;
    /** 1) A previously applied timeline has set this property.<br>
     * 2) The next track entry to be applied does have a timeline to set this property.<br>
     * 3) The next track entry after that one does not have a timeline to set this property.<br>
     * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids "dipping" when crossfading
     * animations that key the same property. A subsequent timeline will set this property using a mix. */
    AnimationState.HOLD_SUBSEQUENT = 2;
    /** 1) This is the first timeline to set this property.<br>
     * 2) The next track entry to be applied does have a timeline to set this property.<br>
     * 3) The next track entry after that one does not have a timeline to set this property.<br>
     * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids "dipping" when crossfading animations
     * that key the same property. A subsequent timeline will set this property using a mix. */
    AnimationState.HOLD_FIRST = 3;
    /** 1. This is the first timeline to set this property.
     * 2. The next track entry to be applied does have a timeline to set this property.
     * 3. The next track entry after that one does have a timeline to set this property.
     * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.
     *
     * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than
     * 2 track entries in a row have a timeline that sets the same property.
     *
     * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid
     * "dipping" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A
     * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into
     * place. */
    AnimationState.HOLD_MIX = 4;
    AnimationState.SETUP = 1;
    AnimationState.CURRENT = 2;
    AnimationState.deprecatedWarning1 = false;
    AnimationState.deprecatedWarning2 = false;
    AnimationState.deprecatedWarning3 = false;
    return AnimationState;
}());
/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.
 *
 * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs. */
/**
 * @public
 */
var TrackEntry = /** @class */ (function () {
    function TrackEntry() {
        /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which
         * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to
         * the values from the lower tracks.
         *
         * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first
         * called. */
        this.mixBlend = MixBlend.replace;
        this.timelineMode = new Array();
        this.timelineHoldMix = new Array();
        this.timelinesRotation = new Array();
    }
    TrackEntry.prototype.reset = function () {
        this.next = null;
        this.mixingFrom = null;
        this.mixingTo = null;
        this.animation = null;
        this.listener = null;
        this.timelineMode.length = 0;
        this.timelineHoldMix.length = 0;
        this.timelinesRotation.length = 0;
    };
    /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}
     * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the
     * `animationStart` time. */
    TrackEntry.prototype.getAnimationTime = function () {
        if (this.loop) {
            var duration = this.animationEnd - this.animationStart;
            if (duration == 0)
                return this.animationStart;
            return (this.trackTime % duration) + this.animationStart;
        }
        return Math.min(this.trackTime + this.animationStart, this.animationEnd);
    };
    TrackEntry.prototype.setAnimationLast = function (animationLast) {
        this.animationLast = animationLast;
        this.nextAnimationLast = animationLast;
    };
    /** Returns true if at least one loop has been completed.
     *
     * See {@link AnimationStateListener#complete()}. */
    TrackEntry.prototype.isComplete = function () {
        return this.trackTime >= this.animationEnd - this.animationStart;
    };
    /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the
     * long way around when using {@link #alpha} and starting animations on other tracks.
     *
     * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:
     * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long
     * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the
     * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */
    TrackEntry.prototype.resetRotationDirections = function () {
        this.timelinesRotation.length = 0;
    };
    Object.defineProperty(TrackEntry.prototype, "time", {
        get: function () {
            if (!TrackEntry.deprecatedWarning1) {
                TrackEntry.deprecatedWarning1 = true;
                console.warn("Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.");
            }
            return this.trackTime;
        },
        set: function (value) {
            if (!TrackEntry.deprecatedWarning1) {
                TrackEntry.deprecatedWarning1 = true;
                console.warn("Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.");
            }
            this.trackTime = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TrackEntry.prototype, "endTime", {
        get: function () {
            if (!TrackEntry.deprecatedWarning2) {
                TrackEntry.deprecatedWarning2 = true;
                console.warn("Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.");
            }
            return this.trackTime;
        },
        set: function (value) {
            if (!TrackEntry.deprecatedWarning2) {
                TrackEntry.deprecatedWarning2 = true;
                console.warn("Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.");
            }
            this.trackTime = value;
        },
        enumerable: false,
        configurable: true
    });
    TrackEntry.prototype.loopsCount = function () {
        return Math.floor(this.trackTime / this.trackEnd);
    };
    TrackEntry.deprecatedWarning1 = false;
    TrackEntry.deprecatedWarning2 = false;
    return TrackEntry;
}());
/**
 * @public
 */
var EventQueue = /** @class */ (function () {
    function EventQueue(animState) {
        this.objects = [];
        this.drainDisabled = false;
        this.animState = animState;
    }
    EventQueue.prototype.start = function (entry) {
        this.objects.push(EventType.start);
        this.objects.push(entry);
        this.animState.animationsChanged = true;
    };
    EventQueue.prototype.interrupt = function (entry) {
        this.objects.push(EventType.interrupt);
        this.objects.push(entry);
    };
    EventQueue.prototype.end = function (entry) {
        this.objects.push(EventType.end);
        this.objects.push(entry);
        this.animState.animationsChanged = true;
    };
    EventQueue.prototype.dispose = function (entry) {
        this.objects.push(EventType.dispose);
        this.objects.push(entry);
    };
    EventQueue.prototype.complete = function (entry) {
        this.objects.push(EventType.complete);
        this.objects.push(entry);
    };
    EventQueue.prototype.event = function (entry, event) {
        this.objects.push(EventType.event);
        this.objects.push(entry);
        this.objects.push(event);
    };
    EventQueue.prototype.deprecateStuff = function () {
        if (!EventQueue.deprecatedWarning1) {
            EventQueue.deprecatedWarning1 = true;
            console.warn("Spine Deprecation Warning: onComplete, onStart, onEnd, onEvent art deprecated, please use listeners from now on. 'state.addListener({ complete: function(track, event) { } })'");
        }
        return true;
    };
    EventQueue.prototype.drain = function () {
        if (this.drainDisabled)
            return;
        this.drainDisabled = true;
        var objects = this.objects;
        var listeners = this.animState.listeners;
        for (var i = 0; i < objects.length; i += 2) {
            var type = objects[i];
            var entry = objects[i + 1];
            switch (type) {
                case EventType.start:
                    if (entry.listener != null && entry.listener.start)
                        entry.listener.start(entry);
                    for (var ii = 0; ii < listeners.length; ii++)
                        if (listeners[ii].start)
                            listeners[ii].start(entry);
                    //deprecation
                    entry.onStart && this.deprecateStuff() && entry.onStart(entry.trackIndex);
                    this.animState.onStart && this.deprecateStuff() && this.deprecateStuff && this.animState.onStart(entry.trackIndex);
                    break;
                case EventType.interrupt:
                    if (entry.listener != null && entry.listener.interrupt)
                        entry.listener.interrupt(entry);
                    for (var ii = 0; ii < listeners.length; ii++)
                        if (listeners[ii].interrupt)
                            listeners[ii].interrupt(entry);
                    break;
                case EventType.end:
                    if (entry.listener != null && entry.listener.end)
                        entry.listener.end(entry);
                    for (var ii = 0; ii < listeners.length; ii++)
                        if (listeners[ii].end)
                            listeners[ii].end(entry);
                    //deprecation
                    entry.onEnd && this.deprecateStuff() && entry.onEnd(entry.trackIndex);
                    this.animState.onEnd && this.deprecateStuff() && this.animState.onEnd(entry.trackIndex);
                // Fall through.
                case EventType.dispose:
                    if (entry.listener != null && entry.listener.dispose)
                        entry.listener.dispose(entry);
                    for (var ii = 0; ii < listeners.length; ii++)
                        if (listeners[ii].dispose)
                            listeners[ii].dispose(entry);
                    this.animState.trackEntryPool.free(entry);
                    break;
                case EventType.complete:
                    if (entry.listener != null && entry.listener.complete)
                        entry.listener.complete(entry);
                    for (var ii = 0; ii < listeners.length; ii++)
                        if (listeners[ii].complete)
                            listeners[ii].complete(entry);
                    //deprecation
                    var count = MathUtils.toInt(entry.loopsCount());
                    entry.onComplete && this.deprecateStuff() && entry.onComplete(entry.trackIndex, count);
                    this.animState.onComplete && this.deprecateStuff() && this.animState.onComplete(entry.trackIndex, count);
                    break;
                case EventType.event:
                    var event_3 = objects[i++ + 2];
                    if (entry.listener != null && entry.listener.event)
                        entry.listener.event(entry, event_3);
                    for (var ii = 0; ii < listeners.length; ii++)
                        if (listeners[ii].event)
                            listeners[ii].event(entry, event_3);
                    //deprecation
                    entry.onEvent && this.deprecateStuff() && entry.onEvent(entry.trackIndex, event_3);
                    this.animState.onEvent && this.deprecateStuff() && this.animState.onEvent(entry.trackIndex, event_3);
                    break;
            }
        }
        this.clear();
        this.drainDisabled = false;
    };
    EventQueue.prototype.clear = function () {
        this.objects.length = 0;
    };
    EventQueue.deprecatedWarning1 = false;
    return EventQueue;
}());
/**
 * @public
 */
var EventType;
(function (EventType) {
    EventType[EventType["start"] = 0] = "start";
    EventType[EventType["interrupt"] = 1] = "interrupt";
    EventType[EventType["end"] = 2] = "end";
    EventType[EventType["dispose"] = 3] = "dispose";
    EventType[EventType["complete"] = 4] = "complete";
    EventType[EventType["event"] = 5] = "event";
})(EventType || (EventType = {}));
/**
 * @public
 */
var AnimationStateAdapter = /** @class */ (function () {
    function AnimationStateAdapter() {
    }
    AnimationStateAdapter.prototype.start = function (entry) {
    };
    AnimationStateAdapter.prototype.interrupt = function (entry) {
    };
    AnimationStateAdapter.prototype.end = function (entry) {
    };
    AnimationStateAdapter.prototype.dispose = function (entry) {
    };
    AnimationStateAdapter.prototype.complete = function (entry) {
    };
    AnimationStateAdapter.prototype.event = function (entry, event) {
    };
    return AnimationStateAdapter;
}());

/**
 * @public
 */
var AnimationStateData = /** @class */ (function () {
    function AnimationStateData(skeletonData) {
        this.animationToMixTime = {};
        this.defaultMix = 0;
        if (skeletonData == null)
            throw new Error("skeletonData cannot be null.");
        this.skeletonData = skeletonData;
    }
    AnimationStateData.prototype.setMix = function (fromName, toName, duration) {
        var from = this.skeletonData.findAnimation(fromName);
        if (from == null)
            throw new Error("Animation not found: " + fromName);
        var to = this.skeletonData.findAnimation(toName);
        if (to == null)
            throw new Error("Animation not found: " + toName);
        this.setMixWith(from, to, duration);
    };
    AnimationStateData.prototype.setMixByName = function (fromName, toName, duration) {
        if (!AnimationStateData.deprecatedWarning1) {
            AnimationStateData.deprecatedWarning1 = true;
            console.warn("Deprecation Warning: AnimationStateData.setMixByName is deprecated, please use setMix from now on.");
        }
        this.setMix(fromName, toName, duration);
    };
    AnimationStateData.prototype.setMixWith = function (from, to, duration) {
        if (from == null)
            throw new Error("from cannot be null.");
        if (to == null)
            throw new Error("to cannot be null.");
        var key = from.name + "." + to.name;
        this.animationToMixTime[key] = duration;
    };
    AnimationStateData.prototype.getMix = function (from, to) {
        var key = from.name + "." + to.name;
        var value = this.animationToMixTime[key];
        return value === undefined ? this.defaultMix : value;
    };
    AnimationStateData.deprecatedWarning1 = false;
    return AnimationStateData;
}());

/**
 * @public
 */
var AtlasAttachmentLoader = /** @class */ (function () {
    function AtlasAttachmentLoader(atlas) {
        this.atlas = atlas;
    }
    /** @return May be null to not load an attachment. */
    AtlasAttachmentLoader.prototype.newRegionAttachment = function (skin, name, path) {
        var region = this.atlas.findRegion(path);
        if (region == null)
            throw new Error("Region not found in atlas: " + path + " (region attachment: " + name + ")");
        var attachment = new RegionAttachment(name);
        attachment.region = region;
        return attachment;
    };
    /** @return May be null to not load an attachment. */
    AtlasAttachmentLoader.prototype.newMeshAttachment = function (skin, name, path) {
        var region = this.atlas.findRegion(path);
        if (region == null)
            throw new Error("Region not found in atlas: " + path + " (mesh attachment: " + name + ")");
        var attachment = new MeshAttachment(name);
        attachment.region = region;
        return attachment;
    };
    /** @return May be null to not load an attachment. */
    AtlasAttachmentLoader.prototype.newBoundingBoxAttachment = function (skin, name) {
        return new BoundingBoxAttachment(name);
    };
    /** @return May be null to not load an attachment */
    AtlasAttachmentLoader.prototype.newPathAttachment = function (skin, name) {
        return new PathAttachment(name);
    };
    AtlasAttachmentLoader.prototype.newPointAttachment = function (skin, name) {
        return new PointAttachment(name);
    };
    AtlasAttachmentLoader.prototype.newClippingAttachment = function (skin, name) {
        return new ClippingAttachment(name);
    };
    return AtlasAttachmentLoader;
}());

/**
 * @public
 */
var Bone = /** @class */ (function () {
    /** @param parent May be null. */
    function Bone(data, skeleton, parent) {
        //be careful! Spine b,c is c,b in pixi matrix
        this.matrix = new Matrix();
        this.children = new Array();
        this.x = 0;
        this.y = 0;
        this.rotation = 0;
        this.scaleX = 0;
        this.scaleY = 0;
        this.shearX = 0;
        this.shearY = 0;
        this.ax = 0;
        this.ay = 0;
        this.arotation = 0;
        this.ascaleX = 0;
        this.ascaleY = 0;
        this.ashearX = 0;
        this.ashearY = 0;
        this.appliedValid = false;
        this.sorted = false;
        this.active = false;
        if (data == null)
            throw new Error("data cannot be null.");
        if (skeleton == null)
            throw new Error("skeleton cannot be null.");
        this.data = data;
        this.skeleton = skeleton;
        this.parent = parent;
        this.setToSetupPose();
    }
    Object.defineProperty(Bone.prototype, "worldX", {
        get: function () {
            return this.matrix.tx;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bone.prototype, "worldY", {
        get: function () {
            return this.matrix.ty;
        },
        enumerable: false,
        configurable: true
    });
    Bone.prototype.isActive = function () {
        return this.active;
    };
    /** Same as {@link #updateWorldTransform()}. This method exists for Bone to implement {@link Updatable}. */
    Bone.prototype.update = function () {
        this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    /** Computes the world transform using the parent bone and this bone's local transform. */
    Bone.prototype.updateWorldTransform = function () {
        this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    /** Computes the world transform using the parent bone and the specified local transform. */
    Bone.prototype.updateWorldTransformWith = function (x, y, rotation, scaleX, scaleY, shearX, shearY) {
        this.ax = x;
        this.ay = y;
        this.arotation = rotation;
        this.ascaleX = scaleX;
        this.ascaleY = scaleY;
        this.ashearX = shearX;
        this.ashearY = shearY;
        this.appliedValid = true;
        var parent = this.parent;
        var m = this.matrix;
        var sx = this.skeleton.scaleX;
        var sy = base_es_settings.yDown ? -this.skeleton.scaleY : this.skeleton.scaleY;
        if (parent == null) { // Root bone.
            var skeleton = this.skeleton;
            var rotationY = rotation + 90 + shearY;
            m.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;
            m.c = MathUtils.cosDeg(rotationY) * scaleY * sx;
            m.b = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;
            m.d = MathUtils.sinDeg(rotationY) * scaleY * sy;
            m.tx = x * sx + skeleton.x;
            m.ty = y * sy + skeleton.y;
            return;
        }
        var pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;
        m.tx = pa * x + pb * y + parent.matrix.tx;
        m.ty = pc * x + pd * y + parent.matrix.ty;
        switch (this.data.transformMode) {
            case TransformMode.Normal: {
                var rotationY = rotation + 90 + shearY;
                var la = MathUtils.cosDeg(rotation + shearX) * scaleX;
                var lb = MathUtils.cosDeg(rotationY) * scaleY;
                var lc = MathUtils.sinDeg(rotation + shearX) * scaleX;
                var ld = MathUtils.sinDeg(rotationY) * scaleY;
                m.a = pa * la + pb * lc;
                m.c = pa * lb + pb * ld;
                m.b = pc * la + pd * lc;
                m.d = pc * lb + pd * ld;
                return;
            }
            case TransformMode.OnlyTranslation: {
                var rotationY = rotation + 90 + shearY;
                m.a = MathUtils.cosDeg(rotation + shearX) * scaleX;
                m.c = MathUtils.cosDeg(rotationY) * scaleY;
                m.b = MathUtils.sinDeg(rotation + shearX) * scaleX;
                m.d = MathUtils.sinDeg(rotationY) * scaleY;
                break;
            }
            case TransformMode.NoRotationOrReflection: {
                var s = pa * pa + pc * pc;
                var prx = 0;
                if (s > 0.0001) {
                    s = Math.abs(pa * pd - pb * pc) / s;
                    pa /= this.skeleton.scaleX;
                    pc /= this.skeleton.scaleY;
                    pb = pc * s;
                    pd = pa * s;
                    prx = Math.atan2(pc, pa) * MathUtils.radDeg;
                }
                else {
                    pa = 0;
                    pc = 0;
                    prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;
                }
                var rx = rotation + shearX - prx;
                var ry = rotation + shearY - prx + 90;
                var la = MathUtils.cosDeg(rx) * scaleX;
                var lb = MathUtils.cosDeg(ry) * scaleY;
                var lc = MathUtils.sinDeg(rx) * scaleX;
                var ld = MathUtils.sinDeg(ry) * scaleY;
                m.a = pa * la - pb * lc;
                m.c = pa * lb - pb * ld;
                m.b = pc * la + pd * lc;
                m.d = pc * lb + pd * ld;
                break;
            }
            case TransformMode.NoScale:
            case TransformMode.NoScaleOrReflection: {
                var cos = MathUtils.cosDeg(rotation);
                var sin = MathUtils.sinDeg(rotation);
                var za = (pa * cos + pb * sin) / sx;
                var zc = (pc * cos + pd * sin) / sy;
                var s = Math.sqrt(za * za + zc * zc);
                if (s > 0.00001)
                    s = 1 / s;
                za *= s;
                zc *= s;
                s = Math.sqrt(za * za + zc * zc);
                if (this.data.transformMode == TransformMode.NoScale
                    && (pa * pd - pb * pc < 0) != (base_es_settings.yDown ?
                        (this.skeleton.scaleX < 0 != this.skeleton.scaleY > 0) :
                        (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)))
                    s = -s;
                var r = Math.PI / 2 + Math.atan2(zc, za);
                var zb = Math.cos(r) * s;
                var zd = Math.sin(r) * s;
                var la = MathUtils.cosDeg(shearX) * scaleX;
                var lb = MathUtils.cosDeg(90 + shearY) * scaleY;
                var lc = MathUtils.sinDeg(shearX) * scaleX;
                var ld = MathUtils.sinDeg(90 + shearY) * scaleY;
                m.a = za * la + zb * lc;
                m.c = za * lb + zb * ld;
                m.b = zc * la + zd * lc;
                m.d = zc * lb + zd * ld;
                break;
            }
        }
        m.a *= sx;
        m.c *= sx;
        m.b *= sy;
        m.d *= sy;
    };
    Bone.prototype.setToSetupPose = function () {
        var data = this.data;
        this.x = data.x;
        this.y = data.y;
        this.rotation = data.rotation;
        this.scaleX = data.scaleX;
        this.scaleY = data.scaleY;
        this.shearX = data.shearX;
        this.shearY = data.shearY;
    };
    Bone.prototype.getWorldRotationX = function () {
        return Math.atan2(this.matrix.b, this.matrix.a) * MathUtils.radDeg;
    };
    Bone.prototype.getWorldRotationY = function () {
        return Math.atan2(this.matrix.d, this.matrix.c) * MathUtils.radDeg;
    };
    Bone.prototype.getWorldScaleX = function () {
        var m = this.matrix;
        return Math.sqrt(m.a * m.a + m.c * m.c);
    };
    Bone.prototype.getWorldScaleY = function () {
        var m = this.matrix;
        return Math.sqrt(m.b * m.b + m.d * m.d);
    };
    /** Computes the individual applied transform values from the world transform. This can be useful to perform processing using
     * the applied transform after the world transform has been modified directly (eg, by a constraint).
     * <p>
     * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. */
    Bone.prototype.updateAppliedTransform = function () {
        this.appliedValid = true;
        var parent = this.parent;
        var m = this.matrix;
        if (parent == null) {
            this.ax = m.tx;
            this.ay = m.ty;
            this.arotation = Math.atan2(m.b, m.a) * MathUtils.radDeg;
            this.ascaleX = Math.sqrt(m.a * m.a + m.b * m.b);
            this.ascaleY = Math.sqrt(m.c * m.c + m.d * m.d);
            this.ashearX = 0;
            this.ashearY = Math.atan2(m.a * m.c + m.b * m.d, m.a * m.d - m.b * m.c) * MathUtils.radDeg;
            return;
        }
        var pm = parent.matrix;
        var pid = 1 / (pm.a * pm.d - pm.b * pm.c);
        var dx = m.tx - pm.tx, dy = m.ty - pm.ty;
        this.ax = (dx * pm.d * pid - dy * pm.c * pid);
        this.ay = (dy * pm.a * pid - dx * pm.b * pid);
        var ia = pid * pm.d;
        var id = pid * pm.a;
        var ib = pid * pm.c;
        var ic = pid * pm.b;
        var ra = ia * m.a - ib * m.b;
        var rb = ia * m.c - ib * m.d;
        var rc = id * m.b - ic * m.a;
        var rd = id * m.d - ic * m.c;
        this.ashearX = 0;
        this.ascaleX = Math.sqrt(ra * ra + rc * rc);
        if (this.ascaleX > 0.0001) {
            var det = ra * rd - rb * rc;
            this.ascaleY = det / this.ascaleX;
            this.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;
            this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;
        }
        else {
            this.ascaleX = 0;
            this.ascaleY = Math.sqrt(rb * rb + rd * rd);
            this.ashearY = 0;
            this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;
        }
    };
    Bone.prototype.worldToLocal = function (world) {
        var m = this.matrix;
        var a = m.a, b = m.c, c = m.b, d = m.d;
        var invDet = 1 / (a * d - b * c);
        var x = world.x - m.tx, y = world.y - m.ty;
        world.x = (x * d * invDet - y * b * invDet);
        world.y = (y * a * invDet - x * c * invDet);
        return world;
    };
    Bone.prototype.localToWorld = function (local) {
        var m = this.matrix;
        var x = local.x, y = local.y;
        local.x = x * m.a + y * m.c + m.tx;
        local.y = x * m.b + y * m.d + m.ty;
        return local;
    };
    Bone.prototype.worldToLocalRotation = function (worldRotation) {
        var sin = MathUtils.sinDeg(worldRotation), cos = MathUtils.cosDeg(worldRotation);
        var mat = this.matrix;
        return Math.atan2(mat.a * sin - mat.b * cos, mat.d * cos - mat.c * sin) * MathUtils.radDeg;
    };
    Bone.prototype.localToWorldRotation = function (localRotation) {
        var sin = MathUtils.sinDeg(localRotation), cos = MathUtils.cosDeg(localRotation);
        var mat = this.matrix;
        return Math.atan2(cos * mat.b + sin * mat.d, cos * mat.a + sin * mat.c) * MathUtils.radDeg;
    };
    Bone.prototype.rotateWorld = function (degrees) {
        var mat = this.matrix;
        var a = mat.a, b = mat.c, c = mat.b, d = mat.d;
        var cos = MathUtils.cosDeg(degrees), sin = MathUtils.sinDeg(degrees);
        mat.a = cos * a - sin * c;
        mat.c = cos * b - sin * d;
        mat.b = sin * a + cos * c;
        mat.d = sin * b + cos * d;
        this.appliedValid = false;
    };
    return Bone;
}());

/**
 * @public
 */
var BoneData = /** @class */ (function () {
    function BoneData(index, name, parent) {
        this.x = 0;
        this.y = 0;
        this.rotation = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.shearX = 0;
        this.shearY = 0;
        this.transformMode = TransformMode.Normal;
        this.skinRequired = false;
        this.color = new Color();
        if (index < 0)
            throw new Error("index must be >= 0.");
        if (name == null)
            throw new Error("name cannot be null.");
        this.index = index;
        this.name = name;
        this.parent = parent;
    }
    return BoneData;
}());

/**
 * @public
 */
var ConstraintData = /** @class */ (function () {
    function ConstraintData(name, order, skinRequired) {
        this.name = name;
        this.order = order;
        this.skinRequired = skinRequired;
    }
    return ConstraintData;
}());

/**
 * @public
 */
var Event = /** @class */ (function () {
    function Event(time, data) {
        if (data == null)
            throw new Error("data cannot be null.");
        this.time = time;
        this.data = data;
    }
    return Event;
}());

/**
 * @public
 */
var EventData = /** @class */ (function () {
    function EventData(name) {
        this.name = name;
    }
    return EventData;
}());

/**
 * @public
 */
var IkConstraint = /** @class */ (function () {
    function IkConstraint(data, skeleton) {
        this.bendDirection = 0;
        this.compress = false;
        this.stretch = false;
        this.mix = 1;
        this.softness = 0;
        this.active = false;
        if (data == null)
            throw new Error("data cannot be null.");
        if (skeleton == null)
            throw new Error("skeleton cannot be null.");
        this.data = data;
        this.mix = data.mix;
        this.softness = data.softness;
        this.bendDirection = data.bendDirection;
        this.compress = data.compress;
        this.stretch = data.stretch;
        this.bones = new Array();
        for (var i = 0; i < data.bones.length; i++)
            this.bones.push(skeleton.findBone(data.bones[i].name));
        this.target = skeleton.findBone(data.target.name);
    }
    IkConstraint.prototype.isActive = function () {
        return this.active;
    };
    IkConstraint.prototype.apply = function () {
        this.update();
    };
    IkConstraint.prototype.update = function () {
        var target = this.target;
        var bones = this.bones;
        switch (bones.length) {
            case 1:
                this.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);
                break;
            case 2:
                this.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.softness, this.mix);
                break;
        }
    };
    /** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world
     * coordinate system. */
    IkConstraint.prototype.apply1 = function (bone, targetX, targetY, compress, stretch, uniform, alpha) {
        if (!bone.appliedValid)
            bone.updateAppliedTransform();
        var p = bone.parent.matrix;
        var pa = p.a, pb = p.c, pc = p.b, pd = p.d;
        var rotationIK = -bone.ashearX - bone.arotation, tx = 0, ty = 0;
        switch (bone.data.transformMode) {
            case TransformMode.OnlyTranslation:
                tx = targetX - bone.worldX;
                ty = targetY - bone.worldY;
                break;
            case TransformMode.NoRotationOrReflection:
                var s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);
                var sa = pa / bone.skeleton.scaleX;
                var sc = pc / bone.skeleton.scaleY;
                pb = -sc * s * bone.skeleton.scaleX;
                pd = sa * s * bone.skeleton.scaleY;
                rotationIK += Math.atan2(sc, sa) * MathUtils.radDeg;
            // Fall through
            default:
                var x = targetX - p.tx, y = targetY - p.ty;
                var d = pa * pd - pb * pc;
                tx = (x * pd - y * pb) / d - bone.ax;
                ty = (y * pa - x * pc) / d - bone.ay;
        }
        rotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;
        if (bone.ascaleX < 0)
            rotationIK += 180;
        if (rotationIK > 180)
            rotationIK -= 360;
        else if (rotationIK < -180)
            rotationIK += 360;
        var sx = bone.ascaleX, sy = bone.ascaleY;
        if (compress || stretch) {
            switch (bone.data.transformMode) {
                case TransformMode.NoScale:
                case TransformMode.NoScaleOrReflection:
                    tx = targetX - bone.worldX;
                    ty = targetY - bone.worldY;
            }
            var b = bone.data.length * sx, dd = Math.sqrt(tx * tx + ty * ty);
            if ((compress && dd < b) || (stretch && dd > b) && b > 0.0001) {
                var s = (dd / b - 1) * alpha + 1;
                sx *= s;
                if (uniform)
                    sy *= s;
            }
        }
        bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX, bone.ashearY);
    };
    /** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The
     * target is specified in the world coordinate system.
     * @param child A direct descendant of the parent bone. */
    IkConstraint.prototype.apply2 = function (parent, child, targetX, targetY, bendDir, stretch, softness, alpha) {
        if (alpha == 0) {
            child.updateWorldTransform();
            return;
        }
        if (!parent.appliedValid)
            parent.updateAppliedTransform();
        if (!child.appliedValid)
            child.updateAppliedTransform();
        var px = parent.ax, py = parent.ay, psx = parent.ascaleX, sx = psx, psy = parent.ascaleY, csx = child.ascaleX;
        var pmat = parent.matrix;
        var os1 = 0, os2 = 0, s2 = 0;
        if (psx < 0) {
            psx = -psx;
            os1 = 180;
            s2 = -1;
        }
        else {
            os1 = 0;
            s2 = 1;
        }
        if (psy < 0) {
            psy = -psy;
            s2 = -s2;
        }
        if (csx < 0) {
            csx = -csx;
            os2 = 180;
        }
        else
            os2 = 0;
        var cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = pmat.a, b = pmat.c, c = pmat.b, d = pmat.d;
        var u = Math.abs(psx - psy) <= 0.0001;
        if (!u) {
            cy = 0;
            cwx = a * cx + pmat.tx;
            cwy = c * cx + pmat.ty;
        }
        else {
            cy = child.ay;
            cwx = a * cx + b * cy + pmat.tx;
            cwy = c * cx + d * cy + pmat.ty;
        }
        var pp = parent.parent.matrix;
        a = pp.a;
        b = pp.c;
        c = pp.b;
        d = pp.d;
        var id = 1 / (a * d - b * c), x = cwx - pp.tx, y = cwy - pp.ty;
        var dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;
        var l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;
        if (l1 < 0.0001) {
            this.apply1(parent, targetX, targetY, false, stretch, false, alpha);
            child.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);
            return;
        }
        x = targetX - pp.tx;
        y = targetY - pp.ty;
        var tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;
        var dd = tx * tx + ty * ty;
        if (softness != 0) {
            softness *= psx * (csx + 1) / 2;
            var td = Math.sqrt(dd), sd = td - l1 - l2 * psx + softness;
            if (sd > 0) {
                var p = Math.min(1, sd / (softness * 2)) - 1;
                p = (sd - softness * (1 - p * p)) / td;
                tx -= p * tx;
                ty -= p * ty;
                dd = tx * tx + ty * ty;
            }
        }
        outer: if (u) {
            l2 *= psx;
            var cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);
            if (cos < -1)
                cos = -1;
            else if (cos > 1) {
                cos = 1;
                if (stretch)
                    sx *= (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;
            }
            a2 = Math.acos(cos) * bendDir;
            a = l1 + l2 * cos;
            b = l2 * Math.sin(a2);
            a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);
        }
        else {
            a = psx * l2;
            b = psy * l2;
            var aa = a * a, bb = b * b, ta = Math.atan2(ty, tx);
            c = bb * l1 * l1 + aa * dd - aa * bb;
            var c1 = -2 * bb * l1, c2 = bb - aa;
            d = c1 * c1 - 4 * c2 * c;
            if (d >= 0) {
                var q = Math.sqrt(d);
                if (c1 < 0)
                    q = -q;
                q = -(c1 + q) / 2;
                var r0 = q / c2, r1 = c / q;
                var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;
                if (r * r <= dd) {
                    y = Math.sqrt(dd - r * r) * bendDir;
                    a1 = ta - Math.atan2(y, r);
                    a2 = Math.atan2(y / psy, (r - l1) / psx);
                    break outer;
                }
            }
            var minAngle = MathUtils.PI, minX = l1 - a, minDist = minX * minX, minY = 0;
            var maxAngle = 0, maxX = l1 + a, maxDist = maxX * maxX, maxY = 0;
            c = -a * l1 / (aa - bb);
            if (c >= -1 && c <= 1) {
                c = Math.acos(c);
                x = a * Math.cos(c) + l1;
                y = b * Math.sin(c);
                d = x * x + y * y;
                if (d < minDist) {
                    minAngle = c;
                    minDist = d;
                    minX = x;
                    minY = y;
                }
                if (d > maxDist) {
                    maxAngle = c;
                    maxDist = d;
                    maxX = x;
                    maxY = y;
                }
            }
            if (dd <= (minDist + maxDist) / 2) {
                a1 = ta - Math.atan2(minY * bendDir, minX);
                a2 = minAngle * bendDir;
            }
            else {
                a1 = ta - Math.atan2(maxY * bendDir, maxX);
                a2 = maxAngle * bendDir;
            }
        }
        var os = Math.atan2(cy, cx) * s2;
        var rotation = parent.arotation;
        a1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;
        if (a1 > 180)
            a1 -= 360;
        else if (a1 < -180)
            a1 += 360;
        parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, parent.ascaleY, 0, 0);
        rotation = child.arotation;
        a2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;
        if (a2 > 180)
            a2 -= 360;
        else if (a2 < -180)
            a2 += 360;
        child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);
    };
    return IkConstraint;
}());

/**
 * @public
 */
var IkConstraintData = /** @class */ (function (_super) {
    runtime_3_8_es_extends(IkConstraintData, _super);
    function IkConstraintData(name) {
        var _this = _super.call(this, name, 0, false) || this;
        _this.bones = new Array();
        _this.bendDirection = 1;
        _this.compress = false;
        _this.stretch = false;
        _this.uniform = false;
        _this.mix = 1;
        _this.softness = 0;
        return _this;
    }
    return IkConstraintData;
}(ConstraintData));

/**
 * @public
 */
var PathConstraintData = /** @class */ (function (_super) {
    runtime_3_8_es_extends(PathConstraintData, _super);
    function PathConstraintData(name) {
        var _this = _super.call(this, name, 0, false) || this;
        _this.bones = new Array();
        return _this;
    }
    return PathConstraintData;
}(ConstraintData));
/**
 * @public
 */
var SpacingMode;
(function (SpacingMode) {
    SpacingMode[SpacingMode["Length"] = 0] = "Length";
    SpacingMode[SpacingMode["Fixed"] = 1] = "Fixed";
    SpacingMode[SpacingMode["Percent"] = 2] = "Percent";
})(SpacingMode || (SpacingMode = {}));

/**
 * @public
 */
var PathConstraint = /** @class */ (function () {
    function PathConstraint(data, skeleton) {
        this.position = 0;
        this.spacing = 0;
        this.rotateMix = 0;
        this.translateMix = 0;
        this.spaces = new Array();
        this.positions = new Array();
        this.world = new Array();
        this.curves = new Array();
        this.lengths = new Array();
        this.segments = new Array();
        this.active = false;
        if (data == null)
            throw new Error("data cannot be null.");
        if (skeleton == null)
            throw new Error("skeleton cannot be null.");
        this.data = data;
        this.bones = new Array();
        for (var i = 0, n = data.bones.length; i < n; i++)
            this.bones.push(skeleton.findBone(data.bones[i].name));
        this.target = skeleton.findSlot(data.target.name);
        this.position = data.position;
        this.spacing = data.spacing;
        this.rotateMix = data.rotateMix;
        this.translateMix = data.translateMix;
    }
    PathConstraint.prototype.isActive = function () {
        return this.active;
    };
    PathConstraint.prototype.apply = function () {
        this.update();
    };
    PathConstraint.prototype.update = function () {
        var attachment = this.target.getAttachment();
        if (!(attachment instanceof PathAttachment))
            return;
        var rotateMix = this.rotateMix, translateMix = this.translateMix;
        var translate = translateMix > 0, rotate = rotateMix > 0;
        if (!translate && !rotate)
            return;
        var data = this.data;
        var spacingMode = data.spacingMode;
        var lengthSpacing = spacingMode == SpacingMode.Length;
        var rotateMode = data.rotateMode;
        var tangents = rotateMode == RotateMode.Tangent, scale = rotateMode == RotateMode.ChainScale;
        var boneCount = this.bones.length, spacesCount = tangents ? boneCount : boneCount + 1;
        var bones = this.bones;
        var spaces = Utils.setArraySize(this.spaces, spacesCount), lengths = null;
        var spacing = this.spacing;
        if (scale || lengthSpacing) {
            if (scale)
                lengths = Utils.setArraySize(this.lengths, boneCount);
            for (var i = 0, n = spacesCount - 1; i < n;) {
                var bone = bones[i];
                var setupLength = bone.data.length;
                if (setupLength < PathConstraint.epsilon) {
                    if (scale)
                        lengths[i] = 0;
                    spaces[++i] = 0;
                }
                else {
                    var x = setupLength * bone.matrix.a, y = setupLength * bone.matrix.b;
                    var length_1 = Math.sqrt(x * x + y * y);
                    if (scale)
                        lengths[i] = length_1;
                    spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length_1 / setupLength;
                }
            }
        }
        else {
            for (var i = 1; i < spacesCount; i++)
                spaces[i] = spacing;
        }
        var positions = this.computeWorldPositions(attachment, spacesCount, tangents, data.positionMode == PositionMode.Percent, spacingMode == SpacingMode.Percent);
        var boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;
        var tip = false;
        if (offsetRotation == 0)
            tip = rotateMode == RotateMode.Chain;
        else {
            tip = false;
            var p = this.target.bone.matrix;
            offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;
        }
        for (var i = 0, p = 3; i < boneCount; i++, p += 3) {
            var bone = bones[i];
            var mat = bone.matrix;
            mat.tx += (boneX - mat.tx) * translateMix;
            mat.ty += (boneY - mat.ty) * translateMix;
            var x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;
            if (scale) {
                var length_2 = lengths[i];
                if (length_2 != 0) {
                    var s = (Math.sqrt(dx * dx + dy * dy) / length_2 - 1) * rotateMix + 1;
                    mat.a *= s;
                    mat.b *= s;
                }
            }
            boneX = x;
            boneY = y;
            if (rotate) {
                var a = mat.a, b = mat.c, c = mat.b, d = mat.d, r = 0, cos = 0, sin = 0;
                if (tangents)
                    r = positions[p - 1];
                else if (spaces[i + 1] == 0)
                    r = positions[p + 2];
                else
                    r = Math.atan2(dy, dx);
                r -= Math.atan2(c, a);
                if (tip) {
                    cos = Math.cos(r);
                    sin = Math.sin(r);
                    var length_3 = bone.data.length;
                    boneX += (length_3 * (cos * a - sin * c) - dx) * rotateMix;
                    boneY += (length_3 * (sin * a + cos * c) - dy) * rotateMix;
                }
                else {
                    r += offsetRotation;
                }
                if (r > MathUtils.PI)
                    r -= MathUtils.PI2;
                else if (r < -MathUtils.PI) //
                    r += MathUtils.PI2;
                r *= rotateMix;
                cos = Math.cos(r);
                sin = Math.sin(r);
                mat.a = cos * a - sin * c;
                mat.c = cos * b - sin * d;
                mat.b = sin * a + cos * c;
                mat.d = sin * b + cos * d;
            }
            bone.appliedValid = false;
        }
    };
    PathConstraint.prototype.computeWorldPositions = function (path, spacesCount, tangents, percentPosition, percentSpacing) {
        var target = this.target;
        var position = this.position;
        var spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2), world = null;
        var closed = path.closed;
        var verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;
        if (!path.constantSpeed) {
            var lengths = path.lengths;
            curveCount -= closed ? 1 : 2;
            var pathLength_1 = lengths[curveCount];
            if (percentPosition)
                position *= pathLength_1;
            if (percentSpacing) {
                for (var i = 0; i < spacesCount; i++)
                    spaces[i] *= pathLength_1;
            }
            world = Utils.setArraySize(this.world, 8);
            for (var i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {
                var space = spaces[i];
                position += space;
                var p = position;
                if (closed) {
                    p %= pathLength_1;
                    if (p < 0)
                        p += pathLength_1;
                    curve = 0;
                }
                else if (p < 0) {
                    if (prevCurve != PathConstraint.BEFORE) {
                        prevCurve = PathConstraint.BEFORE;
                        path.computeWorldVertices(target, 2, 4, world, 0, 2);
                    }
                    this.addBeforePosition(p, world, 0, out, o);
                    continue;
                }
                else if (p > pathLength_1) {
                    if (prevCurve != PathConstraint.AFTER) {
                        prevCurve = PathConstraint.AFTER;
                        path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);
                    }
                    this.addAfterPosition(p - pathLength_1, world, 0, out, o);
                    continue;
                }
                // Determine curve containing position.
                for (;; curve++) {
                    var length_4 = lengths[curve];
                    if (p > length_4)
                        continue;
                    if (curve == 0)
                        p /= length_4;
                    else {
                        var prev = lengths[curve - 1];
                        p = (p - prev) / (length_4 - prev);
                    }
                    break;
                }
                if (curve != prevCurve) {
                    prevCurve = curve;
                    if (closed && curve == curveCount) {
                        path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);
                        path.computeWorldVertices(target, 0, 4, world, 4, 2);
                    }
                    else
                        path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);
                }
                this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o, tangents || (i > 0 && space == 0));
            }
            return out;
        }
        // World vertices.
        if (closed) {
            verticesLength += 2;
            world = Utils.setArraySize(this.world, verticesLength);
            path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);
            path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);
            world[verticesLength - 2] = world[0];
            world[verticesLength - 1] = world[1];
        }
        else {
            curveCount--;
            verticesLength -= 4;
            world = Utils.setArraySize(this.world, verticesLength);
            path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);
        }
        // Curve lengths.
        var curves = Utils.setArraySize(this.curves, curveCount);
        var pathLength = 0;
        var x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;
        var tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;
        for (var i = 0, w = 2; i < curveCount; i++, w += 6) {
            cx1 = world[w];
            cy1 = world[w + 1];
            cx2 = world[w + 2];
            cy2 = world[w + 3];
            x2 = world[w + 4];
            y2 = world[w + 5];
            tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
            tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
            dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
            dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
            ddfx = tmpx * 2 + dddfx;
            ddfy = tmpy * 2 + dddfy;
            dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
            dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
            dfx += ddfx;
            dfy += ddfy;
            ddfx += dddfx;
            ddfy += dddfy;
            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
            dfx += ddfx;
            dfy += ddfy;
            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
            dfx += ddfx + dddfx;
            dfy += ddfy + dddfy;
            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
            curves[i] = pathLength;
            x1 = x2;
            y1 = y2;
        }
        if (percentPosition)
            position *= pathLength;
        if (percentSpacing) {
            for (var i = 0; i < spacesCount; i++)
                spaces[i] *= pathLength;
        }
        var segments = this.segments;
        var curveLength = 0;
        for (var i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {
            var space = spaces[i];
            position += space;
            var p = position;
            if (closed) {
                p %= pathLength;
                if (p < 0)
                    p += pathLength;
                curve = 0;
            }
            else if (p < 0) {
                this.addBeforePosition(p, world, 0, out, o);
                continue;
            }
            else if (p > pathLength) {
                this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);
                continue;
            }
            // Determine curve containing position.
            for (;; curve++) {
                var length_5 = curves[curve];
                if (p > length_5)
                    continue;
                if (curve == 0)
                    p /= length_5;
                else {
                    var prev = curves[curve - 1];
                    p = (p - prev) / (length_5 - prev);
                }
                break;
            }
            // Curve segment lengths.
            if (curve != prevCurve) {
                prevCurve = curve;
                var ii = curve * 6;
                x1 = world[ii];
                y1 = world[ii + 1];
                cx1 = world[ii + 2];
                cy1 = world[ii + 3];
                cx2 = world[ii + 4];
                cy2 = world[ii + 5];
                x2 = world[ii + 6];
                y2 = world[ii + 7];
                tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
                tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
                ddfx = tmpx * 2 + dddfx;
                ddfy = tmpy * 2 + dddfy;
                dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
                dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
                curveLength = Math.sqrt(dfx * dfx + dfy * dfy);
                segments[0] = curveLength;
                for (ii = 1; ii < 8; ii++) {
                    dfx += ddfx;
                    dfy += ddfy;
                    ddfx += dddfx;
                    ddfy += dddfy;
                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
                    segments[ii] = curveLength;
                }
                dfx += ddfx;
                dfy += ddfy;
                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
                segments[8] = curveLength;
                dfx += ddfx + dddfx;
                dfy += ddfy + dddfy;
                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
                segments[9] = curveLength;
                segment = 0;
            }
            // Weight by segment length.
            p *= curveLength;
            for (;; segment++) {
                var length_6 = segments[segment];
                if (p > length_6)
                    continue;
                if (segment == 0)
                    p /= length_6;
                else {
                    var prev = segments[segment - 1];
                    p = segment + (p - prev) / (length_6 - prev);
                }
                break;
            }
            this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));
        }
        return out;
    };
    PathConstraint.prototype.addBeforePosition = function (p, temp, i, out, o) {
        var x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);
        out[o] = x1 + p * Math.cos(r);
        out[o + 1] = y1 + p * Math.sin(r);
        out[o + 2] = r;
    };
    PathConstraint.prototype.addAfterPosition = function (p, temp, i, out, o) {
        var x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);
        out[o] = x1 + p * Math.cos(r);
        out[o + 1] = y1 + p * Math.sin(r);
        out[o + 2] = r;
    };
    PathConstraint.prototype.addCurvePosition = function (p, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents) {
        if (p == 0 || isNaN(p))
            p = 0.0001;
        var tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;
        var ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;
        var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
        out[o] = x;
        out[o + 1] = y;
        if (tangents)
            out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));
    };
    PathConstraint.NONE = -1;
    PathConstraint.BEFORE = -2;
    PathConstraint.AFTER = -3;
    PathConstraint.epsilon = 0.00001;
    return PathConstraint;
}());

/**
 * @public
 */
var TransformConstraint = /** @class */ (function () {
    function TransformConstraint(data, skeleton) {
        this.rotateMix = 0;
        this.translateMix = 0;
        this.scaleMix = 0;
        this.shearMix = 0;
        this.temp = new Vector2();
        this.active = false;
        if (data == null)
            throw new Error("data cannot be null.");
        if (skeleton == null)
            throw new Error("skeleton cannot be null.");
        this.data = data;
        this.rotateMix = data.rotateMix;
        this.translateMix = data.translateMix;
        this.scaleMix = data.scaleMix;
        this.shearMix = data.shearMix;
        this.bones = new Array();
        for (var i = 0; i < data.bones.length; i++)
            this.bones.push(skeleton.findBone(data.bones[i].name));
        this.target = skeleton.findBone(data.target.name);
    }
    TransformConstraint.prototype.isActive = function () {
        return this.active;
    };
    TransformConstraint.prototype.apply = function () {
        this.update();
    };
    TransformConstraint.prototype.update = function () {
        if (this.data.local) {
            if (this.data.relative)
                this.applyRelativeLocal();
            else
                this.applyAbsoluteLocal();
        }
        else {
            if (this.data.relative)
                this.applyRelativeWorld();
            else
                this.applyAbsoluteWorld();
        }
    };
    TransformConstraint.prototype.applyAbsoluteWorld = function () {
        var rotateMix = this.rotateMix, translateMix = this.translateMix, scaleMix = this.scaleMix, shearMix = this.shearMix;
        var target = this.target;
        var targetMat = target.matrix;
        var ta = targetMat.a, tb = targetMat.c, tc = targetMat.b, td = targetMat.d;
        var degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;
        var offsetRotation = this.data.offsetRotation * degRadReflect;
        var offsetShearY = this.data.offsetShearY * degRadReflect;
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            var modified = false;
            var mat = bone.matrix;
            if (rotateMix != 0) {
                var a = mat.a, b = mat.c, c = mat.b, d = mat.d;
                var r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;
                if (r > MathUtils.PI)
                    r -= MathUtils.PI2;
                else if (r < -MathUtils.PI)
                    r += MathUtils.PI2;
                r *= rotateMix;
                var cos = Math.cos(r), sin = Math.sin(r);
                mat.a = cos * a - sin * c;
                mat.c = cos * b - sin * d;
                mat.b = sin * a + cos * c;
                mat.d = sin * b + cos * d;
                modified = true;
            }
            if (translateMix != 0) {
                var temp = this.temp;
                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));
                mat.tx += (temp.x - mat.tx) * translateMix;
                mat.ty += (temp.y - mat.ty) * translateMix;
                modified = true;
            }
            if (scaleMix > 0) {
                var s = Math.sqrt(mat.a * mat.a + mat.b * mat.b);
                var ts = Math.sqrt(ta * ta + tc * tc);
                if (s > 0.00001)
                    s = (s + (ts - s + this.data.offsetScaleX) * scaleMix) / s;
                mat.a *= s;
                mat.b *= s;
                s = Math.sqrt(mat.c * mat.c + mat.d * mat.d);
                ts = Math.sqrt(tb * tb + td * td);
                if (s > 0.00001)
                    s = (s + (ts - s + this.data.offsetScaleY) * scaleMix) / s;
                mat.c *= s;
                mat.d *= s;
                modified = true;
            }
            if (shearMix > 0) {
                var b = mat.c, d = mat.d;
                var by = Math.atan2(d, b);
                var r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(mat.b, mat.a));
                if (r > MathUtils.PI)
                    r -= MathUtils.PI2;
                else if (r < -MathUtils.PI)
                    r += MathUtils.PI2;
                r = by + (r + offsetShearY) * shearMix;
                var s = Math.sqrt(b * b + d * d);
                mat.c = Math.cos(r) * s;
                mat.d = Math.sin(r) * s;
                modified = true;
            }
            if (modified)
                bone.appliedValid = false;
        }
    };
    TransformConstraint.prototype.applyRelativeWorld = function () {
        var rotateMix = this.rotateMix, translateMix = this.translateMix, scaleMix = this.scaleMix, shearMix = this.shearMix;
        var target = this.target;
        var targetMat = target.matrix;
        var ta = targetMat.a, tb = targetMat.c, tc = targetMat.b, td = targetMat.d;
        var degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;
        var offsetRotation = this.data.offsetRotation * degRadReflect, offsetShearY = this.data.offsetShearY * degRadReflect;
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            var modified = false;
            var mat = bone.matrix;
            if (rotateMix != 0) {
                var a = mat.a, b = mat.c, c = mat.b, d = mat.d;
                var r = Math.atan2(tc, ta) + offsetRotation;
                if (r > MathUtils.PI)
                    r -= MathUtils.PI2;
                else if (r < -MathUtils.PI)
                    r += MathUtils.PI2;
                r *= rotateMix;
                var cos = Math.cos(r), sin = Math.sin(r);
                mat.a = cos * a - sin * c;
                mat.c = cos * b - sin * d;
                mat.b = sin * a + cos * c;
                mat.d = sin * b + cos * d;
                modified = true;
            }
            if (translateMix != 0) {
                var temp = this.temp;
                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));
                mat.tx += temp.x * translateMix;
                mat.ty += temp.y * translateMix;
                modified = true;
            }
            if (scaleMix > 0) {
                var s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * scaleMix + 1;
                mat.a *= s;
                mat.b *= s;
                s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * scaleMix + 1;
                mat.c *= s;
                mat.d *= s;
                modified = true;
            }
            if (shearMix > 0) {
                var r = Math.atan2(td, tb) - Math.atan2(tc, ta);
                if (r > MathUtils.PI)
                    r -= MathUtils.PI2;
                else if (r < -MathUtils.PI)
                    r += MathUtils.PI2;
                var b = mat.c, d = mat.d;
                r = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * shearMix;
                var s = Math.sqrt(b * b + d * d);
                mat.c = Math.cos(r) * s;
                mat.d = Math.sin(r) * s;
                modified = true;
            }
            if (modified)
                bone.appliedValid = false;
        }
    };
    TransformConstraint.prototype.applyAbsoluteLocal = function () {
        var rotateMix = this.rotateMix, translateMix = this.translateMix, scaleMix = this.scaleMix, shearMix = this.shearMix;
        var target = this.target;
        if (!target.appliedValid)
            target.updateAppliedTransform();
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            if (!bone.appliedValid)
                bone.updateAppliedTransform();
            var rotation = bone.arotation;
            if (rotateMix != 0) {
                var r = target.arotation - rotation + this.data.offsetRotation;
                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;
                rotation += r * rotateMix;
            }
            var x = bone.ax, y = bone.ay;
            if (translateMix != 0) {
                x += (target.ax - x + this.data.offsetX) * translateMix;
                y += (target.ay - y + this.data.offsetY) * translateMix;
            }
            var scaleX = bone.ascaleX, scaleY = bone.ascaleY;
            if (scaleMix > 0) {
                if (scaleX > 0.00001)
                    scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * scaleMix) / scaleX;
                if (scaleY > 0.00001)
                    scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * scaleMix) / scaleY;
            }
            var shearY = bone.ashearY;
            if (shearMix > 0) {
                var r = target.ashearY - shearY + this.data.offsetShearY;
                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;
                bone.shearY += r * shearMix;
            }
            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);
        }
    };
    TransformConstraint.prototype.applyRelativeLocal = function () {
        var rotateMix = this.rotateMix, translateMix = this.translateMix, scaleMix = this.scaleMix, shearMix = this.shearMix;
        var target = this.target;
        if (!target.appliedValid)
            target.updateAppliedTransform();
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            if (!bone.appliedValid)
                bone.updateAppliedTransform();
            var rotation = bone.arotation;
            if (rotateMix != 0)
                rotation += (target.arotation + this.data.offsetRotation) * rotateMix;
            var x = bone.ax, y = bone.ay;
            if (translateMix != 0) {
                x += (target.ax + this.data.offsetX) * translateMix;
                y += (target.ay + this.data.offsetY) * translateMix;
            }
            var scaleX = bone.ascaleX, scaleY = bone.ascaleY;
            if (scaleMix > 0) {
                if (scaleX > 0.00001)
                    scaleX *= ((target.ascaleX - 1 + this.data.offsetScaleX) * scaleMix) + 1;
                if (scaleY > 0.00001)
                    scaleY *= ((target.ascaleY - 1 + this.data.offsetScaleY) * scaleMix) + 1;
            }
            var shearY = bone.ashearY;
            if (shearMix > 0)
                shearY += (target.ashearY + this.data.offsetShearY) * shearMix;
            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);
        }
    };
    return TransformConstraint;
}());

/**
 * @public
 */
var Skeleton = /** @class */ (function () {
    function Skeleton(data) {
        this._updateCache = new Array();
        this.updateCacheReset = new Array();
        this.time = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.x = 0;
        this.y = 0;
        if (data == null)
            throw new Error("data cannot be null.");
        this.data = data;
        this.bones = new Array();
        for (var i = 0; i < data.bones.length; i++) {
            var boneData = data.bones[i];
            var bone = void 0;
            if (boneData.parent == null)
                bone = new Bone(boneData, this, null);
            else {
                var parent_1 = this.bones[boneData.parent.index];
                bone = new Bone(boneData, this, parent_1);
                parent_1.children.push(bone);
            }
            this.bones.push(bone);
        }
        this.slots = new Array();
        this.drawOrder = new Array();
        for (var i = 0; i < data.slots.length; i++) {
            var slotData = data.slots[i];
            var bone = this.bones[slotData.boneData.index];
            var slot = new Slot(slotData, bone);
            this.slots.push(slot);
            this.drawOrder.push(slot);
        }
        this.ikConstraints = new Array();
        for (var i = 0; i < data.ikConstraints.length; i++) {
            var ikConstraintData = data.ikConstraints[i];
            this.ikConstraints.push(new IkConstraint(ikConstraintData, this));
        }
        this.transformConstraints = new Array();
        for (var i = 0; i < data.transformConstraints.length; i++) {
            var transformConstraintData = data.transformConstraints[i];
            this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));
        }
        this.pathConstraints = new Array();
        for (var i = 0; i < data.pathConstraints.length; i++) {
            var pathConstraintData = data.pathConstraints[i];
            this.pathConstraints.push(new PathConstraint(pathConstraintData, this));
        }
        this.color = new Color(1, 1, 1, 1);
        this.updateCache();
    }
    Skeleton.prototype.updateCache = function () {
        var updateCache = this._updateCache;
        updateCache.length = 0;
        this.updateCacheReset.length = 0;
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            bone.sorted = bone.data.skinRequired;
            bone.active = !bone.sorted;
        }
        if (this.skin != null) {
            var skinBones = this.skin.bones;
            for (var i = 0, n = this.skin.bones.length; i < n; i++) {
                var bone = this.bones[skinBones[i].index];
                do {
                    bone.sorted = false;
                    bone.active = true;
                    bone = bone.parent;
                } while (bone != null);
            }
        }
        // IK first, lowest hierarchy depth first.
        var ikConstraints = this.ikConstraints;
        var transformConstraints = this.transformConstraints;
        var pathConstraints = this.pathConstraints;
        var ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length;
        var constraintCount = ikCount + transformCount + pathCount;
        outer: for (var i = 0; i < constraintCount; i++) {
            for (var ii = 0; ii < ikCount; ii++) {
                var constraint = ikConstraints[ii];
                if (constraint.data.order == i) {
                    this.sortIkConstraint(constraint);
                    continue outer;
                }
            }
            for (var ii = 0; ii < transformCount; ii++) {
                var constraint = transformConstraints[ii];
                if (constraint.data.order == i) {
                    this.sortTransformConstraint(constraint);
                    continue outer;
                }
            }
            for (var ii = 0; ii < pathCount; ii++) {
                var constraint = pathConstraints[ii];
                if (constraint.data.order == i) {
                    this.sortPathConstraint(constraint);
                    continue outer;
                }
            }
        }
        for (var i = 0, n = bones.length; i < n; i++)
            this.sortBone(bones[i]);
    };
    Skeleton.prototype.sortIkConstraint = function (constraint) {
        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true)));
        if (!constraint.active)
            return;
        var target = constraint.target;
        this.sortBone(target);
        var constrained = constraint.bones;
        var parent = constrained[0];
        this.sortBone(parent);
        if (constrained.length > 1) {
            var child = constrained[constrained.length - 1];
            if (!(this._updateCache.indexOf(child) > -1))
                this.updateCacheReset.push(child);
        }
        this._updateCache.push(constraint);
        this.sortReset(parent.children);
        constrained[constrained.length - 1].sorted = true;
    };
    Skeleton.prototype.sortPathConstraint = function (constraint) {
        constraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true)));
        if (!constraint.active)
            return;
        var slot = constraint.target;
        var slotIndex = slot.data.index;
        var slotBone = slot.bone;
        if (this.skin != null)
            this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);
        if (this.data.defaultSkin != null && this.data.defaultSkin != this.skin)
            this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);
        for (var i = 0, n = this.data.skins.length; i < n; i++)
            this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);
        var attachment = slot.getAttachment();
        if (attachment instanceof PathAttachment)
            this.sortPathConstraintAttachmentWith(attachment, slotBone);
        var constrained = constraint.bones;
        var boneCount = constrained.length;
        for (var i = 0; i < boneCount; i++)
            this.sortBone(constrained[i]);
        this._updateCache.push(constraint);
        for (var i = 0; i < boneCount; i++)
            this.sortReset(constrained[i].children);
        for (var i = 0; i < boneCount; i++)
            constrained[i].sorted = true;
    };
    Skeleton.prototype.sortTransformConstraint = function (constraint) {
        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true)));
        if (!constraint.active)
            return;
        this.sortBone(constraint.target);
        var constrained = constraint.bones;
        var boneCount = constrained.length;
        if (constraint.data.local) {
            for (var i = 0; i < boneCount; i++) {
                var child = constrained[i];
                this.sortBone(child.parent);
                if (!(this._updateCache.indexOf(child) > -1))
                    this.updateCacheReset.push(child);
            }
        }
        else {
            for (var i = 0; i < boneCount; i++) {
                this.sortBone(constrained[i]);
            }
        }
        this._updateCache.push(constraint);
        for (var ii = 0; ii < boneCount; ii++)
            this.sortReset(constrained[ii].children);
        for (var ii = 0; ii < boneCount; ii++)
            constrained[ii].sorted = true;
    };
    Skeleton.prototype.sortPathConstraintAttachment = function (skin, slotIndex, slotBone) {
        var attachments = skin.attachments[slotIndex];
        if (!attachments)
            return;
        for (var key in attachments) {
            this.sortPathConstraintAttachmentWith(attachments[key], slotBone);
        }
    };
    Skeleton.prototype.sortPathConstraintAttachmentWith = function (attachment, slotBone) {
        if (!(attachment instanceof PathAttachment))
            return;
        var pathBones = attachment.bones;
        if (pathBones == null)
            this.sortBone(slotBone);
        else {
            var bones = this.bones;
            var i = 0;
            while (i < pathBones.length) {
                var boneCount = pathBones[i++];
                for (var n = i + boneCount; i < n; i++) {
                    var boneIndex = pathBones[i];
                    this.sortBone(bones[boneIndex]);
                }
            }
        }
    };
    Skeleton.prototype.sortBone = function (bone) {
        if (bone.sorted)
            return;
        var parent = bone.parent;
        if (parent != null)
            this.sortBone(parent);
        bone.sorted = true;
        this._updateCache.push(bone);
    };
    Skeleton.prototype.sortReset = function (bones) {
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            if (!bone.active)
                continue;
            if (bone.sorted)
                this.sortReset(bone.children);
            bone.sorted = false;
        }
    };
    /** Updates the world transform for each bone and applies constraints. */
    Skeleton.prototype.updateWorldTransform = function () {
        var updateCacheReset = this.updateCacheReset;
        for (var i = 0, n = updateCacheReset.length; i < n; i++) {
            var bone = updateCacheReset[i];
            bone.ax = bone.x;
            bone.ay = bone.y;
            bone.arotation = bone.rotation;
            bone.ascaleX = bone.scaleX;
            bone.ascaleY = bone.scaleY;
            bone.ashearX = bone.shearX;
            bone.ashearY = bone.shearY;
            bone.appliedValid = true;
        }
        var updateCache = this._updateCache;
        for (var i = 0, n = updateCache.length; i < n; i++)
            updateCache[i].update();
    };
    /** Sets the bones, constraints, and slots to their setup pose values. */
    Skeleton.prototype.setToSetupPose = function () {
        this.setBonesToSetupPose();
        this.setSlotsToSetupPose();
    };
    /** Sets the bones and constraints to their setup pose values. */
    Skeleton.prototype.setBonesToSetupPose = function () {
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++)
            bones[i].setToSetupPose();
        var ikConstraints = this.ikConstraints;
        for (var i = 0, n = ikConstraints.length; i < n; i++) {
            var constraint = ikConstraints[i];
            constraint.mix = constraint.data.mix;
            constraint.softness = constraint.data.softness;
            constraint.bendDirection = constraint.data.bendDirection;
            constraint.compress = constraint.data.compress;
            constraint.stretch = constraint.data.stretch;
        }
        var transformConstraints = this.transformConstraints;
        for (var i = 0, n = transformConstraints.length; i < n; i++) {
            var constraint = transformConstraints[i];
            var data = constraint.data;
            constraint.rotateMix = data.rotateMix;
            constraint.translateMix = data.translateMix;
            constraint.scaleMix = data.scaleMix;
            constraint.shearMix = data.shearMix;
        }
        var pathConstraints = this.pathConstraints;
        for (var i = 0, n = pathConstraints.length; i < n; i++) {
            var constraint = pathConstraints[i];
            var data = constraint.data;
            constraint.position = data.position;
            constraint.spacing = data.spacing;
            constraint.rotateMix = data.rotateMix;
            constraint.translateMix = data.translateMix;
        }
    };
    Skeleton.prototype.setSlotsToSetupPose = function () {
        var slots = this.slots;
        Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);
        for (var i = 0, n = slots.length; i < n; i++)
            slots[i].setToSetupPose();
    };
    /** @return May return null. */
    Skeleton.prototype.getRootBone = function () {
        if (this.bones.length == 0)
            return null;
        return this.bones[0];
    };
    /** @return May be null. */
    Skeleton.prototype.findBone = function (boneName) {
        if (boneName == null)
            throw new Error("boneName cannot be null.");
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            if (bone.data.name == boneName)
                return bone;
        }
        return null;
    };
    /** @return -1 if the bone was not found. */
    Skeleton.prototype.findBoneIndex = function (boneName) {
        if (boneName == null)
            throw new Error("boneName cannot be null.");
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++)
            if (bones[i].data.name == boneName)
                return i;
        return -1;
    };
    /** @return May be null. */
    Skeleton.prototype.findSlot = function (slotName) {
        if (slotName == null)
            throw new Error("slotName cannot be null.");
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++) {
            var slot = slots[i];
            if (slot.data.name == slotName)
                return slot;
        }
        return null;
    };
    /** @return -1 if the bone was not found. */
    Skeleton.prototype.findSlotIndex = function (slotName) {
        if (slotName == null)
            throw new Error("slotName cannot be null.");
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++)
            if (slots[i].data.name == slotName)
                return i;
        return -1;
    };
    /** Sets a skin by name.
     * @see #setSkin(Skin) */
    Skeleton.prototype.setSkinByName = function (skinName) {
        var skin = this.data.findSkin(skinName);
        if (skin == null)
            throw new Error("Skin not found: " + skinName);
        this.setSkin(skin);
    };
    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.
     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no
     * old skin, each slot's setup mode attachment is attached from the new skin.
     * @param newSkin May be null. */
    Skeleton.prototype.setSkin = function (newSkin) {
        if (newSkin == this.skin)
            return;
        if (newSkin != null) {
            if (this.skin != null)
                newSkin.attachAll(this, this.skin);
            else {
                var slots = this.slots;
                for (var i = 0, n = slots.length; i < n; i++) {
                    var slot = slots[i];
                    var name_1 = slot.data.attachmentName;
                    if (name_1 != null) {
                        var attachment = newSkin.getAttachment(i, name_1);
                        if (attachment != null)
                            slot.setAttachment(attachment);
                    }
                }
            }
        }
        this.skin = newSkin;
        this.updateCache();
    };
    /** @return May be null. */
    Skeleton.prototype.getAttachmentByName = function (slotName, attachmentName) {
        return this.getAttachment(this.data.findSlotIndex(slotName), attachmentName);
    };
    /** @return May be null. */
    Skeleton.prototype.getAttachment = function (slotIndex, attachmentName) {
        if (attachmentName == null)
            throw new Error("attachmentName cannot be null.");
        if (this.skin != null) {
            var attachment = this.skin.getAttachment(slotIndex, attachmentName);
            if (attachment != null)
                return attachment;
        }
        if (this.data.defaultSkin != null)
            return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);
        return null;
    };
    /** @param attachmentName May be null. */
    Skeleton.prototype.setAttachment = function (slotName, attachmentName) {
        if (slotName == null)
            throw new Error("slotName cannot be null.");
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++) {
            var slot = slots[i];
            if (slot.data.name == slotName) {
                var attachment = null;
                if (attachmentName != null) {
                    attachment = this.getAttachment(i, attachmentName);
                    if (attachment == null)
                        throw new Error("Attachment not found: " + attachmentName + ", for slot: " + slotName);
                }
                slot.setAttachment(attachment);
                return;
            }
        }
        throw new Error("Slot not found: " + slotName);
    };
    /** @return May be null. */
    Skeleton.prototype.findIkConstraint = function (constraintName) {
        if (constraintName == null)
            throw new Error("constraintName cannot be null.");
        var ikConstraints = this.ikConstraints;
        for (var i = 0, n = ikConstraints.length; i < n; i++) {
            var ikConstraint = ikConstraints[i];
            if (ikConstraint.data.name == constraintName)
                return ikConstraint;
        }
        return null;
    };
    /** @return May be null. */
    Skeleton.prototype.findTransformConstraint = function (constraintName) {
        if (constraintName == null)
            throw new Error("constraintName cannot be null.");
        var transformConstraints = this.transformConstraints;
        for (var i = 0, n = transformConstraints.length; i < n; i++) {
            var constraint = transformConstraints[i];
            if (constraint.data.name == constraintName)
                return constraint;
        }
        return null;
    };
    /** @return May be null. */
    Skeleton.prototype.findPathConstraint = function (constraintName) {
        if (constraintName == null)
            throw new Error("constraintName cannot be null.");
        var pathConstraints = this.pathConstraints;
        for (var i = 0, n = pathConstraints.length; i < n; i++) {
            var constraint = pathConstraints[i];
            if (constraint.data.name == constraintName)
                return constraint;
        }
        return null;
    };
    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.
     * @param offset The distance from the skeleton origin to the bottom left corner of the AABB.
     * @param size The width and height of the AABB.
     * @param temp Working memory */
    Skeleton.prototype.getBounds = function (offset, size, temp) {
        if (temp === void 0) { temp = new Array(2); }
        if (offset == null)
            throw new Error("offset cannot be null.");
        if (size == null)
            throw new Error("size cannot be null.");
        var drawOrder = this.drawOrder;
        var minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;
        for (var i = 0, n = drawOrder.length; i < n; i++) {
            var slot = drawOrder[i];
            if (!slot.bone.active)
                continue;
            var verticesLength = 0;
            var vertices = null;
            var attachment = slot.getAttachment();
            if (attachment instanceof RegionAttachment) {
                verticesLength = 8;
                vertices = Utils.setArraySize(temp, verticesLength, 0);
                attachment.computeWorldVertices(slot.bone, vertices, 0, 2);
            }
            else if (attachment instanceof MeshAttachment) {
                var mesh = attachment;
                verticesLength = mesh.worldVerticesLength;
                vertices = Utils.setArraySize(temp, verticesLength, 0);
                mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);
            }
            if (vertices != null) {
                for (var ii = 0, nn = vertices.length; ii < nn; ii += 2) {
                    var x = vertices[ii], y = vertices[ii + 1];
                    minX = Math.min(minX, x);
                    minY = Math.min(minY, y);
                    maxX = Math.max(maxX, x);
                    maxY = Math.max(maxY, y);
                }
            }
        }
        offset.set(minX, minY);
        size.set(maxX - minX, maxY - minY);
    };
    Skeleton.prototype.update = function (delta) {
        this.time += delta;
    };
    Object.defineProperty(Skeleton.prototype, "flipX", {
        get: function () {
            return this.scaleX == -1;
        },
        set: function (value) {
            if (!Skeleton.deprecatedWarning1) {
                Skeleton.deprecatedWarning1 = true;
                console.warn("Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY");
            }
            this.scaleX = value ? 1.0 : -1.0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Skeleton.prototype, "flipY", {
        get: function () {
            return this.scaleY == -1;
        },
        set: function (value) {
            if (!Skeleton.deprecatedWarning1) {
                Skeleton.deprecatedWarning1 = true;
                console.warn("Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY");
            }
            this.scaleY = value ? 1.0 : -1.0;
        },
        enumerable: false,
        configurable: true
    });
    Skeleton.deprecatedWarning1 = false;
    return Skeleton;
}());

/**
 * @public
 */
var SkeletonData = /** @class */ (function () {
    function SkeletonData() {
        this.bones = new Array(); // Ordered parents first.
        this.slots = new Array(); // Setup pose draw order.
        this.skins = new Array();
        this.events = new Array();
        this.animations = new Array();
        this.ikConstraints = new Array();
        this.transformConstraints = new Array();
        this.pathConstraints = new Array();
        // Nonessential
        this.fps = 0;
    }
    SkeletonData.prototype.findBone = function (boneName) {
        if (boneName == null)
            throw new Error("boneName cannot be null.");
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            if (bone.name == boneName)
                return bone;
        }
        return null;
    };
    SkeletonData.prototype.findBoneIndex = function (boneName) {
        if (boneName == null)
            throw new Error("boneName cannot be null.");
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++)
            if (bones[i].name == boneName)
                return i;
        return -1;
    };
    SkeletonData.prototype.findSlot = function (slotName) {
        if (slotName == null)
            throw new Error("slotName cannot be null.");
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++) {
            var slot = slots[i];
            if (slot.name == slotName)
                return slot;
        }
        return null;
    };
    SkeletonData.prototype.findSlotIndex = function (slotName) {
        if (slotName == null)
            throw new Error("slotName cannot be null.");
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++)
            if (slots[i].name == slotName)
                return i;
        return -1;
    };
    SkeletonData.prototype.findSkin = function (skinName) {
        if (skinName == null)
            throw new Error("skinName cannot be null.");
        var skins = this.skins;
        for (var i = 0, n = skins.length; i < n; i++) {
            var skin = skins[i];
            if (skin.name == skinName)
                return skin;
        }
        return null;
    };
    SkeletonData.prototype.findEvent = function (eventDataName) {
        if (eventDataName == null)
            throw new Error("eventDataName cannot be null.");
        var events = this.events;
        for (var i = 0, n = events.length; i < n; i++) {
            var event_1 = events[i];
            if (event_1.name == eventDataName)
                return event_1;
        }
        return null;
    };
    SkeletonData.prototype.findAnimation = function (animationName) {
        if (animationName == null)
            throw new Error("animationName cannot be null.");
        var animations = this.animations;
        for (var i = 0, n = animations.length; i < n; i++) {
            var animation = animations[i];
            if (animation.name == animationName)
                return animation;
        }
        return null;
    };
    SkeletonData.prototype.findIkConstraint = function (constraintName) {
        if (constraintName == null)
            throw new Error("constraintName cannot be null.");
        var ikConstraints = this.ikConstraints;
        for (var i = 0, n = ikConstraints.length; i < n; i++) {
            var constraint = ikConstraints[i];
            if (constraint.name == constraintName)
                return constraint;
        }
        return null;
    };
    SkeletonData.prototype.findTransformConstraint = function (constraintName) {
        if (constraintName == null)
            throw new Error("constraintName cannot be null.");
        var transformConstraints = this.transformConstraints;
        for (var i = 0, n = transformConstraints.length; i < n; i++) {
            var constraint = transformConstraints[i];
            if (constraint.name == constraintName)
                return constraint;
        }
        return null;
    };
    SkeletonData.prototype.findPathConstraint = function (constraintName) {
        if (constraintName == null)
            throw new Error("constraintName cannot be null.");
        var pathConstraints = this.pathConstraints;
        for (var i = 0, n = pathConstraints.length; i < n; i++) {
            var constraint = pathConstraints[i];
            if (constraint.name == constraintName)
                return constraint;
        }
        return null;
    };
    SkeletonData.prototype.findPathConstraintIndex = function (pathConstraintName) {
        if (pathConstraintName == null)
            throw new Error("pathConstraintName cannot be null.");
        var pathConstraints = this.pathConstraints;
        for (var i = 0, n = pathConstraints.length; i < n; i++)
            if (pathConstraints[i].name == pathConstraintName)
                return i;
        return -1;
    };
    return SkeletonData;
}());

/**
 * @public
 */
var SlotData = /** @class */ (function () {
    function SlotData(index, name, boneData) {
        this.color = new Color(1, 1, 1, 1);
        if (index < 0)
            throw new Error("index must be >= 0.");
        if (name == null)
            throw new Error("name cannot be null.");
        if (boneData == null)
            throw new Error("boneData cannot be null.");
        this.index = index;
        this.name = name;
        this.boneData = boneData;
    }
    return SlotData;
}());

/**
 * @public
 */
var TransformConstraintData = /** @class */ (function (_super) {
    runtime_3_8_es_extends(TransformConstraintData, _super);
    function TransformConstraintData(name) {
        var _this = _super.call(this, name, 0, false) || this;
        _this.bones = new Array();
        _this.rotateMix = 0;
        _this.translateMix = 0;
        _this.scaleMix = 0;
        _this.shearMix = 0;
        _this.offsetRotation = 0;
        _this.offsetX = 0;
        _this.offsetY = 0;
        _this.offsetScaleX = 0;
        _this.offsetScaleY = 0;
        _this.offsetShearY = 0;
        _this.relative = false;
        _this.local = false;
        return _this;
    }
    return TransformConstraintData;
}(ConstraintData));

/**
 * @public
 */
var SkinEntry = /** @class */ (function () {
    function SkinEntry(slotIndex, name, attachment) {
        this.slotIndex = slotIndex;
        this.name = name;
        this.attachment = attachment;
    }
    return SkinEntry;
}());
/**
 * @public
 */
var Skin = /** @class */ (function () {
    function Skin(name) {
        this.attachments = new Array();
        this.bones = Array();
        this.constraints = new Array();
        if (name == null)
            throw new Error("name cannot be null.");
        this.name = name;
    }
    Skin.prototype.setAttachment = function (slotIndex, name, attachment) {
        if (attachment == null)
            throw new Error("attachment cannot be null.");
        var attachments = this.attachments;
        if (slotIndex >= attachments.length)
            attachments.length = slotIndex + 1;
        if (!attachments[slotIndex])
            attachments[slotIndex] = {};
        attachments[slotIndex][name] = attachment;
    };
    Skin.prototype.addSkin = function (skin) {
        for (var i = 0; i < skin.bones.length; i++) {
            var bone = skin.bones[i];
            var contained = false;
            for (var j = 0; j < this.bones.length; j++) {
                if (this.bones[j] == bone) {
                    contained = true;
                    break;
                }
            }
            if (!contained)
                this.bones.push(bone);
        }
        for (var i = 0; i < skin.constraints.length; i++) {
            var constraint = skin.constraints[i];
            var contained = false;
            for (var j = 0; j < this.constraints.length; j++) {
                if (this.constraints[j] == constraint) {
                    contained = true;
                    break;
                }
            }
            if (!contained)
                this.constraints.push(constraint);
        }
        var attachments = skin.getAttachments();
        for (var i = 0; i < attachments.length; i++) {
            var attachment = attachments[i];
            this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);
        }
    };
    Skin.prototype.copySkin = function (skin) {
        for (var i = 0; i < skin.bones.length; i++) {
            var bone = skin.bones[i];
            var contained = false;
            for (var j = 0; j < this.bones.length; j++) {
                if (this.bones[j] == bone) {
                    contained = true;
                    break;
                }
            }
            if (!contained)
                this.bones.push(bone);
        }
        for (var i = 0; i < skin.constraints.length; i++) {
            var constraint = skin.constraints[i];
            var contained = false;
            for (var j = 0; j < this.constraints.length; j++) {
                if (this.constraints[j] == constraint) {
                    contained = true;
                    break;
                }
            }
            if (!contained)
                this.constraints.push(constraint);
        }
        var attachments = skin.getAttachments();
        for (var i = 0; i < attachments.length; i++) {
            var attachment = attachments[i];
            if (attachment.attachment == null)
                continue;
            if (attachment.attachment instanceof MeshAttachment) {
                attachment.attachment = attachment.attachment.newLinkedMesh();
                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);
            }
            else {
                attachment.attachment = attachment.attachment.copy();
                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);
            }
        }
    };
    /** @return May be null. */
    Skin.prototype.getAttachment = function (slotIndex, name) {
        var dictionary = this.attachments[slotIndex];
        return dictionary ? dictionary[name] : null;
    };
    Skin.prototype.removeAttachment = function (slotIndex, name) {
        var dictionary = this.attachments[slotIndex];
        if (dictionary)
            dictionary[name] = null;
    };
    Skin.prototype.getAttachments = function () {
        var entries = new Array();
        for (var i = 0; i < this.attachments.length; i++) {
            var slotAttachments = this.attachments[i];
            if (slotAttachments) {
                for (var name_1 in slotAttachments) {
                    var attachment = slotAttachments[name_1];
                    if (attachment)
                        entries.push(new SkinEntry(i, name_1, attachment));
                }
            }
        }
        return entries;
    };
    Skin.prototype.getAttachmentsForSlot = function (slotIndex, attachments) {
        var slotAttachments = this.attachments[slotIndex];
        if (slotAttachments) {
            for (var name_2 in slotAttachments) {
                var attachment = slotAttachments[name_2];
                if (attachment)
                    attachments.push(new SkinEntry(slotIndex, name_2, attachment));
            }
        }
    };
    Skin.prototype.clear = function () {
        this.attachments.length = 0;
        this.bones.length = 0;
        this.constraints.length = 0;
    };
    /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */
    Skin.prototype.attachAll = function (skeleton, oldSkin) {
        var slotIndex = 0;
        for (var i = 0; i < skeleton.slots.length; i++) {
            var slot = skeleton.slots[i];
            var slotAttachment = slot.getAttachment();
            if (slotAttachment && slotIndex < oldSkin.attachments.length) {
                var dictionary = oldSkin.attachments[slotIndex];
                for (var key in dictionary) {
                    var skinAttachment = dictionary[key];
                    if (slotAttachment == skinAttachment) {
                        var attachment = this.getAttachment(slotIndex, key);
                        if (attachment != null)
                            slot.setAttachment(attachment);
                        break;
                    }
                }
            }
            slotIndex++;
        }
    };
    return Skin;
}());

/**
 * @public
 */
var SkeletonBinary = /** @class */ (function () {
    function SkeletonBinary(attachmentLoader) {
        this.scale = 1;
        this.linkedMeshes = new Array();
        this.attachmentLoader = attachmentLoader;
    }
    SkeletonBinary.prototype.readSkeletonData = function (binary) {
        var scale = this.scale;
        var skeletonData = new SkeletonData();
        skeletonData.name = ""; // BOZO
        var input = new BinaryInput(binary);
        skeletonData.hash = input.readString();
        skeletonData.version = input.readString();
        if (skeletonData.version === '3.8.75') {
            var error = "Unsupported skeleton data, 3.8.75 is deprecated, please export with a newer version of Spine.";
            console.error(error);
        }
        skeletonData.x = input.readFloat();
        skeletonData.y = input.readFloat();
        skeletonData.width = input.readFloat();
        skeletonData.height = input.readFloat();
        var nonessential = input.readBoolean();
        if (nonessential) {
            skeletonData.fps = input.readFloat();
            skeletonData.imagesPath = input.readString();
            skeletonData.audioPath = input.readString();
        }
        var n = 0;
        // Strings.
        n = input.readInt(true);
        for (var i = 0; i < n; i++)
            input.strings.push(input.readString());
        // Bones.
        n = input.readInt(true);
        for (var i = 0; i < n; i++) {
            var name_1 = input.readString();
            var parent_1 = i == 0 ? null : skeletonData.bones[input.readInt(true)];
            var data = new BoneData(i, name_1, parent_1);
            data.rotation = input.readFloat();
            data.x = input.readFloat() * scale;
            data.y = input.readFloat() * scale;
            data.scaleX = input.readFloat();
            data.scaleY = input.readFloat();
            data.shearX = input.readFloat();
            data.shearY = input.readFloat();
            data.length = input.readFloat() * scale;
            data.transformMode = SkeletonBinary.TransformModeValues[input.readInt(true)];
            data.skinRequired = input.readBoolean();
            if (nonessential)
                Color.rgba8888ToColor(data.color, input.readInt32());
            skeletonData.bones.push(data);
        }
        // Slots.
        n = input.readInt(true);
        for (var i = 0; i < n; i++) {
            var slotName = input.readString();
            var boneData = skeletonData.bones[input.readInt(true)];
            var data = new SlotData(i, slotName, boneData);
            Color.rgba8888ToColor(data.color, input.readInt32());
            var darkColor = input.readInt32();
            if (darkColor != -1)
                Color.rgb888ToColor(data.darkColor = new Color(), darkColor);
            data.attachmentName = input.readStringRef();
            data.blendMode = SkeletonBinary.BlendModeValues[input.readInt(true)];
            skeletonData.slots.push(data);
        }
        // IK constraints.
        n = input.readInt(true);
        for (var i = 0, nn = void 0; i < n; i++) {
            var data = new IkConstraintData(input.readString());
            data.order = input.readInt(true);
            data.skinRequired = input.readBoolean();
            nn = input.readInt(true);
            for (var ii = 0; ii < nn; ii++)
                data.bones.push(skeletonData.bones[input.readInt(true)]);
            data.target = skeletonData.bones[input.readInt(true)];
            data.mix = input.readFloat();
            data.softness = input.readFloat() * scale;
            data.bendDirection = input.readByte();
            data.compress = input.readBoolean();
            data.stretch = input.readBoolean();
            data.uniform = input.readBoolean();
            skeletonData.ikConstraints.push(data);
        }
        // Transform constraints.
        n = input.readInt(true);
        for (var i = 0, nn = void 0; i < n; i++) {
            var data = new TransformConstraintData(input.readString());
            data.order = input.readInt(true);
            data.skinRequired = input.readBoolean();
            nn = input.readInt(true);
            for (var ii = 0; ii < nn; ii++)
                data.bones.push(skeletonData.bones[input.readInt(true)]);
            data.target = skeletonData.bones[input.readInt(true)];
            data.local = input.readBoolean();
            data.relative = input.readBoolean();
            data.offsetRotation = input.readFloat();
            data.offsetX = input.readFloat() * scale;
            data.offsetY = input.readFloat() * scale;
            data.offsetScaleX = input.readFloat();
            data.offsetScaleY = input.readFloat();
            data.offsetShearY = input.readFloat();
            data.rotateMix = input.readFloat();
            data.translateMix = input.readFloat();
            data.scaleMix = input.readFloat();
            data.shearMix = input.readFloat();
            skeletonData.transformConstraints.push(data);
        }
        // Path constraints.
        n = input.readInt(true);
        for (var i = 0, nn = void 0; i < n; i++) {
            var data = new PathConstraintData(input.readString());
            data.order = input.readInt(true);
            data.skinRequired = input.readBoolean();
            nn = input.readInt(true);
            for (var ii = 0; ii < nn; ii++)
                data.bones.push(skeletonData.bones[input.readInt(true)]);
            data.target = skeletonData.slots[input.readInt(true)];
            data.positionMode = SkeletonBinary.PositionModeValues[input.readInt(true)];
            data.spacingMode = SkeletonBinary.SpacingModeValues[input.readInt(true)];
            data.rotateMode = SkeletonBinary.RotateModeValues[input.readInt(true)];
            data.offsetRotation = input.readFloat();
            data.position = input.readFloat();
            if (data.positionMode == PositionMode.Fixed)
                data.position *= scale;
            data.spacing = input.readFloat();
            if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)
                data.spacing *= scale;
            data.rotateMix = input.readFloat();
            data.translateMix = input.readFloat();
            skeletonData.pathConstraints.push(data);
        }
        // Default skin.
        var defaultSkin = this.readSkin(input, skeletonData, true, nonessential);
        if (defaultSkin != null) {
            skeletonData.defaultSkin = defaultSkin;
            skeletonData.skins.push(defaultSkin);
        }
        // Skins.
        {
            var i = skeletonData.skins.length;
            Utils.setArraySize(skeletonData.skins, n = i + input.readInt(true));
            for (; i < n; i++)
                skeletonData.skins[i] = this.readSkin(input, skeletonData, false, nonessential);
        }
        // Linked meshes.
        n = this.linkedMeshes.length;
        for (var i = 0; i < n; i++) {
            var linkedMesh = this.linkedMeshes[i];
            var skin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);
            if (skin == null)
                throw new Error("Skin not found: " + linkedMesh.skin);
            var parent_2 = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);
            if (parent_2 == null)
                throw new Error("Parent mesh not found: " + linkedMesh.parent);
            linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent_2 : linkedMesh.mesh;
            linkedMesh.mesh.setParentMesh(parent_2);
            // linkedMesh.mesh.updateUVs();
        }
        this.linkedMeshes.length = 0;
        // Events.
        n = input.readInt(true);
        for (var i = 0; i < n; i++) {
            var data = new EventData(input.readStringRef());
            data.intValue = input.readInt(false);
            data.floatValue = input.readFloat();
            data.stringValue = input.readString();
            data.audioPath = input.readString();
            if (data.audioPath != null) {
                data.volume = input.readFloat();
                data.balance = input.readFloat();
            }
            skeletonData.events.push(data);
        }
        // Animations.
        n = input.readInt(true);
        for (var i = 0; i < n; i++)
            skeletonData.animations.push(this.readAnimation(input, input.readString(), skeletonData));
        return skeletonData;
    };
    SkeletonBinary.prototype.readSkin = function (input, skeletonData, defaultSkin, nonessential) {
        var skin = null;
        var slotCount = 0;
        if (defaultSkin) {
            slotCount = input.readInt(true);
            if (slotCount == 0)
                return null;
            skin = new Skin("default");
        }
        else {
            skin = new Skin(input.readStringRef());
            skin.bones.length = input.readInt(true);
            for (var i = 0, n = skin.bones.length; i < n; i++)
                skin.bones[i] = skeletonData.bones[input.readInt(true)];
            for (var i = 0, n = input.readInt(true); i < n; i++)
                skin.constraints.push(skeletonData.ikConstraints[input.readInt(true)]);
            for (var i = 0, n = input.readInt(true); i < n; i++)
                skin.constraints.push(skeletonData.transformConstraints[input.readInt(true)]);
            for (var i = 0, n = input.readInt(true); i < n; i++)
                skin.constraints.push(skeletonData.pathConstraints[input.readInt(true)]);
            slotCount = input.readInt(true);
        }
        for (var i = 0; i < slotCount; i++) {
            var slotIndex = input.readInt(true);
            for (var ii = 0, nn = input.readInt(true); ii < nn; ii++) {
                var name_2 = input.readStringRef();
                var attachment = this.readAttachment(input, skeletonData, skin, slotIndex, name_2, nonessential);
                if (attachment != null)
                    skin.setAttachment(slotIndex, name_2, attachment);
            }
        }
        return skin;
    };
    SkeletonBinary.prototype.readAttachment = function (input, skeletonData, skin, slotIndex, attachmentName, nonessential) {
        var scale = this.scale;
        var name = input.readStringRef();
        if (name == null)
            name = attachmentName;
        var typeIndex = input.readByte();
        var type = SkeletonBinary.AttachmentTypeValues[typeIndex];
        switch (type) {
            case AttachmentType.Region: {
                var path = input.readStringRef();
                var rotation = input.readFloat();
                var x = input.readFloat();
                var y = input.readFloat();
                var scaleX = input.readFloat();
                var scaleY = input.readFloat();
                var width = input.readFloat();
                var height = input.readFloat();
                var color = input.readInt32();
                if (path == null)
                    path = name;
                var region = this.attachmentLoader.newRegionAttachment(skin, name, path);
                if (region == null)
                    return null;
                region.path = path;
                region.x = x * scale;
                region.y = y * scale;
                region.scaleX = scaleX;
                region.scaleY = scaleY;
                region.rotation = rotation;
                region.width = width * scale;
                region.height = height * scale;
                Color.rgba8888ToColor(region.color, color);
                // region.updateOffset();
                return region;
            }
            case AttachmentType.BoundingBox: {
                var vertexCount = input.readInt(true);
                var vertices = this.readVertices(input, vertexCount);
                var color = nonessential ? input.readInt32() : 0;
                var box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);
                if (box == null)
                    return null;
                box.worldVerticesLength = vertexCount << 1;
                box.vertices = vertices.vertices;
                box.bones = vertices.bones;
                if (nonessential)
                    Color.rgba8888ToColor(box.color, color);
                return box;
            }
            case AttachmentType.Mesh: {
                var path = input.readStringRef();
                var color = input.readInt32();
                var vertexCount = input.readInt(true);
                var uvs = this.readFloatArray(input, vertexCount << 1, 1);
                var triangles = this.readShortArray(input);
                var vertices = this.readVertices(input, vertexCount);
                var hullLength = input.readInt(true);
                var edges = null;
                var width = 0, height = 0;
                if (nonessential) {
                    edges = this.readShortArray(input);
                    width = input.readFloat();
                    height = input.readFloat();
                }
                if (path == null)
                    path = name;
                var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);
                if (mesh == null)
                    return null;
                mesh.path = path;
                Color.rgba8888ToColor(mesh.color, color);
                mesh.bones = vertices.bones;
                mesh.vertices = vertices.vertices;
                mesh.worldVerticesLength = vertexCount << 1;
                mesh.triangles = triangles;
                mesh.regionUVs = new Float32Array(uvs);
                // mesh.updateUVs();
                mesh.hullLength = hullLength << 1;
                if (nonessential) {
                    mesh.edges = edges;
                    mesh.width = width * scale;
                    mesh.height = height * scale;
                }
                return mesh;
            }
            case AttachmentType.LinkedMesh: {
                var path = input.readStringRef();
                var color = input.readInt32();
                var skinName = input.readStringRef();
                var parent_3 = input.readStringRef();
                var inheritDeform = input.readBoolean();
                var width = 0, height = 0;
                if (nonessential) {
                    width = input.readFloat();
                    height = input.readFloat();
                }
                if (path == null)
                    path = name;
                var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);
                if (mesh == null)
                    return null;
                mesh.path = path;
                Color.rgba8888ToColor(mesh.color, color);
                if (nonessential) {
                    mesh.width = width * scale;
                    mesh.height = height * scale;
                }
                this.linkedMeshes.push(new LinkedMesh$1(mesh, skinName, slotIndex, parent_3, inheritDeform));
                return mesh;
            }
            case AttachmentType.Path: {
                var closed_1 = input.readBoolean();
                var constantSpeed = input.readBoolean();
                var vertexCount = input.readInt(true);
                var vertices = this.readVertices(input, vertexCount);
                var lengths = Utils.newArray(vertexCount / 3, 0);
                for (var i = 0, n = lengths.length; i < n; i++)
                    lengths[i] = input.readFloat() * scale;
                var color = nonessential ? input.readInt32() : 0;
                var path = this.attachmentLoader.newPathAttachment(skin, name);
                if (path == null)
                    return null;
                path.closed = closed_1;
                path.constantSpeed = constantSpeed;
                path.worldVerticesLength = vertexCount << 1;
                path.vertices = vertices.vertices;
                path.bones = vertices.bones;
                path.lengths = lengths;
                if (nonessential)
                    Color.rgba8888ToColor(path.color, color);
                return path;
            }
            case AttachmentType.Point: {
                var rotation = input.readFloat();
                var x = input.readFloat();
                var y = input.readFloat();
                var color = nonessential ? input.readInt32() : 0;
                var point = this.attachmentLoader.newPointAttachment(skin, name);
                if (point == null)
                    return null;
                point.x = x * scale;
                point.y = y * scale;
                point.rotation = rotation;
                if (nonessential)
                    Color.rgba8888ToColor(point.color, color);
                return point;
            }
            case AttachmentType.Clipping: {
                var endSlotIndex = input.readInt(true);
                var vertexCount = input.readInt(true);
                var vertices = this.readVertices(input, vertexCount);
                var color = nonessential ? input.readInt32() : 0;
                var clip = this.attachmentLoader.newClippingAttachment(skin, name);
                if (clip == null)
                    return null;
                clip.endSlot = skeletonData.slots[endSlotIndex];
                clip.worldVerticesLength = vertexCount << 1;
                clip.vertices = vertices.vertices;
                clip.bones = vertices.bones;
                if (nonessential)
                    Color.rgba8888ToColor(clip.color, color);
                return clip;
            }
        }
        return null;
    };
    SkeletonBinary.prototype.readVertices = function (input, vertexCount) {
        var verticesLength = vertexCount << 1;
        var vertices = new Vertices();
        var scale = this.scale;
        if (!input.readBoolean()) {
            vertices.vertices = this.readFloatArray(input, verticesLength, scale);
            return vertices;
        }
        var weights = new Array();
        var bonesArray = new Array();
        for (var i = 0; i < vertexCount; i++) {
            var boneCount = input.readInt(true);
            bonesArray.push(boneCount);
            for (var ii = 0; ii < boneCount; ii++) {
                bonesArray.push(input.readInt(true));
                weights.push(input.readFloat() * scale);
                weights.push(input.readFloat() * scale);
                weights.push(input.readFloat());
            }
        }
        vertices.vertices = Utils.toFloatArray(weights);
        vertices.bones = bonesArray;
        return vertices;
    };
    SkeletonBinary.prototype.readFloatArray = function (input, n, scale) {
        var array = new Array(n);
        if (scale == 1) {
            for (var i = 0; i < n; i++)
                array[i] = input.readFloat();
        }
        else {
            for (var i = 0; i < n; i++)
                array[i] = input.readFloat() * scale;
        }
        return array;
    };
    SkeletonBinary.prototype.readShortArray = function (input) {
        var n = input.readInt(true);
        var array = new Array(n);
        for (var i = 0; i < n; i++)
            array[i] = input.readShort();
        return array;
    };
    SkeletonBinary.prototype.readAnimation = function (input, name, skeletonData) {
        var timelines = new Array();
        var scale = this.scale;
        var duration = 0;
        var tempColor1 = new Color();
        var tempColor2 = new Color();
        // Slot timelines.
        for (var i = 0, n = input.readInt(true); i < n; i++) {
            var slotIndex = input.readInt(true);
            for (var ii = 0, nn = input.readInt(true); ii < nn; ii++) {
                var timelineType = input.readByte();
                var frameCount = input.readInt(true);
                switch (timelineType) {
                    case SkeletonBinary.SLOT_ATTACHMENT: {
                        var timeline = new AttachmentTimeline(frameCount);
                        timeline.slotIndex = slotIndex;
                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++)
                            timeline.setFrame(frameIndex, input.readFloat(), input.readStringRef());
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[frameCount - 1]);
                        break;
                    }
                    case SkeletonBinary.SLOT_COLOR: {
                        var timeline = new ColorTimeline(frameCount);
                        timeline.slotIndex = slotIndex;
                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {
                            var time = input.readFloat();
                            Color.rgba8888ToColor(tempColor1, input.readInt32());
                            timeline.setFrame(frameIndex, time, tempColor1.r, tempColor1.g, tempColor1.b, tempColor1.a);
                            if (frameIndex < frameCount - 1)
                                this.readCurve(input, frameIndex, timeline);
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(frameCount - 1) * ColorTimeline.ENTRIES]);
                        break;
                    }
                    case SkeletonBinary.SLOT_TWO_COLOR: {
                        var timeline = new TwoColorTimeline(frameCount);
                        timeline.slotIndex = slotIndex;
                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {
                            var time = input.readFloat();
                            Color.rgba8888ToColor(tempColor1, input.readInt32());
                            Color.rgb888ToColor(tempColor2, input.readInt32());
                            timeline.setFrame(frameIndex, time, tempColor1.r, tempColor1.g, tempColor1.b, tempColor1.a, tempColor2.r, tempColor2.g, tempColor2.b);
                            if (frameIndex < frameCount - 1)
                                this.readCurve(input, frameIndex, timeline);
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(frameCount - 1) * TwoColorTimeline.ENTRIES]);
                        break;
                    }
                }
            }
        }
        // Bone timelines.
        for (var i = 0, n = input.readInt(true); i < n; i++) {
            var boneIndex = input.readInt(true);
            for (var ii = 0, nn = input.readInt(true); ii < nn; ii++) {
                var timelineType = input.readByte();
                var frameCount = input.readInt(true);
                switch (timelineType) {
                    case SkeletonBinary.BONE_ROTATE: {
                        var timeline = new RotateTimeline(frameCount);
                        timeline.boneIndex = boneIndex;
                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {
                            timeline.setFrame(frameIndex, input.readFloat(), input.readFloat());
                            if (frameIndex < frameCount - 1)
                                this.readCurve(input, frameIndex, timeline);
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(frameCount - 1) * RotateTimeline.ENTRIES]);
                        break;
                    }
                    case SkeletonBinary.BONE_TRANSLATE:
                    case SkeletonBinary.BONE_SCALE:
                    case SkeletonBinary.BONE_SHEAR: {
                        var timeline = void 0;
                        var timelineScale = 1;
                        if (timelineType == SkeletonBinary.BONE_SCALE)
                            timeline = new ScaleTimeline(frameCount);
                        else if (timelineType == SkeletonBinary.BONE_SHEAR)
                            timeline = new ShearTimeline(frameCount);
                        else {
                            timeline = new TranslateTimeline(frameCount);
                            timelineScale = scale;
                        }
                        timeline.boneIndex = boneIndex;
                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {
                            timeline.setFrame(frameIndex, input.readFloat(), input.readFloat() * timelineScale, input.readFloat() * timelineScale);
                            if (frameIndex < frameCount - 1)
                                this.readCurve(input, frameIndex, timeline);
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(frameCount - 1) * TranslateTimeline.ENTRIES]);
                        break;
                    }
                }
            }
        }
        // IK constraint timelines.
        for (var i = 0, n = input.readInt(true); i < n; i++) {
            var index = input.readInt(true);
            var frameCount = input.readInt(true);
            var timeline = new IkConstraintTimeline(frameCount);
            timeline.ikConstraintIndex = index;
            for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {
                timeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat() * scale, input.readByte(), input.readBoolean(), input.readBoolean());
                if (frameIndex < frameCount - 1)
                    this.readCurve(input, frameIndex, timeline);
            }
            timelines.push(timeline);
            duration = Math.max(duration, timeline.frames[(frameCount - 1) * IkConstraintTimeline.ENTRIES]);
        }
        // Transform constraint timelines.
        for (var i = 0, n = input.readInt(true); i < n; i++) {
            var index = input.readInt(true);
            var frameCount = input.readInt(true);
            var timeline = new TransformConstraintTimeline(frameCount);
            timeline.transformConstraintIndex = index;
            for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {
                timeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat());
                if (frameIndex < frameCount - 1)
                    this.readCurve(input, frameIndex, timeline);
            }
            timelines.push(timeline);
            duration = Math.max(duration, timeline.frames[(frameCount - 1) * TransformConstraintTimeline.ENTRIES]);
        }
        // Path constraint timelines.
        for (var i = 0, n = input.readInt(true); i < n; i++) {
            var index = input.readInt(true);
            var data = skeletonData.pathConstraints[index];
            for (var ii = 0, nn = input.readInt(true); ii < nn; ii++) {
                var timelineType = input.readByte();
                var frameCount = input.readInt(true);
                switch (timelineType) {
                    case SkeletonBinary.PATH_POSITION:
                    case SkeletonBinary.PATH_SPACING: {
                        var timeline = void 0;
                        var timelineScale = 1;
                        if (timelineType == SkeletonBinary.PATH_SPACING) {
                            timeline = new PathConstraintSpacingTimeline(frameCount);
                            if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)
                                timelineScale = scale;
                        }
                        else {
                            timeline = new PathConstraintPositionTimeline(frameCount);
                            if (data.positionMode == PositionMode.Fixed)
                                timelineScale = scale;
                        }
                        timeline.pathConstraintIndex = index;
                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {
                            timeline.setFrame(frameIndex, input.readFloat(), input.readFloat() * timelineScale);
                            if (frameIndex < frameCount - 1)
                                this.readCurve(input, frameIndex, timeline);
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(frameCount - 1) * PathConstraintPositionTimeline.ENTRIES]);
                        break;
                    }
                    case SkeletonBinary.PATH_MIX: {
                        var timeline = new PathConstraintMixTimeline(frameCount);
                        timeline.pathConstraintIndex = index;
                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {
                            timeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat());
                            if (frameIndex < frameCount - 1)
                                this.readCurve(input, frameIndex, timeline);
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(frameCount - 1) * PathConstraintMixTimeline.ENTRIES]);
                        break;
                    }
                }
            }
        }
        // Deform timelines.
        for (var i = 0, n = input.readInt(true); i < n; i++) {
            var skin = skeletonData.skins[input.readInt(true)];
            for (var ii = 0, nn = input.readInt(true); ii < nn; ii++) {
                var slotIndex = input.readInt(true);
                for (var iii = 0, nnn = input.readInt(true); iii < nnn; iii++) {
                    var attachment = skin.getAttachment(slotIndex, input.readStringRef());
                    var weighted = attachment.bones != null;
                    var vertices = attachment.vertices;
                    var deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;
                    var frameCount = input.readInt(true);
                    var timeline = new DeformTimeline(frameCount);
                    timeline.slotIndex = slotIndex;
                    timeline.attachment = attachment;
                    for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {
                        var time = input.readFloat();
                        var deform = void 0;
                        var end = input.readInt(true);
                        if (end == 0)
                            deform = weighted ? Utils.newFloatArray(deformLength) : vertices;
                        else {
                            deform = Utils.newFloatArray(deformLength);
                            var start = input.readInt(true);
                            end += start;
                            if (scale == 1) {
                                for (var v = start; v < end; v++)
                                    deform[v] = input.readFloat();
                            }
                            else {
                                for (var v = start; v < end; v++)
                                    deform[v] = input.readFloat() * scale;
                            }
                            if (!weighted) {
                                for (var v = 0, vn = deform.length; v < vn; v++)
                                    deform[v] += vertices[v];
                            }
                        }
                        timeline.setFrame(frameIndex, time, deform);
                        if (frameIndex < frameCount - 1)
                            this.readCurve(input, frameIndex, timeline);
                    }
                    timelines.push(timeline);
                    duration = Math.max(duration, timeline.frames[frameCount - 1]);
                }
            }
        }
        // Draw order timeline.
        var drawOrderCount = input.readInt(true);
        if (drawOrderCount > 0) {
            var timeline = new DrawOrderTimeline(drawOrderCount);
            var slotCount = skeletonData.slots.length;
            for (var i = 0; i < drawOrderCount; i++) {
                var time = input.readFloat();
                var offsetCount = input.readInt(true);
                var drawOrder = Utils.newArray(slotCount, 0);
                for (var ii = slotCount - 1; ii >= 0; ii--)
                    drawOrder[ii] = -1;
                var unchanged = Utils.newArray(slotCount - offsetCount, 0);
                var originalIndex = 0, unchangedIndex = 0;
                for (var ii = 0; ii < offsetCount; ii++) {
                    var slotIndex = input.readInt(true);
                    // Collect unchanged items.
                    while (originalIndex != slotIndex)
                        unchanged[unchangedIndex++] = originalIndex++;
                    // Set changed items.
                    drawOrder[originalIndex + input.readInt(true)] = originalIndex++;
                }
                // Collect remaining unchanged items.
                while (originalIndex < slotCount)
                    unchanged[unchangedIndex++] = originalIndex++;
                // Fill in unchanged items.
                for (var ii = slotCount - 1; ii >= 0; ii--)
                    if (drawOrder[ii] == -1)
                        drawOrder[ii] = unchanged[--unchangedIndex];
                timeline.setFrame(i, time, drawOrder);
            }
            timelines.push(timeline);
            duration = Math.max(duration, timeline.frames[drawOrderCount - 1]);
        }
        // Event timeline.
        var eventCount = input.readInt(true);
        if (eventCount > 0) {
            var timeline = new EventTimeline(eventCount);
            for (var i = 0; i < eventCount; i++) {
                var time = input.readFloat();
                var eventData = skeletonData.events[input.readInt(true)];
                var event_1 = new Event(time, eventData);
                event_1.intValue = input.readInt(false);
                event_1.floatValue = input.readFloat();
                event_1.stringValue = input.readBoolean() ? input.readString() : eventData.stringValue;
                if (event_1.data.audioPath != null) {
                    event_1.volume = input.readFloat();
                    event_1.balance = input.readFloat();
                }
                timeline.setFrame(i, event_1);
            }
            timelines.push(timeline);
            duration = Math.max(duration, timeline.frames[eventCount - 1]);
        }
        return new Animation(name, timelines, duration);
    };
    SkeletonBinary.prototype.readCurve = function (input, frameIndex, timeline) {
        switch (input.readByte()) {
            case SkeletonBinary.CURVE_STEPPED:
                timeline.setStepped(frameIndex);
                break;
            case SkeletonBinary.CURVE_BEZIER:
                this.setCurve(timeline, frameIndex, input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat());
                break;
        }
    };
    SkeletonBinary.prototype.setCurve = function (timeline, frameIndex, cx1, cy1, cx2, cy2) {
        timeline.setCurve(frameIndex, cx1, cy1, cx2, cy2);
    };
    SkeletonBinary.AttachmentTypeValues = [0 /*AttachmentType.Region*/, 1 /*AttachmentType.BoundingBox*/, 2 /*AttachmentType.Mesh*/, 3 /*AttachmentType.LinkedMesh*/, 4 /*AttachmentType.Path*/, 5 /*AttachmentType.Point*/, 6 /*AttachmentType.Clipping*/];
    SkeletonBinary.TransformModeValues = [TransformMode.Normal, TransformMode.OnlyTranslation, TransformMode.NoRotationOrReflection, TransformMode.NoScale, TransformMode.NoScaleOrReflection];
    SkeletonBinary.PositionModeValues = [PositionMode.Fixed, PositionMode.Percent];
    SkeletonBinary.SpacingModeValues = [SpacingMode.Length, SpacingMode.Fixed, SpacingMode.Percent];
    SkeletonBinary.RotateModeValues = [RotateMode.Tangent, RotateMode.Chain, RotateMode.ChainScale];
    SkeletonBinary.BlendModeValues = [BLEND_MODES.NORMAL, BLEND_MODES.ADD, BLEND_MODES.MULTIPLY, BLEND_MODES.SCREEN];
    SkeletonBinary.BONE_ROTATE = 0;
    SkeletonBinary.BONE_TRANSLATE = 1;
    SkeletonBinary.BONE_SCALE = 2;
    SkeletonBinary.BONE_SHEAR = 3;
    SkeletonBinary.SLOT_ATTACHMENT = 0;
    SkeletonBinary.SLOT_COLOR = 1;
    SkeletonBinary.SLOT_TWO_COLOR = 2;
    SkeletonBinary.PATH_POSITION = 0;
    SkeletonBinary.PATH_SPACING = 1;
    SkeletonBinary.PATH_MIX = 2;
    SkeletonBinary.CURVE_LINEAR = 0;
    SkeletonBinary.CURVE_STEPPED = 1;
    SkeletonBinary.CURVE_BEZIER = 2;
    return SkeletonBinary;
}());
var LinkedMesh$1 = /** @class */ (function () {
    function LinkedMesh(mesh, skin, slotIndex, parent, inheritDeform) {
        this.mesh = mesh;
        this.skin = skin;
        this.slotIndex = slotIndex;
        this.parent = parent;
        this.inheritDeform = inheritDeform;
    }
    return LinkedMesh;
}());
var Vertices = /** @class */ (function () {
    function Vertices(bones, vertices) {
        if (bones === void 0) { bones = null; }
        if (vertices === void 0) { vertices = null; }
        this.bones = bones;
        this.vertices = vertices;
    }
    return Vertices;
}());

/** Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are
 * provided along with convenience methods for doing hit detection.
 * @public
 * */
var SkeletonBounds = /** @class */ (function (_super) {
    runtime_3_8_es_extends(SkeletonBounds, _super);
    function SkeletonBounds() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SkeletonBounds;
}(SkeletonBoundsBase));

/**
 * @public
 */
var SkeletonJson = /** @class */ (function () {
    function SkeletonJson(attachmentLoader) {
        this.scale = 1;
        this.linkedMeshes = new Array();
        this.attachmentLoader = attachmentLoader;
    }
    SkeletonJson.prototype.readSkeletonData = function (json) {
        var scale = this.scale;
        var skeletonData = new SkeletonData();
        var root = typeof (json) === "string" ? JSON.parse(json) : json;
        // Skeleton
        var skeletonMap = root.skeleton;
        if (skeletonMap != null) {
            skeletonData.hash = skeletonMap.hash;
            skeletonData.version = skeletonMap.spine;
            if (skeletonData.version.substr(0, 3) !== '3.8') {
                var error = "Spine 3.8 loader cant load version " + skeletonMap.spine + ". Please configure your pixi-spine bundle";
                console.error(error);
            }
            if (skeletonData.version === '3.8.75') {
                var error = "Unsupported skeleton data, 3.8.75 is deprecated, please export with a newer version of Spine.";
                console.error(error);
            }
            skeletonData.x = skeletonMap.x;
            skeletonData.y = skeletonMap.y;
            skeletonData.width = skeletonMap.width;
            skeletonData.height = skeletonMap.height;
            skeletonData.fps = skeletonMap.fps;
            skeletonData.imagesPath = skeletonMap.images;
        }
        // Bones
        if (root.bones) {
            for (var i = 0; i < root.bones.length; i++) {
                var boneMap = root.bones[i];
                var parent_1 = null;
                var parentName = this.getValue(boneMap, "parent", null);
                if (parentName != null) {
                    parent_1 = skeletonData.findBone(parentName);
                    if (parent_1 == null)
                        throw new Error("Parent bone not found: " + parentName);
                }
                var data = new BoneData(skeletonData.bones.length, boneMap.name, parent_1);
                data.length = this.getValue(boneMap, "length", 0) * scale;
                data.x = this.getValue(boneMap, "x", 0) * scale;
                data.y = this.getValue(boneMap, "y", 0) * scale;
                data.rotation = this.getValue(boneMap, "rotation", 0);
                data.scaleX = this.getValue(boneMap, "scaleX", 1);
                data.scaleY = this.getValue(boneMap, "scaleY", 1);
                data.shearX = this.getValue(boneMap, "shearX", 0);
                data.shearY = this.getValue(boneMap, "shearY", 0);
                data.transformMode = SkeletonJson.transformModeFromString(this.getValue(boneMap, "transform", "normal"));
                data.skinRequired = this.getValue(boneMap, "skin", false);
                skeletonData.bones.push(data);
            }
        }
        // Slots.
        if (root.slots) {
            for (var i = 0; i < root.slots.length; i++) {
                var slotMap = root.slots[i];
                var slotName = slotMap.name;
                var boneName = slotMap.bone;
                var boneData = skeletonData.findBone(boneName);
                if (boneData == null)
                    throw new Error("Slot bone not found: " + boneName);
                var data = new SlotData(skeletonData.slots.length, slotName, boneData);
                var color = this.getValue(slotMap, "color", null);
                if (color != null)
                    data.color.setFromString(color);
                var dark = this.getValue(slotMap, "dark", null);
                if (dark != null) {
                    data.darkColor = new Color(1, 1, 1, 1);
                    data.darkColor.setFromString(dark);
                }
                data.attachmentName = this.getValue(slotMap, "attachment", null);
                data.blendMode = SkeletonJson.blendModeFromString(this.getValue(slotMap, "blend", "normal"));
                skeletonData.slots.push(data);
            }
        }
        // IK constraints
        if (root.ik) {
            for (var i = 0; i < root.ik.length; i++) {
                var constraintMap = root.ik[i];
                var data = new IkConstraintData(constraintMap.name);
                data.order = this.getValue(constraintMap, "order", 0);
                data.skinRequired = this.getValue(constraintMap, "skin", false);
                for (var j = 0; j < constraintMap.bones.length; j++) {
                    var boneName = constraintMap.bones[j];
                    var bone = skeletonData.findBone(boneName);
                    if (bone == null)
                        throw new Error("IK bone not found: " + boneName);
                    data.bones.push(bone);
                }
                var targetName = constraintMap.target;
                data.target = skeletonData.findBone(targetName);
                if (data.target == null)
                    throw new Error("IK target bone not found: " + targetName);
                data.mix = this.getValue(constraintMap, "mix", 1);
                data.softness = this.getValue(constraintMap, "softness", 0) * scale;
                data.bendDirection = this.getValue(constraintMap, "bendPositive", true) ? 1 : -1;
                data.compress = this.getValue(constraintMap, "compress", false);
                data.stretch = this.getValue(constraintMap, "stretch", false);
                data.uniform = this.getValue(constraintMap, "uniform", false);
                skeletonData.ikConstraints.push(data);
            }
        }
        // Transform constraints.
        if (root.transform) {
            for (var i = 0; i < root.transform.length; i++) {
                var constraintMap = root.transform[i];
                var data = new TransformConstraintData(constraintMap.name);
                data.order = this.getValue(constraintMap, "order", 0);
                data.skinRequired = this.getValue(constraintMap, "skin", false);
                for (var j = 0; j < constraintMap.bones.length; j++) {
                    var boneName = constraintMap.bones[j];
                    var bone = skeletonData.findBone(boneName);
                    if (bone == null)
                        throw new Error("Transform constraint bone not found: " + boneName);
                    data.bones.push(bone);
                }
                var targetName = constraintMap.target;
                data.target = skeletonData.findBone(targetName);
                if (data.target == null)
                    throw new Error("Transform constraint target bone not found: " + targetName);
                data.local = this.getValue(constraintMap, "local", false);
                data.relative = this.getValue(constraintMap, "relative", false);
                data.offsetRotation = this.getValue(constraintMap, "rotation", 0);
                data.offsetX = this.getValue(constraintMap, "x", 0) * scale;
                data.offsetY = this.getValue(constraintMap, "y", 0) * scale;
                data.offsetScaleX = this.getValue(constraintMap, "scaleX", 0);
                data.offsetScaleY = this.getValue(constraintMap, "scaleY", 0);
                data.offsetShearY = this.getValue(constraintMap, "shearY", 0);
                data.rotateMix = this.getValue(constraintMap, "rotateMix", 1);
                data.translateMix = this.getValue(constraintMap, "translateMix", 1);
                data.scaleMix = this.getValue(constraintMap, "scaleMix", 1);
                data.shearMix = this.getValue(constraintMap, "shearMix", 1);
                skeletonData.transformConstraints.push(data);
            }
        }
        // Path constraints.
        if (root.path) {
            for (var i = 0; i < root.path.length; i++) {
                var constraintMap = root.path[i];
                var data = new PathConstraintData(constraintMap.name);
                data.order = this.getValue(constraintMap, "order", 0);
                data.skinRequired = this.getValue(constraintMap, "skin", false);
                for (var j = 0; j < constraintMap.bones.length; j++) {
                    var boneName = constraintMap.bones[j];
                    var bone = skeletonData.findBone(boneName);
                    if (bone == null)
                        throw new Error("Transform constraint bone not found: " + boneName);
                    data.bones.push(bone);
                }
                var targetName = constraintMap.target;
                data.target = skeletonData.findSlot(targetName);
                if (data.target == null)
                    throw new Error("Path target slot not found: " + targetName);
                data.positionMode = SkeletonJson.positionModeFromString(this.getValue(constraintMap, "positionMode", "percent"));
                data.spacingMode = SkeletonJson.spacingModeFromString(this.getValue(constraintMap, "spacingMode", "length"));
                data.rotateMode = SkeletonJson.rotateModeFromString(this.getValue(constraintMap, "rotateMode", "tangent"));
                data.offsetRotation = this.getValue(constraintMap, "rotation", 0);
                data.position = this.getValue(constraintMap, "position", 0);
                if (data.positionMode == PositionMode.Fixed)
                    data.position *= scale;
                data.spacing = this.getValue(constraintMap, "spacing", 0);
                if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)
                    data.spacing *= scale;
                data.rotateMix = this.getValue(constraintMap, "rotateMix", 1);
                data.translateMix = this.getValue(constraintMap, "translateMix", 1);
                skeletonData.pathConstraints.push(data);
            }
        }
        // Skins.
        if (root.skins) {
            for (var i = 0; i < root.skins.length; i++) {
                var skinMap = root.skins[i];
                var skin = new Skin(skinMap.name);
                if (skinMap.bones) {
                    for (var ii = 0; ii < skinMap.bones.length; ii++) {
                        var bone = skeletonData.findBone(skinMap.bones[ii]);
                        if (bone == null)
                            throw new Error("Skin bone not found: " + skinMap.bones[i]);
                        skin.bones.push(bone);
                    }
                }
                if (skinMap.ik) {
                    for (var ii = 0; ii < skinMap.ik.length; ii++) {
                        var constraint = skeletonData.findIkConstraint(skinMap.ik[ii]);
                        if (constraint == null)
                            throw new Error("Skin IK constraint not found: " + skinMap.ik[i]);
                        skin.constraints.push(constraint);
                    }
                }
                if (skinMap.transform) {
                    for (var ii = 0; ii < skinMap.transform.length; ii++) {
                        var constraint = skeletonData.findTransformConstraint(skinMap.transform[ii]);
                        if (constraint == null)
                            throw new Error("Skin transform constraint not found: " + skinMap.transform[i]);
                        skin.constraints.push(constraint);
                    }
                }
                if (skinMap.path) {
                    for (var ii = 0; ii < skinMap.path.length; ii++) {
                        var constraint = skeletonData.findPathConstraint(skinMap.path[ii]);
                        if (constraint == null)
                            throw new Error("Skin path constraint not found: " + skinMap.path[i]);
                        skin.constraints.push(constraint);
                    }
                }
                for (var slotName in skinMap.attachments) {
                    var slot = skeletonData.findSlot(slotName);
                    if (slot == null)
                        throw new Error("Slot not found: " + slotName);
                    var slotMap = skinMap.attachments[slotName];
                    for (var entryName in slotMap) {
                        var attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);
                        if (attachment != null)
                            skin.setAttachment(slot.index, entryName, attachment);
                    }
                }
                skeletonData.skins.push(skin);
                if (skin.name == "default")
                    skeletonData.defaultSkin = skin;
            }
        }
        // Linked meshes.
        for (var i = 0, n = this.linkedMeshes.length; i < n; i++) {
            var linkedMesh = this.linkedMeshes[i];
            var skin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);
            if (skin == null)
                throw new Error("Skin not found: " + linkedMesh.skin);
            var parent_2 = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);
            if (parent_2 == null)
                throw new Error("Parent mesh not found: " + linkedMesh.parent);
            linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent_2 : linkedMesh.mesh;
            linkedMesh.mesh.setParentMesh(parent_2);
            // linkedMesh.mesh.updateUVs();
        }
        this.linkedMeshes.length = 0;
        // Events.
        if (root.events) {
            for (var eventName in root.events) {
                var eventMap = root.events[eventName];
                var data = new EventData(eventName);
                data.intValue = this.getValue(eventMap, "int", 0);
                data.floatValue = this.getValue(eventMap, "float", 0);
                data.stringValue = this.getValue(eventMap, "string", "");
                data.audioPath = this.getValue(eventMap, "audio", null);
                if (data.audioPath != null) {
                    data.volume = this.getValue(eventMap, "volume", 1);
                    data.balance = this.getValue(eventMap, "balance", 0);
                }
                skeletonData.events.push(data);
            }
        }
        // Animations.
        if (root.animations) {
            for (var animationName in root.animations) {
                var animationMap = root.animations[animationName];
                this.readAnimation(animationMap, animationName, skeletonData);
            }
        }
        return skeletonData;
    };
    SkeletonJson.prototype.readAttachment = function (map, skin, slotIndex, name, skeletonData) {
        var scale = this.scale;
        name = this.getValue(map, "name", name);
        var type = this.getValue(map, "type", "region");
        switch (type) {
            case "region": {
                var path = this.getValue(map, "path", name);
                var region = this.attachmentLoader.newRegionAttachment(skin, name, path);
                if (region == null)
                    return null;
                region.path = path;
                region.x = this.getValue(map, "x", 0) * scale;
                region.y = this.getValue(map, "y", 0) * scale;
                region.scaleX = this.getValue(map, "scaleX", 1);
                region.scaleY = this.getValue(map, "scaleY", 1);
                region.rotation = this.getValue(map, "rotation", 0);
                region.width = map.width * scale;
                region.height = map.height * scale;
                var color = this.getValue(map, "color", null);
                if (color != null)
                    region.color.setFromString(color);
                // region.updateOffset();
                return region;
            }
            case "boundingbox": {
                var box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);
                if (box == null)
                    return null;
                this.readVertices(map, box, map.vertexCount << 1);
                var color = this.getValue(map, "color", null);
                if (color != null)
                    box.color.setFromString(color);
                return box;
            }
            case "mesh":
            case "linkedmesh": {
                var path = this.getValue(map, "path", name);
                var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);
                if (mesh == null)
                    return null;
                mesh.path = path;
                var color = this.getValue(map, "color", null);
                if (color != null)
                    mesh.color.setFromString(color);
                mesh.width = this.getValue(map, "width", 0) * scale;
                mesh.height = this.getValue(map, "height", 0) * scale;
                var parent_3 = this.getValue(map, "parent", null);
                if (parent_3 != null) {
                    this.linkedMeshes.push(new LinkedMesh(mesh, this.getValue(map, "skin", null), slotIndex, parent_3, this.getValue(map, "deform", true)));
                    return mesh;
                }
                var uvs = map.uvs;
                this.readVertices(map, mesh, uvs.length);
                mesh.triangles = map.triangles;
                mesh.regionUVs = new Float32Array(uvs);
                // mesh.updateUVs();
                mesh.edges = this.getValue(map, "edges", null);
                mesh.hullLength = this.getValue(map, "hull", 0) * 2;
                return mesh;
            }
            case "path": {
                var path = this.attachmentLoader.newPathAttachment(skin, name);
                if (path == null)
                    return null;
                path.closed = this.getValue(map, "closed", false);
                path.constantSpeed = this.getValue(map, "constantSpeed", true);
                var vertexCount = map.vertexCount;
                this.readVertices(map, path, vertexCount << 1);
                var lengths = Utils.newArray(vertexCount / 3, 0);
                for (var i = 0; i < map.lengths.length; i++)
                    lengths[i] = map.lengths[i] * scale;
                path.lengths = lengths;
                var color = this.getValue(map, "color", null);
                if (color != null)
                    path.color.setFromString(color);
                return path;
            }
            case "point": {
                var point = this.attachmentLoader.newPointAttachment(skin, name);
                if (point == null)
                    return null;
                point.x = this.getValue(map, "x", 0) * scale;
                point.y = this.getValue(map, "y", 0) * scale;
                point.rotation = this.getValue(map, "rotation", 0);
                var color = this.getValue(map, "color", null);
                if (color != null)
                    point.color.setFromString(color);
                return point;
            }
            case "clipping": {
                var clip = this.attachmentLoader.newClippingAttachment(skin, name);
                if (clip == null)
                    return null;
                var end = this.getValue(map, "end", null);
                if (end != null) {
                    var slot = skeletonData.findSlot(end);
                    if (slot == null)
                        throw new Error("Clipping end slot not found: " + end);
                    clip.endSlot = slot;
                }
                var vertexCount = map.vertexCount;
                this.readVertices(map, clip, vertexCount << 1);
                var color = this.getValue(map, "color", null);
                if (color != null)
                    clip.color.setFromString(color);
                return clip;
            }
        }
        return null;
    };
    SkeletonJson.prototype.readVertices = function (map, attachment, verticesLength) {
        var scale = this.scale;
        attachment.worldVerticesLength = verticesLength;
        var vertices = map.vertices;
        if (verticesLength == vertices.length) {
            var scaledVertices = Utils.toFloatArray(vertices);
            if (scale != 1) {
                for (var i = 0, n = vertices.length; i < n; i++)
                    scaledVertices[i] *= scale;
            }
            attachment.vertices = scaledVertices;
            return;
        }
        var weights = new Array();
        var bones = new Array();
        for (var i = 0, n = vertices.length; i < n;) {
            var boneCount = vertices[i++];
            bones.push(boneCount);
            for (var nn = i + boneCount * 4; i < nn; i += 4) {
                bones.push(vertices[i]);
                weights.push(vertices[i + 1] * scale);
                weights.push(vertices[i + 2] * scale);
                weights.push(vertices[i + 3]);
            }
        }
        attachment.bones = bones;
        attachment.vertices = Utils.toFloatArray(weights);
    };
    SkeletonJson.prototype.readAnimation = function (map, name, skeletonData) {
        var scale = this.scale;
        var timelines = new Array();
        var duration = 0;
        // Slot timelines.
        if (map.slots) {
            for (var slotName in map.slots) {
                var slotMap = map.slots[slotName];
                var slotIndex = skeletonData.findSlotIndex(slotName);
                if (slotIndex == -1)
                    throw new Error("Slot not found: " + slotName);
                for (var timelineName in slotMap) {
                    var timelineMap = slotMap[timelineName];
                    if (timelineName == "attachment") {
                        var timeline = new AttachmentTimeline(timelineMap.length);
                        timeline.slotIndex = slotIndex;
                        var frameIndex = 0;
                        for (var i = 0; i < timelineMap.length; i++) {
                            var valueMap = timelineMap[i];
                            timeline.setFrame(frameIndex++, this.getValue(valueMap, "time", 0), valueMap.name);
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);
                    }
                    else if (timelineName == "color") {
                        var timeline = new ColorTimeline(timelineMap.length);
                        timeline.slotIndex = slotIndex;
                        var frameIndex = 0;
                        for (var i = 0; i < timelineMap.length; i++) {
                            var valueMap = timelineMap[i];
                            var color = new Color();
                            color.setFromString(valueMap.color || "ffffffff");
                            timeline.setFrame(frameIndex, this.getValue(valueMap, "time", 0), color.r, color.g, color.b, color.a);
                            this.readCurve(valueMap, timeline, frameIndex);
                            frameIndex++;
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * ColorTimeline.ENTRIES]);
                    }
                    else if (timelineName == "twoColor") {
                        var timeline = new TwoColorTimeline(timelineMap.length);
                        timeline.slotIndex = slotIndex;
                        var frameIndex = 0;
                        for (var i = 0; i < timelineMap.length; i++) {
                            var valueMap = timelineMap[i];
                            var light = new Color();
                            var dark = new Color();
                            light.setFromString(valueMap.light);
                            dark.setFromString(valueMap.dark);
                            timeline.setFrame(frameIndex, this.getValue(valueMap, "time", 0), light.r, light.g, light.b, light.a, dark.r, dark.g, dark.b);
                            this.readCurve(valueMap, timeline, frameIndex);
                            frameIndex++;
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * TwoColorTimeline.ENTRIES]);
                    }
                    else
                        throw new Error("Invalid timeline type for a slot: " + timelineName + " (" + slotName + ")");
                }
            }
        }
        // Bone timelines.
        if (map.bones) {
            for (var boneName in map.bones) {
                var boneMap = map.bones[boneName];
                var boneIndex = skeletonData.findBoneIndex(boneName);
                if (boneIndex == -1)
                    throw new Error("Bone not found: " + boneName);
                for (var timelineName in boneMap) {
                    var timelineMap = boneMap[timelineName];
                    if (timelineName === "rotate") {
                        var timeline = new RotateTimeline(timelineMap.length);
                        timeline.boneIndex = boneIndex;
                        var frameIndex = 0;
                        for (var i = 0; i < timelineMap.length; i++) {
                            var valueMap = timelineMap[i];
                            timeline.setFrame(frameIndex, this.getValue(valueMap, "time", 0), this.getValue(valueMap, "angle", 0));
                            this.readCurve(valueMap, timeline, frameIndex);
                            frameIndex++;
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * RotateTimeline.ENTRIES]);
                    }
                    else if (timelineName === "translate" || timelineName === "scale" || timelineName === "shear") {
                        var timeline = null;
                        var timelineScale = 1, defaultValue = 0;
                        if (timelineName === "scale") {
                            timeline = new ScaleTimeline(timelineMap.length);
                            defaultValue = 1;
                        }
                        else if (timelineName === "shear")
                            timeline = new ShearTimeline(timelineMap.length);
                        else {
                            timeline = new TranslateTimeline(timelineMap.length);
                            timelineScale = scale;
                        }
                        timeline.boneIndex = boneIndex;
                        var frameIndex = 0;
                        for (var i = 0; i < timelineMap.length; i++) {
                            var valueMap = timelineMap[i];
                            var x = this.getValue(valueMap, "x", defaultValue), y = this.getValue(valueMap, "y", defaultValue);
                            timeline.setFrame(frameIndex, this.getValue(valueMap, "time", 0), x * timelineScale, y * timelineScale);
                            this.readCurve(valueMap, timeline, frameIndex);
                            frameIndex++;
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * TranslateTimeline.ENTRIES]);
                    }
                    else
                        throw new Error("Invalid timeline type for a bone: " + timelineName + " (" + boneName + ")");
                }
            }
        }
        // IK constraint timelines.
        if (map.ik) {
            for (var constraintName in map.ik) {
                var constraintMap = map.ik[constraintName];
                var constraint = skeletonData.findIkConstraint(constraintName);
                var timeline = new IkConstraintTimeline(constraintMap.length);
                timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(constraint);
                var frameIndex = 0;
                for (var i = 0; i < constraintMap.length; i++) {
                    var valueMap = constraintMap[i];
                    timeline.setFrame(frameIndex, this.getValue(valueMap, "time", 0), this.getValue(valueMap, "mix", 1), this.getValue(valueMap, "softness", 0) * scale, this.getValue(valueMap, "bendPositive", true) ? 1 : -1, this.getValue(valueMap, "compress", false), this.getValue(valueMap, "stretch", false));
                    this.readCurve(valueMap, timeline, frameIndex);
                    frameIndex++;
                }
                timelines.push(timeline);
                duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * IkConstraintTimeline.ENTRIES]);
            }
        }
        // Transform constraint timelines.
        if (map.transform) {
            for (var constraintName in map.transform) {
                var constraintMap = map.transform[constraintName];
                var constraint = skeletonData.findTransformConstraint(constraintName);
                var timeline = new TransformConstraintTimeline(constraintMap.length);
                timeline.transformConstraintIndex = skeletonData.transformConstraints.indexOf(constraint);
                var frameIndex = 0;
                for (var i = 0; i < constraintMap.length; i++) {
                    var valueMap = constraintMap[i];
                    timeline.setFrame(frameIndex, this.getValue(valueMap, "time", 0), this.getValue(valueMap, "rotateMix", 1), this.getValue(valueMap, "translateMix", 1), this.getValue(valueMap, "scaleMix", 1), this.getValue(valueMap, "shearMix", 1));
                    this.readCurve(valueMap, timeline, frameIndex);
                    frameIndex++;
                }
                timelines.push(timeline);
                duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * TransformConstraintTimeline.ENTRIES]);
            }
        }
        // Path constraint timelines.
        if (map.path) {
            for (var constraintName in map.path) {
                var constraintMap = map.path[constraintName];
                var index = skeletonData.findPathConstraintIndex(constraintName);
                if (index == -1)
                    throw new Error("Path constraint not found: " + constraintName);
                var data = skeletonData.pathConstraints[index];
                for (var timelineName in constraintMap) {
                    var timelineMap = constraintMap[timelineName];
                    if (timelineName === "position" || timelineName === "spacing") {
                        var timeline = null;
                        var timelineScale = 1;
                        if (timelineName === "spacing") {
                            timeline = new PathConstraintSpacingTimeline(timelineMap.length);
                            if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)
                                timelineScale = scale;
                        }
                        else {
                            timeline = new PathConstraintPositionTimeline(timelineMap.length);
                            if (data.positionMode == PositionMode.Fixed)
                                timelineScale = scale;
                        }
                        timeline.pathConstraintIndex = index;
                        var frameIndex = 0;
                        for (var i = 0; i < timelineMap.length; i++) {
                            var valueMap = timelineMap[i];
                            timeline.setFrame(frameIndex, this.getValue(valueMap, "time", 0), this.getValue(valueMap, timelineName, 0) * timelineScale);
                            this.readCurve(valueMap, timeline, frameIndex);
                            frameIndex++;
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * PathConstraintPositionTimeline.ENTRIES]);
                    }
                    else if (timelineName === "mix") {
                        var timeline = new PathConstraintMixTimeline(timelineMap.length);
                        timeline.pathConstraintIndex = index;
                        var frameIndex = 0;
                        for (var i = 0; i < timelineMap.length; i++) {
                            var valueMap = timelineMap[i];
                            timeline.setFrame(frameIndex, this.getValue(valueMap, "time", 0), this.getValue(valueMap, "rotateMix", 1), this.getValue(valueMap, "translateMix", 1));
                            this.readCurve(valueMap, timeline, frameIndex);
                            frameIndex++;
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * PathConstraintMixTimeline.ENTRIES]);
                    }
                }
            }
        }
        // Deform timelines.
        if (map.deform) {
            for (var deformName in map.deform) {
                var deformMap = map.deform[deformName];
                var skin = skeletonData.findSkin(deformName);
                if (skin == null) {
                    if (base_es_settings.FAIL_ON_NON_EXISTING_SKIN) {
                        throw new Error("Skin not found: " + deformName);
                    }
                    else {
                        continue;
                    }
                }
                for (var slotName in deformMap) {
                    var slotMap = deformMap[slotName];
                    var slotIndex = skeletonData.findSlotIndex(slotName);
                    if (slotIndex == -1)
                        throw new Error("Slot not found: " + slotMap.name);
                    for (var timelineName in slotMap) {
                        var timelineMap = slotMap[timelineName];
                        var attachment = skin.getAttachment(slotIndex, timelineName);
                        if (attachment == null)
                            throw new Error("Deform attachment not found: " + timelineMap.name);
                        var weighted = attachment.bones != null;
                        var vertices = attachment.vertices;
                        var deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;
                        var timeline = new DeformTimeline(timelineMap.length);
                        timeline.slotIndex = slotIndex;
                        timeline.attachment = attachment;
                        var frameIndex = 0;
                        for (var j = 0; j < timelineMap.length; j++) {
                            var valueMap = timelineMap[j];
                            var deform = void 0;
                            var verticesValue = this.getValue(valueMap, "vertices", null);
                            if (verticesValue == null)
                                deform = weighted ? Utils.newFloatArray(deformLength) : vertices;
                            else {
                                deform = Utils.newFloatArray(deformLength);
                                var start = this.getValue(valueMap, "offset", 0);
                                Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);
                                if (scale != 1) {
                                    for (var i = start, n = i + verticesValue.length; i < n; i++)
                                        deform[i] *= scale;
                                }
                                if (!weighted) {
                                    for (var i = 0; i < deformLength; i++)
                                        deform[i] += vertices[i];
                                }
                            }
                            timeline.setFrame(frameIndex, this.getValue(valueMap, "time", 0), deform);
                            this.readCurve(valueMap, timeline, frameIndex);
                            frameIndex++;
                        }
                        timelines.push(timeline);
                        duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);
                    }
                }
            }
        }
        // Draw order timeline.
        var drawOrderNode = map.drawOrder;
        if (drawOrderNode == null)
            drawOrderNode = map.draworder;
        if (drawOrderNode != null) {
            var timeline = new DrawOrderTimeline(drawOrderNode.length);
            var slotCount = skeletonData.slots.length;
            var frameIndex = 0;
            for (var j = 0; j < drawOrderNode.length; j++) {
                var drawOrderMap = drawOrderNode[j];
                var drawOrder = null;
                var offsets = this.getValue(drawOrderMap, "offsets", null);
                if (offsets != null) {
                    drawOrder = Utils.newArray(slotCount, -1);
                    var unchanged = Utils.newArray(slotCount - offsets.length, 0);
                    var originalIndex = 0, unchangedIndex = 0;
                    for (var i = 0; i < offsets.length; i++) {
                        var offsetMap = offsets[i];
                        var slotIndex = skeletonData.findSlotIndex(offsetMap.slot);
                        if (slotIndex == -1)
                            throw new Error("Slot not found: " + offsetMap.slot);
                        // Collect unchanged items.
                        while (originalIndex != slotIndex)
                            unchanged[unchangedIndex++] = originalIndex++;
                        // Set changed items.
                        drawOrder[originalIndex + offsetMap.offset] = originalIndex++;
                    }
                    // Collect remaining unchanged items.
                    while (originalIndex < slotCount)
                        unchanged[unchangedIndex++] = originalIndex++;
                    // Fill in unchanged items.
                    for (var i = slotCount - 1; i >= 0; i--)
                        if (drawOrder[i] == -1)
                            drawOrder[i] = unchanged[--unchangedIndex];
                }
                timeline.setFrame(frameIndex++, this.getValue(drawOrderMap, "time", 0), drawOrder);
            }
            timelines.push(timeline);
            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);
        }
        // Event timeline.
        if (map.events) {
            var timeline = new EventTimeline(map.events.length);
            var frameIndex = 0;
            for (var i = 0; i < map.events.length; i++) {
                var eventMap = map.events[i];
                var eventData = skeletonData.findEvent(eventMap.name);
                if (eventData == null)
                    throw new Error("Event not found: " + eventMap.name);
                var event_1 = new Event(Utils.toSinglePrecision(this.getValue(eventMap, "time", 0)), eventData);
                event_1.intValue = this.getValue(eventMap, "int", eventData.intValue);
                event_1.floatValue = this.getValue(eventMap, "float", eventData.floatValue);
                event_1.stringValue = this.getValue(eventMap, "string", eventData.stringValue);
                if (event_1.data.audioPath != null) {
                    event_1.volume = this.getValue(eventMap, "volume", 1);
                    event_1.balance = this.getValue(eventMap, "balance", 0);
                }
                timeline.setFrame(frameIndex++, event_1);
            }
            timelines.push(timeline);
            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);
        }
        if (isNaN(duration)) {
            throw new Error("Error while parsing animation, duration is NaN");
        }
        skeletonData.animations.push(new Animation(name, timelines, duration));
    };
    SkeletonJson.prototype.readCurve = function (map, timeline, frameIndex) {
        if (!map.hasOwnProperty("curve"))
            return;
        if (map.curve === "stepped")
            timeline.setStepped(frameIndex);
        else {
            var curve = map.curve;
            timeline.setCurve(frameIndex, curve, this.getValue(map, "c2", 0), this.getValue(map, "c3", 1), this.getValue(map, "c4", 1));
        }
    };
    SkeletonJson.prototype.getValue = function (map, prop, defaultValue) {
        return map[prop] !== undefined ? map[prop] : defaultValue;
    };
    SkeletonJson.blendModeFromString = function (str) {
        str = str.toLowerCase();
        if (str == "normal")
            return BLEND_MODES.NORMAL;
        if (str == "additive")
            return BLEND_MODES.ADD;
        if (str == "multiply")
            return BLEND_MODES.MULTIPLY;
        if (str == "screen")
            return BLEND_MODES.SCREEN;
        throw new Error("Unknown blend mode: " + str);
    };
    SkeletonJson.positionModeFromString = function (str) {
        str = str.toLowerCase();
        if (str == "fixed")
            return PositionMode.Fixed;
        if (str == "percent")
            return PositionMode.Percent;
        throw new Error("Unknown position mode: " + str);
    };
    SkeletonJson.spacingModeFromString = function (str) {
        str = str.toLowerCase();
        if (str == "length")
            return SpacingMode.Length;
        if (str == "fixed")
            return SpacingMode.Fixed;
        if (str == "percent")
            return SpacingMode.Percent;
        throw new Error("Unknown position mode: " + str);
    };
    SkeletonJson.rotateModeFromString = function (str) {
        str = str.toLowerCase();
        if (str == "tangent")
            return RotateMode.Tangent;
        if (str == "chain")
            return RotateMode.Chain;
        if (str == "chainscale")
            return RotateMode.ChainScale;
        throw new Error("Unknown rotate mode: " + str);
    };
    SkeletonJson.transformModeFromString = function (str) {
        str = str.toLowerCase();
        if (str == "normal")
            return TransformMode.Normal;
        if (str == "onlytranslation")
            return TransformMode.OnlyTranslation;
        if (str == "norotationorreflection")
            return TransformMode.NoRotationOrReflection;
        if (str == "noscale")
            return TransformMode.NoScale;
        if (str == "noscaleorreflection")
            return TransformMode.NoScaleOrReflection;
        throw new Error("Unknown transform mode: " + str);
    };
    return SkeletonJson;
}());
var LinkedMesh = /** @class */ (function () {
    function LinkedMesh(mesh, skin, slotIndex, parent, inheritDeform) {
        this.mesh = mesh;
        this.skin = skin;
        this.slotIndex = slotIndex;
        this.parent = parent;
        this.inheritDeform = inheritDeform;
    }
    return LinkedMesh;
}());

/**
 * @public
 */
var Spine = /** @class */ (function (_super) {
    runtime_3_8_es_extends(Spine, _super);
    function Spine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Spine.prototype.createSkeleton = function (spineData) {
        this.skeleton = new Skeleton(spineData);
        this.skeleton.updateWorldTransform();
        this.stateData = new AnimationStateData(spineData);
        this.state = new AnimationState(this.stateData);
    };
    return Spine;
}(SpineBase));


//# sourceMappingURL=runtime-3.8.es.js.map

;// CONCATENATED MODULE: ./assets/spine/all/Idle all.webp
var Idle_all_namespaceObject = __webpack_require__.p + "assets/spine/all/Idle all.webp";
;// CONCATENATED MODULE: ./assets/spine/all/Idle all2.webp
var Idle_all2_namespaceObject = __webpack_require__.p + "assets/spine/all/Idle all2.webp";
;// CONCATENATED MODULE: ./assets/spine/all/Idle all3.webp
var Idle_all3_namespaceObject = __webpack_require__.p + "assets/spine/all/Idle all3.webp";
;// CONCATENATED MODULE: ./assets/spine/all/Idle all.atlas
var Idle_all_atlas_namespaceObject = "\r\nIdle all.webp\r\nsize: 4096,4096\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\nCaveScene/eyes 10-03\r\n  rotate: false\r\n  xy: 2, 3248\r\n  size: 3112, 350\r\n  orig: 3112, 350\r\n  offset: 0, 0\r\n  index: -1\r\nHelen TF dressed 1\r\n  rotate: true\r\n  xy: 2, 2507\r\n  size: 739, 1737\r\n  orig: 739, 1737\r\n  offset: 0, 0\r\n  index: -1\r\nJungleScene/Helen\r\n  rotate: true\r\n  xy: 2, 28\r\n  size: 861, 1598\r\n  orig: 861, 1598\r\n  offset: 0, 0\r\n  index: -1\r\nJungleScene/drake compas\r\n  rotate: true\r\n  xy: 2, 891\r\n  size: 806, 1658\r\n  orig: 806, 1658\r\n  offset: 0, 0\r\n  index: -1\r\nblock 3/d-bl3-2\r\n  rotate: true\r\n  xy: 1741, 2440\r\n  size: 806, 1658\r\n  orig: 806, 1658\r\n  offset: 0, 0\r\n  index: -1\r\nblock 3/d-bl3-fear\r\n  rotate: true\r\n  xy: 2, 1699\r\n  size: 806, 1658\r\n  orig: 806, 1658\r\n  offset: 0, 0\r\n  index: -1\r\nblock 3/drake surprise right\r\n  rotate: true\r\n  xy: 1662, 1632\r\n  size: 806, 1658\r\n  orig: 806, 1658\r\n  offset: 0, 0\r\n  index: -1\r\nblock 3/s-b3-fear lighter\r\n  rotate: true\r\n  xy: 1662, 817\r\n  size: 813, 1683\r\n  orig: 813, 1683\r\n  offset: 0, 0\r\n  index: -1\r\nblock 3/s-b3-lighter\r\n  rotate: true\r\n  xy: 1602, 2\r\n  size: 813, 1683\r\n  orig: 813, 1683\r\n  offset: 0, 0\r\n  index: -1\r\n\r\nIdle all2.webp\r\nsize: 4096,4096\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\nBeachScene/Drake no BG\r\n  rotate: false\r\n  xy: 2472, 1948\r\n  size: 1016, 2144\r\n  orig: 1016, 2144\r\n  offset: 0, 0\r\n  index: -1\r\nBeachScene/Helena no bg\r\n  rotate: false\r\n  xy: 2472, 2\r\n  size: 1016, 1944\r\n  orig: 1016, 1944\r\n  offset: 0, 0\r\n  index: -1\r\nBeachScene/Sulli no BG\r\n  rotate: true\r\n  xy: 2, 914\r\n  size: 1016, 1944\r\n  orig: 1016, 1944\r\n  offset: 0, 0\r\n  index: -1\r\nCaveScene/d-bl3-fear TF\r\n  rotate: false\r\n  xy: 2, 1932\r\n  size: 2468, 2160\r\n  orig: 2468, 2160\r\n  offset: 0, 0\r\n  index: -1\r\nCaveScene/d-bl3-statue stand\r\n  rotate: true\r\n  xy: 2, 76\r\n  size: 836, 1780\r\n  orig: 836, 1780\r\n  offset: 0, 0\r\n  index: -1\r\n\r\nIdle all3.webp\r\nsize: 4096,4096\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\nBeachScene/Sulli sit 2\r\n  rotate: false\r\n  xy: 2, 2235\r\n  size: 1016, 1764\r\n  orig: 1016, 1764\r\n  offset: 0, 0\r\n  index: -1\r\nCaveScene/H-b3-statue stand\r\n  rotate: false\r\n  xy: 2, 574\r\n  size: 857, 1659\r\n  orig: 857, 1659\r\n  offset: 0, 0\r\n  index: -1\r\nCaveScene/s-b3-after sex\r\n  rotate: false\r\n  xy: 2491, 931\r\n  size: 1091, 1383\r\n  orig: 1091, 1383\r\n  offset: 0, 0\r\n  index: -1\r\nJungleScene/Helen-sit-smile\r\n  rotate: true\r\n  xy: 2491, 2\r\n  size: 927, 1202\r\n  orig: 927, 1202\r\n  offset: 0, 0\r\n  index: -1\r\nJungleScene/sally big\r\n  rotate: false\r\n  xy: 2650, 2316\r\n  size: 813, 1683\r\n  orig: 813, 1683\r\n  offset: 0, 0\r\n  index: -1\r\nJungleScene/sally big2\r\n  rotate: false\r\n  xy: 861, 550\r\n  size: 813, 1683\r\n  orig: 813, 1683\r\n  offset: 0, 0\r\n  index: -1\r\nJungleScene/sally big3\r\n  rotate: false\r\n  xy: 1676, 631\r\n  size: 813, 1683\r\n  orig: 813, 1683\r\n  offset: 0, 0\r\n  index: -1\r\nblock 3/s-b3-to-torch\r\n  rotate: false\r\n  xy: 1020, 2316\r\n  size: 813, 1683\r\n  orig: 813, 1683\r\n  offset: 0, 0\r\n  index: -1\r\nblock 3/s-b3-with-torch\r\n  rotate: false\r\n  xy: 1835, 2316\r\n  size: 813, 1683\r\n  orig: 813, 1683\r\n  offset: 0, 0\r\n  index: -1\r\n\r\nIdle all4.webp\r\nsize: 2048,2048\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\nCaveScene/s-b3-after statue\r\n  rotate: false\r\n  xy: 2, 2\r\n  size: 1091, 1383\r\n  orig: 1091, 1383\r\n  offset: 0, 0\r\n  index: -1\r\n";
;// CONCATENATED MODULE: ./assets/spine/all/Idle all.json
var spine_all_Idle_all_namespaceObject = JSON.parse('{"skeleton":{"hash":"VSzcGQ0JP9PukUm2NHaN75O2A5M","spine":"3.8.75","x":-972.66,"y":-103.03,"width":2007.26,"height":1661.71,"images":"C:/Users/ConeSample/Downloads/sally/","audio":""},"bones":[{"name":"root","x":47.29,"y":-20.27,"color":"f23c3cff"},{"name":"sally big","parent":"root","x":32.87,"y":853.21,"color":"f23c3cff"},{"name":"sally big3","parent":"sally big","rotation":90,"x":0.71,"y":159.3,"color":"f23c3cff"},{"name":"sally big4","parent":"sally big","x":9.93,"y":403.79,"color":"f23c3cff"},{"name":"sally big2","parent":"sally big","length":50,"rotation":-91.47,"x":40.25,"y":452.58,"scaleX":0.9569,"scaleY":0.9569,"color":"f23c3cff"},{"name":"sally big6","parent":"sally big","length":50,"rotation":-87.66,"x":-27.1,"y":450.88,"color":"f23c3cff"},{"name":"CaveScene/eyes 10-03","parent":"root","length":98.9,"rotation":-90,"x":-823.17,"y":1356.67,"color":"f23c3cff"},{"name":"CaveScene/eyes 10-3","parent":"root","length":110.62,"rotation":-89.6,"x":64.02,"y":1339.38,"color":"f23c3cff"},{"name":"CaveScene/eyes 10-4","parent":"root","length":144.91,"rotation":-93.07,"x":822.13,"y":1365.24,"color":"f23c3cff"}],"slots":[{"name":"sally big","bone":"sally big6","attachment":"Helen TF dressed 1"},{"name":"CaveScene/eyes 10-03","bone":"CaveScene/eyes 10-4","attachment":"CaveScene/eyes 10-03"}],"skins":[{"name":"default","attachments":{"sally big":{"BeachScene/Drake no BG":{"type":"mesh","uvs":[0.53895,0.02347,0.53697,0.02575,0.57855,0.02634,0.58642,0.03388,0.60085,0.02982,0.5944,0.04033,0.61625,0.04793,0.62624,0.06827,0.62956,0.07299,0.70161,0.07763,0.73229,0.08426,0.84037,0.08944,0.88762,0.09817,0.92925,0.11001,0.93935,0.12362,0.93987,0.13501,0.92601,0.14382,0.89055,0.158,0.87456,0.16698,0.8391,0.17842,0.77859,0.20517,0.77616,0.20414,0.73037,0.22509,0.69596,0.24774,0.6602,0.29152,0.63889,0.31057,0.62557,0.33811,0.6288,0.36153,0.63954,0.39391,0.63587,0.41163,0.64768,0.4417,0.64572,0.45821,0.63733,0.47051,0.63657,0.47415,0.63891,0.50725,0.64488,0.53104,0.648,0.56219,0.65217,0.59641,0.65254,0.61542,0.6484,0.62953,0.65124,0.648,0.64423,0.67087,0.65058,0.70739,0.65702,0.75445,0.6626,0.80387,0.65459,0.80988,0.66041,0.81847,0.68188,0.82669,0.67453,0.83346,0.66973,0.83948,0.69349,0.83928,0.69553,0.8484,0.70161,0.85153,0.74961,0.86493,0.75664,0.86425,0.77668,0.85964,0.80992,0.85938,0.8261,0.86412,0.84126,0.88139,0.83667,0.89329,0.82816,0.89676,0.76895,0.90339,0.71575,0.90517,0.68347,0.90186,0.65473,0.89604,0.64764,0.89867,0.56374,0.89771,0.54955,0.86351,0.55178,0.85573,0.55894,0.8452,0.53726,0.82882,0.52954,0.81127,0.53317,0.78262,0.52342,0.75213,0.52179,0.69359,0.53393,0.65628,0.53797,0.65173,0.51156,0.62369,0.477,0.57938,0.46554,0.55646,0.45098,0.55478,0.42772,0.57633,0.39711,0.5998,0.39261,0.60785,0.36941,0.62687,0.36561,0.63461,0.36735,0.64585,0.35864,0.66226,0.35214,0.68321,0.31797,0.7334,0.30766,0.77491,0.28231,0.81537,0.2845,0.83873,0.27246,0.85929,0.26138,0.86254,0.26709,0.87311,0.27207,0.87979,0.29267,0.88418,0.29668,0.88124,0.2959,0.9069,0.35078,0.91671,0.36224,0.92138,0.36845,0.93587,0.36683,0.9515,0.37429,0.95374,0.37484,0.96994,0.37309,0.96943,0.29711,0.97847,0.26011,0.97762,0.20852,0.97453,0.1612,0.94582,0.16264,0.9339,0.17094,0.91426,0.16645,0.8981,0.1794,0.89409,0.17701,0.86652,0.17592,0.86373,0.16627,0.85947,0.15078,0.83667,0.14881,0.80299,0.15873,0.75734,0.18531,0.72555,0.18785,0.68287,0.20164,0.64055,0.22185,0.61926,0.23023,0.54365,0.23697,0.53159,0.25946,0.49097,0.28107,0.43833,0.27676,0.43572,0.19631,0.39849,0.15333,0.38491,0.13839,0.37466,0.13808,0.34784,0.15026,0.33666,0.15916,0.33654,0.15583,0.32627,0.17164,0.31039,0.18183,0.29395,0.18478,0.26949,0.20857,0.24624,0.21205,0.23195,0.23276,0.2139,0.36126,0.18168,0.41813,0.17464,0.42912,0.17089,0.42549,0.15238,0.42348,0.14569,0.40861,0.13468,0.39072,0.13102,0.37424,0.12241,0.36404,0.11385,0.36419,0.09868,0.38128,0.09368,0.38458,0.09041,0.3777,0.07235,0.38792,0.05435,0.39554,0.0396,0.40964,0.04002,0.43042,0.03,0.46756,0.0209,0.54111,0.0219,0.46694,0.10619,0.4906,0.10112,0.5078,0.10298,0.5126,0.107,0.47562,0.10892,0.49388,0.11049,0.47692,0.10405,0.46646,0.09754,0.48277,0.09734,0.51009,0.10165,0.52068,0.10115,0.54646,0.13001,0.4671,0.12381,0.44591,0.15703,0.49135,0.16904,0.51799,0.17194,0.53722,0.17152,0.56124,0.16055,0.58934,0.13516,0.63711,0.12903,0.6759,0.12452,0.70992,0.11871,0.77592,0.13064,0.68814,0.15031,0.65344,0.16353,0.61261,0.1616,0.5677,0.17546,0.31254,0.30276,0.33735,0.34391,0.33012,0.37429,0.31771,0.40173,0.26808,0.36498,0.27532,0.35126,0.29186,0.34342,0.50707,0.22883,0.38697,0.2758,0.62908,0.28032],"triangles":[164,171,165,168,170,163,168,163,167,164,163,171,167,163,164,170,171,163,29,30,192,32,128,192,129,130,192,134,135,133,131,135,193,28,29,191,191,29,192,192,193,191,14,16,12,17,12,16,20,21,19,18,184,17,19,184,18,21,184,19,183,9,10,183,10,184,185,184,21,22,186,21,23,186,22,182,9,183,181,8,182,186,187,181,186,188,187,188,179,187,198,196,23,188,196,178,193,194,191,191,190,27,25,197,198,25,26,197,191,195,190,190,197,26,195,194,137,135,136,137,189,137,138,139,140,189,140,141,142,142,143,197,196,177,178,196,143,144,178,177,179,196,176,177,196,144,176,177,173,179,145,175,176,175,146,147,175,174,176,150,151,153,147,148,174,173,176,174,155,169,154,174,162,166,174,166,167,180,173,172,153,169,162,169,153,154,173,167,165,167,173,174,156,157,158,169,158,170,8,180,172,159,160,170,8,172,7,170,160,1,5,7,172,3,1,2,5,1,3,5,3,4,0,160,161,1,160,0,172,1,5,7,5,6,158,159,170,1,172,170,169,156,158,156,169,155,172,171,170,168,169,170,162,169,168,165,171,172,166,162,168,167,164,165,166,168,167,165,172,173,153,151,152,148,149,162,162,150,153,149,150,162,174,148,162,174,175,147,8,181,180,179,173,180,145,146,175,173,177,176,144,145,176,196,197,143,197,140,142,189,140,197,138,139,189,195,137,189,194,135,137,190,189,197,195,189,190,198,197,196,193,135,194,194,195,191,23,196,188,178,179,188,179,180,187,187,180,181,182,8,9,181,182,185,185,186,181,188,186,23,185,182,183,186,185,21,185,183,184,184,10,11,12,184,11,184,12,17,14,12,13,16,14,15,190,26,27,25,198,24,24,198,23,28,191,27,130,193,192,128,129,192,30,32,192,135,132,133,131,132,135,130,131,193,31,32,30,33,80,32,79,80,33,34,79,33,80,128,32,127,128,80,126,127,80,35,79,34,79,35,36,81,126,80,125,126,81,78,79,36,78,36,37,82,125,81,82,124,125,83,124,82,77,78,37,77,37,38,84,124,83,39,77,38,85,124,84,76,77,39,76,39,40,86,87,124,86,124,85,123,124,87,41,76,40,88,122,123,87,88,123,89,122,88,121,122,89,74,42,73,75,76,41,41,74,75,42,74,41,73,42,43,90,121,89,120,121,90,72,73,43,119,120,90,72,43,44,45,72,44,71,72,45,91,119,90,70,71,45,69,70,45,48,46,47,118,119,91,118,91,92,49,46,48,46,69,45,69,46,49,117,118,116,118,92,94,93,94,92,94,116,118,115,116,94,57,58,55,95,114,115,95,115,94,114,95,96,49,68,69,49,67,68,64,67,49,49,50,51,64,49,51,64,51,52,59,60,58,65,66,67,64,65,67,63,64,52,63,52,53,61,54,55,53,54,61,62,63,53,55,56,57,60,61,55,58,60,55,61,62,53,99,97,98,112,113,114,101,102,100,106,103,104,106,104,105,112,114,99,96,99,114,97,99,96,99,111,112,108,109,111,110,111,109,99,108,111,102,108,99,100,102,99,102,107,108,103,107,102,106,107,103],"vertices":[2,1,-15.49,668.88,0.84619,3,-25.42,265.09,0.15381,2,1,-16.98,665.26,0.84393,3,-26.91,261.46,0.15607,2,1,14.43,664.31,0.88889,3,4.5,260.52,0.11111,2,1,20.37,652.29,0.8986,3,10.44,248.49,0.1014,2,1,31.27,658.76,0.91323,3,21.34,254.97,0.08677,2,1,26.4,642.01,0.90993,3,16.47,238.21,0.09007,2,1,42.9,629.9,0.93748,3,32.97,226.1,0.06252,2,1,50.45,597.46,0.92109,3,40.52,193.67,0.07891,2,1,52.96,589.95,0.91508,3,43.03,186.15,0.08492,2,1,107.38,582.56,0.96554,3,97.45,178.76,0.03446,2,1,130.55,571.99,0.98705,3,120.63,168.2,0.01295,1,1,212.2,563.73,1,1,1,247.89,549.81,1,1,1,279.33,530.94,1,1,1,286.97,509.23,1,1,1,287.35,491.08,1,1,1,276.89,477.05,1,1,1,250.1,454.44,1,1,1,238.02,440.12,1,1,1,211.23,421.89,1,3,0,198.4,1232.47,0.07361,1,165.53,379.26,0.92453,2,219.96,-164.82,0.00186,3,0,196.56,1234.1,0.05592,1,163.69,380.89,0.9426,2,221.59,-162.98,0.00148,3,0,161.98,1200.71,0.28555,1,129.11,347.5,0.69398,2,188.2,-128.4,0.02047,3,0,135.98,1164.6,0.4032,1,103.11,311.39,0.54884,2,152.09,-102.4,0.04796,1,1,76.1,241.6,1,1,1,60.01,211.25,1,1,1,49.95,167.34,1,3,0,85.26,983.22,0.16967,1,52.39,130.01,0.81557,2,-29.29,-51.67,0.01475,3,0,93.37,931.61,0.24988,1,60.5,78.39,0.74077,2,-80.9,-59.79,0.00935,3,0,90.6,903.37,0.26181,1,57.73,50.16,0.73462,2,-109.14,-57.01,0.00357,2,0,99.52,855.43,0.55881,1,66.65,2.21,0.44119,2,0,98.03,829.11,0.75307,1,65.16,-24.1,0.24693,2,0,91.7,809.52,0.87459,1,58.83,-43.7,0.12541,2,0,91.12,803.71,0.88689,1,58.25,-49.5,0.11311,1,0,92.89,750.95,1,1,0,97.4,713.03,1,1,0,99.75,663.38,1,1,0,102.9,608.82,1,1,0,103.19,578.52,1,1,0,100.06,556.04,1,1,0,102.2,526.6,1,1,0,96.91,490.13,1,1,0,101.7,431.93,1,1,0,106.57,356.9,1,1,0,110.79,278.13,1,1,0,104.73,268.56,1,1,0,109.13,254.86,1,1,0,125.35,241.77,1,1,0,119.79,230.96,1,1,0,116.17,221.37,1,1,0,134.12,221.7,1,1,0,135.66,207.15,1,1,0,140.25,202.17,1,1,0,176.51,180.8,1,1,0,181.82,181.89,1,1,0,196.96,189.24,1,1,0,222.06,189.65,1,1,0,234.29,182.1,1,1,0,245.74,154.57,1,1,0,242.27,135.59,1,1,0,235.85,130.07,1,1,0,191.11,119.51,1,1,0,150.93,116.66,1,1,0,126.55,121.93,1,1,0,104.84,131.21,1,1,0,99.48,127.03,1,1,0,36.11,128.56,1,1,0,25.39,183.07,1,1,0,27.08,195.47,1,1,0,32.49,212.26,1,1,0,16.11,238.36,1,1,0,10.28,266.34,1,1,0,13.02,312,1,1,0,5.65,360.61,1,1,0,4.42,453.92,1,1,0,13.59,513.4,1,1,0,16.65,520.64,1,1,0,-3.3,565.33,1,1,0,-29.41,635.97,1,1,0,-38.07,672.51,1,1,0,-49.07,675.18,1,1,0,-66.63,640.83,1,1,0,-89.76,603.42,1,1,0,-93.16,590.58,1,1,0,-110.68,560.27,1,1,0,-113.55,547.93,1,1,0,-112.24,530.02,1,1,0,-118.82,503.87,1,1,0,-123.72,470.46,1,1,0,-149.53,390.46,1,1,0,-157.33,324.3,1,1,0,-176.47,259.8,1,1,0,-174.82,222.56,1,1,0,-183.92,189.8,1,1,0,-192.28,184.62,1,1,0,-187.97,167.77,1,1,0,-184.21,157.12,1,1,0,-168.65,150.12,1,1,0,-165.62,154.8,1,1,0,-166.21,113.9,1,1,0,-124.75,98.26,1,1,0,-116.1,90.82,1,1,0,-111.4,67.72,1,1,0,-112.63,42.81,1,1,0,-107,39.23,1,1,0,-106.58,13.43,1,1,0,-107.9,14.23,1,1,0,-165.3,-0.18,1,1,0,-193.24,1.18,1,1,0,-232.21,6.11,1,1,0,-267.95,51.86,1,1,0,-266.87,70.87,1,1,0,-260.6,102.17,1,1,0,-263.99,127.94,1,1,0,-254.21,134.33,1,1,0,-256.01,178.26,1,1,0,-256.83,182.72,1,1,0,-264.12,189.51,1,1,0,-275.83,225.86,1,1,0,-277.32,279.53,1,1,0,-269.82,352.31,1,1,0,-249.74,402.98,1,1,0,-247.82,471.02,1,1,0,-237.41,538.46,1,1,0,-222.14,572.41,1,1,0,-215.81,692.92,1,1,0,-210.72,712.15,1,2,0,-193.73,776.9,0.90399,1,-226.6,-76.31,0.09601,3,0,-177.41,860.8,0.53334,1,-210.28,7.59,0.45523,2,-151.71,210.99,0.01143,3,0,-180.66,864.97,0.54698,1,-213.53,11.76,0.43897,2,-147.54,214.25,0.01405,3,0,-241.43,924.3,0.70957,1,-274.3,71.09,0.24288,2,-88.21,275.01,0.04754,3,0,-273.9,945.95,0.8068,1,-306.77,92.74,0.15942,2,-66.56,307.48,0.03378,3,0,-285.18,962.3,0.79327,1,-318.05,109.09,0.18298,2,-50.21,318.77,0.02376,3,0,-285.42,1005.05,0.56878,1,-318.29,151.84,0.41342,2,-7.46,319,0.0178,3,0,-276.22,1022.86,0.41547,1,-309.09,169.65,0.56734,2,10.35,309.8,0.01719,3,0,-269.5,1023.06,0.34701,1,-302.37,169.85,0.63605,2,10.55,303.08,0.01694,3,0,-272.01,1039.44,0.3419,1,-304.88,186.22,0.64278,2,26.92,305.59,0.01532,3,0,-260.07,1064.74,0.13552,1,-292.94,211.53,0.85762,2,52.23,293.65,0.00686,1,1,-285.24,237.73,1,1,1,-283.02,276.73,1,1,1,-265.05,313.78,1,1,1,-262.42,336.56,1,1,1,-246.77,365.34,1,2,1,-149.71,416.69,0.95582,3,-159.64,12.9,0.04418,2,1,-106.75,427.92,0.89809,3,-116.68,24.13,0.10191,2,1,-98.45,433.9,0.88349,3,-108.37,30.1,0.11651,2,1,-101.19,463.4,0.86355,3,-111.12,59.61,0.13645,2,1,-102.71,474.06,0.8505,3,-112.64,70.26,0.1495,2,1,-113.94,491.62,0.84135,3,-123.87,87.82,0.15865,2,1,-127.46,497.45,0.85402,3,-137.38,93.66,0.14598,2,1,-139.9,511.17,0.86656,3,-149.83,107.37,0.13344,2,1,-147.61,524.82,0.87736,3,-157.54,121.03,0.12264,2,1,-147.5,548.99,0.8795,3,-157.42,145.2,0.1205,2,1,-134.58,556.96,0.86273,3,-144.51,153.17,0.13727,2,1,-132.09,562.18,0.86126,3,-142.02,158.39,0.13874,2,1,-137.29,590.97,0.86503,3,-147.22,187.18,0.13497,2,1,-129.57,619.65,0.85517,3,-139.5,215.86,0.14483,2,1,-123.81,643.17,0.85313,3,-133.74,239.38,0.14687,2,1,-113.17,642.49,0.84,3,-123.09,238.7,0.16,2,1,-97.46,658.47,0.84,3,-107.39,254.68,0.16,2,1,-69.41,672.98,0.84,3,-79.34,269.18,0.16,2,1,-13.86,671.38,0.84838,3,-23.79,267.59,0.15162,3,1,-69.88,537.03,0.6384,3,-79.81,133.23,0.1216,5,-87.82,-39.23,0.24,3,1,-52.01,545.11,0.09408,3,-61.94,141.31,0.01792,5,-95.16,-21.05,0.888,3,1,-39.02,542.15,0.21503,3,-48.95,138.35,0.04096,5,-91.68,-8.19,0.74401,3,1,-35.39,535.74,0.6384,3,-45.32,131.94,0.1216,5,-85.12,-4.82,0.24,2,1,-63.33,532.68,0.84,3,-73.26,128.88,0.16,2,1,-49.53,530.18,0.84,3,-59.46,126.38,0.16,3,1,-62.34,540.44,0.42336,3,-72.27,136.64,0.08064,5,-90.92,-31.56,0.496,3,1,-70.24,550.82,0.504,3,-80.17,147.03,0.096,5,-101.62,-39.03,0.39999,3,1,-57.92,551.14,0.504,3,-67.85,147.35,0.096,5,-101.43,-26.71,0.39999,3,1,-37.28,544.26,0.504,3,-47.21,140.47,0.096,5,-93.72,-6.37,0.39999,3,1,-29.28,545.06,0.504,3,-39.21,141.27,0.096,5,-94.19,1.66,0.39999,2,1,-9.81,499.05,0.84,3,-19.74,95.26,0.16,2,1,-69.76,508.94,0.84,3,-79.69,105.14,0.16,2,1,-85.77,455.98,0.85322,3,-95.69,52.19,0.14678,2,1,-51.45,436.84,0.84,3,-61.37,33.05,0.16,2,1,-31.32,432.23,0.84,3,-41.24,28.43,0.16,2,1,-16.8,432.88,0.84,3,-26.72,29.09,0.16,2,1,1.35,450.37,0.84,3,-8.57,46.58,0.16,2,1,22.58,490.85,0.84,3,12.65,87.06,0.16,2,1,58.66,500.62,0.86451,3,48.73,96.82,0.13549,2,1,87.96,507.81,0.90648,3,78.03,104.02,0.09352,2,1,113.66,517.07,0.94354,3,103.73,113.27,0.05646,1,1,163.52,498.05,1,2,1,97.21,466.69,0.92675,3,87.28,62.9,0.07325,2,1,71,445.62,0.90533,3,61.07,41.83,0.09467,2,1,40.16,448.7,0.86375,3,30.23,44.91,0.13625,2,1,6.23,426.6,0.84324,3,-3.7,22.81,0.15676,1,1,-186.51,223.7,1,1,1,-167.77,158.09,1,1,1,-173.23,109.67,1,3,0,-149.73,919.15,0.00228,1,-182.6,65.94,0.99755,2,-93.36,183.32,0.00017,1,1,-220.09,124.51,1,1,1,-214.63,146.38,1,1,1,-202.13,158.87,1,2,1,-39.56,341.55,0.95241,3,-49.49,-62.25,0.04759,1,1,-130.28,266.67,1,1,1,52.6,259.47,1],"hull":162,"edges":[0,322,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,306,306,308,308,310,310,312,312,314,314,316,316,318,318,320,320,322,326,328,328,330,324,332,332,334,334,330,324,336,336,326,338,340,340,342,342,344,294,350,350,352,352,354,354,356,356,358,358,360,360,362,362,364,364,366,366,368,368,370,370,372,372,374,374,376,376,358,378,380,380,382,382,384,384,386,386,388,388,390,390,378],"width":1016,"height":2144},"BeachScene/Helena no bg":{"type":"mesh","uvs":[0.56974,0.01787,0.60384,0.02621,0.62886,0.04101,0.64019,0.04998,0.64728,0.04936,0.66928,0.05692,0.69294,0.06535,0.71715,0.07519,0.75911,0.10295,0.8438,0.15106,0.88848,0.18181,0.89584,0.19538,0.8987,0.20407,0.89239,0.21192,0.85487,0.23294,0.82431,0.23767,0.80588,0.23665,0.79454,0.23932,0.76379,0.23836,0.76449,0.23977,0.64909,0.24894,0.60496,0.25473,0.59738,0.25777,0.58945,0.26423,0.58845,0.26542,0.58615,0.28542,0.58008,0.30398,0.56872,0.3115,0.54797,0.32087,0.54368,0.32699,0.53856,0.33194,0.48312,0.37245,0.47924,0.37733,0.50044,0.4037,0.50155,0.40755,0.49084,0.41238,0.48927,0.42784,0.48947,0.42811,0.52406,0.46286,0.53004,0.47686,0.53089,0.49177,0.53663,0.49984,0.55056,0.56532,0.55497,0.5853,0.55905,0.6186,0.56072,0.65163,0.55394,0.68328,0.55317,0.71881,0.47192,0.78144,0.44248,0.80227,0.43957,0.80313,0.44517,0.82219,0.46493,0.84452,0.46058,0.84699,0.46313,0.85396,0.47532,0.861,0.48054,0.87131,0.494,0.88146,0.50642,0.8962,0.51787,0.9157,0.53887,0.93935,0.54699,0.95204,0.55325,0.9687,0.53931,0.9815,0.51254,0.98574,0.48662,0.98543,0.46446,0.97927,0.44457,0.96548,0.43548,0.9548,0.43062,0.94564,0.42198,0.91761,0.41745,0.91176,0.40515,0.89442,0.40794,0.88062,0.40704,0.86861,0.39129,0.86226,0.37575,0.83792,0.36793,0.84023,0.33816,0.86128,0.32653,0.86385,0.31918,0.86743,0.29858,0.8831,0.30206,0.88989,0.30731,0.93433,0.31239,0.94689,0.33592,0.9671,0.3371,0.98061,0.33436,0.98375,0.32161,0.98792,0.29152,0.98997,0.26336,0.98546,0.25313,0.98318,0.23082,0.97185,0.22328,0.95806,0.22325,0.93242,0.21703,0.91495,0.21517,0.9147,0.19402,0.90034,0.18634,0.8881,0.18726,0.87855,0.22654,0.85943,0.23242,0.85036,0.25541,0.85089,0.26801,0.84269,0.26661,0.84055,0.27176,0.83358,0.32872,0.77989,0.32827,0.77427,0.30687,0.74249,0.29584,0.70807,0.2786,0.6849,0.25895,0.66044,0.21586,0.61004,0.175,0.54125,0.16307,0.51855,0.15979,0.50262,0.16116,0.47988,0.16608,0.45091,0.16093,0.42572,0.17216,0.40684,0.17653,0.39751,0.16997,0.38371,0.11675,0.32314,0.10518,0.30151,0.09845,0.27674,0.09962,0.26693,0.10826,0.25467,0.12684,0.23978,0.13437,0.23826,0.16126,0.23118,0.22722,0.19877,0.26844,0.1764,0.28358,0.17129,0.31587,0.16596,0.37695,0.16767,0.40927,0.16436,0.4155,0.16079,0.42985,0.14674,0.4359,0.13635,0.43585,0.13232,0.43115,0.12453,0.42773,0.12458,0.41398,0.12115,0.40389,0.11528,0.39783,0.10323,0.39742,0.0767,0.41132,0.07047,0.41391,0.04794,0.41719,0.04407,0.45596,0.02315,0.47025,0.01531,0.47129,0.01327,0.50636,0.01409,0.54416,0.01307,0.63444,0.10138,0.63129,0.11975,0.61398,0.12715,0.59352,0.15621,0.5505,0.16992,0.54001,0.17266,0.49804,0.16608,0.46184,0.15292,0.65865,0.10221,0.672,0.10105,0.77739,0.17785,0.67646,0.19336,0.57553,0.18793,0.25849,0.25436,0.24833,0.27382,0.26008,0.29169,0.23714,0.3867,0.20065,0.3451,0.18208,0.28165,0.2252,0.26882,0.2327,0.26357,0.26053,0.3658,0.49289,0.09656,0.5151,0.09571,0.52834,0.09656,0.53919,0.10071,0.5399,0.10506,0.53439,0.10594,0.5213,0.10765,0.50933,0.10624,0.50166,0.10272,0.58643,0.10832,0.59675,0.10744,0.60623,0.10788,0.61666,0.11449,0.60412,0.11757,0.59201,0.11674,0.58106,0.11184,0.5054,0.08866,0.52014,0.08812,0.54362,0.09515,0.58483,0.10329,0.60678,0.10219,0.6134,0.10389,0.55948,0.1313,0.57319,0.08388,0.50197,0.12193,0.59218,0.13213,0.31797,0.27881,0.52679,0.30041,0.45066,0.25209,0.40498,0.34361],"triangles":[187,196,197,186,195,196,190,186,189,190,185,186,189,186,187,187,186,196,185,195,186,187,197,188,191,195,185,194,178,193,181,178,179,182,177,178,184,176,177,176,192,177,178,177,193,183,177,182,183,184,177,177,192,193,179,178,194,182,178,181,180,179,194,150,151,152,157,201,156,201,189,156,201,190,189,193,152,153,156,188,155,193,153,0,199,0,1,155,188,154,3,4,5,156,155,165,155,154,162,196,199,154,162,154,5,154,199,3,155,162,163,6,163,162,163,7,8,13,14,11,13,11,12,164,9,10,164,8,9,16,164,14,11,14,164,10,11,164,17,18,16,20,165,18,159,158,166,20,166,165,166,158,157,159,160,158,157,158,198,22,166,21,36,170,35,35,33,34,35,32,33,26,203,25,205,32,35,31,205,30,205,203,30,30,203,29,29,203,28,28,203,27,204,24,203,22,204,166,22,23,204,35,175,205,126,172,125,172,123,124,192,149,152,198,191,190,191,180,195,194,199,195,193,0,199,198,180,191,180,194,195,194,193,199,148,149,192,158,160,198,200,183,182,200,184,183,176,146,192,140,176,184,198,160,200,160,161,200,161,136,137,137,138,161,161,138,139,139,140,200,141,142,140,176,140,144,143,144,140,140,142,143,134,135,204,133,167,131,172,126,128,168,169,173,173,169,172,122,123,172,169,168,202,172,129,173,173,174,168,168,174,167,122,172,171,121,122,171,171,169,175,35,170,175,170,121,171,119,120,170,118,119,170,170,117,118,37,38,113,114,115,113,116,113,115,41,112,40,38,40,112,112,113,38,88,89,85,86,87,88,62,63,64,90,85,89,61,64,65,85,86,88,84,85,90,90,91,84,91,92,84,61,62,64,66,61,65,92,93,84,66,67,61,67,60,61,67,68,60,93,83,84,93,94,83,68,69,60,69,59,60,69,70,59,83,95,82,83,94,95,59,70,58,70,71,58,95,81,82,81,95,97,81,97,100,100,102,81,97,95,96,71,72,57,71,57,58,57,73,56,73,57,72,100,101,102,97,98,100,100,98,99,81,102,80,56,74,55,55,74,54,74,56,73,54,74,53,102,103,80,80,103,79,78,79,105,74,75,53,75,76,53,79,103,105,78,105,77,76,51,53,53,51,52,103,104,105,76,77,106,77,105,106,76,50,51,76,106,50,48,49,50,107,48,50,108,47,48,106,107,50,48,107,108,108,109,47,47,109,46,109,110,46,46,110,45,45,110,111,111,44,45,111,43,44,43,112,42,42,112,41,111,112,43,170,113,116,117,170,116,170,37,113,120,121,170,175,170,171,205,175,169,172,169,171,205,169,202,168,167,202,202,167,134,173,129,174,174,129,167,128,129,172,129,130,167,126,127,128,167,130,131,134,167,133,131,132,133,204,202,134,204,135,160,136,160,135,160,136,161,200,161,139,140,184,200,144,146,176,144,145,146,182,181,198,181,180,198,181,179,180,146,147,192,147,148,192,192,152,193,200,182,198,195,199,196,125,172,124,205,204,203,205,202,204,204,160,159,32,205,31,27,203,26,25,203,24,204,23,24,21,166,20,36,37,170,39,40,38,166,204,159,166,157,165,157,156,165,157,198,201,20,18,19,18,165,164,16,18,164,164,165,155,15,16,14,163,8,164,164,155,163,163,6,7,6,162,5,154,3,5,188,197,154,197,196,154,199,2,3,199,1,2,189,187,188,198,190,201,156,189,188,191,185,190,152,149,150],"vertices":[3,0,172.35,1369.68,0.44516,1,139.48,516.47,0.32236,3,129.55,112.68,0.23249,3,0,197.17,1358.06,0.45587,1,164.29,504.85,0.33012,3,154.37,101.06,0.21401,3,0,215.37,1337.46,0.48742,1,182.5,484.25,0.35296,3,172.57,80.46,0.15962,3,0,223.61,1324.97,0.50378,1,190.74,471.76,0.3648,3,180.81,67.96,0.13142,3,0,228.77,1325.84,0.50949,1,195.9,472.63,0.36894,3,185.98,68.83,0.12157,3,0,244.78,1315.3,0.52173,1,211.91,462.09,0.37781,3,201.98,58.3,0.10046,3,0,262,1303.57,0.54131,1,229.13,450.35,0.39198,3,219.2,46.56,0.06671,4,0,279.61,1289.86,0.59786,1,246.74,436.65,0.34832,3,236.81,32.86,0.02817,2,277.35,-246.03,0.02565,3,0,310.15,1251.22,0.66625,1,277.28,398.01,0.27731,2,238.71,-276.57,0.05644,3,0,371.77,1184.23,0.5336,1,338.9,331.02,0.42,2,171.72,-338.19,0.0464,3,0,404.29,1141.42,0.5336,1,371.42,288.2,0.42,2,128.9,-370.71,0.0464,3,0,409.64,1122.53,0.5336,1,376.77,269.31,0.42,2,110.02,-376.06,0.0464,3,0,411.72,1110.43,0.54211,1,378.85,257.21,0.41075,2,97.91,-378.14,0.04714,3,0,407.13,1099.49,0.56843,1,374.26,246.28,0.38786,2,86.98,-373.55,0.04371,3,0,379.83,1070.24,0.54729,1,346.96,217.03,0.42,2,57.73,-346.25,0.03271,3,0,357.59,1063.65,0.54158,1,324.72,210.43,0.42,2,51.13,-324.01,0.03842,3,0,344.18,1065.07,0.5336,1,311.31,211.85,0.42,2,52.55,-310.6,0.0464,3,0,335.93,1061.35,0.54624,1,303.06,208.13,0.40626,2,48.83,-302.35,0.0475,3,0,313.56,1062.69,0.56207,1,280.69,209.48,0.38905,2,50.18,-279.97,0.04888,3,0,314.06,1060.72,0.57935,1,281.19,207.51,0.37028,2,48.21,-280.48,0.05038,3,0,230.09,1047.95,0.84512,1,197.22,194.74,0.09179,2,35.44,-196.51,0.06308,3,0,197.98,1039.89,0.54003,1,165.11,186.68,0.37933,2,27.38,-164.4,0.08064,3,0,192.46,1035.66,0.50888,1,159.59,182.45,0.38745,2,23.15,-158.88,0.10367,3,0,186.69,1026.66,0.52892,1,153.82,173.45,0.32236,2,14.15,-153.11,0.14872,3,0,185.96,1025.01,0.53519,1,153.09,171.8,0.30706,2,12.5,-152.38,0.15775,3,0,184.29,997.16,0.42239,1,151.42,143.95,0.34733,2,-15.35,-150.71,0.23029,3,0,179.87,971.32,0.42285,1,147,118.1,0.35217,2,-41.2,-146.29,0.22498,3,0,171.6,960.86,0.43294,1,138.73,107.64,0.35443,2,-51.66,-138.02,0.21264,3,0,156.51,947.81,0.49883,1,123.64,94.6,0.32539,2,-64.7,-122.92,0.17578,3,0,153.39,939.29,0.54435,1,120.52,86.08,0.32583,2,-73.22,-119.81,0.12982,3,0,149.66,932.4,0.56722,1,116.79,79.19,0.34402,2,-80.11,-116.08,0.08876,3,0,109.32,876,0.59367,1,76.45,22.78,0.37433,2,-136.52,-75.74,0.032,3,0,106.5,869.2,0.62059,1,73.63,15.99,0.3363,2,-143.31,-72.91,0.04311,3,0,121.92,832.48,0.68472,1,89.05,-20.73,0.27513,2,-180.03,-88.34,0.04015,3,0,122.73,827.12,0.63887,1,89.85,-26.09,0.3285,2,-185.39,-89.14,0.03262,3,0,114.93,820.4,0.61658,1,82.06,-32.81,0.35121,2,-192.11,-81.35,0.03221,3,0,113.79,798.87,0.57879,1,80.92,-54.34,0.41292,2,-213.64,-80.21,0.00829,3,0,113.94,798.5,0.57887,1,81.07,-54.71,0.41329,2,-214.01,-80.35,0.00784,2,0,139.11,750.11,0.58,1,106.24,-103.1,0.42,2,0,143.46,730.62,0.74856,1,110.59,-122.59,0.25144,2,0,144.08,709.87,0.78059,1,111.21,-143.35,0.21941,2,0,148.26,698.62,0.86935,1,115.38,-154.59,0.13065,1,0,158.39,607.46,1,1,0,161.6,579.63,1,1,0,164.57,533.27,1,2,0,165.79,487.28,0.82803,1,132.92,-365.93,0.17197,2,0,160.85,443.22,0.89526,1,127.98,-409.99,0.10474,2,0,160.29,393.75,0.9482,1,127.42,-459.46,0.0518,1,0,101.17,306.55,1,1,0,79.75,277.54,1,1,0,77.62,276.36,1,1,0,81.7,249.81,1,1,0,96.08,218.72,1,1,0,92.91,215.28,1,1,0,94.77,205.59,1,1,0,103.64,195.77,1,1,0,107.44,181.42,1,1,0,117.23,167.28,1,1,0,126.27,146.76,1,1,0,134.6,119.62,1,1,0,149.89,86.69,1,1,0,155.79,69.02,1,1,0,160.35,45.83,1,1,0,150.2,28.01,1,1,0,130.73,22.1,1,1,0,111.87,22.53,1,1,0,95.74,31.11,1,1,0,81.27,50.31,1,1,0,74.65,65.18,1,1,0,71.12,77.93,1,1,0,64.83,116.95,1,1,0,61.53,125.1,1,1,0,52.58,149.25,1,1,0,54.61,168.46,1,1,0,53.96,185.18,1,1,0,42.5,194.02,1,1,0,31.19,227.91,1,1,0,25.5,224.7,1,1,0,3.84,195.38,1,1,0,-4.63,191.8,1,1,0,-9.98,186.82,1,1,0,-24.96,165.01,1,1,0,-22.43,155.55,1,1,0,-18.62,93.68,1,1,0,-14.92,76.18,1,1,0,2.2,48.06,1,1,0,3.06,29.25,1,1,0,1.07,24.87,1,1,0,-8.21,19.07,1,1,0,-30.11,16.2,1,1,0,-50.6,22.48,1,1,0,-58.04,25.66,1,1,0,-74.28,41.44,1,1,0,-79.76,60.64,1,1,0,-79.78,96.34,1,1,0,-84.31,120.67,1,1,0,-85.66,121.01,1,1,0,-101.05,141,1,1,0,-106.64,158.04,1,1,0,-105.97,171.34,1,1,0,-77.39,197.96,1,1,0,-73.11,210.59,1,1,0,-56.38,209.86,1,1,0,-47.21,221.27,1,1,0,-48.23,224.24,1,1,0,-44.48,233.95,1,1,0,-3.04,308.71,1,1,0,-3.36,316.54,1,1,0,-18.93,360.77,1,1,0,-26.96,408.7,1,1,0,-39.5,440.97,1,1,0,-53.8,475.02,1,1,0,-85.16,545.19,1,1,0,-114.9,640.97,1,1,0,-123.57,672.58,1,2,0,-125.96,694.75,0.99225,1,-158.83,-158.46,0.00775,2,0,-124.97,726.42,0.87737,1,-157.84,-126.79,0.12263,3,0,-121.38,766.75,0.7927,1,-154.25,-86.46,0.20005,2,-245.76,154.96,0.00724,3,0,-125.13,801.82,0.78372,1,-158,-51.4,0.17173,2,-210.7,158.72,0.04455,3,0,-116.96,828.11,0.55437,1,-149.83,-25.1,0.39742,2,-184.4,150.54,0.04821,3,0,-113.78,841.1,0.5336,1,-146.65,-12.12,0.42,2,-171.42,147.36,0.0464,3,0,-118.55,860.32,0.5336,1,-151.42,7.1,0.42,2,-152.2,152.13,0.0464,3,0,-157.28,944.65,0.62146,1,-190.15,91.44,0.34137,2,-67.86,190.86,0.03717,3,0,-165.7,974.76,0.70128,1,-198.57,121.55,0.25615,2,-37.75,199.28,0.04257,3,0,-170.59,1009.24,0.74282,1,-203.46,156.03,0.21058,2,-3.27,204.18,0.04661,3,0,-169.74,1022.91,0.7355,1,-202.62,169.7,0.21735,2,10.4,203.33,0.04715,3,0,-163.46,1039.97,0.66651,1,-196.33,186.76,0.28153,2,27.46,197.04,0.05196,3,0,-149.93,1060.71,0.53794,1,-182.8,207.5,0.41529,2,48.2,183.52,0.04678,3,0,-144.46,1062.82,0.5336,1,-177.33,209.61,0.42,2,50.31,178.04,0.0464,3,0,-124.89,1072.68,0.5336,1,-157.76,219.47,0.42,2,60.17,158.47,0.0464,3,0,-76.89,1117.81,0.77016,1,-109.76,264.59,0.14566,2,105.29,110.47,0.08418,3,0,-46.9,1148.96,0.63416,1,-79.77,295.74,0.29267,2,136.44,80.48,0.07318,3,0,-35.88,1156.07,0.6104,1,-68.75,302.86,0.33652,2,143.56,69.46,0.05308,3,0,-12.39,1163.49,0.58281,1,-45.26,310.27,0.37934,2,150.97,45.97,0.03785,3,0,32.06,1161.11,0.56287,1,-0.81,307.9,0.42,2,148.6,1.52,0.01713,2,0,55.58,1165.71,0.6326,1,22.71,312.5,0.3674,3,0,60.11,1170.69,0.57473,1,27.24,317.47,0.41618,3,17.32,-86.32,0.00909,3,0,70.55,1190.25,0.45699,1,37.68,337.04,0.33092,3,27.76,-66.75,0.21209,3,0,74.96,1204.71,0.5894,1,42.09,351.5,0.25452,3,32.16,-52.29,0.15608,3,0,74.92,1210.32,0.58578,1,42.05,357.11,0.19121,3,32.13,-46.69,0.22302,3,0,71.5,1221.18,0.57091,1,38.63,367.97,0.09183,3,28.7,-35.83,0.33725,3,0,69.01,1221.1,0.58063,1,36.14,367.89,0.09272,3,26.21,-35.9,0.32665,3,0,59,1225.88,0.72657,1,26.13,372.67,0.10512,3,16.21,-31.12,0.16832,3,0,51.66,1234.05,0.623,1,18.79,380.84,0.09195,3,8.87,-22.96,0.28505,3,0,47.25,1250.83,0.67781,1,14.38,397.62,0.14235,3,4.45,-6.18,0.17984,3,0,46.96,1287.76,0.46658,1,14.09,434.55,0.33787,3,4.16,30.76,0.19555,3,0,57.07,1296.45,0.45184,1,24.2,443.23,0.32719,3,14.28,39.44,0.22097,3,0,58.96,1327.81,0.50421,1,26.09,474.59,0.33149,3,16.16,70.8,0.1643,3,0,61.35,1333.2,0.49105,1,28.47,479.99,0.34266,3,18.55,76.2,0.16629,3,0,89.56,1362.33,0.45129,1,56.69,509.12,0.32679,3,46.76,105.32,0.22192,3,0,99.95,1373.24,0.45288,1,67.08,520.03,0.32795,3,57.16,116.23,0.21917,3,0,100.71,1376.09,0.45714,1,67.84,522.87,0.33103,3,57.91,119.08,0.21183,3,0,126.23,1374.94,0.4438,1,93.36,521.73,0.32137,3,83.43,117.93,0.23482,3,0,153.73,1376.36,0.44579,1,120.86,523.15,0.32282,3,110.93,119.36,0.23139,3,0,219.43,1253.41,0.47975,1,186.56,400.2,0.34741,3,176.63,-3.59,0.17284,3,0,217.14,1227.84,0.5612,1,184.27,374.62,0.22318,3,174.34,-29.17,0.21561,3,0,204.54,1217.53,0.47481,1,171.67,364.32,0.25483,3,161.74,-39.48,0.27037,3,0,189.65,1177.06,0.46309,1,156.78,323.85,0.33534,3,146.85,-79.94,0.20157,3,0,158.35,1157.98,0.42069,1,125.48,304.76,0.30464,3,115.55,-99.03,0.27468,3,0,150.71,1154.16,0.41351,1,117.84,300.95,0.29944,3,107.91,-102.85,0.28704,3,0,120.17,1163.32,0.39397,1,87.3,310.11,0.28529,3,77.38,-93.69,0.32074,3,0,93.83,1181.65,0.46088,1,60.96,328.43,0.33374,3,51.04,-75.36,0.20537,3,0,237.04,1252.24,0.61608,1,204.17,399.03,0.27312,3,194.24,-4.76,0.1108,3,0,246.76,1253.87,0.54696,1,213.89,400.65,0.36232,3,203.97,-3.14,0.09073,3,0,323.45,1146.94,0.62626,1,290.58,293.73,0.32715,2,134.43,-289.86,0.04659,3,0,250,1125.34,0.667,1,217.13,272.13,0.2998,2,112.83,-216.42,0.03319,4,0,176.56,1132.9,0.56448,1,143.69,279.69,0.41277,3,133.76,-124.11,0.01722,2,120.39,-142.98,0.00553,3,0,-54.14,1040.41,0.4662,1,-87.01,187.2,0.36695,2,27.9,87.72,0.16685,3,0,-61.53,1013.32,0.48408,1,-94.4,160.1,0.37898,2,0.8,95.11,0.13695,3,0,-52.98,988.43,0.49124,1,-85.85,135.22,0.38498,2,-24.08,86.56,0.12378,3,0,-69.67,856.15,0.53488,1,-102.54,2.93,0.42,2,-156.37,103.26,0.04512,3,0,-96.22,914.07,0.56438,1,-129.09,60.86,0.40624,2,-98.44,129.81,0.02938,3,0,-109.74,1002.41,0.63936,1,-142.61,149.2,0.33038,2,-10.1,143.32,0.03026,3,0,-78.36,1020.27,0.56598,1,-111.23,167.06,0.36646,2,7.76,111.95,0.06756,3,0,-72.9,1027.58,0.51541,1,-105.77,174.37,0.39524,2,15.07,106.49,0.08935,3,0,-52.66,885.25,0.59649,1,-85.53,32.04,0.35185,2,-127.26,86.24,0.05166,4,0,116.43,1260.11,0.21243,1,83.56,406.9,0.15383,3,73.63,3.1,0.18574,4,46.55,46.47,0.448,4,0,132.59,1261.29,0.00325,1,99.72,408.08,0.00235,3,89.79,4.28,0.0024,4,44.88,63.32,0.992,4,0,142.23,1260.11,0.00324,1,109.36,406.89,0.00216,3,99.43,3.1,0.0026,4,45.86,73.42,0.992,4,0,150.12,1254.34,0.21488,1,117.25,401.13,0.12161,3,107.32,-2.67,0.14352,4,51.68,81.82,0.51999,4,0,150.64,1248.28,0.3078,1,117.77,395.06,0.17808,3,107.84,-8.73,0.13812,4,58,82.53,0.376,3,0,146.62,1247.05,0.45253,1,113.75,393.84,0.30964,3,103.82,-9.95,0.23783,3,0,137.1,1244.67,0.37182,1,104.23,391.46,0.26925,3,94.3,-12.33,0.35893,3,0,128.39,1246.65,0.35486,1,95.52,393.43,0.25697,3,85.59,-10.36,0.38818,4,0,122.81,1251.54,0.30805,1,89.94,398.33,0.22307,3,80.01,-5.46,0.34087,4,55.33,53.37,0.12801,4,0,184.49,1243.74,0.19406,1,151.62,390.53,0.14053,3,141.7,-13.27,0.1134,5,67.59,176.11,0.55201,4,0,192,1244.97,0.04212,1,159.13,391.75,0.0305,3,149.21,-12.04,0.02339,5,66.67,183.67,0.904,4,0,198.9,1244.35,0.07077,1,166.03,391.14,0.05125,3,156.1,-12.65,0.03798,5,67.57,190.54,0.84,3,0,206.49,1235.16,0.45651,1,173.62,381.95,0.29829,3,163.69,-21.85,0.2452,3,0,197.37,1230.87,0.41928,1,164.5,377.65,0.30362,3,154.57,-26.14,0.2771,3,0,188.56,1232.02,0.4176,1,155.69,378.8,0.3024,3,145.76,-24.99,0.28,4,0,180.59,1238.84,0.40348,1,147.72,385.62,0.29218,3,137.79,-18.17,0.25634,5,72.33,172.01,0.048,4,0,125.53,1271.11,0.26452,1,92.66,417.9,0.19155,3,82.73,14.11,0.26394,4,34.81,55.68,0.28,4,0,136.26,1271.86,0.33011,1,103.39,418.65,0.18413,3,93.46,14.86,0.20576,4,33.74,66.87,0.28,4,0,153.34,1262.07,0.3619,1,120.47,408.86,0.15519,3,110.55,5.07,0.20291,4,43.51,84.98,0.28,4,0,183.33,1250.75,0.28575,1,150.46,397.54,0.20693,3,140.53,-6.25,0.14732,5,60.54,175.24,0.36,4,0,199.3,1252.27,0.29216,1,166.43,399.06,0.21156,3,156.5,-4.73,0.13628,5,59.67,191.26,0.36,4,0,204.12,1249.91,0.29214,1,171.25,396.69,0.21155,3,161.32,-7.1,0.1363,5,62.23,195.97,0.36,3,0,164.88,1211.74,0.4249,1,132.01,358.53,0.24916,3,122.08,-45.26,0.32594,3,0,174.86,1277.77,0.4927,1,141.99,424.56,0.35678,3,132.06,20.77,0.15052,3,0,123.04,1224.8,0.4176,1,90.17,371.58,0.3024,3,80.24,-32.21,0.28,3,0,188.68,1210.59,0.45275,1,155.81,357.38,0.25229,3,145.88,-46.42,0.29496,3,0,-10.85,1006.37,0.53249,1,-43.72,153.16,0.12583,2,-6.14,44.44,0.34168,3,0,141.1,976.3,0.37614,1,108.23,123.09,0.32426,2,-36.21,-107.51,0.29959,3,0,85.7,1043.57,0.67046,1,52.83,190.36,0.07719,2,31.06,-52.12,0.25235,3,0,52.46,916.15,0.56801,1,19.59,62.94,0.3881,2,-96.36,-18.88,0.04389],"hull":154,"edges":[0,306,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,306,308,310,310,312,312,314,314,316,316,318,318,320,320,322,322,278,308,324,324,326,326,328,328,330,330,332,332,316,334,336,336,338,340,342,342,344,344,346,346,348,348,334,338,350,350,340,352,354,354,356,356,358,358,360,360,362,362,364,364,366,366,368,368,352,370,372,372,374,374,376,376,378,378,380,380,382,382,370,384,386,386,388,390,392,392,394],"width":1016,"height":1944},"BeachScene/Sulli no BG":{"type":"mesh","uvs":[0.59864,0.10322,0.63096,0.10522,0.67555,0.11118,0.68343,0.11545,0.68838,0.12393,0.68521,0.1304,0.70371,0.13974,0.70636,0.15295,0.7052,0.16452,0.70112,0.17813,0.70073,0.17742,0.70477,0.18492,0.70532,0.19491,0.70235,0.20196,0.68387,0.21873,0.67271,0.22419,0.66303,0.23974,0.66927,0.24615,0.77975,0.26264,0.80558,0.26897,0.81389,0.27841,0.82976,0.30801,0.84625,0.34316,0.84022,0.35207,0.84088,0.35538,0.84888,0.35796,0.8752,0.37508,0.87963,0.38453,0.8608,0.40052,0.8609,0.39927,0.84034,0.42255,0.84928,0.45173,0.85987,0.46204,0.86679,0.48696,0.86537,0.50366,0.85711,0.51138,0.84267,0.52155,0.82206,0.52813,0.82194,0.55214,0.81069,0.55695,0.80743,0.55882,0.80703,0.57271,0.81075,0.5752,0.82589,0.5849,0.82589,0.59019,0.8203,0.59146,0.81805,0.58157,0.79708,0.56906,0.80155,0.56078,0.81476,0.55367,0.81429,0.55074,0.81335,0.52712,0.79466,0.51802,0.78081,0.50703,0.76907,0.4764,0.74485,0.44776,0.73634,0.45331,0.73468,0.46362,0.72883,0.46922,0.74208,0.49024,0.75223,0.51091,0.75811,0.53101,0.75823,0.54595,0.76494,0.55841,0.773,0.59552,0.7686,0.60087,0.73251,0.62257,0.71233,0.62966,0.6867,0.63676,0.67704,0.64056,0.67628,0.66682,0.67291,0.68119,0.62897,0.78254,0.61592,0.81189,0.60694,0.82292,0.55728,0.83097,0.56539,0.84367,0.57505,0.88783,0.58125,0.90688,0.58037,0.92268,0.5697,0.92979,0.5398,0.94895,0.51999,0.9594,0.48543,0.95899,0.46757,0.95707,0.43898,0.92003,0.43634,0.91451,0.4361,0.8996,0.44172,0.88854,0.47104,0.83408,0.47484,0.81559,0.48,0.81426,0.46375,0.80414,0.4908,0.75236,0.49218,0.75261,0.5313,0.61522,0.52284,0.61341,0.49445,0.61351,0.43083,0.62006,0.4003,0.61948,0.36793,0.6135,0.34185,0.60419,0.23063,0.56665,0.08966,0.52395,0.06434,0.5129,0.05249,0.50452,0.04663,0.49664,0.04685,0.47707,0.06507,0.46321,0.08897,0.44813,0.10878,0.44547,0.19239,0.45847,0.2008,0.45959,0.28162,0.46907,0.35777,0.48235,0.35882,0.47262,0.29955,0.44863,0.2673,0.43234,0.21767,0.39258,0.21585,0.37346,0.23185,0.35543,0.32117,0.27321,0.34101,0.26498,0.38071,0.25727,0.48847,0.24511,0.49912,0.23479,0.49568,0.20875,0.48614,0.20396,0.47966,0.18593,0.47968,0.17371,0.48476,0.16256,0.48697,0.16448,0.48703,0.13545,0.49117,0.12967,0.51916,0.12198,0.52713,0.11283,0.54479,0.10625,0.57777,0.10299,0.54649,0.19261,0.64599,0.19902,0.58395,0.23465,0.53854,0.26134,0.55229,0.26624,0.59916,0.26885,0.61666,0.26166,0.39146,0.36256,0.3972,0.39356,0.4106,0.42756,0.40693,0.43157,0.36978,0.40192,0.35673,0.39667,0.43394,0.35819,0.68929,0.37026,0.56569,0.38801],"triangles":[83,84,85,81,83,85,78,85,86,86,87,78,87,88,78,79,80,78,80,85,78,77,78,88,88,89,76,91,72,75,74,75,73,72,94,71,95,96,60,96,114,58,96,97,114,114,97,98,69,95,68,70,95,69,68,95,63,48,49,39,39,40,48,41,48,40,47,48,41,47,41,42,46,47,42,65,63,64,61,95,60,62,95,61,63,95,62,65,66,63,66,67,63,98,101,114,102,113,114,108,106,107,105,106,108,104,105,108,104,108,103,111,108,110,102,112,113,103,111,112,110,108,109,111,103,108,102,103,112,101,102,114,43,46,42,43,45,46,44,45,43,67,68,63,100,98,99,100,101,98,71,94,95,92,93,94,94,91,92,94,72,91,71,95,70,72,73,75,89,90,91,75,89,91,89,75,76,88,76,77,81,85,80,82,83,81,148,114,115,39,49,38,50,51,37,38,50,37,96,59,60,143,144,152,144,16,17,18,144,17,152,144,18,20,18,19,152,21,23,23,21,22,152,23,24,25,29,24,24,29,152,29,25,26,29,26,27,35,53,34,29,30,152,54,31,32,96,58,59,55,30,31,55,152,30,152,153,143,148,153,58,117,118,150,150,118,119,143,153,142,153,147,146,149,146,147,150,119,120,122,151,145,145,121,122,151,123,124,124,125,141,142,141,140,14,139,13,140,139,15,127,128,138,126,127,138,126,138,140,129,130,131,15,139,14,129,131,138,139,11,12,9,10,8,10,139,8,134,131,132,132,133,134,5,3,4,1,5,0,2,5,1,3,5,2,7,5,6,7,8,5,5,138,0,5,8,139,0,134,137,136,137,134,136,134,135,0,138,134,5,139,138,138,131,134,139,10,11,13,139,12,140,138,139,128,129,138,125,126,140,16,140,15,141,125,140,144,140,16,144,143,140,140,143,142,151,124,141,151,141,142,122,123,151,145,120,121,150,120,145,146,145,151,150,145,146,149,150,146,153,151,142,153,146,151,116,150,149,148,149,147,153,148,147,116,149,148,116,117,150,56,58,153,56,153,152,57,58,56,56,152,55,148,58,114,54,55,31,54,32,33,33,53,54,34,53,33,52,53,35,36,52,35,28,29,27,21,18,20,18,21,152,115,116,148,51,52,36,37,51,36,49,50,38],"vertices":[2,3,-7.74,-36.98,0.18585,1,2.19,366.81,0.81415,2,3,18.65,-40.11,0.19031,1,28.58,363.68,0.80969,2,3,55.04,-49.42,0.14796,1,64.97,354.38,0.85204,2,3,61.48,-56.08,0.14295,1,71.41,347.71,0.85705,2,3,65.52,-69.33,0.15022,1,75.45,334.46,0.84978,2,3,62.93,-79.44,0.16891,1,72.86,324.35,0.83109,3,3,78.04,-94.03,0.1199,1,87.96,309.76,0.84823,0,120.83,1162.98,0.03187,3,3,80.2,-114.66,0.10657,1,90.13,289.13,0.6954,0,123,1142.35,0.19802,3,3,79.25,-132.73,0.09471,1,89.18,271.07,0.55872,0,122.05,1124.28,0.34657,3,3,75.92,-153.99,0.0943,1,85.85,249.8,0.5374,0,118.72,1103.01,0.3683,3,3,75.6,-152.88,0.09554,1,85.53,250.91,0.54222,0,118.4,1104.12,0.36225,3,3,78.9,-164.6,0.08125,1,88.83,239.19,0.51013,0,121.7,1092.41,0.40861,3,3,79.35,-180.2,0.07214,1,89.27,223.59,0.61255,0,122.15,1076.81,0.31532,3,3,76.93,-191.2,0.07212,1,86.86,212.59,0.6916,0,119.73,1065.8,0.23628,2,3,61.84,-217.4,0.11366,1,71.77,186.39,0.88634,2,3,52.73,-225.94,0.14213,1,62.66,177.86,0.85787,3,3,44.82,-250.21,0.14553,1,54.75,153.58,0.84721,2,-5.72,-54.04,0.00726,3,3,49.92,-260.23,0.11213,1,59.85,143.56,0.87443,2,-15.74,-59.14,0.01344,2,1,150.04,117.8,0.96484,2,-41.5,-149.33,0.03516,2,1,171.12,107.92,0.96295,2,-51.38,-170.4,0.03705,2,1,177.91,93.18,0.93152,2,-66.12,-177.19,0.06848,2,1,190.86,46.94,0.83713,2,-112.36,-190.15,0.16287,2,1,204.32,-7.95,0.74564,2,-167.25,-203.61,0.25436,2,1,199.4,-21.87,0.72728,2,-181.17,-198.68,0.27272,2,1,199.94,-27.05,0.72723,2,-186.35,-199.22,0.27277,2,1,206.47,-31.07,0.7349,2,-190.37,-205.75,0.2651,2,1,227.95,-57.81,0.79141,2,-217.11,-227.24,0.20859,2,1,231.57,-72.58,0.80366,2,-231.88,-230.86,0.19634,2,1,216.2,-97.56,0.77375,2,-256.86,-215.49,0.22625,2,1,216.28,-95.6,0.77263,2,-254.9,-215.57,0.22737,3,1,199.5,-131.95,0.72923,0,232.37,721.26,0.02162,2,-291.25,-198.79,0.24915,3,1,206.8,-177.54,0.70759,0,239.67,675.67,0.06417,2,-336.84,-206.08,0.22824,3,1,215.44,-193.63,0.72226,0,248.31,659.58,0.06433,2,-352.93,-214.73,0.2134,3,1,221.09,-232.56,0.75193,0,253.96,620.65,0.06573,2,-391.86,-220.37,0.18235,3,1,219.93,-258.64,0.65804,0,252.8,594.57,0.18196,2,-417.94,-219.22,0.16,3,1,213.19,-270.71,0.58414,0,246.06,582.5,0.25586,2,-430.01,-212.47,0.16,3,1,201.4,-286.59,0.53895,0,234.27,566.62,0.29466,2,-445.89,-200.68,0.16639,3,1,184.57,-296.87,0.48147,0,217.44,556.34,0.37399,2,-456.17,-183.86,0.14454,3,1,184.47,-334.37,0.47133,0,217.34,518.85,0.39394,2,-493.67,-183.76,0.13473,3,1,175.3,-341.88,0.41501,0,208.17,511.33,0.4691,2,-501.18,-174.58,0.11589,3,1,172.63,-344.8,0.39533,0,205.51,508.42,0.49456,2,-504.1,-171.92,0.11011,3,1,172.3,-366.5,0.33256,0,205.17,486.71,0.57401,2,-525.8,-171.59,0.09344,3,1,175.34,-370.38,0.33453,0,208.22,482.83,0.57031,2,-529.68,-174.63,0.09515,3,1,187.7,-385.54,0.32873,0,220.57,467.68,0.5772,2,-544.84,-186.99,0.09407,3,1,187.7,-393.8,0.28833,0,220.57,459.41,0.63273,2,-553.1,-186.99,0.07893,3,1,183.14,-395.78,0.2568,0,216.01,457.43,0.67398,2,-555.08,-182.43,0.06922,3,1,181.3,-380.33,0.3228,0,214.17,472.88,0.58446,2,-539.63,-180.58,0.09273,3,1,164.18,-360.79,0.30624,0,197.05,492.42,0.60845,2,-520.09,-163.47,0.0853,3,1,167.83,-347.87,0.36305,0,200.7,505.35,0.53676,2,-507.17,-167.12,0.10019,3,1,178.61,-336.76,0.44091,0,211.48,516.45,0.43601,2,-496.06,-177.9,0.12308,3,1,178.23,-332.18,0.44583,0,211.1,521.03,0.4303,2,-491.48,-177.52,0.12387,3,1,177.46,-295.28,0.47524,0,210.34,557.93,0.39224,2,-454.58,-176.75,0.13252,3,1,162.2,-281.07,0.57426,0,195.08,572.14,0.31522,2,-440.37,-161.49,0.11052,3,1,150.9,-263.91,0.68151,0,183.77,589.31,0.21206,2,-423.21,-150.19,0.10643,3,1,141.32,-216.06,0.83905,0,174.19,637.15,0.0146,2,-375.36,-140.61,0.14635,2,1,121.54,-171.33,0.82704,2,-330.63,-120.83,0.17296,2,1,114.6,-180,0.84831,2,-339.3,-113.88,0.15169,2,1,113.24,-196.1,0.86861,2,-355.4,-112.53,0.13139,2,1,108.47,-204.86,0.88842,2,-364.16,-107.76,0.11158,3,1,119.28,-237.68,0.8057,0,152.15,615.53,0.10576,2,-396.98,-118.57,0.08854,3,1,127.57,-269.98,0.61258,0,160.44,583.24,0.31815,2,-429.28,-126.86,0.06928,3,1,132.37,-301.36,0.39188,0,165.24,551.85,0.55503,2,-460.66,-131.66,0.05309,3,1,132.47,-324.7,0.20774,0,165.34,528.51,0.74329,2,-484,-131.75,0.04897,3,1,137.95,-344.17,0.18613,0,170.82,509.04,0.76608,2,-503.47,-137.23,0.04779,3,1,144.53,-402.12,0.08966,0,177.4,451.09,0.88987,2,-561.42,-143.81,0.02047,3,1,140.94,-410.48,0.0753,0,173.81,442.73,0.90611,2,-569.78,-140.22,0.01858,3,1,111.48,-444.38,0.01446,0,144.35,408.84,0.9727,2,-603.68,-110.76,0.01284,2,0,127.87,397.77,0.98897,2,-614.74,-94.29,0.01103,2,0,106.95,386.68,0.99156,2,-625.84,-73.36,0.00844,2,0,99.06,380.74,0.9941,2,-631.77,-65.48,0.0059,1,0,98.44,339.73,1,1,0,95.69,317.27,1,1,0,59.82,158.97,1,1,0,49.17,113.14,1,1,0,41.84,95.9,1,1,0,1.3,83.33,1,1,0,7.92,63.5,1,1,0,15.81,-5.48,1,1,0,20.86,-35.24,1,1,0,20.15,-59.9,1,1,0,11.44,-71.01,1,1,0,-12.97,-100.94,1,1,0,-29.14,-117.26,1,1,0,-57.35,-116.62,1,1,0,-71.93,-113.62,1,1,0,-95.27,-55.78,1,1,0,-97.42,-47.14,1,1,0,-97.62,-23.85,1,1,0,-93.03,-6.59,1,1,0,-69.1,78.47,1,1,0,-66,107.36,1,1,0,-61.79,109.43,1,1,0,-75.05,125.24,1,1,0,-52.97,206.12,1,1,0,-51.84,205.72,1,2,0,-19.91,420.32,0.98365,2,-592.2,53.49,0.01635,2,0,-26.82,423.15,0.98409,2,-589.37,60.4,0.01591,2,0,-49.99,422.98,0.99185,2,-589.53,83.57,0.00815,1,0,-101.92,412.76,1,1,0,-126.85,413.66,1,1,0,-153.27,423,1,1,0,-174.56,437.54,1,1,0,-265.35,496.19,1,1,0,-380.43,562.88,1,1,0,-401.1,580.13,1,1,0,-410.77,593.22,1,1,0,-415.55,605.54,1,2,1,-448.24,-217.12,0.04195,0,-415.37,636.09,0.95805,2,1,-433.37,-195.47,0.08898,0,-400.5,657.75,0.91102,2,1,-413.86,-171.92,0.1432,0,-380.99,681.29,0.8568,2,1,-397.69,-167.76,0.16213,0,-364.82,685.45,0.83787,2,1,-329.44,-188.06,0.11138,0,-296.57,665.16,0.88862,2,1,-322.57,-189.82,0.11792,0,-289.7,663.39,0.88208,2,1,-256.59,-204.61,0.1659,0,-223.72,648.6,0.8341,3,1,-194.43,-225.37,0.20687,0,-161.56,627.85,0.79042,2,-384.67,195.14,0.00272,3,1,-193.58,-210.17,0.32955,0,-160.71,643.05,0.65889,2,-369.47,194.29,0.01157,3,1,-241.95,-172.69,0.47868,0,-209.08,680.53,0.50689,2,-331.99,242.67,0.01443,3,1,-268.29,-147.24,0.52426,0,-235.42,705.97,0.46414,2,-306.54,269,0.01159,2,1,-308.79,-85.15,0.96251,2,-244.45,309.51,0.03749,2,1,-310.29,-55.28,0.94474,2,-214.58,311,0.05526,2,1,-297.22,-27.13,0.91043,2,-186.43,297.93,0.08957,2,1,-224.31,101.3,0.91765,2,-58,225.02,0.08235,2,1,-208.11,114.15,0.93037,2,-45.15,208.82,0.06963,2,1,-175.71,126.2,0.94829,2,-33.1,176.42,0.05171,3,3,-97.66,-258.61,0.06532,1,-87.74,145.18,0.91387,2,-14.12,88.45,0.02081,3,3,-88.98,-242.49,0.12165,1,-79.05,161.3,0.86839,2,2.01,79.76,0.00996,2,3,-91.79,-201.82,0.12729,1,-81.86,201.98,0.87271,2,3,-99.57,-194.33,0.09951,1,-89.64,209.46,0.90049,2,3,-104.86,-166.18,0.09138,1,-94.93,237.61,0.90862,2,3,-104.85,-147.09,0.10416,1,-94.92,256.7,0.89584,2,3,-100.7,-129.67,0.12705,1,-90.77,274.12,0.87295,2,3,-98.89,-132.66,0.13253,1,-88.96,271.13,0.86747,2,3,-98.84,-87.33,0.11043,1,-88.91,316.46,0.88957,2,3,-95.46,-78.3,0.11121,1,-85.53,325.49,0.88879,2,3,-72.61,-66.28,0.16601,1,-62.68,337.51,0.83399,2,3,-66.11,-52,0.15162,1,-56.18,351.8,0.84838,2,3,-51.69,-41.72,0.15354,1,-41.76,362.08,0.84646,2,3,-24.77,-36.63,0.17823,1,-14.84,367.17,0.82177,2,3,-50.31,-176.6,0.24,1,-40.38,227.2,0.76,3,3,30.91,-186.62,0.2146,1,40.84,217.17,0.74002,0,73.71,1070.38,0.04537,2,3,-19.72,-242.28,0.24,1,-9.8,161.52,0.76,3,3,-56.8,-283.95,0.12264,1,-46.87,119.84,0.85365,2,-39.46,47.58,0.0237,3,3,-45.57,-291.61,0.11896,1,-35.65,112.19,0.85528,2,-47.11,36.36,0.02577,3,3,-7.31,-295.69,0.12362,1,2.62,108.11,0.84237,2,-51.19,-1.91,0.03401,3,3,6.98,-284.46,0.15259,1,16.91,119.33,0.82304,2,-39.97,-16.19,0.02437,2,1,-166.93,-38.26,0.81811,2,-197.56,167.64,0.18189,2,1,-162.24,-86.68,0.8576,2,-245.98,162.96,0.1424,2,1,-151.31,-139.79,0.90127,2,-299.09,152.02,0.09873,2,1,-154.31,-146.04,0.90915,2,-305.34,155.02,0.09085,2,1,-184.63,-99.74,0.87803,2,-259.04,185.34,0.12197,2,1,-195.28,-91.54,0.87361,2,-250.84,195.99,0.12639,2,1,-132.25,-31.44,0.83543,2,-190.74,132.97,0.16457,2,1,76.2,-50.29,0.84,2,-209.59,-75.48,0.16,2,1,-24.7,-78.01,0.84,2,-237.31,25.41,0.16],"hull":138,"edges":[0,274,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,250,282,282,284,284,286,286,288,288,32,290,292,292,294,294,296,296,298,298,300,300,290],"width":1016,"height":1944},"BeachScene/Sulli sit 2":{"type":"mesh","uvs":[0.62879,0.03965,0.65793,0.04428,0.67276,0.05058,0.67715,0.05835,0.67437,0.06851,0.67804,0.06821,0.6923,0.07687,0.69501,0.08754,0.69506,0.10799,0.69042,0.11609,0.69267,0.12085,0.69591,0.14051,0.68729,0.14942,0.66868,0.16748,0.66238,0.16834,0.64867,0.19294,0.66967,0.1959,0.78033,0.21439,0.79122,0.22053,0.80967,0.2406,0.83646,0.30287,0.82511,0.31481,0.79706,0.32625,0.7947,0.36249,0.78702,0.38803,0.78956,0.39315,0.80218,0.39329,0.80109,0.39735,0.78538,0.39303,0.77487,0.41335,0.75954,0.43481,0.76017,0.45435,0.76465,0.4944,0.76606,0.52616,0.76907,0.53765,0.77414,0.54238,0.79328,0.55082,0.80943,0.55022,0.84175,0.56384,0.83543,0.56804,0.82132,0.56809,0.81394,0.56827,0.81099,0.57715,0.79527,0.57731,0.78307,0.5686,0.77701,0.56969,0.76035,0.56729,0.76047,0.5777,0.7564,0.58755,0.7081,0.61546,0.66373,0.62817,0.66579,0.63067,0.6658,0.65398,0.66095,0.67408,0.6436,0.72046,0.61462,0.79385,0.60586,0.81828,0.59325,0.83072,0.54882,0.83708,0.54746,0.8392,0.55609,0.85897,0.5617,0.89337,0.56378,0.90204,0.57019,0.92255,0.57002,0.93677,0.5562,0.94946,0.52889,0.96894,0.50935,0.9798,0.46473,0.97973,0.45309,0.97304,0.42563,0.93233,0.42172,0.92205,0.41606,0.9178,0.38704,0.92883,0.34357,0.95036,0.30717,0.95986,0.29179,0.96084,0.25505,0.95807,0.24395,0.95629,0.23572,0.94876,0.23954,0.93894,0.26641,0.92972,0.27072,0.92676,0.28302,0.91327,0.3097,0.90035,0.32727,0.88743,0.32939,0.88428,0.36751,0.85336,0.37426,0.85052,0.36672,0.83093,0.36213,0.82553,0.32382,0.82537,0.30355,0.79477,0.26142,0.73902,0.21153,0.70075,0.17385,0.66882,0.14011,0.63097,0.14115,0.59763,0.1798,0.57625,0.19119,0.5666,0.24135,0.53269,0.22609,0.53211,0.21587,0.52728,0.20872,0.51581,0.17533,0.43763,0.16499,0.39546,0.16658,0.36975,0.16984,0.35348,0.19033,0.33107,0.20651,0.31697,0.2431,0.29106,0.2853,0.24794,0.31254,0.22385,0.33385,0.21412,0.36186,0.20799,0.46134,0.19586,0.46839,0.19415,0.48087,0.19215,0.48839,0.18675,0.48514,0.17377,0.48471,0.15185,0.47777,0.1511,0.46872,0.12756,0.46907,0.11368,0.47318,0.10185,0.47664,0.09947,0.47574,0.07368,0.48182,0.06542,0.50544,0.05819,0.50839,0.05285,0.52875,0.04054,0.56897,0.03623,0.59406,0.03689,0.3766,0.32207,0.39758,0.39657,0.38447,0.46856,0.32416,0.49927,0.3093,0.49071,0.26473,0.49625,0.24987,0.37493,0.31542,0.37392,0.30838,0.63426,0.44687,0.76196,0.50857,0.60781,0.52771,0.21237,0.55577,0.21843,0.58909,0.21843,0.61891,0.20463,0.51683,0.14144,0.52882,0.13966,0.5466,0.14085,0.55156,0.14418,0.55383,0.14668,0.54412,0.14954,0.52903,0.14859,0.59765,0.1512,0.60571,0.14692,0.62452,0.14716,0.6363,0.15204,0.62369,0.15406,0.60984,0.15478,0.51167,0.13406,0.52386,0.13013,0.54391,0.13192,0.5559,0.13597,0.59827,0.14394,0.627,0.1424,0.64374,0.14835,0.57526,0.17896,0.58504,0.11774,0.51573,0.1628,0.62968,0.17088,0.43835,0.32364,0.68016,0.33431,0.55041,0.36586],"triangles":[149,162,163,150,163,164,151,150,164,149,163,150,154,149,150,161,162,149,157,156,166,136,100,138,103,104,138,136,135,143,138,137,136,136,137,135,44,46,36,46,33,34,46,34,35,46,35,36,32,46,173,31,173,30,30,173,29,27,25,26,21,22,20,24,173,23,137,140,135,174,46,135,138,104,139,105,106,139,139,107,108,137,139,140,109,110,140,139,109,140,134,172,174,140,133,134,174,146,173,112,113,114,170,120,148,147,146,168,147,168,171,14,158,167,160,171,168,148,149,154,171,159,158,168,155,160,153,152,168,171,160,159,3,1,2,169,132,0,1,4,0,1,3,4,8,9,169,157,166,167,9,166,169,156,165,166,155,165,156,166,165,169,169,131,132,128,169,125,128,125,126,169,128,131,128,129,130,130,131,128,127,128,126,169,162,125,163,162,169,164,163,169,165,164,169,152,151,164,165,152,164,155,152,165,8,169,4,10,167,166,10,166,9,8,4,7,6,4,5,6,7,4,0,4,169,153,154,150,153,150,151,153,151,152,158,157,167,157,160,156,159,157,158,159,160,157,155,156,160,168,152,155,148,161,149,167,10,11,153,170,154,168,170,153,170,148,154,171,158,14,118,170,168,118,119,170,145,144,168,144,118,168,168,146,145,123,124,125,162,123,125,161,122,123,162,161,123,12,167,11,120,121,122,161,120,122,148,120,161,13,167,12,13,14,167,119,120,170,15,171,14,147,171,15,117,118,144,116,117,144,115,116,144,144,172,115,172,144,145,18,19,17,173,16,17,174,145,146,147,15,16,146,147,16,173,146,16,115,172,114,133,112,114,111,112,133,172,133,114,110,111,133,174,172,145,134,133,172,140,110,133,139,108,109,135,140,134,174,135,134,139,106,107,104,105,139,19,173,17,174,173,46,20,22,19,22,173,19,23,173,22,28,173,24,28,24,25,29,173,28,28,25,27,32,173,31,38,40,37,41,37,40,36,37,41,46,32,33,39,40,38,44,36,41,41,43,44,42,43,41,137,138,139,100,101,102,102,103,100,138,100,103,45,46,44,48,46,47,143,46,50,46,143,135,48,49,46,49,50,46,141,136,143,141,100,136,99,100,141,98,99,141,96,98,141,98,96,97,95,96,141,52,53,143,50,52,143,52,50,51,94,95,141,54,143,53,93,94,141,142,141,143,142,143,54,93,141,142,55,142,54,92,93,142,55,58,142,90,91,92,142,90,92,55,56,58,89,90,142,142,58,89,56,57,58,59,89,58,88,89,59,60,72,88,60,88,59,72,60,61,71,72,61,87,88,72,86,87,72,85,86,72,62,71,61,70,71,62,73,85,72,84,85,73,63,70,62,63,65,70,64,65,63,74,84,73,83,84,74,82,83,74,80,77,79,78,79,77,81,77,80,75,82,74,76,81,82,76,77,81,82,75,76,66,70,65,69,70,66,67,68,69,66,67,69],"vertices":[2,1,38.44,370.18,0.91583,3,28.51,-33.62,0.08417,2,1,62.32,363.59,0.92797,3,52.39,-40.2,0.07203,2,1,74.48,354.63,0.9261,3,64.55,-49.17,0.0739,2,1,78.07,343.57,0.91043,3,68.14,-60.22,0.08957,2,1,75.79,329.13,0.88169,3,65.87,-74.67,0.11831,2,1,78.8,329.54,0.88944,3,68.88,-74.25,0.11056,2,1,90.49,317.23,0.90721,3,80.56,-86.57,0.09279,2,1,92.7,302.05,0.90828,3,82.77,-101.74,0.09172,2,1,92.75,272.95,0.90866,3,82.82,-130.84,0.09134,2,1,88.95,261.42,0.89457,3,79.02,-142.37,0.10543,2,1,90.79,254.65,0.89757,3,80.86,-149.14,0.10243,2,1,93.44,226.67,0.9118,3,83.51,-177.12,0.0882,2,1,86.38,214,0.89985,3,76.45,-189.79,0.10015,2,1,71.13,188.31,0.89071,3,61.2,-215.49,0.10929,2,1,65.97,187.09,0.881,3,56.04,-216.71,0.119,2,1,54.73,152.08,0.91278,3,44.81,-251.71,0.08722,3,1,71.94,147.87,0.95192,2,-11.43,-71.23,0.00822,3,62.01,-255.92,0.03986,2,1,162.62,121.57,0.98279,2,-37.73,-161.91,0.01721,2,1,171.54,112.83,0.97709,2,-46.47,-170.83,0.02291,2,1,186.67,84.28,0.96242,2,-75.02,-185.96,0.03758,2,1,208.62,-4.31,0.96812,2,-163.61,-207.91,0.03188,2,1,199.32,-21.3,0.95794,2,-180.6,-198.61,0.04206,2,1,176.33,-37.58,0.94,2,-196.88,-175.62,0.06,2,1,174.4,-89.14,0.94,2,-248.44,-173.69,0.06,2,1,168.11,-125.49,0.94,2,-284.79,-167.4,0.06,2,1,170.19,-132.77,0.94,2,-292.07,-169.48,0.06,2,1,180.53,-132.97,0.94,2,-292.27,-179.82,0.06,2,1,179.64,-138.74,0.94,2,-298.04,-178.92,0.06,2,1,166.76,-132.59,0.94,2,-291.89,-166.05,0.06,2,1,158.15,-161.51,0.94,2,-320.81,-157.44,0.06,2,1,145.58,-192.04,0.94062,2,-351.34,-144.87,0.05938,2,1,146.1,-219.84,0.94,2,-379.14,-145.39,0.06,3,0,182.65,576.39,0.14632,1,149.78,-276.82,0.80294,2,-436.12,-149.07,0.05074,3,0,183.8,531.21,0.25627,1,150.93,-322,0.71393,2,-481.3,-150.22,0.0298,3,0,186.27,514.86,0.2182,1,153.4,-338.35,0.75374,2,-497.65,-152.68,0.02806,3,0,190.42,508.13,0.17002,1,157.55,-345.08,0.80094,2,-504.38,-156.84,0.02904,3,0,206.1,496.12,0.03233,1,173.23,-357.09,0.9332,2,-516.39,-172.52,0.03447,2,1,186.47,-356.24,0.95599,2,-515.54,-185.76,0.04401,3,0,245.83,477.6,0.13587,1,212.95,-375.61,0.83373,2,-534.91,-212.24,0.0304,3,0,240.65,471.62,0.2372,1,207.78,-381.6,0.73907,2,-540.9,-207.06,0.02373,3,0,229.08,471.54,0.24312,1,196.21,-381.67,0.73502,2,-540.97,-195.5,0.02186,3,0,223.03,471.29,0.26567,1,190.16,-381.92,0.71449,2,-541.22,-189.45,0.01984,3,0,220.62,458.66,0.50373,1,187.75,-394.55,0.49049,2,-553.85,-187.04,0.00578,3,0,207.74,458.43,0.58353,1,174.87,-394.78,0.41594,2,-554.08,-174.15,0.00053,3,0,197.74,470.82,0.47644,1,164.87,-382.39,0.51664,2,-541.69,-164.16,0.00693,3,0,192.78,469.27,0.55744,1,159.9,-383.95,0.44021,2,-543.25,-159.19,0.00235,2,0,179.12,472.68,0.68828,1,146.25,-380.53,0.31172,2,0,179.22,457.88,0.8793,1,146.35,-395.33,0.1207,1,0,175.89,443.86,1,1,0,136.3,404.15,1,1,0,99.94,386.07,1,1,0,101.63,382.52,1,1,0,101.64,349.35,1,1,0,97.67,320.75,1,1,0,83.45,254.76,1,1,0,59.7,150.35,1,1,0,52.52,115.58,1,1,0,42.19,97.88,1,1,0,5.78,88.84,1,1,0,4.66,85.82,1,1,0,11.74,57.7,1,1,0,16.33,8.74,1,1,0,18.04,-3.58,1,1,0,23.29,-32.76,1,1,0,23.15,-53,1,1,0,11.83,-71.05,1,1,0,-10.55,-98.76,1,1,0,-26.57,-114.22,1,1,0,-63.13,-114.12,1,1,0,-72.67,-104.61,1,1,0,-95.17,-46.68,1,1,0,-98.38,-32.06,1,1,0,-103.01,-26.01,1,1,0,-126.79,-41.7,1,1,0,-162.42,-72.33,1,1,0,-192.24,-85.85,1,1,0,-204.84,-87.25,1,1,0,-234.95,-83.3,1,1,0,-244.05,-80.77,1,1,0,-250.79,-70.06,1,1,0,-247.67,-56.09,1,1,0,-225.64,-42.96,1,1,0,-222.11,-38.75,1,1,0,-212.03,-19.56,1,1,0,-190.17,-1.18,1,1,0,-175.77,17.2,1,1,0,-174.03,21.68,1,1,0,-142.8,65.67,1,1,0,-137.26,69.71,1,1,0,-143.44,97.59,1,1,0,-147.21,105.27,1,1,0,-178.6,105.49,1,1,0,-195.21,149.04,1,1,0,-229.73,228.35,1,1,0,-270.62,282.8,1,1,0,-301.5,328.23,1,1,0,-329.14,382.09,1,1,0,-328.29,429.52,1,1,0,-296.62,459.93,1,1,0,-287.29,473.67,1,3,0,-246.18,521.92,0.87795,1,-279.05,-331.29,0.11175,2,-490.59,279.76,0.0103,3,0,-258.68,522.74,0.96309,1,-291.55,-330.47,0.03146,2,-489.77,292.26,0.00545,3,0,-267.06,529.61,0.93663,1,-299.93,-323.61,0.05645,2,-482.91,300.64,0.00692,3,0,-272.92,545.93,0.77458,1,-305.79,-307.28,0.2093,2,-466.58,306.5,0.01611,2,1,-333.15,-196.05,0.97582,2,-355.35,333.86,0.02418,2,1,-341.62,-136.05,0.9762,2,-295.35,342.33,0.0238,2,1,-340.32,-99.47,0.98112,2,-258.77,341.03,0.01888,2,1,-337.65,-76.33,0.97209,2,-235.63,338.36,0.02791,2,1,-320.86,-44.44,0.95418,2,-203.74,321.57,0.04582,2,1,-307.6,-24.38,0.9451,2,-183.68,308.32,0.0549,2,1,-277.61,12.48,0.94,2,-146.82,278.33,0.06,2,1,-243.04,73.84,0.94,2,-85.46,243.75,0.06,2,1,-220.71,108.1,0.96015,2,-51.2,221.42,0.03985,2,1,-203.25,121.95,0.9737,2,-37.35,203.96,0.0263,2,1,-180.3,130.67,0.98345,2,-28.63,181.01,0.01655,1,1,-98.78,147.94,1,1,1,-93,150.37,1,2,1,-82.77,153.22,0.98153,3,-92.7,-250.58,0.01847,2,1,-76.61,160.89,0.9594,3,-86.54,-242.9,0.0406,2,1,-79.27,179.35,0.93477,3,-89.2,-224.44,0.06523,2,1,-79.62,210.54,0.90651,3,-89.55,-193.25,0.09349,2,1,-85.31,211.62,0.9219,3,-95.24,-192.17,0.0781,2,1,-92.73,245.11,0.94203,3,-102.66,-158.68,0.05797,2,1,-92.44,264.86,0.94125,3,-102.37,-138.94,0.05875,2,1,-89.07,281.69,0.93367,3,-99,-122.1,0.06633,2,1,-86.24,285.08,0.92756,3,-96.17,-118.71,0.07244,2,1,-86.98,321.77,0.96488,3,-96.91,-82.02,0.03512,2,1,-82,333.52,0.96871,3,-91.92,-70.28,0.03129,2,1,-62.64,343.81,0.9376,3,-72.56,-59.99,0.0624,2,1,-60.22,351.41,0.94186,3,-70.15,-52.39,0.05814,2,1,-43.53,368.92,0.93649,3,-53.46,-34.88,0.06351,2,1,-10.58,375.04,0.91285,3,-20.51,-28.75,0.08716,2,1,9.98,374.11,0.90828,3,0.05,-29.68,0.09172,2,1,-168.22,-31.64,0.91746,2,-190.94,168.93,0.08254,2,1,-151.03,-137.64,0.88174,2,-296.94,151.74,0.11826,2,1,-161.77,-240.06,0.89794,2,-399.36,162.48,0.10206,3,0,-178.32,569.47,0.23192,1,-211.19,-283.75,0.70808,2,-443.05,211.9,0.06,2,1,-223.37,-271.57,0.94,2,-430.87,224.08,0.06,2,1,-259.89,-279.45,0.94,2,-438.75,260.61,0.06,2,1,-272.07,-106.84,0.94,2,-266.14,272.78,0.06,2,1,-218.35,-105.41,0.95471,2,-264.71,219.06,0.04529,1,0,-191.25,377.4,1,1,0,-77.77,195.71,1,1,0,-27.2,415.03,1,2,1,-44.39,124.44,0.94119,3,-54.32,-279.35,0.05881,2,1,-21.4,115.82,0.93594,3,-31.32,-287.98,0.06406,2,1,5.91,115.82,0.93055,3,-4.02,-287.98,0.06945,3,1,30.35,135.46,0.89519,2,-23.84,-29.63,0.00085,3,20.42,-268.34,0.10396,3,1,-53.3,225.35,0.6052,3,-63.23,-178.44,0.1068,4,239.89,-91.65,0.28799,3,1,-43.48,227.9,0.1972,3,-53.41,-175.9,0.0348,4,236.97,-81.45,0.768,3,1,-28.91,226.2,0.19718,3,-38.84,-177.59,0.0348,4,238.35,-66.19,0.76802,3,1,-24.85,221.46,0.5916,3,-34.78,-182.33,0.1044,4,243.2,-61.81,0.304,2,1,-22.98,217.9,0.85,3,-32.91,-185.89,0.15,2,1,-30.94,213.84,0.85,3,-40.87,-189.96,0.15,2,1,-43.31,215.19,0.85,3,-53.24,-188.6,0.15,2,1,12.92,211.47,0.85,3,3,-192.33,0.15,3,1,19.53,217.56,0.4216,3,9.6,-186.23,0.0744,5,235.03,37.08,0.504,3,1,34.94,217.22,0.3876,3,25.01,-186.57,0.0684,5,235.99,52.46,0.544,2,1,44.6,210.28,0.85,3,34.67,-193.51,0.15,2,1,34.27,207.4,0.85,3,24.34,-196.39,0.15,2,1,22.92,206.38,0.85,3,12.99,-197.41,0.15,3,1,-57.54,235.86,0.5916,3,-67.47,-167.94,0.1044,4,229.03,-96.35,0.304,3,1,-47.54,241.45,0.4352,3,-57.47,-162.35,0.0768,4,222.92,-86.06,0.488,3,1,-31.11,238.9,0.4352,3,-41.04,-164.89,0.0768,4,225.14,-68.83,0.488,3,1,-21.29,233.15,0.4352,3,-31.22,-170.65,0.0768,4,230.89,-58.41,0.488,3,1,13.43,221.8,0.6256,3,3.5,-182,0.1104,5,230.55,31.16,0.264,3,1,36.98,224,0.47601,3,27.05,-179.79,0.084,5,229.31,54.77,0.43999,3,1,50.69,215.53,0.7616,3,40.77,-188.26,0.1344,5,238.33,68.13,0.104,2,1,-5.43,171.97,0.85,3,-15.35,-231.82,0.15,2,1,2.59,259.08,0.85,3,-7.34,-144.71,0.15,2,1,-54.21,194.97,0.85365,3,-64.13,-208.82,0.14635,2,1,39.17,183.47,0.85,3,29.25,-220.32,0.15,2,1,-117.61,-33.87,0.84162,2,-193.17,118.33,0.15838,2,1,80.54,-49.06,0.85827,2,-208.36,-79.82,0.14173,2,1,-25.79,-93.93,0.83881,2,-253.23,26.5,0.16119],"hull":133,"edges":[0,264,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,266,282,284,284,286,286,282,236,288,288,290,290,292,292,294,294,30,296,298,298,300,300,302,302,304,304,306,306,308,308,296,310,312,312,314,314,316,316,318,318,320,320,310,322,324,324,326,326,328,330,332,332,334],"width":1016,"height":1764},"CaveScene/H-b3-statue stand":{"type":"mesh","uvs":[0.46547,0.07194,0.50015,0.07452,0.52337,0.07741,0.54737,0.07683,0.57365,0.0791,0.58225,0.0818,0.59294,0.08751,0.60175,0.09776,0.61371,0.10187,0.62724,0.11481,0.64799,0.12445,0.65698,0.13516,0.65493,0.15138,0.65359,0.15023,0.65349,0.16613,0.65638,0.17395,0.67168,0.18293,0.6744,0.1925,0.66779,0.19709,0.66734,0.21516,0.65517,0.23585,0.62677,0.24962,0.60628,0.25149,0.60432,0.25266,0.595,0.26486,0.59631,0.27836,0.60858,0.29875,0.59646,0.29887,0.60579,0.31358,0.61151,0.31778,0.64704,0.32641,0.64998,0.32826,0.72026,0.3349,0.75461,0.3392,0.78773,0.35059,0.81272,0.36321,0.91243,0.44671,0.94328,0.47098,0.95166,0.47673,0.96762,0.478,0.9785,0.48446,0.98262,0.48886,0.99594,0.50796,0.99524,0.51861,1,0.52857,1,0.53274,0.99677,0.5408,0.98027,0.56314,0.9597,0.58569,0.93553,0.60752,0.80965,0.68931,0.80042,0.69665,0.79231,0.70763,0.79247,0.75853,0.77175,0.78262,0.76718,0.8015,0.76875,0.82481,0.76233,0.85903,0.74699,0.90604,0.73324,0.94388,0.72475,0.9618,0.72505,0.97208,0.71709,0.99188,0.73743,1,0.19927,1,0.19293,0.89207,0.19231,0.83183,0.19606,0.82333,0.19218,0.80473,0.19824,0.78023,0.20857,0.76341,0.20885,0.75939,0.20679,0.75609,0.2086,0.70282,0.19248,0.68667,0.08511,0.61723,0.05356,0.59332,0.03699,0.57848,0.00952,0.54809,0,0.53125,0,0.52524,0.00397,0.51609,0.00343,0.50406,0.02449,0.47542,0.05034,0.47197,0.05755,0.46596,0.12745,0.41092,0.15397,0.38927,0.184,0.36153,0.21706,0.34468,0.23777,0.33926,0.24512,0.33526,0.2852,0.33056,0.34103,0.32537,0.35167,0.32353,0.36423,0.31914,0.36669,0.31885,0.38636,0.30222,0.38243,0.29722,0.36139,0.28554,0.34572,0.27583,0.33295,0.26115,0.33044,0.25564,0.32096,0.23494,0.3092,0.22907,0.29924,0.19102,0.28582,0.16199,0.29358,0.13073,0.2998,0.12421,0.31307,0.11842,0.3281,0.10741,0.37355,0.08758,0.39735,0.08149,0.41613,0.08104,0.44809,0.07338,0.4497,0.20321,0.47666,0.19966,0.50764,0.20292,0.52255,0.20321,0.50477,0.21092,0.4801,0.21447,0.45314,0.21359,0.4388,0.21092,0.37739,0.21616,0.36675,0.21135,0.34592,0.21067,0.33085,0.21639,0.32198,0.21845,0.33262,0.22166,0.35035,0.22395,0.36985,0.22211,0.3271,0.20301,0.34647,0.20063,0.37323,0.20492,0.44427,0.19586,0.47979,0.18752,0.50517,0.1911,0.29097,0.50213,0.69717,0.50728,0.4974,0.44021,0.42415,0.30089,0.40917,0.24758,0.39419,0.1762,0.5024,0.24328,0.35923,0.25274],"triangles":[138,73,137,51,52,73,137,139,138,51,73,138,138,139,32,31,29,30,31,139,29,73,74,137,51,138,50,50,138,49,74,75,137,139,92,93,93,94,139,75,76,137,48,49,138,38,138,37,48,138,47,37,138,36,139,94,96,94,95,96,76,77,137,137,84,85,78,84,137,43,47,38,40,38,39,138,38,47,137,77,78,82,83,84,47,43,46,41,38,40,43,38,42,79,81,78,84,78,81,46,43,45,43,44,45,79,80,81,42,38,41,84,81,82,138,35,36,35,32,34,34,32,33,32,35,138,32,139,31,139,96,140,96,97,140,85,86,137,86,87,137,87,88,137,137,88,90,88,89,90,137,90,92,90,91,92,139,137,92,139,140,29,121,143,141,29,140,28,28,140,27,27,143,25,25,143,24,140,143,27,121,120,143,97,98,140,98,141,140,121,141,122,140,141,143,27,25,26,98,99,141,100,144,99,99,144,141,100,101,144,24,143,23,143,22,23,118,143,119,101,102,144,144,103,129,129,103,128,103,144,102,144,130,141,144,129,130,22,143,118,21,22,20,19,20,22,130,123,141,141,123,122,143,120,119,19,22,118,128,104,127,128,103,104,104,105,127,129,126,125,129,124,130,130,124,123,127,126,128,129,128,126,127,131,126,127,105,131,124,133,123,123,133,122,19,118,18,121,116,120,120,116,119,122,115,121,121,115,116,133,124,132,122,134,115,122,133,134,119,117,118,119,116,117,133,142,134,133,132,142,18,118,15,131,105,132,14,15,118,118,117,136,132,105,142,18,16,17,18,15,16,134,142,135,118,136,14,14,136,13,13,136,9,9,7,8,9,136,7,136,135,7,135,142,113,113,111,112,105,106,142,7,2,6,5,6,3,5,3,4,6,2,3,135,2,7,2,135,1,135,113,1,113,114,1,114,0,1,106,107,142,142,107,109,107,108,109,109,110,142,110,111,142,113,142,111,10,13,9,12,13,11,13,10,11,124,125,132,126,131,125,129,125,124,125,131,132,115,134,116,116,136,117,116,135,136,116,134,135,64,62,63,62,64,60,62,60,61,60,64,65,60,65,59,59,65,58,67,57,58,67,58,66,66,58,65,57,67,56,70,56,67,70,67,69,54,55,70,70,55,56,67,68,69,54,70,71,73,52,54,54,52,53,72,73,71,73,54,71],"vertices":[2,3,85.96,126.5,0.07858,1,95.89,530.29,0.92142,2,3,103.26,124.01,0.08631,1,113.18,527.81,0.91369,2,3,114.83,121.22,0.09183,1,124.76,525.01,0.90817,2,3,126.79,121.78,0.08984,1,136.72,525.57,0.91016,2,3,139.9,119.59,0.08828,1,149.82,523.38,0.91172,2,3,144.19,116.98,0.08934,1,154.12,520.77,0.91066,2,3,149.51,111.47,0.09259,1,159.44,515.26,0.90741,2,3,153.91,101.58,0.10009,1,163.84,505.37,0.89991,2,3,159.87,97.61,0.09928,1,169.8,501.41,0.90072,2,3,166.62,85.12,0.10414,1,176.55,488.92,0.89586,2,3,176.96,75.82,0.08978,1,186.89,479.61,0.91022,2,3,181.45,65.48,0.08451,1,191.37,469.27,0.91549,2,3,180.42,49.82,0.09201,1,190.35,453.62,0.90799,2,3,179.75,50.94,0.09352,1,189.68,454.73,0.90648,2,3,179.71,35.59,0.0944,1,189.63,439.38,0.9056,2,3,181.15,28.04,0.09158,1,191.07,431.83,0.90842,2,3,188.77,19.37,0.07143,1,198.7,423.17,0.92857,2,3,190.13,10.14,0.06527,1,200.06,413.94,0.93473,2,3,186.83,5.7,0.07127,1,196.76,409.5,0.92873,3,0,229.41,1245.27,0.01613,3,186.61,-11.73,0.06454,1,196.54,392.06,0.91933,3,0,223.34,1225.3,0.00295,3,180.54,-31.7,0.06712,1,190.47,372.09,0.92992,2,3,166.38,-44.99,0.08313,1,176.31,358.81,0.91687,2,3,156.17,-46.8,0.10184,1,166.1,356.99,0.89816,2,3,155.19,-47.93,0.10201,1,165.12,355.87,0.89799,2,3,150.54,-59.7,0.09306,1,160.47,344.09,0.90694,2,3,151.2,-72.73,0.06797,1,161.12,331.06,0.93203,2,3,157.31,-92.41,0.01924,1,167.24,311.38,0.98076,2,3,151.27,-92.53,0.0281,1,161.2,311.27,0.9719,1,1,165.85,297.08,1,1,1,168.7,293.02,1,2,2,125.39,-185.7,0.02611,1,186.42,284.69,0.97389,2,2,123.61,-187.17,0.03107,1,187.89,282.91,0.96893,2,2,117.2,-222.21,0.04305,1,222.93,276.5,0.95695,2,2,113.05,-239.34,0.03722,1,240.05,272.35,0.96278,2,2,102.06,-255.85,0.03543,1,256.56,261.36,0.96457,3,0,301.89,1102.38,0.02383,2,89.87,-268.31,0.03798,1,269.02,249.17,0.93818,3,0,351.6,1021.8,0.07026,2,9.28,-318.02,0.01307,1,318.73,168.58,0.91667,1,1,334.12,145.16,1,1,1,338.3,139.6,1,2,0,379.12,991.59,0.03752,1,346.25,138.38,0.96248,1,1,351.68,132.14,1,1,1,353.73,127.9,1,1,1,360.37,109.46,1,1,1,360.02,99.19,1,1,1,362.39,89.57,1,1,1,362.39,85.55,1,1,1,360.79,77.77,1,1,1,352.56,56.21,1,2,0,375.17,887.65,0.01278,1,342.3,34.44,0.98722,2,0,363.12,866.59,0.08351,1,330.25,13.37,0.91649,2,0,300.36,787.64,0.02264,1,267.49,-65.57,0.97736,2,0,295.76,780.56,0.13696,1,262.89,-72.65,0.86304,2,0,291.71,769.96,0.32818,1,258.84,-83.25,0.67182,1,0,291.8,720.84,1,1,0,281.46,697.59,1,1,0,279.19,679.37,1,1,0,279.97,656.86,1,1,0,276.77,623.84,1,1,0,269.12,578.47,1,1,0,262.26,541.94,1,1,0,258.03,524.65,1,1,0,258.18,514.73,1,1,0,254.21,495.62,1,1,0,264.35,487.78,1,1,0,-3.96,487.78,1,1,0,-7.12,591.95,1,1,0,-7.43,650.09,1,1,0,-5.56,658.29,1,1,0,-7.49,676.25,1,1,0,-4.47,699.89,1,1,0,0.68,716.13,1,1,0,0.82,720.01,1,1,0,-0.21,723.19,1,2,0,0.69,774.6,0.38715,1,-32.18,-78.61,0.61285,2,0,-7.35,790.19,0.10149,1,-40.22,-63.02,0.89851,1,1,-93.75,4,1,1,1,-109.48,27.07,1,1,1,-117.74,41.4,1,1,1,-131.44,70.74,1,1,1,-136.18,86.99,1,1,1,-136.18,92.79,1,1,1,-134.2,101.61,1,1,1,-134.47,113.23,1,1,1,-123.97,140.87,1,1,1,-111.08,144.2,1,1,1,-107.49,150,1,2,0,-39.77,1056.34,0.00573,1,-72.64,203.13,0.99427,2,0,-26.54,1077.24,0.37799,1,-59.42,224.02,0.62201,3,0,-11.57,1104.01,0.3267,2,91.49,45.16,0.0045,1,-44.44,250.79,0.6688,3,0,4.91,1120.27,0.16452,2,107.76,28.68,0.01782,1,-27.96,267.06,0.81766,3,0,15.24,1125.5,0.05067,2,112.98,18.35,0.02874,1,-17.63,272.28,0.92058,2,2,116.85,14.69,0.02777,1,-13.97,276.15,0.97223,2,2,121.39,-5.3,0.0461,1,6.01,280.68,0.9539,4,0,66.72,1138.9,0.02205,2,126.39,-33.13,0.05048,3,23.92,-118.11,0.0036,1,33.85,285.69,0.92387,4,0,72.02,1140.69,0.0759,2,128.17,-38.44,0.04555,3,29.23,-116.32,0.01312,1,39.15,287.47,0.86543,4,0,78.28,1144.91,0.04583,2,132.4,-44.7,0.03336,3,35.48,-112.09,0.02873,1,45.41,291.7,0.89208,4,0,79.51,1145.2,0.02865,2,132.69,-45.93,0.03226,3,36.71,-111.81,0.03041,1,46.64,291.99,0.90869,3,0,89.32,1161.25,0.07612,3,46.52,-95.76,0.07632,1,56.45,308.04,0.84756,3,0,87.36,1166.07,0.16032,3,44.56,-90.93,0.08668,1,54.49,312.86,0.75301,2,3,34.07,-79.66,0.10135,1,44,324.13,0.89865,2,3,26.26,-70.29,0.10742,1,36.19,333.5,0.89258,2,3,19.89,-56.12,0.11839,1,29.82,347.68,0.88161,2,3,18.64,-50.8,0.12308,1,28.57,352.99,0.87692,2,3,13.91,-30.82,0.13068,1,23.84,372.97,0.86932,2,3,8.05,-25.16,0.12476,1,17.98,378.63,0.87524,2,3,3.08,11.56,0.11819,1,13.01,415.36,0.88181,2,3,-3.61,39.59,0.10138,1,6.32,443.38,0.89862,2,3,0.26,69.76,0.0878,1,10.19,473.55,0.9122,2,3,3.36,76.05,0.08415,1,13.29,479.84,0.91585,2,3,9.98,81.64,0.08842,1,19.91,485.43,0.91158,2,3,17.47,92.26,0.08196,1,27.4,496.06,0.91804,2,3,40.13,111.4,0.07609,1,50.06,515.2,0.92391,2,3,52,117.28,0.07811,1,61.93,521.07,0.92189,2,3,61.36,117.71,0.08534,1,71.29,521.51,0.91466,2,3,77.3,125.11,0.07752,1,87.22,528.9,0.92248,3,3,78.1,-0.2,0.06608,5,51.95,113.1,0.528,1,88.03,403.59,0.40592,3,3,91.54,3.23,0.02352,5,49.07,126.67,0.832,1,101.47,407.02,0.14448,3,3,106.99,0.08,0.08624,5,52.84,141.98,0.384,1,116.91,403.88,0.52976,3,3,114.42,-0.2,0.11984,5,53.43,149.4,0.144,1,124.35,403.59,0.73616,2,3,105.56,-7.64,0.14,1,115.48,396.16,0.86,2,3,93.26,-11.07,0.14,1,103.19,392.72,0.86,2,3,79.82,-10.21,0.14,1,89.74,393.58,0.86,3,3,72.67,-7.64,0.11872,5,59.15,107.37,0.152,1,82.59,396.16,0.72928,3,3,42.05,-12.7,0.0952,4,63.92,13.9,0.31999,1,51.98,391.1,0.58481,3,3,36.74,-8.06,0.04592,4,59.21,8.23,0.672,1,46.67,395.74,0.28208,3,3,26.36,-7.39,0.028,4,58.8,-2.64,0.79999,1,36.28,396.4,0.17201,3,3,18.84,-12.92,0.07675,4,64.77,-10.34,0.44802,1,28.77,390.87,0.47524,3,3,14.42,-14.91,0.09389,4,66.97,-14.9,0.296,1,24.35,388.89,0.61011,3,3,19.73,-18,0.12208,4,70.06,-9.28,0.128,1,29.65,385.79,0.74992,2,3,28.57,-20.21,0.14,1,38.49,383.58,0.86,3,3,38.29,-18.44,0.13776,4,70.02,10.13,0.01601,1,48.22,385.35,0.84623,3,3,16.97,-0.01,0.0962,4,51.33,-12.64,0.29601,1,26.9,403.79,0.60779,3,3,26.63,2.29,0.09856,4,48.67,-2.61,0.29601,1,36.56,406.09,0.60544,3,3,39.97,-1.85,0.09856,4,52.64,11.44,0.29601,1,49.9,401.95,0.60544,3,3,75.39,6.89,0.1008,5,44.75,110.69,0.28,1,85.32,410.69,0.6192,3,3,93.1,14.94,0.09844,5,37.43,128.71,0.28,1,103.03,418.74,0.62156,3,3,105.75,11.49,0.1008,5,41.39,141.21,0.28,1,115.68,415.29,0.6192,3,0,41.76,968.31,0.03876,2,-44.2,-8.18,0.11473,1,8.89,115.1,0.84651,3,0,244.28,963.33,0.05504,2,-49.18,-210.7,0.14799,1,211.41,110.12,0.79697,3,0,144.68,1028.07,0.02909,2,15.56,-111.1,0.13526,1,111.81,174.86,0.83565,3,0,108.16,1162.53,0.07338,3,65.36,-94.48,0.09031,1,75.29,309.32,0.83631,2,3,57.89,-43.02,0.14,1,67.82,360.77,0.86,2,3,50.42,25.87,0.14,1,60.35,429.67,0.86,2,3,104.37,-38.87,0.14,1,114.3,364.93,0.86,2,3,32.99,-48,0.14,1,42.92,355.8,0.86],"hull":115,"edges":[0,228,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,230,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,246,262,264,264,266,268,270,270,272,202,204,204,206],"width":857,"height":1659},"CaveScene/d-bl3-fear TF":{"type":"mesh","uvs":[0.6562,0.04138,0.6612,0.04323,0.67065,0.05428,0.6849,0.08158,0.69129,0.08363,0.68652,0.05879,0.6913,0.05474,0.69643,0.05381,0.70447,0.06357,0.7342,0.11745,0.74045,0.1241,0.77129,0.14816,0.78726,0.15989,0.7971,0.17007,0.80597,0.18514,0.82139,0.20213,0.84758,0.22232,0.86548,0.23231,0.90581,0.26367,0.91801,0.27672,0.94816,0.30885,0.98196,0.36815,0.9881,0.38805,0.98031,0.41606,0.98324,0.41771,0.97503,0.43036,0.96879,0.43967,0.95596,0.44812,0.92829,0.47317,0.92134,0.48174,0.92533,0.48542,0.86978,0.5287,0.84306,0.55377,0.8364,0.56314,0.83454,0.57003,0.81727,0.58039,0.75947,0.6456,0.73743,0.67355,0.7239,0.69626,0.71033,0.73954,0.68288,0.81959,0.66579,0.85873,0.6592,0.87294,0.65268,0.89126,0.64538,0.9269,0.64269,0.95769,0.64351,0.97391,0.64496,1,0.33315,1,0.34016,0.98366,0.33191,0.95864,0.33136,0.9399,0.32342,0.91589,0.30914,0.88585,0.30479,0.87247,0.29491,0.82863,0.29337,0.81221,0.26533,0.72479,0.26397,0.72339,0.24851,0.66796,0.23761,0.64805,0.20519,0.63538,0.16089,0.62894,0.14861,0.6227,0.14244,0.61631,0.10028,0.60493,0.07785,0.59748,0.06876,0.5911,0.06006,0.58233,0.05096,0.57812,0.03938,0.56772,0.03362,0.55748,0.02678,0.52062,0.02598,0.50788,0.06291,0.44453,0.09406,0.40796,0.11999,0.3862,0.14818,0.3657,0.17024,0.35189,0.19045,0.33561,0.19586,0.33019,0.2078,0.31627,0.21346,0.30603,0.22508,0.29353,0.23345,0.28771,0.27419,0.25577,0.28478,0.2429,0.29899,0.21285,0.30869,0.19632,0.31612,0.18775,0.32214,0.18738,0.32611,0.19293,0.32107,0.21604,0.32918,0.21241,0.34137,0.18923,0.34834,0.17886,0.35555,0.17399,0.36449,0.17842,0.36705,0.18424,0.36519,0.19595,0.34673,0.23672,0.35735,0.23103,0.37705,0.19971,0.37818,0.192,0.38825,0.17169,0.39673,0.1625,0.39616,0.15906,0.38843,0.1537,0.38722,0.15108,0.38933,0.14937,0.40504,0.15321,0.40899,0.15011,0.42013,0.12978,0.42974,0.12091,0.45146,0.10848,0.47583,0.09782,0.47791,0.09836,0.48418,0.09988,0.51471,0.09988,0.52576,0.10121,0.52762,0.10459,0.52716,0.11195,0.53781,0.10122,0.54365,0.10064,0.54331,0.10988,0.58178,0.11424,0.58354,0.11385,0.58136,0.09784,0.58499,0.09198,0.59146,0.0909,0.6016,0.09661,0.64783,0.13222,0.64326,0.12066,0.63507,0.10795,0.63063,0.10164,0.62317,0.09321,0.61273,0.07515,0.6139,0.06169,0.627,0.05595,0.65273,0.09278,0.66361,0.10218,0.64634,0.05801,0.64606,0.04692,0.65014,0.04363,0.52401,0.70484,0.35694,0.73744,0.65034,0.75839,0.55173,0.3858,0.53943,0.26381,0.45682,0.39283,0.58776,0.38631,0.47319,0.32959,0.4852,0.31489,0.49894,0.30965,0.51109,0.31594,0.5159,0.32824,0.50883,0.33342,0.48176,0.33505,0.55901,0.32838,0.56935,0.31569,0.58373,0.31684,0.59358,0.32405,0.59787,0.33588,0.5815,0.34153,0.56921,0.34106,0.5923,0.33988,0.49779,0.3377,0.47171,0.30449,0.50947,0.29986,0.52161,0.2937,0.56476,0.29884,0.58544,0.305,0.60073,0.3086,0.60794,0.25141,0.62506,0.37478,0.6674,0.26228,0.81731,0.33428,0.67917,0.47051,0.58297,0.50151,0.35341,0.38606,0.41143,0.44182,0.4059,0.49864,0.18674,0.48707,0.24015,0.43446],"triangles":[158,170,159,161,160,172,161,163,160,160,163,159,160,159,171,160,171,172,159,170,171,154,168,169,151,167,152,153,167,168,152,167,153,166,152,153,156,153,154,153,168,154,155,154,169,42,43,144,41,146,40,39,146,38,54,55,145,55,56,145,57,58,59,38,178,37,37,178,177,32,35,177,32,177,176,31,32,176,31,29,30,28,29,176,26,27,21,21,23,26,27,20,21,27,176,20,20,176,19,176,17,18,15,176,175,176,15,16,12,14,175,12,13,14,4,8,9,8,4,5,5,6,8,6,7,8,131,132,140,132,139,140,132,133,139,133,134,139,134,135,139,135,136,138,135,138,139,125,126,173,173,131,175,173,126,131,148,125,173,148,124,125,162,172,174,172,171,173,171,170,173,170,148,173,148,121,124,178,147,150,150,164,163,150,147,164,147,158,164,147,155,158,156,154,155,155,169,158,167,111,148,149,178,181,180,179,149,149,179,151,179,101,167,60,61,182,62,182,61,62,63,64,67,68,66,69,70,71,74,66,68,74,68,72,72,73,74,182,183,181,182,75,76,179,183,84,183,77,78,79,80,183,80,81,183,85,179,84,179,100,101,93,100,92,86,92,100,101,102,167,87,88,92,167,102,105,104,105,102,102,103,104,167,105,111,105,110,111,111,114,148,113,111,112,117,114,116,116,114,115,114,111,113,114,117,148,121,117,118,121,118,119,121,148,117,99,100,93,94,99,93,99,94,95,98,99,96,96,99,95,92,88,91,91,89,90,89,91,88,98,96,97,105,106,110,107,109,106,106,109,110,107,108,109,121,119,120,86,100,85,86,87,92,179,85,100,183,81,84,83,84,81,81,82,83,78,79,183,76,77,182,182,77,183,74,75,182,74,182,66,64,65,182,65,66,182,72,68,69,71,72,69,182,62,64,181,60,182,59,60,181,59,181,57,149,181,180,183,179,181,181,179,180,178,149,166,166,147,178,147,166,156,147,156,155,149,157,166,149,151,157,179,167,151,157,152,166,166,153,156,157,151,152,144,181,178,178,150,174,150,165,174,165,162,174,150,163,165,161,165,163,163,164,159,164,158,159,165,161,162,162,161,172,158,169,170,168,167,148,169,168,148,169,148,170,174,172,173,175,174,173,124,121,122,131,126,130,130,126,129,129,127,128,129,126,127,124,122,123,10,175,131,10,131,9,9,140,4,4,140,3,131,140,9,3,140,2,138,136,137,2,140,141,1,141,143,1,143,0,2,141,1,141,142,143,175,10,11,12,175,11,15,175,14,176,174,175,176,16,17,19,176,18,177,174,176,176,27,28,23,21,22,176,29,31,23,25,26,25,23,24,34,35,33,32,33,35,36,177,35,177,178,174,37,177,36,178,38,146,144,145,181,146,144,178,181,145,57,44,145,144,56,57,145,42,144,146,40,146,39,42,146,41,53,54,145,47,49,46,47,48,49,46,49,45,145,45,51,45,145,44,51,45,49,49,50,51,51,52,145,43,44,144,52,53,145],"vertices":[1,1,61.88,712.85,1,1,1,65.33,711.73,1,1,1,71.85,705.06,1,1,1,81.67,688.58,1,1,1,86.08,687.35,1,1,1,82.79,702.34,1,1,1,86.09,704.78,1,1,1,89.62,705.35,1,1,1,95.17,699.45,1,1,1,115.67,666.94,1,1,1,119.98,662.93,1,1,1,141.25,648.4,1,1,1,152.26,641.33,1,1,1,159.05,635.18,1,1,1,165.16,626.09,1,1,1,175.79,615.83,1,1,1,193.86,603.65,1,1,1,206.2,597.61,1,1,1,234.01,578.69,1,1,1,242.43,570.82,1,1,1,263.21,551.42,1,1,1,286.52,515.63,1,1,1,290.76,503.62,1,1,1,285.38,486.72,1,1,1,287.4,485.72,1,1,1,281.74,478.09,1,1,1,277.44,472.47,1,1,1,268.59,467.37,1,1,1,249.51,452.25,1,1,1,244.72,447.08,1,1,1,247.47,444.86,1,1,1,209.17,418.74,1,1,1,190.74,403.61,1,1,1,186.15,397.96,1,1,1,184.86,393.8,1,1,1,172.96,387.54,1,3,0,165.97,1201.4,0.12489,1,133.1,348.19,0.84782,2,188.89,-132.38,0.0273,3,0,150.77,1184.53,0.06534,1,117.9,331.32,0.88103,2,172.02,-117.18,0.05363,2,1,108.57,317.62,0.93138,2,158.32,-107.86,0.06862,2,1,99.21,291.49,0.92539,2,132.19,-98.5,0.07461,3,0,113.15,1096.4,0.16243,1,80.28,243.18,0.78724,2,83.88,-79.57,0.05033,3,0,101.37,1072.78,0.44391,1,68.5,219.56,0.52924,2,60.26,-67.79,0.02685,3,0,96.82,1064.19,0.55625,1,63.95,210.98,0.42693,2,51.68,-63.24,0.01681,3,0,92.33,1053.14,0.70667,1,59.46,199.93,0.29115,2,40.63,-58.74,0.00218,2,0,87.3,1031.63,0.98247,1,54.43,178.42,0.01753,1,0,85.44,1013.05,1,1,0,86,1003.26,1,1,0,87,987.51,1,1,0,-128.02,987.51,1,1,0,-123.18,997.37,1,1,0,-128.87,1012.48,1,1,0,-129.25,1023.78,1,2,0,-134.72,1038.28,0.98452,1,-167.59,185.06,0.01548,2,0,-144.57,1056.41,0.77628,1,-177.44,203.19,0.22372,3,0,-147.57,1064.48,0.6813,1,-180.44,211.27,0.313,2,51.97,181.16,0.00569,3,0,-154.38,1090.94,0.3821,1,-187.25,237.73,0.58535,2,78.43,187.97,0.03255,3,0,-155.44,1100.85,0.27499,1,-188.31,247.63,0.68251,2,88.33,189.03,0.0425,3,0,-174.78,1153.61,0.03767,1,-207.65,300.4,0.90487,2,141.1,208.36,0.05745,3,0,-175.72,1154.45,0.04631,1,-208.59,301.24,0.89723,2,141.94,209.3,0.05646,3,0,-186.38,1187.91,0.20582,1,-219.25,334.69,0.74711,2,175.39,219.96,0.04706,3,0,-193.9,1199.93,0.1175,1,-226.77,346.71,0.84935,2,187.41,227.48,0.03315,2,0,-216.25,1207.57,0.02392,1,-249.12,354.35,0.97608,2,0,-246.8,1211.46,0.03303,1,-279.67,358.24,0.96697,2,0,-255.27,1215.22,0.03022,1,-288.14,362.01,0.96978,2,0,-259.52,1219.08,0.01519,1,-292.39,365.86,0.98481,2,0,-288.6,1225.95,0.07983,1,-321.47,372.73,0.92017,2,0,-304.07,1230.44,0.09204,1,-336.94,377.23,0.90796,2,0,-310.33,1234.3,0.09212,1,-343.2,381.08,0.90788,2,0,-316.33,1239.59,0.07844,1,-349.2,386.37,0.92156,2,0,-322.61,1242.12,0.10158,1,-355.48,388.91,0.89842,2,0,-330.59,1248.4,0.11685,1,-363.46,395.19,0.88315,2,0,-334.56,1254.58,0.09656,1,-367.43,401.37,0.90344,2,0,-339.28,1276.83,0.00599,1,-372.15,423.61,0.99401,1,1,-372.7,431.3,1,1,1,-347.24,469.54,1,1,1,-325.75,491.61,1,1,1,-307.88,504.74,1,1,1,-288.43,517.12,1,1,1,-273.22,525.45,1,1,1,-259.28,535.27,1,1,1,-255.55,538.55,1,1,1,-247.32,546.95,1,1,1,-243.42,553.12,1,1,1,-235.41,560.67,1,1,1,-229.64,564.18,1,1,1,-201.54,583.46,1,1,1,-194.24,591.22,1,1,1,-184.44,609.36,1,1,1,-177.75,619.34,1,1,1,-172.63,624.51,1,1,1,-168.48,624.73,1,1,1,-165.74,621.39,1,1,1,-169.21,607.43,1,1,1,-163.62,609.62,1,1,1,-155.21,623.62,1,1,1,-150.41,629.88,1,1,1,-145.44,632.82,1,1,1,-139.27,630.14,1,1,1,-137.51,626.63,1,1,1,-138.79,619.56,1,2,1,-151.52,594.96,0.99855,3,-161.45,191.16,0.00145,2,1,-144.2,598.39,0.99622,3,-154.12,194.59,0.00378,2,1,-130.61,617.29,0.99598,3,-140.54,213.49,0.00402,2,1,-129.83,621.94,0.99509,3,-139.76,218.15,0.00491,2,1,-122.89,634.21,0.98788,3,-132.82,230.41,0.01212,2,1,-117.04,639.75,0.98241,3,-126.97,235.95,0.01759,2,1,-117.43,641.82,0.98343,3,-127.36,238.03,0.01657,2,1,-122.76,645.06,0.99031,3,-132.69,241.26,0.00969,2,1,-123.6,646.64,0.99167,3,-133.53,242.85,0.00833,2,1,-122.14,647.67,0.99033,3,-132.07,243.88,0.00967,2,1,-111.31,645.36,0.97758,3,-121.24,241.56,0.02242,2,1,-108.59,647.23,0.97517,3,-118.51,243.43,0.02483,2,1,-100.9,659.5,0.97283,3,-110.83,255.7,0.02717,2,1,-94.28,664.85,0.97006,3,-104.2,261.06,0.02994,2,1,-79.3,672.35,0.96455,3,-89.23,268.56,0.03545,2,1,-62.5,678.79,0.9631,3,-72.43,274.99,0.0369,2,1,-61.06,678.46,0.96233,3,-70.99,274.67,0.03767,2,1,-56.74,677.54,0.96031,3,-66.67,273.75,0.03969,2,1,-35.69,677.54,0.96077,3,-45.62,273.75,0.03923,2,1,-28.06,676.74,0.96227,3,-37.99,272.95,0.03773,2,1,-26.78,674.7,0.96061,3,-36.71,270.91,0.03939,2,1,-27.1,670.26,0.95576,3,-37.02,266.46,0.04424,2,1,-19.76,676.73,0.96496,3,-29.69,272.94,0.03504,2,1,-15.73,677.08,0.9664,3,-25.65,273.29,0.0336,2,1,-15.96,671.51,0.96015,3,-25.89,267.71,0.03985,2,1,10.56,668.88,0.97071,3,0.64,265.08,0.02929,2,1,11.78,669.11,0.97177,3,1.85,265.31,0.02823,2,1,10.28,678.77,0.97999,3,0.35,274.98,0.02001,2,1,12.78,682.31,0.98496,3,2.85,278.52,0.01504,2,1,17.24,682.96,0.98839,3,7.31,279.17,0.01161,2,1,24.24,679.51,0.99011,3,14.31,275.72,0.00989,1,1,56.11,658.03,1,1,1,52.96,665,1,1,1,47.32,672.67,1,1,1,44.25,676.48,1,1,1,39.11,681.57,1,1,1,31.91,692.47,1,1,1,32.72,700.59,1,1,1,41.75,704.05,1,1,1,59.49,681.82,1,1,1,67,676.15,1,1,1,55.08,702.81,1,1,1,54.89,709.5,1,1,1,57.7,711.49,1,2,1,-29.27,312.43,0.87,2,153.13,29.98,0.13,2,1,-144.48,292.76,0.87,2,133.46,145.19,0.13,2,1,57.84,280.12,0.87995,2,120.82,-57.13,0.12005,2,1,-10.16,504.98,0.87888,3,-20.08,101.19,0.12112,2,1,-18.64,578.61,0.92844,3,-28.57,174.82,0.07156,2,1,-75.6,500.74,0.8275,3,-85.53,96.94,0.1725,2,1,14.69,504.68,0.88,3,4.76,100.88,0.12,3,1,-64.31,538.91,0.71884,3,-74.24,135.11,0.11316,4,-87.39,-111.55,0.168,3,1,-56.04,547.78,0.07275,3,-65.97,143.99,0.01525,4,-96.88,-103.14,0.912,1,4,-100.43,-93.32,1,3,1,-38.18,547.15,0.22456,3,-48.11,143.35,0.03944,4,-96.7,-84.47,0.736,3,1,-34.86,539.72,0.7177,3,-44.79,135.93,0.1303,4,-89.03,-80.81,0.152,3,1,-39.74,536.59,0.77856,3,-49.67,132.8,0.14943,4,-85.63,-85.81,0.07201,3,1,-58.41,535.61,0.75441,3,-68.34,131.82,0.1656,4,-84.11,-105.29,0.07999,3,1,-5.14,539.64,0.66895,3,-15.07,135.85,0.08305,5,-87.79,25.56,0.248,3,1,2,547.3,0.03604,3,-7.93,143.5,0.00396,5,-95.15,33,0.96001,3,1,11.91,546.6,0.02895,3,1.99,142.81,0.00306,5,-94.05,42.88,0.968,3,1,18.7,542.25,0.36895,3,8.77,138.46,0.03905,5,-89.42,49.49,0.592,3,1,21.66,535.11,0.81496,3,11.73,131.32,0.08904,5,-82.17,52.15,0.096,2,1,10.37,531.7,0.88884,3,0.44,127.91,0.11116,2,1,1.9,531.98,0.88438,3,-8.03,128.19,0.11562,2,1,17.82,532.7,0.89459,3,7.89,128.91,0.10541,2,1,-47.35,534.01,0.83011,3,-57.28,130.22,0.16989,3,1,-65.34,554.06,0.3716,3,-75.27,150.26,0.0764,4,-103.19,-113.02,0.552,3,1,-39.3,556.85,0.38664,3,-49.23,153.05,0.06136,4,-106.8,-85.89,0.552,3,1,-30.93,560.57,0.39487,3,-40.86,156.77,0.05313,4,-110.91,-77.25,0.552,3,1,-1.17,557.47,0.53952,3,-11.1,153.67,0.05249,5,-105.44,30.26,0.408,3,1,13.09,553.75,0.54022,3,3.16,149.95,0.05178,5,-101.14,44.35,0.408,3,1,23.63,551.58,0.54438,3,13.7,147.78,0.04762,5,-98.54,54.8,0.408,2,1,28.6,586.09,0.95262,3,18.68,182.3,0.04738,2,1,40.41,511.63,0.92187,3,30.48,107.84,0.07813,2,1,69.6,579.53,0.99721,3,59.68,175.74,0.00279,1,1,172.98,536.07,1,2,1,77.73,453.86,0.9997,3,67.8,50.06,0.0003,4,0,44.26,1288.36,0.08663,1,11.39,435.15,0.80624,2,275.85,-10.68,0.05321,3,1.46,31.35,0.05392,2,1,-146.91,504.83,0.95238,3,-156.84,101.03,0.04762,2,1,-106.91,471.17,0.92664,3,-116.83,67.38,0.07336,2,1,-110.72,436.88,0.96187,2,277.58,111.43,0.03813,1,1,-261.85,443.87,1,1,1,-225.02,475.62,1],"hull":144,"edges":[0,286,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,110,112,108,110,302,304,304,306,306,308,308,310,310,312,314,302,316,318,318,320,320,322,322,324,326,328,328,316,324,330,330,326,312,332,332,314,334,336,336,338,340,342,342,344,346,348,346,350,350,352,352,354,354,356,356,348,358,360,360,362,362,364,364,366,366,358],"width":2468,"height":2160},"CaveScene/d-bl3-statue stand":{"type":"mesh","uvs":[0.50968,0,0.5767,0,0.59235,0.00169,0.60717,0,0.60484,0.00578,0.67138,0.00731,0.67896,0.01631,0.68512,0.01761,0.7029,0.01193,0.69525,0.02616,0.72917,0.04012,0.74059,0.07111,0.75803,0.07399,0.76058,0.07792,0.72073,0.07242,0.70066,0.07741,0.6951,0.07959,0.6972,0.10135,0.68636,0.11818,0.69265,0.13233,0.69394,0.14736,0.68353,0.1708,0.64527,0.19995,0.64982,0.22208,0.69789,0.22014,0.70957,0.22528,0.76931,0.23015,0.83025,0.2448,0.85957,0.25947,0.86926,0.27195,0.87378,0.2814,0.87356,0.30235,0.87121,0.30918,0.88514,0.34118,0.8853,0.35043,0.86991,0.37839,0.87096,0.40206,0.88028,0.41645,0.8829,0.43062,0.8713,0.44356,0.87142,0.45678,0.86109,0.46412,0.8585,0.4869,0.87529,0.51397,0.87278,0.5613,0.86426,0.65873,0.872,0.6781,0.8648,0.70697,0.86358,0.72789,0.86264,0.73642,0.85038,0.74314,0.84403,0.75074,0.7956,0.77588,0.77102,0.78206,0.76455,0.78709,0.76599,0.84065,0.76062,0.86191,0.75172,0.86963,0.75622,0.89185,0.74164,0.92535,0.74178,0.98231,0.77134,0.98116,0.77292,0.9676,0.77748,0.97852,0.77763,0.9813,0.75234,0.98421,0.74287,0.99111,0.74413,1,0.54968,1,0.56275,0.94898,0.56829,0.93742,0.57926,0.92175,0.58338,0.89447,0.53064,0.8269,0.51097,0.78826,0.50368,0.77602,0.44247,0.83227,0.41512,0.87757,0.40814,0.8737,0.41408,0.90232,0.40189,0.92225,0.40352,0.94767,0.39689,0.96158,0.37907,1,0.16867,1,0.16637,0.92708,0.18071,0.87453,0.19535,0.85622,0.19525,0.84769,0.19214,0.78922,0.16995,0.79822,0.16645,0.79567,0.19113,0.78442,0.19255,0.7759,0.18884,0.75406,0.19263,0.7253,0.22839,0.62794,0.24393,0.59456,0.16663,0.56196,0.11898,0.54064,0.08374,0.53031,0.05371,0.5178,0.03668,0.50881,0.03513,0.47753,0.04114,0.46051,0.05654,0.45302,0.06422,0.45089,0.05949,0.4352,0.08449,0.41415,0.09907,0.39151,0.10086,0.38481,0.0992,0.36501,0.11318,0.34159,0.12968,0.32999,0.14735,0.29803,0.16761,0.27906,0.17613,0.27414,0.22551,0.26423,0.32211,0.24075,0.33577,0.23387,0.3535,0.23392,0.45402,0.2153,0.45317,0.18052,0.42774,0.16134,0.3953,0.15455,0.36347,0.13409,0.3634,0.11485,0.37044,0.10673,0.39513,0.10461,0.38908,0.08293,0.38252,0.07816,0.3908,0.0542,0.4135,0.03228,0.40752,0.02672,0.43327,0.02697,0.45273,0.01327,0.49878,0.00244,0.51333,0.1183,0.54994,0.11421,0.57144,0.11639,0.58074,0.12185,0.57028,0.12349,0.54772,0.12492,0.51924,0.12201,0.50684,0.12029,0.62936,0.12147,0.63457,0.11669,0.6354,0.12355,0.65157,0.11535,0.67363,0.11893,0.68046,0.12029,0.67321,0.12191,0.65229,0.12467,0.62736,0.11214,0.67777,0.10588,0.58204,0.11389,0.52214,0.10575,0.61176,0.09354,0.61716,0.15586,0.61848,0.33963,0.41295,0.37861,0.74232,0.38666],"triangles":[138,156,155,139,138,155,146,153,148,44,97,42,39,37,38,39,41,161,106,103,105,42,97,160,37,161,36,106,107,108,113,110,111,160,108,109,160,106,108,161,35,36,160,110,113,117,114,115,160,113,117,33,161,32,34,161,33,159,160,120,118,120,160,160,159,161,159,120,121,26,32,159,159,121,23,159,23,25,159,25,26,26,27,31,29,27,28,129,130,131,128,125,126,123,124,128,128,126,127,124,125,128,144,123,128,143,122,123,121,22,23,158,22,122,23,24,25,136,157,156,134,135,136,156,134,136,155,156,157,155,157,153,145,153,146,140,139,155,141,138,139,141,139,140,147,146,148,145,146,147,147,148,152,155,145,140,145,155,153,158,145,147,158,140,145,158,147,152,151,19,20,20,152,151,20,158,152,4,2,3,9,7,8,10,15,9,14,10,11,14,15,10,11,12,13,14,11,13,7,9,6,16,9,15,4,9,157,6,4,5,6,9,4,16,157,9,4,1,2,17,154,16,154,157,16,1,136,0,136,1,157,4,157,1,153,157,154,148,153,154,18,154,17,149,148,154,18,149,154,150,149,18,149,152,148,151,149,150,151,152,149,150,18,19,19,151,150,132,133,134,131,156,129,156,128,129,131,132,134,131,134,156,156,144,128,137,156,138,137,144,156,143,137,138,144,137,143,142,143,138,142,138,141,21,158,20,143,123,144,22,158,21,142,122,143,141,140,158,142,141,158,158,122,142,121,122,22,30,27,29,27,30,31,32,26,31,118,119,120,32,161,159,117,118,160,161,34,35,115,116,117,117,113,114,113,111,112,160,109,110,42,160,161,160,99,106,37,39,161,98,99,160,42,161,41,41,39,40,44,42,43,97,98,160,101,102,103,105,103,104,103,106,101,99,100,106,100,101,106,47,45,46,44,45,97,45,96,97,96,45,47,52,95,96,51,96,47,47,48,50,49,50,48,47,50,51,95,75,94,96,51,52,75,93,94,95,52,75,53,75,52,54,75,53,74,75,54,89,92,93,91,92,89,90,91,89,73,74,54,76,93,75,89,93,76,73,54,55,88,89,76,78,87,88,55,57,73,56,57,55,76,78,88,77,78,76,72,73,57,72,57,58,86,78,79,78,86,87,80,86,79,59,72,58,71,72,59,85,86,80,85,80,81,82,85,81,61,62,63,61,63,64,65,60,61,65,61,64,66,60,65,84,85,82,83,84,82,70,71,59,59,69,70,60,69,59,68,69,60,68,60,66,68,66,67],"vertices":[2,1,-72.51,670.48,0.89104,3,-82.44,266.68,0.10896,2,1,-37.56,670.48,0.88001,3,-47.49,266.68,0.11999,2,1,-29.4,668.6,0.87572,3,-39.33,264.8,0.12428,2,1,-21.67,670.48,0.88126,3,-31.6,266.68,0.11874,2,1,-22.89,664.06,0.87079,3,-32.82,260.26,0.12921,2,1,11.81,662.36,0.89451,3,1.88,258.56,0.10549,2,1,15.76,652.36,0.88339,3,5.83,248.57,0.11661,2,1,18.97,650.92,0.88651,3,9.04,247.13,0.11349,2,1,28.24,657.23,0.9117,3,18.32,253.44,0.0883,2,1,24.26,641.44,0.88252,3,14.33,237.64,0.11748,2,1,41.94,625.94,0.90155,3,32.01,222.14,0.09845,2,1,47.9,591.53,0.89263,3,37.97,187.73,0.10737,2,1,57,588.33,0.91285,3,47.07,184.54,0.08715,2,1,58.32,583.96,0.91556,3,48.39,180.17,0.08444,2,1,37.54,590.07,0.86884,3,27.62,186.28,0.13116,2,1,27.08,584.53,0.84937,3,17.15,180.74,0.15063,2,1,24.18,582.11,0.8459,3,14.25,178.32,0.1541,2,1,25.27,557.95,0.84713,3,15.34,154.16,0.15287,2,1,19.62,539.26,0.84153,3,9.69,135.47,0.15847,2,1,22.9,523.56,0.85097,3,12.97,119.77,0.14903,2,1,23.57,506.87,0.85761,3,13.65,103.07,0.14239,2,1,18.14,480.84,0.86545,3,8.22,77.05,0.13455,2,1,-1.8,448.48,0.88875,3,-11.73,44.69,0.11125,3,1,0.57,423.91,0.91809,2,264.61,0.15,0.02333,3,-9.36,20.11,0.05858,3,1,25.63,426.06,0.94355,2,266.76,-24.92,0.01913,3,15.71,22.27,0.03732,3,1,31.73,420.35,0.9536,2,261.05,-31.01,0.02742,3,21.8,16.56,0.01897,2,1,62.88,414.95,0.96818,2,255.65,-62.16,0.03182,2,1,94.65,398.69,0.96265,2,239.39,-93.94,0.03735,3,0,142.81,1235.6,0.02047,1,109.94,382.39,0.93586,2,223.09,-109.23,0.04367,3,0,147.87,1221.75,0.0214,1,115,368.54,0.92416,2,209.24,-114.28,0.05444,3,0,150.22,1211.26,0.02044,1,117.35,358.05,0.9167,2,198.75,-116.64,0.06286,3,0,150.11,1188,0.00842,1,117.24,334.79,0.90965,2,175.49,-116.52,0.08193,3,0,148.88,1180.41,0.00297,1,116.01,327.2,0.90763,2,167.9,-115.3,0.0894,2,1,123.28,291.68,0.89896,2,132.38,-122.56,0.10104,2,1,123.36,281.4,0.89794,2,122.1,-122.65,0.10206,2,1,115.33,250.36,0.88581,2,91.06,-114.62,0.11419,2,1,115.88,224.08,0.90069,2,64.78,-115.17,0.09931,2,1,120.74,208.1,0.92117,2,48.8,-120.03,0.07883,2,1,122.1,192.37,0.93987,2,33.07,-121.39,0.06013,2,1,116.06,178,0.95131,2,18.7,-115.34,0.04869,2,1,116.12,163.32,0.97215,2,4.02,-115.41,0.02785,2,1,110.74,155.17,0.97984,2,-4.13,-110.02,0.02016,2,1,109.38,129.88,0.98311,2,-29.42,-108.67,0.01689,3,0,151.01,953.04,0.00526,1,118.14,99.83,0.9543,2,-59.47,-117.42,0.04044,3,0,149.7,900.49,0.17968,1,116.83,47.28,0.74387,2,-112.02,-116.12,0.07645,3,0,145.26,792.32,0.58146,1,112.39,-60.89,0.3138,2,-220.19,-111.67,0.10474,3,0,149.29,770.81,0.67973,1,116.42,-82.4,0.22362,2,-241.7,-115.71,0.09665,3,0,145.54,738.76,0.81747,1,112.67,-114.45,0.09849,2,-273.75,-111.95,0.08403,3,0,144.9,715.54,0.9359,1,112.03,-137.68,0.00185,2,-296.98,-111.32,0.06224,2,0,144.41,706.06,0.948,2,-306.45,-110.83,0.052,2,0,138.02,698.61,0.95016,2,-313.91,-104.44,0.04984,2,0,134.71,690.16,0.95851,2,-322.35,-101.13,0.04149,2,0,109.45,662.26,0.93805,2,-350.26,-75.87,0.06195,2,0,96.64,655.39,0.92402,2,-357.12,-63.05,0.07598,2,0,93.26,649.81,0.9248,2,-362.71,-59.68,0.0752,1,0,94.01,590.34,1,1,0,91.21,566.74,1,1,0,86.57,558.17,1,1,0,88.92,533.5,1,1,0,81.32,496.3,1,1,0,81.39,433.06,1,1,0,96.8,434.33,1,1,0,97.63,449.39,1,1,0,100,437.27,1,1,0,100.08,434.18,1,1,0,86.9,430.95,1,1,0,81.96,423.29,1,1,0,82.61,413.42,1,1,0,-18.78,413.42,1,1,0,-11.97,470.07,1,1,0,-9.08,482.9,1,1,0,-3.36,500.3,1,1,0,-1.21,530.58,1,2,0,-28.71,605.61,0.98739,2,-406.9,62.29,0.01261,2,0,-38.97,648.51,0.95075,2,-364,72.55,0.04925,2,0,-42.77,662.1,0.94672,2,-350.42,76.35,0.05328,1,0,-74.69,599.64,1,1,0,-88.95,549.35,1,1,0,-92.59,553.65,1,1,0,-89.49,521.87,1,1,0,-95.85,499.74,1,1,0,-95,471.52,1,1,0,-98.46,456.08,1,1,0,-107.75,413.42,1,1,0,-217.46,413.42,1,1,0,-218.66,494.38,1,1,0,-211.18,552.72,1,1,0,-203.55,573.06,1,1,0,-203.6,582.52,1,1,0,-205.22,647.44,1,1,0,-216.79,637.45,1,1,0,-218.62,640.28,1,1,0,-205.75,652.77,1,1,0,-205.01,662.23,1,1,0,-206.94,686.48,1,1,0,-204.96,718.41,1,2,0,-186.32,826.51,0.85784,1,-219.19,-26.7,0.14216,3,0,-178.21,863.56,0.68672,1,-211.08,10.35,0.27934,2,-148.95,211.8,0.03394,3,0,-218.53,899.76,0.62521,1,-251.4,46.55,0.30814,2,-112.75,252.11,0.06665,3,0,-243.37,923.43,0.61002,1,-276.24,70.22,0.32934,2,-89.08,276.95,0.06063,3,0,-261.75,934.9,0.63775,1,-294.62,81.69,0.32213,2,-77.61,295.33,0.04012,3,0,-277.41,948.79,0.65641,1,-310.28,95.58,0.32317,2,-63.72,310.99,0.02042,3,0,-286.29,958.77,0.66271,1,-319.16,105.56,0.32599,2,-53.74,319.87,0.0113,3,0,-287.1,993.5,0.55741,1,-319.97,140.28,0.41394,2,-19.02,320.68,0.02865,3,0,-283.96,1012.4,0.49414,1,-316.83,159.19,0.46849,2,-0.11,317.54,0.03737,3,0,-275.93,1020.71,0.43689,1,-308.8,167.5,0.51198,2,8.2,309.51,0.05113,3,0,-271.92,1023.08,0.4129,1,-304.79,169.86,0.52912,2,10.56,305.51,0.05798,3,0,-274.39,1040.5,0.38821,1,-307.26,187.29,0.55803,2,27.99,307.98,0.05376,3,0,-261.35,1063.87,0.28421,1,-294.23,210.66,0.64147,2,51.36,294.94,0.07432,3,0,-253.75,1089,0.21475,1,-286.63,235.79,0.7092,2,76.49,287.34,0.07605,3,0,-252.82,1096.45,0.20093,1,-285.69,243.24,0.72467,2,83.94,286.4,0.0744,3,0,-253.69,1118.43,0.18517,1,-286.56,265.22,0.7572,2,105.92,287.27,0.05763,3,0,-246.4,1144.44,0.14105,1,-279.27,291.22,0.80108,2,131.92,279.98,0.05786,3,0,-237.79,1157.32,0.10314,1,-270.66,304.1,0.83505,2,144.8,271.37,0.06181,3,0,-228.58,1192.8,0.06174,1,-261.45,339.58,0.88656,2,180.28,262.16,0.0517,3,0,-218.01,1213.86,0.01397,1,-250.88,360.65,0.94356,2,201.35,251.59,0.04247,2,1,-246.44,366.11,0.95867,2,206.81,247.15,0.04133,2,1,-220.69,377.11,0.94563,2,217.81,221.4,0.05437,2,1,-170.32,403.18,0.96228,2,243.88,171.03,0.03772,2,1,-163.19,410.82,0.97206,2,251.52,163.91,0.02794,2,1,-153.95,410.76,0.96887,2,251.46,154.66,0.03113,3,1,-101.53,431.44,0.94964,2,272.14,102.25,0.01137,3,-111.46,27.64,0.03899,2,1,-101.98,470.05,0.8992,3,-111.9,66.26,0.1008,2,1,-115.24,491.34,0.89805,3,-125.17,87.55,0.10195,2,1,-132.15,498.88,0.92511,3,-142.08,95.09,0.07489,3,0,-115.88,1374.81,0.04349,1,-148.75,521.6,0.89807,3,-158.68,117.81,0.05844,3,0,-115.92,1396.17,0.11513,1,-148.79,542.96,0.81283,3,-158.72,139.16,0.07204,3,0,-112.24,1405.19,0.13202,1,-145.11,551.98,0.78435,3,-155.04,148.18,0.08364,3,0,-99.37,1407.54,0.10162,1,-132.24,554.33,0.785,3,-142.17,150.53,0.11338,3,0,-102.53,1431.61,0.15536,1,-135.4,578.4,0.73766,3,-145.33,174.61,0.10698,3,0,-105.95,1436.91,0.17146,1,-138.82,583.69,0.72937,3,-148.74,179.9,0.09916,3,0,-101.63,1463.51,0.15282,1,-134.5,610.29,0.74795,3,-144.43,206.5,0.09924,3,0,-89.79,1487.84,0.10818,1,-122.66,634.63,0.796,3,-132.59,230.84,0.09582,3,0,-92.91,1494.02,0.12733,1,-125.78,640.81,0.79063,3,-135.71,237.02,0.08204,3,0,-79.49,1493.74,0.0675,1,-112.36,640.53,0.82593,3,-122.28,236.74,0.10657,3,0,-69.33,1508.96,0.04137,1,-102.21,655.74,0.85867,3,-112.13,251.95,0.09996,2,1,-78.19,667.77,0.89098,3,-88.12,263.98,0.10902,3,1,-70.6,539.13,0.68544,3,-80.53,135.33,0.13056,5,-89.95,-39.87,0.184,3,1,-51.52,543.67,0.22848,3,-61.44,139.88,0.04352,5,-93.71,-20.61,0.728,3,1,-40.3,541.25,0.4704,3,-50.23,137.46,0.0896,5,-90.83,-9.51,0.44,2,1,-35.46,535.19,0.84,3,-45.38,131.4,0.16,2,1,-40.91,533.37,0.84,3,-50.84,129.58,0.16,2,1,-52.68,531.78,0.84,3,-62.6,127.98,0.16,2,1,-67.52,535.01,0.84,3,-77.45,131.22,0.16,2,1,-73.99,536.92,0.84,3,-83.92,133.13,0.16,2,1,-10.1,535.61,0.84,3,-20.03,131.82,0.16,3,1,-7.39,540.92,0.47711,4,-91.02,-52.13,0.43201,3,-17.32,137.13,0.09088,2,1,-6.96,533.3,0.84,3,-16.88,129.51,0.16,3,1,1.48,542.4,0.28896,4,-92.8,-42.91,0.656,3,-8.45,138.61,0.05504,3,1,12.98,538.43,0.69888,4,-88.96,-30.78,0.16799,3,3.06,134.64,0.13312,2,1,16.55,536.92,0.84,3,6.62,133.13,0.16,2,1,12.76,535.13,0.84,3,2.83,131.33,0.16,2,1,1.86,532.06,0.84,3,-8.07,128.27,0.16,3,1,-11.15,545.97,0.5712,4,-96.19,-56.19,0.32,3,-21.08,142.18,0.1088,3,1,15.14,552.92,0.5712,4,-104.15,-28.92,0.32,3,5.21,149.12,0.1088,3,1,-34.78,544.02,0.48384,3,-44.71,140.23,0.09216,5,-93.38,-3.87,0.42399,3,1,-66.01,553.06,0.48384,3,-75.94,149.27,0.09216,5,-103.68,-34.71,0.42399,2,1,-19.28,566.62,0.84,3,-29.21,162.83,0.16,2,1,-16.46,497.43,0.84,3,-26.39,93.64,0.16,2,1,-15.78,293.39,0.88,2,134.09,16.49,0.12,2,1,-122.95,250.11,0.893,2,90.81,123.66,0.107,2,1,48.8,241.18,0.88,2,81.88,-48.09,0.12],"hull":137,"edges":[0,272,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,274,290,292,290,294,292,296,296,298,298,300,300,302,302,304,304,294,306,308,310,312],"width":836,"height":1780},"CaveScene/s-b3-after sex":{"type":"mesh","uvs":[0.57402,0.06058,0.58441,0.06795,0.58933,0.07725,0.58986,0.08777,0.59164,0.09151,0.60494,0.09449,0.61397,0.1055,0.61826,0.11807,0.62263,0.14498,0.62091,0.15693,0.6212,0.16023,0.62729,0.16499,0.63282,0.18261,0.632,0.19011,0.63256,0.19102,0.61419,0.22391,0.60577,0.22877,0.60282,0.23272,0.58948,0.26546,0.59289,0.27819,0.59796,0.28126,0.65445,0.29427,0.69872,0.30568,0.72289,0.30728,0.73364,0.30713,0.75038,0.31904,0.76189,0.32781,0.82119,0.4217,0.85071,0.45777,0.85246,0.46562,0.86714,0.49169,0.87832,0.53103,0.8737,0.54513,0.84838,0.57073,0.82606,0.59391,0.8239,0.59706,0.79303,0.62846,0.79188,0.6299,0.75113,0.6755,0.75218,0.67923,0.75686,0.68444,0.74889,0.69717,0.74281,0.68774,0.73548,0.69,0.72608,0.70489,0.70735,0.72022,0.717,0.77113,0.71201,0.77544,0.7091,0.77832,0.69423,0.78061,0.69522,0.78561,0.70124,0.84577,0.70638,0.89503,0.71406,1,0.54949,1,0.53615,0.93358,0.5239,0.87508,0.50898,0.86254,0.49571,0.91161,0.49602,0.92332,0.49018,0.94416,0.47684,0.97935,0.47668,0.98189,0.47364,1,0.32321,1,0.32252,0.999,0.32244,0.97661,0.3242,0.96797,0.32442,0.93645,0.32511,0.86531,0.31597,0.86394,0.30349,0.87359,0.29812,0.87359,0.27943,0.85928,0.27137,0.86941,0.28678,0.89421,0.28604,0.90431,0.28256,0.90871,0.27132,0.90742,0.25852,0.895,0.24315,0.88463,0.22569,0.86945,0.20718,0.84779,0.2041,0.79072,0.19713,0.77544,0.20682,0.76499,0.20377,0.73017,0.20307,0.70494,0.19986,0.6623,0.19839,0.60614,0.20213,0.59311,0.20827,0.58282,0.2096,0.579,0.20988,0.5668,0.2092,0.56419,0.2071,0.54576,0.20696,0.51371,0.20974,0.49826,0.19693,0.49234,0.19681,0.48518,0.1953,0.48248,0.24969,0.37061,0.2505,0.37337,0.27275,0.33737,0.27706,0.32124,0.2835,0.31812,0.29228,0.31621,0.36675,0.29148,0.42958,0.27706,0.44327,0.26982,0.44349,0.26672,0.43077,0.23562,0.42921,0.2347,0.41767,0.22977,0.40842,0.21559,0.39822,0.19842,0.395,0.17969,0.39944,0.16672,0.40221,0.16805,0.39102,0.13879,0.38939,0.12744,0.3937,0.11438,0.39777,0.11118,0.41736,0.09964,0.41961,0.09723,0.41961,0.09109,0.42463,0.08164,0.43749,0.0725,0.45448,0.06579,0.46839,0.06209,0.48645,0.05827,0.54108,0.05696,0.52047,0.36556,0.37285,0.44737,0.65222,0.44929,0.4471,0.19712,0.46017,0.19544,0.47217,0.19081,0.48124,0.18892,0.49004,0.19102,0.49564,0.19839,0.48924,0.20133,0.4799,0.20217,0.4711,0.20112,0.58639,0.19188,0.575,0.19206,0.56602,0.18635,0.55288,0.18462,0.54433,0.18808,0.5382,0.19344,0.54455,0.19707,0.55244,0.19862,0.56624,0.19776,0.53723,0.17199,0.57093,0.17138,0.58739,0.18086,0.49698,0.17269,0.46326,0.17819,0.45072,0.18588,0.48212,0.29743,0.5188,0.30096,0.55181,0.29614],"triangles":[53,55,52,53,54,55,62,63,66,66,63,64,62,66,67,62,67,61,60,61,68,61,67,68,60,68,59,68,58,59,68,69,58,55,56,52,58,69,57,77,78,76,76,78,75,75,78,79,56,51,52,75,79,74,51,56,50,71,72,70,72,73,70,57,69,87,87,69,70,50,56,57,50,57,49,49,57,45,48,49,47,46,47,49,87,70,73,151,147,146,146,147,154,147,151,148,148,153,147,147,153,154,146,154,155,142,137,138,137,157,138,139,142,138,139,138,156,138,157,156,66,64,65,79,80,74,80,81,74,74,81,73,73,81,82,88,57,87,45,88,91,45,91,92,88,45,57,93,45,92,45,93,133,82,83,73,85,73,83,83,84,85,134,45,133,46,49,45,133,132,134,86,87,73,73,85,86,44,45,43,90,91,89,43,45,134,41,42,40,43,134,38,24,38,134,42,43,38,42,39,40,42,38,39,27,38,24,134,23,24,37,38,27,25,27,24,134,132,21,21,132,161,161,19,20,161,18,19,91,88,89,36,37,27,35,36,34,25,26,27,34,36,27,33,34,29,32,33,31,33,29,30,29,27,28,27,29,34,132,159,160,159,132,107,93,94,133,96,97,133,133,94,95,133,95,96,31,33,30,133,97,99,102,133,100,99,97,98,102,103,133,133,99,100,133,103,106,105,106,103,103,104,105,100,101,102,134,22,23,134,21,22,21,161,20,159,107,108,108,109,159,106,107,133,107,132,133,132,160,161,150,161,160,160,159,141,150,160,141,141,140,150,140,149,150,109,110,159,159,110,141,141,110,142,18,150,151,18,151,17,17,151,152,17,152,145,18,161,150,140,156,149,156,153,149,142,111,143,143,111,135,111,142,110,16,17,145,135,136,143,111,112,135,112,113,135,16,145,144,113,114,135,16,144,15,14,15,144,14,144,13,12,13,155,11,155,10,144,155,13,114,115,135,143,137,142,141,142,139,141,139,140,143,136,137,151,146,152,115,116,135,140,139,156,152,146,145,135,116,158,135,158,136,158,116,118,149,148,150,151,150,148,137,136,157,149,153,148,144,145,155,155,145,146,136,158,157,12,155,11,158,118,157,155,154,10,116,117,118,123,156,157,123,157,119,123,124,156,129,156,124,128,124,125,127,128,125,125,126,127,124,128,129,129,130,156,156,130,153,154,153,4,153,130,131,154,9,10,9,154,8,7,4,6,6,4,5,4,7,154,4,131,3,3,131,2,1,2,0,0,2,131,131,4,153,118,119,157,122,120,121,123,119,122,8,154,7,122,119,120],"vertices":[2,1,53.98,586.07,0.91608,3,44.05,182.28,0.08392,2,1,62.5,578.42,0.91486,3,52.57,174.62,0.08514,2,1,66.53,568.76,0.90883,3,56.6,164.96,0.09117,2,1,66.96,557.82,0.89904,3,57.03,154.02,0.10096,2,1,68.42,553.94,0.89742,3,58.49,150.15,0.10258,2,1,79.33,550.84,0.90839,3,69.4,147.05,0.09161,2,1,86.72,539.4,0.91097,3,76.79,135.61,0.08903,2,1,90.24,526.34,0.91026,3,80.31,122.55,0.08974,2,1,93.82,498.38,0.90267,3,83.89,94.59,0.09733,2,1,92.41,485.96,0.89316,3,82.48,82.17,0.10684,2,1,92.65,482.54,0.89175,3,82.72,78.74,0.10825,2,1,97.64,477.59,0.89655,3,87.71,73.8,0.10345,2,1,102.17,459.29,0.89905,3,92.25,55.5,0.10095,2,1,101.5,451.5,0.89811,3,91.57,47.7,0.10189,2,1,101.96,450.55,0.89886,3,92.03,46.75,0.10114,2,1,86.9,416.38,0.89157,3,76.98,12.59,0.10843,2,1,80,411.33,0.88695,3,70.07,7.53,0.11305,2,1,77.59,407.23,0.88767,3,67.66,3.43,0.11233,2,1,66.65,373.2,0.88565,3,56.73,-30.59,0.11435,3,1,69.45,359.98,0.89508,2,200.68,-68.74,0.00105,3,59.52,-43.82,0.10387,3,1,73.6,356.78,0.92146,2,197.49,-72.89,0.00573,3,63.68,-47.01,0.07281,3,1,119.9,343.27,0.9726,2,183.97,-119.19,0.0232,3,109.97,-60.52,0.00419,2,1,156.18,331.42,0.97595,2,172.12,-155.47,0.02405,2,1,175.99,329.75,0.98203,2,170.45,-175.28,0.01797,2,1,184.81,329.91,0.98653,2,170.61,-184.1,0.01347,2,1,198.53,317.53,0.97856,2,158.23,-197.82,0.02144,2,1,207.96,308.43,0.97424,2,149.13,-207.25,0.02576,2,1,256.57,210.88,0.94466,2,51.58,-255.86,0.05534,2,1,280.76,173.4,0.957,2,14.1,-280.04,0.043,2,1,282.2,165.24,0.95689,2,5.94,-281.48,0.04311,2,1,294.23,138.16,0.97223,2,-21.14,-293.51,0.02777,2,1,303.39,97.28,0.95988,2,-62.02,-302.68,0.04012,2,1,299.6,82.63,0.94613,2,-76.67,-298.89,0.05387,2,1,278.85,56.03,0.90614,2,-103.27,-278.13,0.09386,2,1,260.56,31.95,0.87532,2,-127.35,-259.85,0.12468,2,1,258.79,28.68,0.87275,2,-130.62,-258.07,0.12725,2,1,233.49,-3.95,0.86,2,-163.25,-232.77,0.14,2,1,232.55,-5.44,0.86,2,-164.74,-231.83,0.14,2,1,199.14,-52.82,0.87029,2,-212.12,-198.43,0.12971,2,1,200,-56.69,0.87603,2,-215.99,-199.29,0.12397,2,1,203.84,-62.11,0.88504,2,-221.41,-203.13,0.11496,2,1,197.31,-75.33,0.9017,2,-234.63,-196.6,0.0983,2,1,192.33,-65.54,0.88666,2,-224.84,-191.61,0.11334,2,1,186.31,-67.89,0.88935,2,-227.19,-185.6,0.11065,2,1,178.61,-83.36,0.91166,2,-242.66,-177.9,0.08834,3,1,163.26,-99.29,0.92001,2,-258.59,-162.55,0.06514,0,196.13,753.93,0.01486,2,1,171.17,-152.18,0.4899,0,204.04,701.04,0.5101,2,1,167.08,-156.65,0.43059,0,199.95,696.56,0.56941,2,1,164.69,-159.65,0.39257,0,197.56,693.57,0.60743,2,1,152.51,-162.03,0.32812,0,185.38,691.19,0.67188,2,1,153.32,-167.23,0.27893,0,186.19,685.99,0.72107,1,0,191.12,623.48,1,1,0,195.34,572.3,1,2,1,168.76,-389.97,0.65144,0,201.63,463.24,0.34856,2,1,33.87,-389.97,0.24331,0,66.74,463.24,0.75669,1,0,55.81,532.25,1,1,0,45.77,593.03,1,1,0,33.54,606.06,1,1,0,22.67,555.07,1,1,0,22.92,542.91,1,1,0,18.14,521.25,1,1,0,7.2,484.69,1,1,0,7.07,482.06,1,2,1,-28.3,-389.97,0.13599,0,4.57,463.24,0.86401,2,1,-151.59,-389.97,0.61186,0,-118.72,463.24,0.38814,2,1,-152.16,-388.93,0.60735,0,-119.28,464.28,0.39265,2,1,-152.22,-365.67,0.43347,0,-119.35,487.55,0.56653,2,1,-150.78,-356.7,0.35855,0,-117.91,496.51,0.64145,2,1,-150.6,-323.94,0.14116,0,-117.73,529.27,0.85884,2,2,-409.33,150.75,0.07322,0,-117.16,603.18,0.92678,3,1,-157.53,-248.6,0.04199,2,-407.9,158.24,0.08004,0,-124.66,604.61,0.87798,3,1,-167.75,-258.64,0.13224,2,-417.94,168.46,0.0721,0,-134.88,594.58,0.79566,3,1,-172.16,-258.63,0.17417,2,-417.93,172.87,0.074,0,-139.29,594.58,0.75183,3,1,-187.47,-243.77,0.32337,2,-403.07,188.18,0.09986,0,-154.6,609.44,0.57677,3,1,-194.08,-254.29,0.38017,2,-413.59,194.79,0.08582,0,-161.21,598.92,0.53401,3,1,-181.44,-280.06,0.27582,2,-439.36,182.16,0.04661,0,-148.57,573.15,0.67756,3,1,-182.05,-290.55,0.30347,2,-449.85,182.77,0.03174,0,-149.18,562.66,0.6648,3,1,-184.91,-295.13,0.34437,2,-454.43,185.62,0.02571,0,-152.04,558.09,0.62992,3,1,-194.12,-293.78,0.42974,2,-453.08,194.83,0.02878,0,-161.25,559.43,0.54148,3,1,-204.61,-280.87,0.50326,2,-440.17,205.32,0.04765,0,-171.74,572.34,0.44908,3,1,-217.21,-270.1,0.61356,2,-429.4,217.92,0.06167,0,-184.34,583.11,0.32477,3,1,-231.52,-254.33,0.73892,2,-413.63,232.23,0.07939,0,-198.65,598.88,0.18169,3,1,-246.69,-231.83,0.8848,2,-391.13,247.4,0.1004,0,-213.82,621.38,0.0148,2,1,-249.22,-172.53,0.86,2,-331.83,249.93,0.14,2,1,-254.93,-156.66,0.86,2,-315.96,255.64,0.14,2,1,-246.98,-145.8,0.86,2,-305.1,247.7,0.14,2,1,-249.48,-109.63,0.86,2,-268.93,250.19,0.14,2,1,-250.06,-83.41,0.86,2,-242.71,250.77,0.14,2,1,-252.69,-39.11,0.86,2,-198.41,253.41,0.14,2,1,-253.9,19.25,0.86,2,-140.05,254.61,0.14,2,1,-250.83,32.78,0.86,2,-126.52,251.54,0.14,2,1,-245.8,43.47,0.86,2,-115.83,246.51,0.14,2,1,-244.71,47.45,0.86,2,-111.85,245.42,0.14,2,1,-244.48,60.12,0.86,2,-99.18,245.19,0.14,2,1,-245.03,62.83,0.86,2,-96.47,245.74,0.14,2,1,-246.75,81.98,0.86,2,-77.32,247.47,0.14,2,1,-246.87,115.28,0.89306,2,-44.02,247.58,0.10694,2,1,-244.59,131.33,0.90897,2,-27.97,245.3,0.09103,2,1,-255.09,137.48,0.92521,2,-21.82,255.8,0.07479,2,1,-255.19,144.91,0.93389,2,-14.39,255.91,0.06611,2,1,-256.42,147.72,0.93823,2,-11.58,257.14,0.06177,2,1,-211.85,263.96,0.935,2,104.66,212.56,0.065,2,1,-211.18,261.09,0.93192,2,101.79,211.89,0.06808,2,1,-192.95,298.49,0.94908,2,139.19,193.66,0.05092,2,1,-189.41,315.25,0.96588,2,155.95,190.13,0.03412,2,1,-184.13,318.49,0.96592,2,159.19,184.85,0.03408,2,1,-176.94,320.48,0.96348,2,161.18,177.65,0.03652,2,1,-115.9,346.17,0.98035,2,186.87,116.62,0.01965,2,1,-64.41,361.15,0.94523,3,-74.33,-42.64,0.05477,2,1,-53.18,368.67,0.90717,3,-63.11,-35.12,0.09283,2,1,-53,371.9,0.90298,3,-62.93,-31.89,0.09702,2,1,-63.43,404.21,0.90334,3,-73.36,0.42,0.09666,2,1,-64.71,405.16,0.90388,3,-74.64,1.37,0.09612,2,1,-74.17,410.29,0.91049,3,-84.1,6.5,0.08951,2,1,-81.75,425.02,0.90826,3,-91.68,21.22,0.09174,2,1,-90.11,442.86,0.90783,3,-100.04,39.06,0.09217,2,1,-92.75,462.32,0.90374,3,-102.68,58.53,0.09626,2,1,-89.11,475.8,0.89661,3,-99.04,72,0.10339,2,1,-86.84,474.41,0.89339,3,-96.77,70.62,0.10661,2,1,-96.01,504.82,0.90746,3,-105.94,101.02,0.09254,2,1,-97.35,516.61,0.91207,3,-107.27,112.81,0.08793,2,1,-93.82,530.18,0.9121,3,-103.74,126.39,0.0879,2,1,-90.48,533.51,0.90901,3,-100.41,129.71,0.09099,2,1,-74.42,545.49,0.89502,3,-84.35,141.69,0.10498,2,1,-72.58,548,0.89452,3,-82.51,144.2,0.10548,2,1,-72.58,554.37,0.89952,3,-82.51,150.58,0.10048,2,1,-68.46,564.19,0.90358,3,-78.39,160.4,0.09642,2,1,-57.92,573.69,0.90284,3,-67.85,169.9,0.09716,2,1,-44,580.66,0.89972,3,-53.92,176.87,0.10028,2,1,-32.6,584.5,0.89764,3,-42.53,180.71,0.10236,2,1,-17.79,588.47,0.89712,3,-27.72,184.68,0.10288,2,1,26.98,589.83,0.90344,3,17.05,186.04,0.09656,2,1,10.09,269.2,0.89553,2,109.9,-9.37,0.10447,2,1,-110.9,184.2,0.86,2,24.9,111.62,0.14,2,1,118.08,182.21,0.86,2,22.91,-117.37,0.14,3,1,-50.05,444.21,0.7568,5,5.74,-23.2,0.12,3,-59.98,40.41,0.1232,3,1,-39.34,445.95,0.6192,5,4.42,-12.43,0.28,3,-49.27,42.16,0.1008,3,1,-29.5,450.76,0.27521,5,0.02,-2.4,0.67999,3,-39.43,46.97,0.0448,3,1,-22.07,452.73,0.10322,5,-1.64,5.1,0.87998,3,-31.99,48.94,0.0168,3,1,-14.85,450.55,0.28895,5,0.84,12.22,0.66401,3,-24.78,46.75,0.04704,3,1,-10.26,442.89,0.7621,5,8.67,16.5,0.112,3,-20.19,39.1,0.1259,2,1,-15.51,439.83,0.85616,3,-25.44,36.04,0.14384,2,1,-23.16,438.96,0.86,3,-33.09,35.17,0.14,2,1,-30.37,440.05,0.86,3,-40.3,36.26,0.14,3,1,64.12,449.65,0.77744,4,2.42,25.02,0.096,3,54.19,45.86,0.12656,3,1,54.78,449.47,0.67424,4,2.86,15.27,0.216,3,44.86,45.68,0.10976,3,1,47.42,455.4,0.23393,4,-3.14,7.42,0.72799,3,37.49,51.6,0.03808,3,1,36.65,457.19,0.11009,4,-4.73,-3.88,0.87198,3,26.72,53.4,0.01792,3,1,29.65,453.6,0.40592,4,-0.79,-11.1,0.528,3,19.72,49.81,0.06608,3,1,24.62,448.04,0.75679,4,5.16,-16.2,0.12001,3,14.69,44.24,0.1232,2,1,29.83,444.26,0.86,3,19.9,40.47,0.14,2,1,36.29,442.65,0.86,3,26.36,38.86,0.14,2,1,47.6,443.55,0.86,3,37.67,39.75,0.14,3,1,23.83,470.32,0.52288,4,-18.09,-17.63,0.392,3,13.9,66.52,0.08512,3,1,51.45,470.96,0.52288,4,-19.5,11.21,0.392,3,41.52,67.16,0.08512,3,1,64.94,461.11,0.52288,4,-9.57,25.56,0.392,3,55.01,57.31,0.08512,3,1,-9.17,469.59,0.55727,5,-17.96,18.68,0.35201,3,-19.1,65.79,0.09072,3,1,-36.8,463.88,0.55727,5,-13.38,-9.16,0.35201,3,-46.73,60.09,0.09072,3,1,-47.08,455.89,0.55727,5,-5.81,-19.76,0.35201,3,-57.01,52.09,0.09072,3,1,-21.34,339.99,0.83714,2,180.69,22.05,0.027,3,-31.27,-63.8,0.13586,3,1,8.72,336.32,0.83918,2,177.02,-8.01,0.02881,3,-1.21,-67.48,0.13201,3,1,35.77,341.33,0.84615,2,182.03,-35.06,0.02259,3,25.85,-62.47,0.13126],"hull":132,"edges":[0,262,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,72,74,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,272,288,290,290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,290,306,308,308,310,312,314,314,316,318,320,320,322,322,36,318,220],"width":1091,"height":1383},"CaveScene/s-b3-after statue":{"type":"mesh","uvs":[0.63235,0.05795,0.64269,0.06529,0.64766,0.07462,0.64819,0.08515,0.64997,0.08888,0.66327,0.09195,0.6723,0.10286,0.67659,0.11544,0.68096,0.14235,0.67924,0.15431,0.67953,0.1576,0.68562,0.16236,0.69115,0.17998,0.69033,0.18747,0.69089,0.18839,0.67252,0.22128,0.6641,0.22614,0.66115,0.23009,0.64782,0.26283,0.65123,0.27557,0.65629,0.27863,0.71278,0.29164,0.75705,0.30305,0.78122,0.30465,0.79197,0.3045,0.80871,0.3164,0.82024,0.3252,0.87953,0.41907,0.90904,0.4551,0.91079,0.46299,0.92547,0.48906,0.89721,0.4871,0.88371,0.50917,0.88964,0.58561,0.89456,0.77007,0.87279,0.85483,0.82269,0.90405,0.77071,0.90657,0.77025,0.77295,0.75979,0.80032,0.75256,0.77798,0.75355,0.78298,0.75957,0.84314,0.76471,0.8924,0.77239,0.99737,0.60782,0.99737,0.59448,0.93095,0.58223,0.87245,0.56731,0.85991,0.55405,0.90898,0.55435,0.92069,0.54852,0.94153,0.53517,0.97672,0.53501,0.97926,0.53197,0.99737,0.38154,0.99737,0.38082,0.99623,0.38078,0.97398,0.38253,0.96535,0.38275,0.93382,0.38344,0.86268,0.32839,0.69768,0.33025,0.47687,0.18194,0.44358,0.12307,0.40889,0.03402,0.18954,0.01526,0.04608,0.15417,0.06967,0.22231,0.27142,0.39998,0.25689,0.48791,0.27443,0.5016,0.26719,0.50182,0.26409,0.4891,0.23299,0.48754,0.23207,0.476,0.22714,0.46675,0.21296,0.45655,0.19579,0.45333,0.17706,0.45777,0.16411,0.46054,0.16542,0.44935,0.13616,0.44772,0.12481,0.45202,0.11137,0.4561,0.10855,0.47569,0.09702,0.47794,0.0946,0.47794,0.08847,0.48294,0.07885,0.49583,0.06984,0.51282,0.06317,0.52672,0.05946,0.54479,0.05564,0.59941,0.05433,0.5788,0.36294,0.43118,0.44474,0.71056,0.44666,0.50136,0.19129,0.51443,0.1896,0.52313,0.18547,0.53551,0.18556,0.54446,0.18642,0.54991,0.19255,0.54351,0.1955,0.53417,0.19634,0.52537,0.19529,0.64139,0.19189,0.63,0.19206,0.62101,0.18996,0.60787,0.18771,0.59932,0.18808,0.59319,0.19344,0.59955,0.19707,0.60743,0.19863,0.62123,0.19776,0.58904,0.17428,0.61829,0.17366,0.63534,0.17916,0.55531,0.18138,0.52207,0.16971,0.50427,0.17401,0.54046,0.2948,0.57713,0.29833,0.61014,0.29351],"triangles":[43,44,46,46,44,45,53,54,57,57,54,55,53,57,58,53,58,52,51,52,59,52,58,59,51,59,50,59,49,50,59,60,49,46,47,43,49,60,48,47,42,43,42,47,41,60,61,48,40,48,61,47,48,41,48,40,41,38,39,40,113,109,108,112,110,109,109,116,108,108,116,117,110,115,109,109,115,116,103,100,101,105,99,100,101,100,118,118,100,119,100,99,119,57,55,56,35,36,37,34,35,38,61,62,95,96,61,95,96,95,94,40,61,96,37,38,35,38,33,34,33,96,32,38,40,33,32,96,27,27,96,26,26,96,25,23,25,22,23,24,25,40,96,33,96,94,21,21,94,123,123,19,20,123,18,19,32,27,31,31,29,30,31,28,29,31,27,28,94,121,122,94,95,121,63,68,62,62,69,95,62,68,69,25,96,22,96,21,22,21,123,20,95,70,121,70,71,121,95,69,70,63,64,68,64,65,68,94,122,123,123,122,112,18,123,112,103,112,122,122,121,103,112,102,111,112,103,102,71,72,121,121,72,103,103,72,104,17,18,113,17,113,114,17,114,107,113,18,112,72,73,104,16,17,107,68,65,67,73,105,104,105,73,97,73,74,97,97,98,105,74,75,97,16,107,106,75,76,97,16,106,15,14,106,13,14,15,106,76,77,97,113,108,114,113,112,109,114,108,107,111,110,112,103,104,100,77,78,97,104,105,100,103,101,102,98,99,105,102,118,111,118,115,111,111,115,110,102,101,118,106,107,117,107,108,117,13,106,12,11,117,10,117,12,106,97,78,120,97,120,98,120,78,80,98,120,99,65,66,67,11,12,117,120,119,99,118,119,115,117,9,10,117,116,9,78,79,80,4,116,115,92,115,119,119,91,92,93,4,115,119,120,81,9,116,8,7,4,6,6,4,5,4,7,116,4,93,3,3,93,2,1,2,0,0,2,93,92,93,115,119,81,85,85,86,119,91,119,86,89,90,86,86,88,89,91,86,90,80,81,120,84,82,83,85,81,84,8,116,7,84,81,82,86,87,88],"vertices":[2,1,101.79,588.8,0.91608,3,91.86,185.01,0.08392,2,1,110.31,581.15,0.91486,3,100.38,177.36,0.08514,2,1,114.34,571.49,0.90883,3,104.41,167.69,0.09117,2,1,114.77,560.55,0.89904,3,104.84,156.76,0.10096,2,1,116.23,556.67,0.89742,3,106.3,152.88,0.10258,2,1,127.14,553.57,0.90839,3,117.21,149.78,0.09161,2,1,134.53,542.13,0.91097,3,124.6,138.34,0.08903,2,1,138.05,529.07,0.91026,3,128.12,125.28,0.08974,2,1,141.63,501.11,0.90267,3,131.7,97.32,0.09733,2,1,140.22,488.69,0.89316,3,130.29,84.9,0.10684,2,1,140.46,485.27,0.89175,3,130.53,81.48,0.10825,2,1,145.45,480.32,0.89655,3,135.52,76.53,0.10345,2,1,149.98,462.02,0.89905,3,140.06,58.23,0.10095,2,1,149.31,454.23,0.89811,3,139.38,50.43,0.10189,2,1,149.77,453.28,0.89886,3,139.84,49.48,0.10114,2,1,134.71,419.11,0.89157,3,124.79,15.32,0.10843,2,1,127.81,414.06,0.88695,3,117.88,10.27,0.11305,2,1,125.4,409.96,0.88767,3,115.47,6.16,0.11233,2,1,114.46,375.94,0.88565,3,104.54,-27.86,0.11435,3,1,117.26,362.71,0.89508,2,203.41,-116.55,0.00105,3,107.33,-41.08,0.10387,3,1,121.41,359.52,0.92146,2,200.22,-120.7,0.00573,3,111.49,-44.28,0.07281,3,1,167.71,346,0.9726,2,186.71,-167,0.0232,3,157.78,-57.79,0.00419,2,1,203.99,334.15,0.97595,2,174.85,-203.28,0.02405,2,1,223.8,332.48,0.98203,2,173.18,-223.09,0.01797,2,1,232.62,332.64,0.98653,2,173.34,-231.91,0.01347,2,1,246.34,320.27,0.97856,2,160.97,-245.63,0.02144,2,1,255.77,311.16,0.97424,2,151.86,-255.06,0.02576,2,1,304.38,213.61,0.94466,2,54.31,-303.67,0.05534,2,1,328.57,176.13,0.957,2,16.83,-327.85,0.043,2,1,330.01,167.97,0.95689,2,8.67,-329.29,0.04311,2,1,342.04,140.89,0.97223,2,-18.41,-341.32,0.02777,2,1,318.88,142.93,0.95988,2,-16.36,-318.17,0.04012,2,1,307.82,120.01,0.94613,2,-39.29,-307.11,0.05387,2,1,312.68,40.59,0.90614,2,-118.71,-311.96,0.09386,2,1,316.72,-151.03,0.86,2,-310.33,-316.01,0.14,2,1,298.41,-238.1,0.91166,2,-397.4,-297.7,0.08834,3,1,257.69,-290.08,0.92001,2,-449.38,-256.98,0.06514,0,290.56,563.14,0.01486,2,1,215.19,-292.9,0.4899,0,248.06,560.32,0.5101,2,1,214.89,-153.92,0.43059,0,247.76,699.29,0.56941,2,1,203.4,-187.27,0.39257,0,236.27,665.94,0.60743,2,1,200.32,-159.29,0.32812,0,233.19,693.92,0.67188,2,1,201.13,-164.49,0.27893,0,234,688.72,0.72107,1,0,238.93,626.21,1,1,0,243.15,575.03,1,2,1,216.57,-387.24,0.65144,0,249.44,465.97,0.34856,2,1,81.68,-387.24,0.24331,0,114.55,465.97,0.75669,1,0,103.62,534.98,1,1,0,93.58,595.77,1,1,0,81.35,608.79,1,1,0,70.48,557.81,1,1,0,70.73,545.64,1,1,0,65.95,523.99,1,1,0,55.01,487.42,1,1,0,54.88,484.79,1,2,1,19.51,-387.24,0.13599,0,52.38,465.97,0.86401,2,1,-103.78,-387.24,0.61186,0,-70.91,465.97,0.38814,2,1,-104.35,-386.2,0.60735,0,-71.47,467.01,0.39265,2,1,-104.41,-362.93,0.43347,0,-71.54,490.28,0.56653,2,1,-102.97,-353.97,0.35855,0,-70.1,499.25,0.64145,2,1,-102.79,-321.21,0.14116,0,-69.92,532,0.85884,2,2,-406.6,102.94,0.07322,0,-69.35,605.91,0.92678,3,1,-147.35,-75.86,0.73892,2,-235.16,148.06,0.07939,0,-114.48,777.35,0.18169,3,1,-145.55,155.11,0.8848,2,-4.19,146.26,0.1004,0,-112.68,1008.32,0.0148,2,1,-266.64,192.44,0.935,2,33.14,267.35,0.065,2,1,-315.24,226.41,0.93192,2,67.11,315.96,0.06808,2,1,-388.72,451.48,0.94908,2,292.18,389.44,0.05092,2,1,-403.5,597.43,0.96588,2,438.13,404.22,0.03412,2,1,-290.06,577.08,0.96592,2,417.78,290.77,0.03408,2,1,-234.6,365.15,0.96348,2,205.85,235.31,0.03652,2,1,-88.76,381.55,0.98035,2,222.25,89.47,0.01965,2,1,-16.6,363.89,0.94523,3,-26.52,-39.91,0.05477,2,1,-5.37,371.4,0.90717,3,-15.3,-32.39,0.09283,2,1,-5.19,374.63,0.90298,3,-15.12,-29.16,0.09702,2,1,-15.62,406.94,0.90334,3,-25.55,3.15,0.09666,2,1,-16.9,407.89,0.90388,3,-26.83,4.1,0.09612,2,1,-26.36,413.02,0.91049,3,-36.29,9.23,0.08951,2,1,-33.94,427.75,0.90826,3,-43.87,23.95,0.09174,2,1,-42.3,445.59,0.90783,3,-52.23,41.8,0.09217,2,1,-44.94,465.06,0.90374,3,-54.87,61.26,0.09626,2,1,-41.3,478.53,0.89661,3,-51.23,74.74,0.10339,2,1,-39.03,477.14,0.89339,3,-48.96,73.35,0.10661,2,1,-48.2,507.55,0.90746,3,-58.13,103.75,0.09254,2,1,-49.54,519.34,0.91207,3,-59.46,115.55,0.08793,2,1,-46.01,532.91,0.9121,3,-55.93,129.12,0.0879,2,1,-42.67,536.24,0.90901,3,-52.6,132.44,0.09099,2,1,-26.61,548.22,0.89502,3,-36.54,144.42,0.10498,2,1,-24.77,550.73,0.89452,3,-34.7,146.94,0.10548,2,1,-24.77,557.1,0.89952,3,-34.7,153.31,0.10048,2,1,-20.65,566.92,0.90358,3,-30.58,163.13,0.09642,2,1,-10.11,576.42,0.90284,3,-20.04,172.63,0.09716,2,1,3.81,583.39,0.89972,3,-6.11,179.6,0.10028,2,1,15.21,587.23,0.89764,3,5.28,183.44,0.10236,2,1,30.02,591.2,0.89712,3,20.09,187.41,0.10288,2,1,74.79,592.56,0.90344,3,64.86,188.77,0.09656,2,1,57.9,271.93,0.89553,2,112.63,-57.18,0.10447,2,1,-63.09,186.94,0.86,2,27.64,63.81,0.14,2,1,165.89,184.94,0.86,2,25.64,-165.18,0.14,3,1,-5.57,450.27,0.7568,5,1.49,21.49,0.12,3,-15.5,46.48,0.1232,3,1,5.14,452.02,0.6192,5,0.18,32.26,0.28,3,-4.79,48.22,0.1008,3,1,12.27,456.31,0.27521,5,-3.82,39.56,0.67999,3,2.34,52.52,0.0448,3,1,22.41,456.22,0.10322,5,-3.31,49.69,0.87998,3,12.48,52.42,0.0168,3,1,29.75,455.32,0.28895,5,-2.12,56.99,0.66401,3,19.83,51.53,0.04704,3,1,34.22,448.96,0.7621,5,4.42,61.19,0.112,3,24.29,45.16,0.1259,2,1,28.97,445.9,0.85616,3,19.04,42.1,0.14384,2,1,21.32,445.02,0.86,3,11.39,41.23,0.14,2,1,14.1,446.12,0.86,3,4.18,42.32,0.14,3,1,109.19,449.65,0.77744,4,1.21,72.11,0.096,3,99.27,45.85,0.12656,3,1,99.86,449.47,0.67424,4,1.65,62.36,0.216,3,89.93,45.67,0.10976,3,1,92.5,451.65,0.23393,4,-0.43,54.61,0.72799,3,82.57,47.85,0.03808,3,1,81.72,453.99,0.11009,4,-2.59,43.29,0.87198,3,71.8,50.2,0.01792,3,1,74.72,453.6,0.40592,4,-1.99,35.99,0.528,3,64.79,49.8,0.06608,3,1,69.69,448.03,0.75679,4,3.96,30.88,0.12001,3,59.77,44.24,0.1232,2,1,74.9,444.26,0.86,3,64.97,40.47,0.14,2,1,81.36,442.65,0.86,3,71.44,38.85,0.14,2,1,92.68,443.54,0.86,3,82.75,39.75,0.14,3,1,66.29,467.94,0.52288,4,-16.75,26.8,0.392,3,56.36,64.15,0.08512,3,1,90.27,468.59,0.52288,4,-18.07,51.83,0.392,3,80.34,64.79,0.08512,3,1,104.24,462.87,0.52288,4,-12.47,66.58,0.392,3,94.31,59.07,0.08512,3,1,38.64,460.56,0.55727,5,-6.99,66.08,0.35201,3,28.71,56.77,0.09072,3,1,11.4,472.69,0.55727,5,-20.22,39.36,0.35201,3,1.47,68.89,0.09072,3,1,-3.19,468.22,0.55727,5,-16.35,24.6,0.35201,3,-13.12,64.43,0.09072,3,1,26.47,342.72,0.83714,2,183.42,-25.76,0.027,3,16.54,-61.07,0.13586,3,1,56.53,339.05,0.83918,2,179.75,-55.82,0.02881,3,46.6,-64.74,0.13201,3,1,83.58,344.06,0.84615,2,184.76,-82.87,0.02259,3,73.66,-59.73,0.13126],"hull":94,"edges":[0,186,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,122,124,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,196,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,214,230,232,232,234,236,238,238,240,242,244,244,246,246,36,242,144,68,70,66,68,124,126,120,122],"width":1091,"height":1383},"Helen TF dressed 1":{"type":"mesh","uvs":[0.40993,0.01272,0.41004,0.01402,0.41926,0.02133,0.42853,0.02574,0.44502,0.02949,0.47236,0.02438,0.50556,0.02019,0.55187,0.02893,0.56484,0.02972,0.5715,0.02914,0.60459,0.02945,0.60933,0.02464,0.61684,0.02795,0.63546,0.04279,0.65163,0.05378,0.6564,0.07988,0.66696,0.0834,0.65909,0.09505,0.63382,0.1109,0.63452,0.11334,0.64305,0.12055,0.64029,0.12226,0.61113,0.12273,0.60902,0.13029,0.64304,0.13622,0.63263,0.14011,0.63329,0.1439,0.656,0.15859,0.65705,0.17125,0.64169,0.17366,0.64132,0.18066,0.67998,0.18671,0.68877,0.18668,0.698,0.18581,0.71639,0.18986,0.7282,0.19566,0.74459,0.19819,0.76603,0.2184,0.83302,0.27363,0.83491,0.27257,0.84738,0.28166,0.85292,0.28464,0.87338,0.29485,0.88448,0.30719,0.87761,0.31129,0.8804,0.31616,0.89601,0.32934,0.89197,0.34775,0.85452,0.36807,0.75458,0.42764,0.73459,0.44502,0.73314,0.44834,0.75886,0.46481,0.7753,0.47952,0.78489,0.50004,0.78644,0.57025,0.74916,0.63086,0.71454,0.66564,0.67288,0.69705,0.66462,0.75279,0.63353,0.81542,0.62511,0.84031,0.62116,0.89124,0.63991,0.89954,0.63897,0.90469,0.6639,0.9224,0.68601,0.92831,0.69709,0.92963,0.71148,0.93026,0.72609,0.93536,0.73759,0.94824,0.74883,0.95617,0.74593,0.96279,0.73595,0.96771,0.69122,0.96914,0.65927,0.96727,0.6174,0.96047,0.5866,0.95042,0.55923,0.95075,0.52707,0.94397,0.52306,0.94181,0.52333,0.91946,0.51624,0.91666,0.4723,0.92611,0.45051,0.9237,0.41476,0.93642,0.36952,0.94248,0.34741,0.94314,0.30115,0.94312,0.28806,0.93705,0.28807,0.92894,0.29496,0.92577,0.31274,0.90613,0.31937,0.90509,0.34133,0.90439,0.37062,0.89756,0.3988,0.878,0.39654,0.87564,0.41525,0.86432,0.3827,0.8185,0.27889,0.72437,0.27873,0.70647,0.26465,0.68605,0.23249,0.63565,0.22303,0.58273,0.22305,0.54564,0.23401,0.50839,0.24584,0.49277,0.27072,0.46688,0.2633,0.4622,0.25145,0.44745,0.26675,0.44122,0.26799,0.43674,0.28544,0.4237,0.28556,0.41659,0.24344,0.36165,0.19988,0.35486,0.15847,0.34325,0.12267,0.32738,0.10534,0.3145,0.08987,0.29627,0.08054,0.27876,0.06036,0.25432,0.06684,0.24519,0.09718,0.23149,0.10094,0.22932,0.1202,0.21349,0.1781,0.1954,0.20132,0.19042,0.24415,0.18427,0.30507,0.18533,0.30983,0.1843,0.33777,0.17215,0.33636,0.16801,0.34365,0.17049,0.35187,0.16843,0.36069,0.16589,0.37748,0.16905,0.43157,0.16301,0.44005,0.16231,0.45537,0.15673,0.46515,0.15368,0.42051,0.14273,0.41388,0.14198,0.406,0.14709,0.39929,0.14537,0.39286,0.13739,0.37248,0.13417,0.37105,0.12853,0.35536,0.11682,0.33225,0.09166,0.33256,0.05582,0.33806,0.04378,0.33636,0.04164,0.32012,0.0302,0.32335,0.02951,0.34862,0.03169,0.35264,0.03222,0.39054,0.03133,0.40605,0.02859,0.40266,0.01454,0.4036,0.01249,0.08397,0.2509,0.73942,0.27826,0.36583,0.27258,0.47524,0.19652,0.43388,0.41506,0.45256,0.50077,0.49344,0.15829,0.53702,0.15484,0.57872,0.14107,0.51294,0.09504,0.52749,0.09317,0.54542,0.09346,0.56199,0.0936,0.54474,0.10152,0.52613,0.10238,0.51362,0.10051,0.43885,0.10022,0.4534,0.10137,0.45678,0.10411,0.43919,0.10799,0.42871,0.10583,0.42194,0.10281,0.41517,0.09216,0.44562,0.08698,0.50854,0.08381,0.53121,0.08482,0.55455,0.08727,0.43092,0.08948,0.41176,0.06055,0.49423,0.05475,0.55089,0.05597,0.57958,0.06909,0.60038,0.08206,0.60109,0.09747,0.57922,0.11074,0.5993,0.10693,0.40674,0.07657,0.40853,0.08404,0.44618,0.11944,0.42072,0.10845,0.42431,0.11974,0.44152,0.13637,0.45846,0.14727,0.47695,0.09592,0.48605,0.1203,0.5006,0.1497,0.46877,0.07136],"triangles":[173,172,187,173,188,174,171,186,172,175,172,173,161,1,160,1,161,0,2,160,1,159,2,3,2,159,160,10,11,12,153,155,156,154,155,153,153,156,157,152,153,157,191,5,6,191,6,7,4,5,191,192,191,7,192,7,8,192,8,9,10,192,9,4,190,159,4,159,3,190,4,191,158,159,190,13,193,192,10,12,13,13,192,10,208,190,191,158,152,157,198,190,208,14,194,193,14,193,13,194,14,15,186,191,192,187,186,192,208,191,186,198,189,199,193,187,192,188,187,193,208,185,198,205,185,208,194,188,193,185,189,198,158,190,152,190,151,152,198,151,190,184,199,189,172,186,187,188,173,187,174,188,194,17,15,16,194,15,17,186,205,208,205,186,171,195,194,17,174,194,195,178,189,185,179,178,185,184,189,178,177,171,172,205,171,177,205,179,185,176,177,172,175,173,174,175,176,172,183,184,178,180,179,205,182,183,178,195,196,174,181,178,179,181,179,180,182,178,181,183,149,184,200,201,183,197,196,195,175,174,196,18,195,17,197,195,18,150,198,199,198,150,151,184,150,199,201,149,183,184,149,150,200,181,180,182,200,183,181,200,182,202,201,200,149,201,202,206,205,177,180,205,206,200,180,206,206,177,176,21,19,20,19,22,197,19,197,18,22,19,21,196,197,22,148,149,202,22,170,196,146,147,148,203,202,200,202,146,148,202,143,146,25,23,24,196,176,175,23,170,22,203,143,202,142,143,203,145,146,143,144,145,143,206,203,200,204,203,206,142,203,204,170,207,206,204,206,207,196,206,176,196,170,206,141,204,207,142,204,141,169,207,170,168,141,207,168,207,169,132,133,134,29,26,27,29,27,28,26,29,170,168,140,141,168,139,140,165,139,168,162,123,124,122,123,162,137,135,136,137,134,135,137,132,134,137,131,132,165,164,131,130,131,164,138,139,165,137,138,165,165,131,137,37,163,35,37,35,36,163,37,38,121,122,162,38,39,40,125,120,162,121,162,120,44,42,43,125,164,120,125,162,124,164,119,120,164,128,129,164,129,130,127,128,164,125,126,127,125,127,164,118,119,164,117,118,164,170,23,25,47,45,46,116,117,164,115,116,164,170,25,26,29,169,170,30,169,29,165,168,169,30,165,169,41,44,163,44,41,42,45,163,44,48,45,47,163,166,164,115,164,166,165,30,31,31,164,165,114,115,166,32,33,34,35,31,32,31,35,164,32,34,35,163,164,35,49,163,48,40,163,38,41,163,40,163,45,48,166,163,49,50,166,49,51,166,50,109,110,111,113,111,112,166,108,111,109,111,108,167,166,51,113,114,166,113,166,111,167,108,166,54,55,167,52,54,51,53,54,52,54,167,51,56,167,55,105,167,104,167,103,104,57,167,56,107,167,106,167,107,108,57,103,167,105,106,167,103,58,102,57,58,103,101,102,58,100,101,58,59,100,58,59,99,100,60,99,59,61,99,60,98,99,61,96,97,98,62,98,61,64,62,63,82,98,62,81,82,62,96,98,82,84,95,96,64,81,62,82,84,96,83,84,82,85,95,84,94,95,85,86,94,85,93,88,91,89,90,91,88,89,91,87,88,93,93,91,92,87,93,94,86,87,94,79,81,78,64,77,81,80,81,79,64,65,77,77,78,81,76,77,65,76,65,66,72,70,71,75,76,66,75,66,67,69,70,67,73,70,72,74,75,67,67,70,74,69,67,68,73,74,70],"vertices":[4,0,-16.71,1578.53,0.63101,1,-49.58,725.32,0.08899,2,566.02,50.29,0.08,3,-59.51,321.53,0.2,4,0,-16.63,1576.27,0.62933,1,-49.5,723.06,0.09067,2,563.76,50.21,0.08,3,-59.43,319.27,0.2,4,0,-9.81,1563.58,0.61929,1,-42.68,710.36,0.10071,2,551.06,43.39,0.08,3,-52.61,306.57,0.2,4,0,-2.96,1555.92,0.6192,1,-35.84,702.71,0.1008,2,543.41,36.55,0.08,3,-45.76,298.91,0.2,4,0,9.22,1549.41,0.6192,1,-23.65,696.2,0.1008,2,536.9,24.36,0.08,3,-33.58,292.41,0.2,4,0,29.43,1558.28,0.6192,1,-3.44,705.07,0.1008,2,545.77,4.16,0.08,3,-13.37,301.28,0.2,4,0,53.96,1565.56,0.6192,1,21.09,712.35,0.1008,2,553.05,-20.38,0.08,3,11.16,308.56,0.2,4,0,88.19,1550.38,0.6192,1,55.32,697.17,0.1008,2,537.87,-54.6,0.08,3,45.39,293.37,0.2,4,0,97.77,1549.02,0.6192,1,64.9,695.8,0.1008,2,536.5,-64.19,0.08,3,54.97,292.01,0.2,4,0,102.69,1550.01,0.6192,1,69.82,696.8,0.1008,2,537.5,-69.11,0.08,3,59.89,293,0.2,4,0,127.15,1549.48,0.6192,1,94.28,696.27,0.1008,2,536.97,-93.56,0.08,3,84.35,292.48,0.2,4,0,130.65,1557.83,0.6192,1,97.78,704.62,0.1008,2,545.32,-97.06,0.08,3,87.85,300.83,0.2,4,0,136.2,1552.08,0.6192,1,103.33,698.87,0.1008,2,539.57,-102.62,0.08,3,93.4,295.07,0.2,4,0,149.96,1526.31,0.6192,1,117.09,673.1,0.1008,2,513.8,-116.37,0.08,3,107.16,269.3,0.2,4,0,161.9,1507.22,0.62029,1,129.03,654.01,0.10098,2,494.71,-128.32,0.08014,3,119.1,250.22,0.1986,4,0,165.43,1461.89,0.62486,1,132.56,608.67,0.10172,2,449.37,-131.85,0.08073,3,122.63,204.88,0.19269,4,0,173.24,1455.78,0.63402,1,140.37,602.56,0.10321,2,443.26,-139.65,0.08191,3,130.44,198.77,0.18085,4,0,167.42,1435.54,0.62711,1,134.55,582.32,0.10209,2,423.02,-133.84,0.08102,3,124.62,178.53,0.18979,4,0,148.75,1407.99,0.6192,1,115.88,554.78,0.1008,2,395.48,-115.16,0.08,3,105.95,150.99,0.2,4,0,149.26,1403.76,0.6192,1,116.39,550.55,0.1008,2,391.25,-115.68,0.08,3,106.46,146.75,0.2,4,0,155.57,1391.24,0.63919,1,122.7,538.02,0.10405,2,378.72,-121.99,0.08258,3,112.77,134.23,0.17417,4,0,153.53,1388.27,0.64158,1,120.66,535.06,0.10444,2,375.76,-119.94,0.08289,3,110.73,131.26,0.17108,4,0,131.98,1387.45,0.62027,1,99.11,534.24,0.10097,2,374.94,-98.39,0.08014,3,89.18,130.45,0.19862,4,0,130.42,1374.33,0.63807,1,97.55,521.12,0.10387,2,361.82,-96.84,0.08244,3,87.62,117.32,0.17563,4,0,155.56,1364.02,0.69087,1,122.69,510.81,0.11247,2,351.51,-121.98,0.08926,3,112.76,107.02,0.1074,4,0,147.87,1357.27,0.69483,1,115,504.05,0.11311,2,344.75,-114.28,0.08977,3,105.07,100.26,0.10228,4,0,148.35,1350.67,0.70885,1,115.48,497.46,0.11539,2,338.16,-114.77,0.09158,3,105.55,93.67,0.08417,3,0,165.14,1325.16,0.774,1,132.27,471.95,0.126,2,312.65,-131.55,0.1,3,0,165.91,1303.18,0.774,1,133.04,449.96,0.126,2,290.66,-132.33,0.1,3,0,154.56,1298.99,0.774,1,121.69,445.77,0.126,2,286.47,-120.98,0.1,3,0,154.29,1286.83,0.774,1,121.42,433.62,0.126,2,274.32,-120.71,0.1,3,0,182.86,1276.33,0.7828,1,149.99,423.11,0.12743,2,263.81,-149.27,0.08977,3,0,189.35,1276.37,0.78678,1,156.48,423.16,0.12808,2,263.86,-155.77,0.08514,3,0,196.17,1277.88,0.79075,1,163.3,424.67,0.12873,2,265.37,-162.59,0.08053,3,0,209.76,1270.85,0.80031,1,176.89,417.64,0.13028,2,258.34,-176.18,0.06941,3,0,218.49,1260.78,0.80755,1,185.62,407.57,0.13146,2,248.27,-184.91,0.06099,3,0,230.6,1256.38,0.81579,1,197.73,403.17,0.1328,2,243.87,-197.02,0.0514,3,0,246.45,1221.27,0.83402,1,213.58,368.05,0.13577,2,208.75,-212.86,0.03021,3,0,295.95,1125.34,0.81439,1,263.08,272.12,0.13257,2,112.82,-262.37,0.05304,3,0,297.35,1127.17,0.81562,1,264.48,273.96,0.13278,2,114.66,-263.76,0.0516,3,0,306.57,1111.4,0.80629,1,273.7,258.18,0.13126,2,98.88,-272.99,0.06246,3,0,310.66,1106.21,0.80347,1,277.79,253,0.1308,2,93.7,-277.07,0.06574,3,0,325.78,1088.49,0.79504,1,292.91,235.27,0.12942,2,75.97,-292.2,0.07554,3,0,333.98,1067.04,0.78418,1,301.11,213.83,0.12766,2,54.53,-300.4,0.08816,3,0,328.91,1059.92,0.77875,1,296.04,206.71,0.12677,2,47.41,-295.32,0.09448,3,0,330.97,1051.46,0.77426,1,298.1,198.24,0.12604,2,38.94,-297.39,0.0997,3,0,342.5,1028.57,0.774,1,309.63,175.35,0.126,2,16.05,-308.92,0.1,3,0,339.52,996.6,0.774,1,306.65,143.39,0.126,2,-15.91,-305.94,0.1,3,0,311.84,961.3,0.774,1,278.97,108.08,0.126,2,-51.22,-278.26,0.1,3,0,237.99,857.82,0.774,1,205.12,4.61,0.126,2,-154.69,-204.41,0.1,3,0,223.21,827.63,0.774,1,190.34,-25.58,0.126,2,-184.88,-189.63,0.1,3,0,222.14,821.87,0.774,1,189.27,-31.35,0.126,2,-190.65,-188.56,0.1,3,0,241.15,793.25,0.79221,1,208.28,-59.96,0.10779,2,-219.26,-207.56,0.1,3,0,253.3,767.72,0.81697,1,220.43,-85.5,0.08303,2,-244.8,-219.72,0.1,3,0,260.38,732.06,0.84668,1,227.51,-121.15,0.05332,2,-280.45,-226.8,0.1,2,0,261.53,610.1,0.97701,2,-402.41,-227.94,0.02299,1,0,233.98,504.84,1,1,0,208.4,444.41,1,1,0,177.61,389.86,1,1,0,171.51,293.03,1,1,0,148.53,184.24,1,1,0,142.31,141.02,1,1,0,139.39,52.54,1,1,0,153.25,38.13,1,1,0,152.55,29.19,1,1,0,170.98,-1.57,1,1,0,187.32,-11.83,1,1,0,195.5,-14.14,1,1,0,206.14,-15.24,1,1,0,216.93,-24.09,1,1,0,225.43,-46.46,1,1,0,233.74,-60.24,1,1,0,231.59,-71.74,1,1,0,224.22,-80.27,1,1,0,191.17,-82.76,1,1,0,167.56,-79.52,1,1,0,136.61,-67.71,1,1,0,113.85,-50.25,1,1,0,93.62,-50.82,1,1,0,69.86,-39.05,1,1,0,66.9,-35.3,1,1,0,67.1,3.53,1,1,0,61.85,8.39,1,1,0,29.38,-8.02,1,1,0,13.28,-3.84,1,1,0,-13.14,-25.93,1,1,0,-46.57,-36.45,1,1,0,-62.91,-37.61,1,1,0,-97.1,-37.57,1,1,0,-106.77,-27.02,1,1,0,-106.77,-12.93,1,1,0,-101.67,-7.43,1,1,0,-88.53,26.69,1,1,0,-83.63,28.48,1,1,0,-67.41,29.71,1,1,0,-45.76,41.57,1,1,0,-24.94,75.55,1,1,0,-26.61,79.65,1,1,0,-12.78,99.31,1,1,0,-36.83,178.91,1,1,0,-113.55,342.4,1,1,0,-113.66,373.5,1,1,0,-124.07,408.97,1,1,0,-147.84,496.51,1,2,0,-154.83,588.43,0.99696,2,-424.08,188.41,0.00304,2,0,-154.82,652.85,0.96425,2,-359.66,188.4,0.03575,2,0,-146.72,717.57,0.93564,2,-294.95,180.3,0.06436,3,0,-137.97,744.69,0.89625,1,-170.84,-108.53,0.02283,2,-267.83,171.55,0.08092,3,0,-119.58,789.67,0.83304,1,-152.45,-63.54,0.06696,2,-222.84,153.17,0.1,3,0,-125.07,797.79,0.82887,1,-157.94,-55.42,0.07113,2,-214.72,158.65,0.1,3,0,-133.82,823.42,0.81204,1,-166.69,-29.8,0.08796,2,-189.1,167.41,0.1,3,0,-122.52,834.24,0.79775,1,-155.39,-18.97,0.10225,2,-178.27,156.1,0.1,3,0,-121.61,842.01,0.79118,1,-154.48,-11.2,0.10882,2,-170.5,155.19,0.1,3,0,-108.71,864.66,0.774,1,-141.58,11.45,0.126,2,-147.85,142.29,0.1,3,0,-108.62,877.02,0.774,1,-141.49,23.8,0.126,2,-135.5,142.2,0.1,3,0,-139.75,972.45,0.702,1,-172.62,119.24,0.11428,2,-40.06,173.33,0.18372,3,0,-171.93,984.25,0.69843,1,-204.81,131.04,0.1137,2,-28.26,205.52,0.18787,3,0,-202.54,1004.42,0.6935,1,-235.41,151.2,0.11289,2,-8.1,236.12,0.19361,3,0,-229,1031.98,0.688,1,-261.87,178.77,0.112,2,19.47,262.58,0.2,3,0,-241.8,1054.35,0.688,1,-274.67,201.14,0.112,2,41.84,275.39,0.2,3,0,-253.23,1086.01,0.688,1,-286.1,232.79,0.112,2,73.49,286.82,0.2,3,0,-260.13,1116.43,0.688,1,-293,263.22,0.112,2,103.92,293.72,0.2,3,0,-275.04,1158.88,0.72022,1,-307.91,305.66,0.11724,2,146.36,308.63,0.16254,3,0,-270.25,1174.73,0.72395,1,-303.12,321.52,0.11785,2,162.22,303.84,0.1582,3,0,-247.84,1198.54,0.70772,1,-280.71,345.33,0.11521,2,186.03,281.42,0.17707,3,0,-245.06,1202.3,0.70757,1,-277.93,349.09,0.11519,2,189.79,278.64,0.17724,3,0,-230.82,1229.8,0.69706,1,-263.69,376.59,0.11348,2,217.29,264.41,0.18946,3,0,-188.04,1261.22,0.688,1,-220.91,408.01,0.112,2,248.71,221.62,0.2,3,0,-170.88,1269.87,0.69512,1,-203.75,416.65,0.11316,2,257.36,204.46,0.19173,3,0,-139.22,1280.56,0.70944,1,-172.09,427.35,0.11549,2,268.05,172.81,0.17507,3,0,-94.2,1278.71,0.72755,1,-127.07,425.5,0.11844,2,266.2,127.78,0.15402,3,0,-90.68,1280.5,0.73188,1,-123.55,427.29,0.11914,2,267.99,124.27,0.14898,3,0,-70.04,1301.61,0.77041,1,-102.91,448.4,0.12541,2,289.1,103.62,0.10418,3,0,-71.08,1308.79,0.774,1,-103.95,455.58,0.126,2,296.28,104.66,0.1,3,0,-65.69,1304.49,0.774,1,-98.56,451.27,0.126,2,291.97,99.28,0.1,3,0,-59.62,1308.07,0.774,1,-92.49,454.86,0.126,2,295.56,93.2,0.1,3,0,-53.1,1312.49,0.774,1,-85.97,459.27,0.126,2,299.97,86.69,0.1,3,0,-40.69,1307,0.774,1,-73.56,453.79,0.126,2,294.49,74.27,0.1,4,0,-0.72,1317.49,0.75242,1,-33.59,464.27,0.12249,2,304.97,34.3,0.09721,3,-43.52,60.48,0.02788,4,0,5.55,1318.69,0.74395,1,-27.32,465.48,0.12111,2,306.18,28.03,0.09612,3,-37.25,61.69,0.03883,4,0,16.87,1328.39,0.71316,1,-16,475.18,0.1161,2,315.88,16.71,0.09214,3,-25.93,71.39,0.07861,4,0,24.1,1333.69,0.6966,1,-8.77,480.48,0.1134,2,321.18,9.48,0.09,3,-18.7,76.69,0.1,4,0,-8.89,1352.71,0.68636,1,-41.76,499.5,0.11173,2,340.2,42.48,0.08868,3,-51.69,95.7,0.11323,4,0,-13.79,1354.01,0.69055,1,-46.66,500.8,0.11241,2,341.5,47.37,0.08922,3,-56.59,97,0.10782,4,0,-19.61,1345.14,0.71593,1,-52.48,491.92,0.11655,2,332.62,53.2,0.0925,3,-62.41,88.13,0.07503,4,0,-24.57,1348.13,0.71582,1,-57.44,494.92,0.11653,2,335.62,58.16,0.09248,3,-67.37,91.12,0.07517,4,0,-29.33,1361.99,0.69572,1,-62.2,508.78,0.11326,2,349.48,62.91,0.08989,3,-72.13,104.99,0.10114,4,0,-44.39,1367.58,0.70751,1,-77.26,514.36,0.11518,2,355.07,77.97,0.09141,3,-87.19,110.57,0.08591,4,0,-45.44,1377.37,0.69192,1,-78.31,524.16,0.11264,2,364.86,79.02,0.08939,3,-88.24,120.37,0.10605,4,0,-57.04,1397.71,0.68137,1,-89.91,544.5,0.11092,2,385.2,90.62,0.08803,3,-99.83,140.71,0.11967,4,0,-74.12,1441.43,0.68569,1,-106.99,588.21,0.11162,2,428.91,107.7,0.08859,3,-116.92,184.42,0.11409,4,0,-73.89,1503.68,0.62159,1,-106.76,650.47,0.10119,2,491.17,107.47,0.08031,3,-116.69,246.67,0.19692,4,0,-69.82,1524.59,0.6192,1,-102.69,671.38,0.1008,2,512.08,103.4,0.08,3,-112.62,267.59,0.2,4,0,-71.08,1528.31,0.6192,1,-103.95,675.1,0.1008,2,515.8,104.66,0.08,3,-113.88,271.31,0.2,4,0,-83.08,1548.17,0.62453,1,-115.95,694.96,0.09547,2,535.66,116.66,0.08,3,-125.88,291.17,0.2,4,0,-80.69,1549.37,0.62446,1,-113.56,696.16,0.09554,2,536.86,114.27,0.08,3,-123.49,292.37,0.2,4,0,-62.02,1545.59,0.6192,1,-94.89,692.38,0.1008,2,533.08,95.6,0.08,3,-104.81,288.58,0.2,4,0,-59.05,1544.67,0.6192,1,-91.92,691.46,0.1008,2,532.16,92.63,0.08,3,-101.85,287.66,0.2,4,0,-31.04,1546.21,0.6192,1,-63.91,692.99,0.1008,2,533.69,64.62,0.08,3,-73.84,289.2,0.2,4,0,-19.58,1550.97,0.6192,1,-52.45,697.76,0.1008,2,538.46,53.16,0.08,3,-62.38,293.97,0.2,4,0,-22.08,1575.37,0.62934,1,-54.96,722.16,0.09066,2,562.86,55.67,0.08,3,-64.88,318.37,0.2,4,0,-21.39,1578.94,0.63187,1,-54.26,725.73,0.08813,2,566.43,54.97,0.08,3,-64.19,321.94,0.2,3,0,-257.6,1164.82,0.67999,1,-290.47,311.61,0.1107,2,152.31,291.18,0.20932,3,0,226.78,1117.3,0.65849,1,193.91,264.09,0.1072,2,104.79,-193.2,0.23431,3,0,-49.3,1127.16,0.65016,1,-82.17,273.95,0.10584,2,114.65,82.88,0.244,3,0,31.55,1259.29,0.74648,1,-1.32,406.07,0.12152,2,246.77,2.03,0.132,3,0,0.99,879.68,0.7396,1,-31.88,26.46,0.1204,2,-132.84,32.59,0.14,3,0,14.79,730.79,0.67449,1,-18.08,-122.42,0.06551,2,-281.72,18.79,0.26,4,0,45.01,1325.69,0.71015,1,12.14,472.48,0.11561,2,313.18,-11.42,0.09175,3,2.21,68.68,0.0825,4,0,77.21,1331.67,0.69899,1,44.34,478.46,0.11379,2,319.16,-43.62,0.09031,3,34.41,74.66,0.09692,4,0,108.03,1355.59,0.65865,1,75.16,502.38,0.10722,2,343.08,-74.44,0.0851,3,65.23,98.58,0.14903,5,0,59.42,1435.55,0.35666,1,26.54,582.34,0.05806,2,423.04,-25.83,0.04608,3,16.62,178.54,0.1152,4,-135.2,-17.79,0.424,5,0,70.17,1438.8,0.18824,1,37.29,585.59,0.03064,2,426.29,-36.58,0.02432,3,27.37,181.79,0.0608,4,-138.88,-6.65,0.696,5,0,83.42,1438.3,0.23777,1,50.54,585.09,0.03871,2,425.79,-49.83,0.03072,3,40.62,181.29,0.0768,4,-138.71,7.21,0.616,5,0,95.67,1438.05,0.33189,1,62.79,584.84,0.05403,2,425.54,-62.08,0.04288,3,52.87,181.04,0.1072,4,-138.78,20.01,0.464,4,0,82.92,1424.3,0.6192,1,50.04,571.09,0.1008,2,411.79,-49.33,0.08,3,40.12,167.29,0.2,4,0,69.17,1422.8,0.6192,1,36.29,569.59,0.1008,2,410.29,-35.58,0.08,3,26.37,165.79,0.2,4,0,59.92,1426.05,0.6192,1,27.04,572.84,0.1008,2,413.54,-26.33,0.08,3,17.12,169.04,0.2,5,0,4.67,1426.55,0.23283,1,-28.21,573.34,0.0379,2,414.04,28.92,0.03008,3,-38.13,169.54,0.0752,4,-124.33,-74.75,0.62398,5,0,15.42,1424.55,0.4805,1,-17.46,571.34,0.07822,2,412.04,18.17,0.06208,3,-27.38,167.54,0.1552,4,-122.53,-63.46,0.224,4,0,17.92,1419.8,0.6192,1,-14.95,566.59,0.1008,2,407.29,15.67,0.08,3,-24.88,162.79,0.2,4,0,4.92,1413.05,0.6192,1,-27.95,559.84,0.1008,2,400.54,28.67,0.08,3,-37.88,156.04,0.2,4,0,-2.83,1416.8,0.6192,1,-35.71,563.59,0.1008,2,404.29,36.42,0.08,3,-45.63,159.79,0.2,5,0,-7.83,1422.05,0.53499,1,-40.7,568.84,0.08709,2,409.54,41.42,0.06912,3,-50.63,165.04,0.1728,4,-119.29,-87.69,0.136,4,0,-12.83,1440.55,0.6192,1,-45.7,587.34,0.1008,2,428.04,46.42,0.08,3,-55.63,183.54,0.2,5,0,9.67,1449.55,0.5449,1,-23.2,596.34,0.0887,2,437.04,23.92,0.0704,3,-33.13,192.54,0.176,4,-148.49,-70.14,0.12,5,0,56.17,1455.05,0.54565,1,23.29,601.84,0.08883,2,442.54,-22.58,0.0705,3,13.37,198.04,0.17503,4,-155.48,-21.71,0.12,5,0,72.92,1453.3,0.54492,1,40.04,600.09,0.08871,2,440.79,-39.33,0.0704,3,30.12,196.29,0.17596,4,-154.1,-4.16,0.12,5,0,90.17,1449.05,0.5449,1,57.29,595.84,0.0887,2,436.54,-56.58,0.0704,3,47.37,192.04,0.176,4,-150.12,13.97,0.12,5,0,-1.2,1445.21,0.5449,1,-34.07,591.99,0.0887,2,432.69,34.78,0.0704,3,-44,188.2,0.176,4,-143.66,-81.37,0.12,4,0,-15.36,1495.46,0.6192,1,-48.23,642.25,0.1008,2,482.95,48.94,0.08,3,-58.16,238.46,0.2,4,0,45.59,1505.53,0.6192,1,12.72,652.32,0.1008,2,493.02,-12.01,0.08,3,2.79,248.53,0.2,4,0,87.46,1503.41,0.6192,1,54.59,650.2,0.1008,2,490.9,-53.88,0.08,3,44.66,246.41,0.2,4,0,108.66,1480.62,0.6192,1,75.79,627.41,0.1008,2,468.11,-75.08,0.08,3,65.86,223.62,0.2,4,0,124.03,1458.1,0.6192,1,91.16,604.89,0.1008,2,445.59,-90.45,0.08,3,81.23,201.09,0.2,4,0,124.56,1431.33,0.6192,1,91.69,578.12,0.1008,2,418.82,-90.98,0.08,3,81.76,174.33,0.2,4,0,108.39,1408.28,0.6192,1,75.52,555.07,0.1008,2,395.77,-74.81,0.08,3,65.6,151.27,0.2,4,0,123.23,1414.9,0.6192,1,90.36,561.69,0.1008,2,402.39,-89.65,0.08,3,80.44,157.9,0.2,4,0,-19.07,1467.64,0.6192,1,-51.94,614.43,0.1008,2,455.13,52.65,0.08,3,-61.87,210.63,0.2,4,0,-17.75,1454.65,0.6192,1,-50.62,601.44,0.1008,2,442.14,51.33,0.08,3,-60.54,197.65,0.2,4,0,10.08,1393.17,0.6192,1,-22.79,539.96,0.1008,2,380.66,23.5,0.08,3,-32.72,136.17,0.2,4,0,-8.74,1412.25,0.6192,1,-41.61,559.04,0.1008,2,399.74,42.32,0.08,3,-51.53,155.25,0.2,4,0,-6.09,1392.64,0.62152,1,-38.96,539.43,0.10118,2,380.13,39.67,0.0803,3,-48.88,135.64,0.197,4,0,6.63,1363.76,0.64473,1,-26.24,510.55,0.10496,2,351.25,26.95,0.0833,3,-36.16,106.75,0.16702,4,0,19.15,1344.82,0.6739,1,-13.72,491.61,0.1097,2,332.31,14.43,0.08707,3,-23.65,87.82,0.12933,4,0,32.82,1434.01,0.61945,1,-0.05,580.8,0.10084,2,421.5,0.76,0.08003,3,-9.98,177.01,0.19968,4,0,39.54,1391.68,0.63602,1,6.67,538.47,0.10354,2,379.17,-5.96,0.08217,3,-3.26,134.67,0.17827,4,0,50.29,1340.61,0.69251,1,17.42,487.39,0.11273,2,328.09,-16.71,0.08947,3,7.49,83.6,0.10529,4,0,26.77,1476.69,0.6192,1,-6.1,623.47,0.1008,2,464.17,6.81,0.08,3,-16.03,219.68,0.2],"hull":162,"edges":[0,322,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,306,306,308,308,310,310,312,312,314,314,316,316,318,318,320,320,322,282,336,336,338,338,340,340,44,342,344,344,346,346,348,348,350,350,352,352,354,354,342,356,358,358,360,360,362,362,364,364,366,366,356,372,374,374,376,368,378,378,370,380,382,382,384,384,386,386,388,388,390,390,392,392,394,394,44,380,396,396,398,398,368,368,366,366,400,400,402,402,404,404,406,406,408,408,282],"width":739,"height":1737},"JungleScene/Helen":{"type":"mesh","uvs":[0.45779,0.05016,0.5054,0.05411,0.55482,0.0716,0.56378,0.07842,0.57455,0.09392,0.57072,0.13857,0.56341,0.15592,0.55398,0.17659,0.52277,0.197,0.54601,0.21121,0.55498,0.21415,0.60973,0.21911,0.63801,0.22898,0.65549,0.23913,0.6803,0.26353,0.73037,0.30487,0.75357,0.31353,0.76318,0.32926,0.7659,0.34572,0.75631,0.36163,0.73326,0.3873,0.65066,0.44416,0.6446,0.44959,0.63794,0.45734,0.63794,0.49359,0.64749,0.5148,0.64554,0.53264,0.64962,0.5393,0.64367,0.64017,0.6226,0.7861,0.60294,0.86965,0.60031,0.86952,0.60153,0.88956,0.61455,0.89669,0.62006,0.90787,0.64118,0.92476,0.66379,0.93108,0.67752,0.93141,0.6918,0.93691,0.69924,0.94865,0.70974,0.95814,0.71036,0.96523,0.70002,0.97339,0.65009,0.97331,0.63975,0.97205,0.60304,0.96637,0.56947,0.95199,0.55021,0.95482,0.51703,0.94524,0.51986,0.90531,0.5243,0.89783,0.53613,0.89447,0.54158,0.88818,0.54397,0.87402,0.53367,0.86265,0.52855,0.805,0.52015,0.7824,0.51253,0.74508,0.49291,0.69207,0.4807,0.65213,0.47551,0.68776,0.46884,0.76061,0.45926,0.81871,0.45662,0.85018,0.46211,0.86348,0.46104,0.8678,0.48186,0.873,0.46071,0.87333,0.46924,0.89455,0.47825,0.89506,0.48488,0.90013,0.48818,0.91734,0.48863,0.92401,0.49325,0.94032,0.49205,0.94432,0.45724,0.95435,0.43444,0.95258,0.4321,0.95365,0.41073,0.96431,0.37721,0.97031,0.3438,0.97423,0.30589,0.97189,0.29798,0.9671,0.2952,0.96018,0.30474,0.95336,0.31611,0.93544,0.31975,0.93619,0.36628,0.92478,0.37044,0.92187,0.38607,0.90781,0.3931,0.89685,0.39799,0.88888,0.39186,0.87527,0.38696,0.85582,0.36469,0.77714,0.34341,0.71187,0.32599,0.66082,0.32597,0.64125,0.32022,0.62951,0.32068,0.62118,0.30093,0.57479,0.29478,0.53838,0.29418,0.51218,0.27862,0.49019,0.27987,0.45943,0.26749,0.44673,0.20008,0.40075,0.17966,0.38397,0.15963,0.36289,0.1533,0.35146,0.1528,0.33439,0.16301,0.31578,0.18266,0.30956,0.19749,0.29891,0.24677,0.25738,0.2595,0.24271,0.28618,0.22849,0.30399,0.22301,0.37078,0.21468,0.3616,0.21534,0.39266,0.20843,0.40097,0.19385,0.40469,0.17787,0.39552,0.17386,0.3617,0.16395,0.34117,0.13507,0.34892,0.1203,0.35158,0.11905,0.34676,0.10143,0.34736,0.09164,0.37367,0.07013,0.38107,0.06091,0.39236,0.05794,0.4361,0.05134,0.43999,0.19407,0.45701,0.19689,0.47743,0.19979,0.49649,0.20147,0.5118,0.2013,0.51648,0.20029,0.43993,0.13581,0.45145,0.13277,0.46419,0.13145,0.47252,0.13171,0.48159,0.13436,0.44147,0.1354,0.44574,0.13841,0.45271,0.14102,0.46255,0.14174,0.4706,0.14135,0.47749,0.13976,0.48169,0.13812,0.48312,0.13668,0.53084,0.1348,0.52711,0.13699,0.52889,0.13937,0.53432,0.14152,0.54204,0.14238,0.54992,0.14133,0.55857,0.13763,0.55238,0.13448,0.54653,0.13247,0.53754,0.13274,0.44672,0.12669,0.45644,0.12459,0.46911,0.12523,0.48428,0.12791,0.52598,0.13065,0.54446,0.12669,0.55168,0.12778,0.51543,0.16229,0.50484,0.11403,0.45546,0.16171,0.54983,0.15803,0.45657,0.27371,0.34567,0.31997,0.56567,0.319,0.29541,0.31037,0.24385,0.35094,0.29902,0.41957,0.32584,0.43429,0.34028,0.4229,0.30573,0.34955,0.28871,0.32732,0.61112,0.30086,0.60843,0.33093,0.58781,0.35427,0.5615,0.40373,0.5878,0.43151,0.62235,0.40706,0.65897,0.34844],"triangles":[143,165,166,142,165,143,149,142,143,141,164,142,142,148,141,142,164,165,144,143,166,161,162,168,157,162,161,153,167,162,161,169,160,161,168,169,82,83,84,94,95,61,188,99,100,99,26,97,28,59,27,96,97,59,61,95,60,57,58,28,55,56,29,29,31,55,30,31,29,53,54,31,63,93,62,65,92,93,67,65,66,91,92,67,91,67,68,84,80,81,80,84,86,68,89,90,76,77,88,78,87,77,71,89,68,75,76,72,72,76,71,53,31,32,48,49,46,32,34,52,34,46,49,33,34,32,46,34,35,44,45,35,36,39,43,42,43,39,38,36,37,39,36,38,40,42,39,41,42,40,36,44,35,36,43,44,45,46,35,51,52,34,34,49,51,47,48,46,52,53,32,49,50,51,73,75,72,74,75,73,70,71,68,71,76,89,70,68,69,88,89,76,77,87,88,79,87,78,86,79,80,86,87,79,84,85,86,68,90,91,67,92,65,64,93,63,65,93,64,62,93,94,31,54,55,29,56,57,62,94,61,28,29,57,60,96,59,58,59,28,95,96,60,26,59,97,98,99,97,81,82,84,59,26,27,150,143,144,145,163,141,186,175,176,176,175,174,184,176,174,183,177,175,182,183,175,186,176,185,186,187,175,181,182,175,17,19,15,190,185,184,15,190,184,20,190,19,189,190,20,184,11,12,184,10,11,177,116,117,113,114,177,177,178,113,112,113,178,178,108,109,109,110,178,110,111,112,112,178,110,177,117,175,183,178,177,178,183,182,179,178,182,10,184,174,175,117,118,175,118,174,174,9,10,159,160,169,169,5,159,4,5,169,158,161,160,158,160,159,161,158,157,5,158,159,6,158,5,173,157,158,173,158,6,170,155,156,173,170,156,173,156,157,123,124,140,123,172,122,134,122,172,121,122,134,172,136,135,134,172,135,170,136,172,171,0,1,171,1,2,171,2,3,171,3,4,130,128,129,163,127,128,164,133,0,164,0,171,130,132,133,165,164,171,168,171,4,133,164,130,130,131,132,164,163,130,163,128,130,166,165,171,167,171,168,166,171,167,141,163,164,163,140,127,145,140,163,152,166,167,150,144,151,148,147,141,146,141,147,149,143,150,149,148,142,140,125,127,140,145,146,140,146,172,187,186,189,106,178,179,179,182,181,188,187,189,180,179,181,21,189,20,188,189,21,105,106,179,105,179,180,22,188,21,23,188,22,104,105,180,180,103,104,102,103,180,26,24,25,188,101,102,188,100,101,181,187,188,180,181,188,102,180,188,188,24,99,24,26,99,23,24,188,169,168,4,162,167,168,154,167,153,152,167,154,155,154,153,156,153,162,155,153,156,157,156,162,172,147,148,152,155,151,155,152,154,170,151,155,125,126,127,140,124,125,172,123,140,147,172,146,150,151,170,149,150,170,172,148,149,149,170,172,120,118,119,174,120,135,118,120,174,174,137,9,7,173,6,170,173,7,8,170,7,170,137,136,137,170,8,139,138,8,138,137,8,139,8,9,135,120,134,174,135,136,174,136,137,120,121,134,138,139,9,137,138,9,189,186,190,107,108,178,106,107,178,115,116,177,114,115,177,184,12,13,186,185,190,19,17,18,15,19,190,184,13,14,184,14,15,17,15,16,181,175,187,185,176,184,152,144,166,151,144,152,146,145,141],"vertices":[2,3,-12.58,186.85,0.16,1,-2.65,590.65,0.84,2,3,28.42,180.54,0.15806,1,38.35,584.33,0.84194,2,3,70.97,152.6,0.12851,1,80.9,556.39,0.87149,2,3,78.68,141.69,0.11747,1,88.61,545.48,0.88253,2,3,87.96,116.93,0.10608,1,97.89,520.73,0.89392,2,3,84.66,45.58,0.15607,1,94.59,449.37,0.84393,2,3,78.37,17.85,0.15533,1,88.3,421.64,0.84467,2,3,70.25,-15.18,0.13038,1,80.18,388.61,0.86962,2,3,43.38,-47.8,0.1033,1,53.3,356,0.8967,3,3,63.38,-70.5,0.02471,2,174,-72.6,0.04874,1,73.31,333.3,0.92655,3,3,71.1,-75.2,0.00986,2,169.3,-80.32,0.06493,1,81.03,328.6,0.92521,2,2,161.37,-127.46,0.04595,1,128.17,320.67,0.95405,2,2,145.59,-151.81,0.04332,1,152.52,304.89,0.95668,2,2,129.38,-166.86,0.03749,1,167.58,288.68,0.96251,2,2,90.38,-188.22,0.02013,1,188.94,249.68,0.97987,1,1,232.05,183.62,1,1,1,252.02,169.78,1,1,1,260.29,144.65,1,1,1,262.64,118.35,1,1,1,254.38,92.92,1,1,1,234.53,51.9,1,2,2,-198.27,-162.71,0.09915,1,163.42,-38.97,0.90085,2,2,-206.95,-157.48,0.09977,1,158.2,-47.65,0.90023,2,2,-219.33,-151.75,0.09247,1,152.46,-60.03,0.90753,1,1,152.46,-117.95,1,1,1,160.68,-151.84,1,2,1,159.01,-180.35,0.82109,0,191.88,672.86,0.17891,2,1,162.52,-190.99,0.6777,0,195.39,662.22,0.3223,1,0,190.27,501.02,1,1,0,172.13,267.83,1,1,0,155.2,134.32,1,1,0,152.93,134.53,1,1,0,153.98,102.5,1,1,0,165.19,91.11,1,1,0,169.93,73.24,1,1,0,188.12,46.25,1,1,0,207.59,36.15,1,1,0,219.41,35.63,1,1,0,231.7,26.84,1,1,0,238.11,8.08,1,1,0,247.15,-7.09,1,1,0,247.68,-18.42,1,1,0,238.78,-31.46,1,1,0,195.79,-31.34,1,1,0,186.89,-29.32,1,1,0,155.28,-20.24,1,1,0,126.38,2.74,1,1,0,109.8,-1.78,1,1,0,81.23,13.53,1,1,0,83.67,77.33,1,1,0,87.49,89.28,1,1,0,97.67,94.66,1,1,0,102.37,104.7,1,1,0,104.43,127.34,1,1,0,95.56,145.5,1,1,0,91.15,237.63,1,1,0,83.92,273.75,1,1,0,77.36,333.37,1,1,0,60.46,418.09,1,1,0,49.95,481.92,1,1,0,45.48,424.98,1,1,0,39.74,308.56,1,1,0,31.49,215.72,1,1,0,29.22,165.43,1,1,0,33.94,144.18,1,1,0,33.02,137.28,1,1,0,50.95,128.96,1,1,0,32.74,128.43,1,1,0,40.08,94.53,1,1,0,47.84,93.72,1,1,0,53.55,85.61,1,1,0,56.39,58.11,1,1,0,56.77,47.45,1,1,0,60.75,21.39,1,1,0,59.72,14.99,1,1,0,29.75,-1.04,1,1,0,10.12,1.79,1,1,0,8.1,0.09,1,1,0,-10.3,-16.95,1,1,0,-39.16,-26.55,1,1,0,-67.92,-32.8,1,1,0,-100.56,-29.07,1,1,0,-107.37,-21.42,1,1,0,-109.76,-10.34,1,1,0,-101.55,0.55,1,1,0,-91.76,29.19,1,1,0,-88.63,27.99,1,1,0,-48.57,46.22,1,1,0,-44.98,50.87,1,1,0,-31.53,73.34,1,1,0,-25.47,90.85,1,1,0,-21.26,103.58,1,1,0,-26.54,125.34,1,1,0,-30.76,156.42,1,1,0,-49.93,282.15,1,1,0,-68.26,386.45,1,1,0,-83.26,468.03,1,1,0,-83.28,499.31,1,1,0,-88.23,518.05,1,1,0,-87.83,531.37,1,2,1,-137.71,-247.7,0.37739,0,-104.84,605.51,0.62261,2,1,-142.99,-189.53,0.82486,0,-110.12,663.69,0.17514,2,2,-306.96,144.23,0.04352,1,-143.51,-147.67,0.95648,2,2,-271.82,157.63,0.0476,1,-156.91,-112.52,0.9524,2,2,-222.67,156.55,0.0264,1,-155.84,-63.37,0.9736,2,2,-202.38,167.21,0.0135,1,-166.5,-43.08,0.9865,1,1,-224.53,30.4,1,1,1,-242.11,57.22,1,1,1,-259.37,90.9,1,1,1,-264.82,109.18,1,1,1,-265.24,136.45,1,1,1,-256.45,166.19,1,1,1,-239.53,176.13,1,2,2,33.84,227.48,0.00536,1,-226.77,193.14,0.99464,2,2,100.22,185.05,0.02874,1,-184.34,259.52,0.97126,2,2,123.65,174.09,0.035,1,-173.37,282.95,0.965,2,2,146.37,151.12,0.04395,1,-150.41,305.67,0.95605,2,2,155.13,135.78,0.03705,1,-135.07,314.43,0.96295,2,2,168.45,78.28,0.03855,1,-77.57,327.75,0.96145,2,2,167.39,86.18,0.03568,1,-85.46,326.69,0.96432,3,3,-68.65,-66.07,0.00983,2,178.43,59.44,0.00936,1,-58.72,337.73,0.98081,2,3,-61.5,-42.77,0.06546,1,-51.57,361.03,0.93454,2,3,-58.29,-17.22,0.13952,1,-48.36,386.57,0.86048,2,3,-66.19,-10.82,0.13824,1,-56.26,392.97,0.86176,2,3,-95.31,5.02,0.07851,1,-85.38,408.81,0.92149,2,3,-112.98,51.17,0.07889,1,-103.05,454.97,0.92111,2,3,-106.31,74.77,0.11287,1,-96.38,478.56,0.88713,2,3,-104.02,76.76,0.11791,1,-94.09,480.56,0.88209,2,3,-108.17,104.93,0.11838,1,-98.24,508.73,0.88162,2,3,-107.65,120.57,0.11886,1,-97.73,524.36,0.88114,2,3,-85,154.95,0.13759,1,-75.07,558.74,0.86241,2,3,-78.63,169.67,0.12297,1,-68.7,573.46,0.87703,2,3,-68.91,174.42,0.13985,1,-58.98,578.21,0.86015,2,3,-31.25,184.98,0.16,1,-21.32,588.77,0.84,2,3,-27.9,-43.11,0.11673,1,-17.97,360.68,0.88327,2,3,-13.24,-47.62,0.11443,1,-3.31,356.18,0.88557,2,3,4.33,-52.25,0.1078,1,14.26,351.55,0.8922,2,3,20.74,-54.94,0.10096,1,30.67,348.86,0.89904,2,3,33.92,-54.67,0.09144,1,43.85,349.12,0.90856,2,3,37.96,-53.06,0.09255,1,47.89,350.74,0.90745,3,3,-27.95,49.99,0.11392,1,-18.03,453.78,0.59808,5,-2.53,9.19,0.288,3,3,-18.04,54.84,0.03968,1,-8.11,458.64,0.20832,5,-6.97,19.29,0.752,1,5,-8.63,30.34,1,3,3,0.11,56.53,0.01664,1,10.04,460.32,0.08736,5,-7.92,37.49,0.896,3,3,7.92,52.31,0.09984,1,17.84,456.1,0.52416,5,-3.38,45.12,0.376,3,3,-26.62,50.64,0.10624,1,-16.7,454.43,0.55776,5,-3.12,10.54,0.336,3,3,-22.95,45.82,0.1472,1,-13.02,449.62,0.7728,5,1.84,14.01,0.08,2,3,-16.95,41.67,0.16,1,-7.02,445.46,0.84,2,3,-8.48,40.51,0.16,1,1.45,444.31,0.84,2,3,-1.55,41.13,0.16,1,8.38,444.92,0.84,2,3,4.38,43.67,0.16,1,14.31,447.46,0.84,3,3,8,46.29,0.1472,1,17.93,450.08,0.7728,5,2.64,44.96,0.08,3,3,9.23,48.6,0.1088,1,19.16,452.39,0.5712,5,0.38,46.29,0.32,3,3,50.33,51.6,0.08704,1,60.25,455.39,0.45696,4,-3.33,19.93,0.456,3,3,47.11,48.1,0.13568,1,57.04,451.89,0.71231,4,0.26,16.81,0.15201,2,3,48.65,44.3,0.16,1,58.57,448.09,0.84,2,3,53.32,40.87,0.16,1,63.25,444.66,0.84,2,3,59.96,39.48,0.16,1,69.89,443.28,0.84,2,3,66.75,41.16,0.16,1,76.68,444.95,0.84,2,3,74.2,47.07,0.16,1,84.12,450.87,0.84,3,3,68.87,52.11,0.07552,1,78.8,455.9,0.39648,4,-4.31,38.45,0.528,3,3,63.83,55.32,0.02688,1,73.76,459.12,0.14112,4,-7.4,33.33,0.832,3,3,56.09,54.89,0.03328,1,66.02,458.68,0.17471,4,-6.76,25.61,0.79201,3,3,-22.1,64.55,0.11648,1,-12.18,468.35,0.61152,5,-16.84,15.62,0.272,3,3,-13.74,67.92,0.11648,1,-3.81,471.71,0.61152,5,-19.87,24.12,0.272,3,3,-2.83,66.9,0.11648,1,7.1,470.69,0.61152,5,-18.4,34.98,0.272,3,3,10.23,62.62,0.11648,1,20.16,466.41,0.61152,5,-13.59,47.85,0.272,3,3,46.13,58.23,0.11392,1,56.06,462.02,0.59808,4,-9.85,15.57,0.288,3,3,62.04,64.55,0.11392,1,71.97,468.35,0.59808,4,-16.58,31.31,0.288,3,3,68.27,62.82,0.11776,1,78.2,466.61,0.61824,4,-15,37.58,0.264,2,3,37.06,7.67,0.16,1,46.99,411.46,0.84,2,3,27.94,84.79,0.16,1,37.87,488.59,0.84,2,3,-14.58,8.59,0.16,1,-4.66,412.38,0.84,2,3,66.67,14.48,0.16,1,76.6,418.28,0.84,2,2,74.11,4.41,0.07774,1,-3.7,233.41,0.92226,2,2,0.19,99.89,0.1827,1,-99.18,159.49,0.8173,2,2,1.73,-89.53,0.16235,1,90.24,161.03,0.83765,2,2,15.53,143.16,0.1333,1,-142.45,174.83,0.8667,2,2,-49.29,187.56,0.10422,1,-186.85,110.01,0.89578,2,2,-158.96,140.06,0.00254,1,-139.34,0.34,0.99746,1,1,-116.26,-23.19,1,1,1,-103.82,-4.99,1,2,2,-47.07,134.28,0.10447,1,-133.57,112.23,0.89553,2,2,-11.55,148.94,0.1386,1,-148.22,147.75,0.8614,2,2,30.74,-128.66,0.11359,1,129.37,190.04,0.88641,2,2,-17.33,-126.34,0.08788,1,127.06,141.97,0.91212,2,2,-54.63,-108.58,0.11402,1,109.3,104.67,0.88598,2,2,-133.65,-85.94,0.01198,1,86.65,25.65,0.98802,2,2,-178.05,-108.58,0.11621,1,109.3,-18.75,0.88379,2,2,-138.98,-138.33,0.07234,1,139.04,20.32,0.92766,2,2,-45.3,-169.86,0.03862,1,170.57,114,0.96138],"hull":134,"edges":[0,266,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,116,118,118,120,244,268,268,270,270,272,272,274,274,276,276,278,278,16,282,284,284,286,286,288,280,290,290,282,290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,288,306,308,308,310,310,312,312,314,314,316,316,318,318,320,320,322,322,324,324,306,326,328,328,330,330,332,334,336,336,338,354,356,356,358,358,360,360,362,362,364,364,366,366,354,368,370,370,372,372,374,374,376,376,378,378,380,380,368],"width":861,"height":1598},"JungleScene/Helen-sit-smile":{"type":"mesh","uvs":[0.30145,0.06088,0.34762,0.06668,0.39456,0.09187,0.40106,0.11575,0.39711,0.16022,0.38644,0.20306,0.37039,0.22028,0.3762,0.22578,0.40614,0.23233,0.42629,0.24929,0.44223,0.27484,0.47141,0.32004,0.4839,0.33995,0.48877,0.34575,0.49788,0.35581,0.50946,0.36061,0.51955,0.38309,0.52975,0.42696,0.54799,0.51242,0.55185,0.51488,0.57431,0.5149,0.59225,0.51975,0.60634,0.52743,0.60635,0.54248,0.61745,0.54339,0.63147,0.54747,0.65471,0.58533,0.69133,0.63219,0.72816,0.68733,0.73717,0.69771,0.76698,0.74834,0.78542,0.77533,0.79878,0.78838,0.79155,0.79401,0.79936,0.81043,0.81664,0.82146,0.81772,0.82691,0.84963,0.84951,0.89984,0.8535,0.93303,0.88391,0.9297,0.90187,0.92368,0.90148,0.88714,0.91134,0.8264,0.91103,0.81167,0.91116,0.85199,0.93751,0.85275,0.9538,0.82599,0.96547,0.80013,0.97343,0.75214,0.97601,0.7349,0.97008,0.7274,0.96929,0.70755,0.97845,0.67847,0.97671,0.67322,0.97462,0.6549,0.93962,0.64588,0.91579,0.65578,0.90914,0.6557,0.90307,0.64719,0.88375,0.64247,0.87927,0.62332,0.87273,0.59134,0.82293,0.57709,0.80316,0.54445,0.77919,0.52304,0.76156,0.46875,0.70939,0.43914,0.6959,0.24898,0.6919,0.19426,0.6795,0.14607,0.65132,0.12606,0.61771,0.12586,0.58326,0.13678,0.55089,0.13358,0.529,0.13854,0.49938,0.19571,0.42183,0.19702,0.3898,0.19196,0.35714,0.18658,0.3359,0.1864,0.30696,0.19513,0.26274,0.19241,0.25213,0.24048,0.22352,0.24371,0.2259,0.25034,0.22255,0.26275,0.20734,0.25759,0.2008,0.22928,0.1913,0.21489,0.15412,0.22291,0.13945,0.21616,0.11531,0.24895,0.07139,0.24843,0.07077,0.27503,0.06785,0.27031,0.2086,0.28877,0.22036,0.29733,0.22738,0.3182,0.2313,0.3404,0.23378,0.35111,0.23274,0.35699,0.22882,0.36328,0.2231,0.29364,0.1586,0.30526,0.15462,0.31534,0.15338,0.32278,0.15457,0.32746,0.15703,0.32387,0.15514,0.32481,0.16135,0.32106,0.16453,0.3103,0.166,0.30071,0.16391,0.36422,0.1573,0.36984,0.15469,0.37839,0.15475,0.38544,0.15961,0.38725,0.16064,0.38012,0.16464,0.37191,0.16595,0.36466,0.16334,0.35368,0.18828,0.37859,0.17997,0.30746,0.18163,0.34617,0.12926,0.39765,0.26779,0.41088,0.31283,0.43598,0.34662,0.441,0.35929,0.44054,0.37723,0.42594,0.39518,0.38943,0.4082,0.38165,0.43084,0.36224,0.44874,0.35324,0.42901,0.35726,0.42051,0.35758,0.41293,0.35282,0.39116,0.3487,0.38651,0.34458,0.38669,0.31231,0.32098,0.30615,0.31805,0.30745,0.31329,0.29446,0.28525,0.38992,0.36338,0.29064,0.14881,0.31014,0.1415,0.32657,0.14247,0.36413,0.14288,0.37936,0.14461,0.38507,0.14942],"triangles":[112,103,104,92,93,94,124,0,1,124,1,2,124,2,3,145,90,91,146,0,124,94,0,146,147,146,124,148,124,3,149,148,3,145,94,146,92,94,145,145,91,92,150,149,3,148,107,147,148,147,124,113,107,148,4,116,150,115,150,116,3,4,150,117,116,4,120,113,114,109,110,105,118,115,116,118,116,117,119,115,118,120,114,119,111,105,110,112,104,111,122,119,118,123,112,111,107,120,109,120,107,113,121,120,119,121,119,122,121,109,120,110,109,121,89,145,103,145,89,90,88,89,103,87,88,103,87,103,112,87,112,123,118,4,122,4,5,122,121,122,5,117,4,118,95,86,87,123,95,87,6,121,5,96,95,123,123,111,110,121,123,110,102,121,6,98,97,96,123,98,96,123,121,98,98,121,99,99,121,102,102,101,99,100,99,101,84,81,82,84,82,83,125,7,8,125,8,9,125,9,10,97,85,96,143,97,98,143,98,99,85,86,95,85,95,96,97,84,85,143,84,97,126,125,10,125,142,143,102,6,7,101,102,7,100,101,7,125,100,7,99,100,125,141,143,142,125,143,99,126,10,11,126,140,142,126,142,125,141,142,140,79,141,78,81,84,143,127,126,11,127,11,12,141,79,80,143,80,81,143,141,80,128,127,12,144,140,126,144,126,127,144,127,128,129,144,128,138,140,144,139,140,138,77,78,141,137,138,144,130,144,129,131,137,144,130,131,144,136,137,131,137,136,139,135,134,136,131,135,136,132,135,131,134,135,132,133,134,132,77,141,140,77,140,139,73,74,75,70,71,72,75,134,73,73,69,72,69,70,72,68,69,73,139,138,137,76,77,139,139,134,76,136,134,139,76,134,75,133,73,134,133,68,73,130,16,132,132,131,130,133,132,17,133,18,67,68,133,67,128,12,13,128,13,14,129,128,14,14,16,129,16,14,15,16,130,129,16,17,132,18,133,17,19,66,67,19,67,18,66,24,65,19,21,66,20,21,19,21,23,66,22,23,21,27,64,65,23,24,66,24,26,65,25,26,24,33,31,32,64,28,63,26,27,65,28,64,27,63,28,29,63,29,30,62,63,30,62,30,31,62,31,33,60,61,62,33,60,62,34,60,33,59,60,34,41,38,39,40,41,39,44,58,59,44,57,58,37,44,36,34,36,59,36,34,35,43,44,37,59,36,44,42,37,38,42,38,41,43,37,42,55,56,57,47,44,45,47,45,46,51,57,44,50,51,44,55,57,51,50,44,49,47,48,44,53,54,55,48,49,44,55,52,53,51,52,55,109,108,107,114,148,149,114,113,148,115,114,149,119,114,115,150,115,149,105,146,147,103,145,104,106,105,147,106,109,105,105,104,146,111,104,105,108,106,147,109,106,108,104,145,146,108,147,107],"vertices":[2,3,-18.98,-46.66,0.0887,0,23.82,1210.34,0.9113,2,3,28.77,-54.44,0.06631,0,71.57,1202.57,0.93369,2,3,77.33,-88.23,0.05947,0,120.13,1168.78,0.94053,2,3,84.05,-120.26,0.07362,0,126.85,1136.75,0.92638,2,3,79.96,-179.91,0.1133,0,122.76,1077.1,0.8867,2,3,68.93,-237.36,0.05579,0,111.72,1019.65,0.94421,2,3,52.33,-260.45,0.03977,0,95.13,996.56,0.96023,3,3,58.33,-267.83,0.01489,2,-23.33,-67.55,0.00276,0,101.13,989.18,0.98236,2,2,-32.12,-98.52,0.05216,0,132.1,980.39,0.94784,2,2,-54.87,-119.36,0.05964,0,152.94,957.64,0.94036,2,2,-89.14,-135.85,0.05429,0,169.43,923.37,0.94571,2,2,-149.75,-166.03,0.08154,0,199.62,862.76,0.91846,2,2,-176.46,-178.95,0.0564,0,212.53,836.06,0.9436,2,2,-184.24,-183.98,0.05202,0,217.57,828.27,0.94798,2,2,-197.73,-193.41,0.05309,0,226.99,814.78,0.94691,2,2,-204.18,-205.38,0.01545,0,238.97,808.34,0.98455,1,0,249.41,778.19,1,1,0,259.96,719.35,1,1,0,278.83,604.73,1,1,0,282.82,601.43,1,1,0,306.05,601.4,1,1,0,324.61,594.9,1,1,0,339.18,584.61,1,1,0,339.19,564.42,1,1,0,350.67,563.19,1,1,0,365.17,557.72,1,1,0,389.21,506.94,1,1,0,427.09,444.1,1,1,0,465.19,370.15,1,1,0,474.5,356.22,1,1,0,505.34,288.31,1,1,0,524.41,252.11,1,1,0,538.23,234.61,1,1,0,530.76,227.06,1,1,0,538.84,205.03,1,1,0,556.7,190.25,1,1,0,557.82,182.94,1,1,0,590.83,152.63,1,1,0,642.76,147.28,1,1,0,677.09,106.49,1,1,0,673.65,82.4,1,1,0,667.43,82.93,1,1,0,629.63,69.69,1,1,0,566.8,70.11,1,1,0,551.57,69.94,1,1,0,593.27,34.6,1,1,0,594.05,12.75,1,1,0,566.38,-2.91,1,1,0,539.63,-13.58,1,1,0,489.99,-17.04,1,1,0,472.16,-9.08,1,1,0,464.4,-8.02,1,1,0,443.87,-20.31,1,1,0,413.78,-17.97,1,1,0,408.36,-15.18,1,1,0,389.41,31.77,1,1,0,380.08,63.73,1,1,0,390.31,72.64,1,1,0,390.23,80.79,1,1,0,381.43,106.7,1,1,0,376.55,112.71,1,1,0,356.74,121.48,1,1,0,323.66,188.28,1,1,0,308.92,214.79,1,1,0,275.17,246.94,1,1,0,253.02,270.58,1,1,0,196.87,340.56,1,1,0,166.24,358.64,1,1,0,-30.46,364.01,1,1,0,-87.06,380.65,1,1,0,-136.9,418.44,1,1,0,-157.6,463.51,1,1,0,-157.81,509.72,1,1,0,-146.51,553.14,1,2,2,-430.02,183.41,0.09347,0,-149.83,582.5,0.90653,2,2,-390.29,178.27,0.08087,0,-144.69,622.22,0.91913,2,2,-286.28,119.14,0.05,0,-85.56,726.23,0.95,2,2,-243.32,117.79,0.05819,0,-84.21,769.19,0.94181,2,2,-199.52,123.02,0.14,0,-89.44,812.99,0.86,2,2,-171.03,128.59,0.05,0,-95.01,841.49,0.95,2,2,-132.21,128.77,0.0527,0,-95.19,880.3,0.9473,2,2,-72.91,119.74,0.03586,0,-86.16,939.6,0.96414,2,2,-58.68,122.55,0.06606,0,-88.97,953.83,0.93394,2,2,-20.3,72.84,0.00875,0,-39.25,992.21,0.99125,2,2,-23.5,69.49,0.02434,0,-35.91,989.02,0.97566,2,3,-71.85,-263.49,0.00461,0,-29.05,993.51,0.99539,2,3,-59.01,-243.1,0.0669,0,-16.22,1013.91,0.9331,2,3,-64.35,-234.32,0.07473,0,-21.55,1022.69,0.92527,2,3,-93.64,-221.59,0.05634,0,-50.84,1035.42,0.94366,2,3,-108.51,-171.72,0.08899,0,-65.72,1085.29,0.91101,2,3,-100.22,-152.05,0.11119,0,-57.42,1104.96,0.88881,2,3,-107.2,-119.67,0.10705,0,-64.4,1137.34,0.89295,2,3,-73.29,-60.76,0.10175,0,-30.49,1196.25,0.89825,2,3,-73.83,-59.93,0.09917,0,-31.03,1197.07,0.90083,2,3,-46.31,-56.02,0.11144,0,-3.51,1200.99,0.88856,2,3,-51.19,-244.79,0.07695,0,-8.39,1012.21,0.92305,2,3,-32.1,-260.57,0.06526,0,10.7,996.44,0.93474,2,3,-23.24,-269.98,0.05365,0,19.56,987.03,0.94635,2,3,-1.66,-275.23,0.05329,0,41.14,981.77,0.94671,2,3,21.31,-278.56,0.03924,0,64.11,978.45,0.96076,2,3,32.38,-277.17,0.0332,0,75.18,979.84,0.9668,2,3,38.47,-271.91,0.0383,0,81.27,985.09,0.9617,2,3,44.97,-264.24,0.04533,0,87.77,992.77,0.95467,3,5,225.04,0.79,0.424,3,-27.07,-177.73,0.08064,0,15.73,1079.28,0.49536,3,5,220.19,13.02,0.92798,3,-15.04,-172.39,0.01008,0,27.75,1084.62,0.06194,1,5,218.96,23.5,1,3,5,220.87,31.13,0.85599,3,3.08,-172.32,0.02016,0,45.88,1084.68,0.12385,3,5,224.37,35.82,0.304,3,7.92,-175.63,0.09744,0,50.71,1081.38,0.59856,3,5,221.68,32.22,0.74399,3,4.21,-173.09,0.03584,0,47.01,1083.91,0.22017,3,5,230.04,32.86,0.14399,3,5.18,-181.42,0.11984,0,47.98,1075.59,0.73617,2,3,1.3,-185.68,0.14,0,44.1,1071.33,0.86,2,3,-9.83,-187.65,0.14,0,32.97,1069.36,0.86,2,3,-19.75,-184.85,0.14,0,23.05,1072.16,0.86,3,3,45.94,-175.99,0.07504,4,235.79,23.97,0.464,0,88.74,1081.02,0.46096,3,3,51.76,-172.49,0.0224,4,232.13,29.73,0.84,0,94.56,1084.52,0.1376,3,3,60.6,-172.56,0.0336,4,231.98,38.6,0.76002,0,103.39,1084.44,0.20639,3,3,67.89,-179.09,0.11648,4,238.34,46.1,0.16799,0,110.69,1077.92,0.71553,3,3,69.77,-180.46,0.1232,4,239.68,48.02,0.11999,0,112.56,1076.55,0.75681,2,3,62.39,-185.84,0.14,0,105.19,1071.17,0.86,2,3,53.89,-187.59,0.14,0,96.69,1069.42,0.86,2,3,46.4,-184.09,0.14,0,89.19,1072.92,0.86,2,3,35.05,-217.54,0.14,0,77.85,1039.47,0.86,2,3,60.81,-206.39,0.13573,0,103.61,1050.62,0.86427,2,3,-12.76,-208.62,0.14,0,30.04,1048.39,0.86,2,3,27.27,-138.38,0.14,0,70.07,1118.63,0.86,2,2,-79.68,-89.74,0.05349,0,123.32,932.84,0.94651,2,2,-140.09,-103.42,0.03889,0,137.01,872.42,0.96111,2,2,-185.4,-129.38,0.07232,0,162.97,827.11,0.92768,2,2,-202.4,-134.57,0.04186,0,168.16,810.12,0.95814,2,2,-226.47,-134.1,0.00877,0,167.69,786.05,0.99123,2,2,-250.54,-119,0.03523,0,152.58,761.97,0.96477,2,2,-268,-81.24,0.13078,0,114.82,744.51,0.86922,2,2,-298.37,-73.19,0.20745,0,106.77,714.15,0.79255,2,2,-322.37,-53.11,0.11876,0,86.69,690.14,0.88124,1,0,77.38,716.6,1,2,2,-284.51,-47.96,0.00067,0,81.54,728,0.99933,1,0,81.87,738.17,1,2,2,-245.14,-43.37,0.08427,0,76.95,767.37,0.91573,2,2,-238.91,-39.1,0.0694,0,72.69,773.6,0.9306,2,2,-239.16,-34.85,0.04551,0,68.43,773.36,0.95449,2,2,-151.02,-1.46,0.07493,0,35.04,861.49,0.92507,2,2,-147.09,4.91,0.08716,0,28.67,865.42,0.91284,2,2,-140.71,3.56,0.04751,0,30.02,871.8,0.95249,2,2,-103.09,17,0.0789,0,16.58,909.42,0.9211,2,2,-207.88,-81.74,0.08023,0,115.33,804.63,0.91977,3,5,211.78,-1.78,0.408,3,-30.17,-164.59,0.08086,0,12.63,1092.41,0.51115,3,5,202.82,18.78,0.408,3,-9.99,-154.8,0.08149,0,32.81,1102.21,0.51051,3,5,204.81,35.71,0.408,3,7,-156.1,0.08247,0,49.8,1100.91,0.50954,3,3,45.85,-156.64,0.0847,4,214.2,21.73,0.392,0,88.65,1100.36,0.5233,3,3,61.6,-158.97,0.07739,4,216.21,38.25,0.392,0,104.4,1098.04,0.53061,3,3,67.51,-165.41,0.07455,4,222.78,44.59,0.392,0,110.31,1091.59,0.53344],"hull":95,"edges":[0,188,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,172,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,12,206,208,208,210,210,212,212,216,216,214,216,218,218,220,220,222,222,224,224,206,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,226,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,154,156,56,58,128,130,290,292,292,294,296,298,298,300],"width":927,"height":1202},"block 3/d-bl3-2":{"type":"mesh","uvs":[0.48469,0.03571,0.54962,0.03609,0.57818,0.04004,0.60572,0.05337,0.6186,0.05289,0.63733,0.08448,0.6296,0.10578,0.64927,0.10974,0.65,0.12752,0.62982,0.14087,0.60555,0.14721,0.59207,0.1581,0.5896,0.16346,0.58948,0.18131,0.64667,0.19211,0.67252,0.19495,0.68733,0.20222,0.74424,0.21624,0.76198,0.2194,0.7802,0.22848,0.79247,0.2402,0.79493,0.25285,0.8188,0.27574,0.81922,0.29491,0.82688,0.31175,0.84387,0.32877,0.84428,0.34021,0.85792,0.34623,0.8616,0.35716,0.85992,0.37941,0.83304,0.39244,0.80694,0.40126,0.77226,0.41656,0.72691,0.43635,0.7627,0.52708,0.76094,0.61042,0.75839,0.61243,0.77735,0.6336,0.77653,0.71911,0.79483,0.75225,0.79205,0.80286,0.78464,0.82643,0.75784,0.85208,0.75644,0.84918,0.74993,0.87201,0.74611,0.87707,0.7628,0.88737,0.75191,0.89449,0.75702,0.923,0.75003,0.93139,0.7105,0.95238,0.68049,0.95847,0.6126,0.9592,0.55788,0.95229,0.54721,0.94746,0.54863,0.94047,0.55455,0.9339,0.56709,0.90602,0.58269,0.89938,0.63258,0.89095,0.63696,0.88805,0.63589,0.869,0.66429,0.86355,0.67447,0.84939,0.66431,0.84346,0.65762,0.82315,0.66376,0.80051,0.64603,0.76269,0.64641,0.72845,0.62863,0.68609,0.62379,0.67191,0.62195,0.6547,0.6171,0.64324,0.62015,0.62405,0.60615,0.61024,0.59474,0.59213,0.57036,0.5686,0.55967,0.55985,0.51349,0.63739,0.50395,0.6405,0.52469,0.67748,0.52843,0.74764,0.52528,0.77286,0.53086,0.798,0.51874,0.81618,0.49353,0.82861,0.50869,0.82923,0.51477,0.83479,0.51663,0.84767,0.5066,0.87516,0.50052,0.876,0.42541,0.87687,0.42594,0.87443,0.38448,0.88183,0.33144,0.88187,0.27601,0.87829,0.25131,0.87153,0.24323,0.86031,0.25816,0.84211,0.27486,0.83848,0.29964,0.83917,0.32049,0.84329,0.32757,0.84413,0.37598,0.8303,0.37855,0.82086,0.38514,0.81937,0.39696,0.81782,0.389,0.80788,0.4105,0.79487,0.40169,0.78407,0.40046,0.73272,0.40392,0.72563,0.40164,0.6649,0.39735,0.66077,0.39228,0.62317,0.38576,0.59069,0.38806,0.5647,0.36194,0.5549,0.33506,0.54091,0.32782,0.54654,0.32066,0.49226,0.32357,0.47353,0.31679,0.38215,0.32648,0.36913,0.3277,0.36939,0.32824,0.35363,0.31956,0.34167,0.31174,0.32712,0.32167,0.30235,0.32059,0.28882,0.31256,0.27886,0.31166,0.26631,0.31901,0.2238,0.33034,0.20872,0.3743,0.19252,0.42157,0.18936,0.43014,0.18616,0.45682,0.18661,0.46381,0.18509,0.46302,0.17458,0.465,0.17391,0.43562,0.14731,0.43217,0.1304,0.43738,0.11881,0.4313,0.1048,0.43169,0.09224,0.42262,0.08735,0.40569,0.08572,0.40217,0.08262,0.40965,0.06338,0.4307,0.0545,0.42699,0.04529,0.44897,0.04041,0.48403,0.04032,0.39942,0.28536,0.48172,0.30056,0.62385,0.27958,0.48496,0.17969,0.51792,0.18075,0.44448,0.11821,0.4539,0.11478,0.46747,0.11482,0.47357,0.11783,0.46804,0.12048,0.45318,0.12075,0.50624,0.1184,0.51386,0.11468,0.52653,0.11421,0.54406,0.11554,0.5553,0.11775,0.54384,0.11983,0.51412,0.12005,0.5261,0.1208,0.50378,0.11274,0.52852,0.10956,0.54634,0.10896,0.46938,0.11165,0.4495,0.1044,0.44208,0.1063],"triangles":[59,52,58,56,57,58,52,56,58,50,59,47,47,59,60,49,50,47,54,55,53,55,56,53,56,52,53,49,47,48,47,45,46,84,108,83,40,66,39,66,67,39,68,39,67,108,82,83,108,109,82,82,109,81,81,109,110,111,112,80,38,69,37,69,70,37,112,79,80,112,113,79,36,72,73,73,74,36,78,114,115,36,74,35,77,115,116,34,35,75,75,76,34,76,77,34,34,77,33,121,33,77,23,32,33,78,115,77,35,74,75,70,71,37,113,114,79,71,72,37,72,36,37,79,114,78,39,68,38,110,111,81,111,80,81,68,69,38,60,45,47,62,45,60,60,61,62,95,101,94,101,102,94,94,102,93,97,100,95,97,98,99,95,100,101,100,97,99,45,62,44,91,92,90,103,92,93,89,90,88,88,90,92,88,85,87,87,85,86,92,85,88,93,102,103,92,103,106,105,106,103,103,104,105,92,106,85,62,63,44,43,44,63,95,96,97,42,43,41,43,63,65,41,43,65,65,63,64,84,85,108,65,66,41,41,66,40,85,106,108,106,107,108,59,51,52,51,59,50,178,177,160,160,177,176,161,160,176,167,166,174,167,174,168,20,21,19,156,21,33,33,21,23,23,21,22,32,26,31,29,30,28,30,31,26,24,32,23,28,30,26,122,124,33,155,33,124,122,123,124,155,124,125,155,125,126,128,154,127,6,175,5,5,175,3,5,3,4,13,158,12,172,11,158,11,172,170,17,21,156,156,158,13,155,156,33,128,129,154,156,155,158,155,126,154,154,130,131,154,131,132,154,135,137,155,137,158,158,138,157,138,158,137,132,133,134,135,132,134,140,158,157,171,141,163,163,141,142,172,167,170,172,171,167,168,174,175,163,165,171,164,163,142,142,143,164,165,166,171,171,166,167,163,160,161,163,164,160,164,159,160,163,161,162,143,178,159,159,178,160,161,176,162,162,176,173,174,166,173,143,144,178,145,174,173,173,176,177,1,175,174,153,174,145,1,174,153,3,1,2,3,175,1,1,153,0,178,144,177,144,145,177,145,173,177,152,153,150,146,150,145,153,145,150,146,148,149,146,149,150,146,147,148,150,151,152,163,162,165,143,159,164,162,173,165,165,173,166,171,172,158,171,140,141,170,168,169,170,167,168,168,175,169,135,136,137,157,139,140,157,138,139,140,171,158,135,154,132,155,154,137,129,130,154,156,16,17,16,14,15,16,156,14,156,13,14,12,158,11,10,11,170,10,170,169,10,169,9,169,6,9,8,6,7,8,9,6,169,175,6,154,126,127,26,24,25,32,24,26,27,28,26,18,21,17,19,21,18,33,121,122,120,121,77,119,120,118,117,118,120,117,120,116,77,116,120],"vertices":[2,1,-49.5,681.79,0.85839,3,-59.43,277.99,0.14161,2,1,4.76,681.45,0.84583,3,-5.17,277.65,0.15417,2,1,28.67,674.79,0.8478,3,18.74,271,0.1522,2,1,51.81,652.02,0.81296,3,41.88,248.23,0.18704,2,1,62.57,652.9,0.84232,3,52.64,249.11,0.15768,2,1,78.54,598.71,0.8,3,68.61,194.91,0.2,2,1,72.29,562.05,0.8,3,62.36,158.26,0.2,2,1,88.77,555.34,0.8,3,78.84,151.55,0.2,2,1,89.56,524.78,0.8,3,79.63,120.99,0.2,2,1,72.84,501.74,0.8,3,62.91,97.94,0.2,2,1,52.62,490.72,0.8,3,42.7,86.92,0.2,2,1,41.47,471.94,0.8,3,31.54,68.14,0.2,2,1,39.45,462.71,0.8,3,29.53,58.92,0.2,3,1,39.53,432.02,0.7924,2,272.72,-38.82,0.03976,3,29.61,28.23,0.16784,3,1,87.43,413.74,0.89295,2,254.44,-86.72,0.07924,3,77.51,9.94,0.0278,2,1,109.06,408.99,0.92584,2,249.69,-108.35,0.07416,2,1,121.51,396.56,0.91979,2,237.26,-120.8,0.08021,3,1,169.21,372.75,0.70679,2,213.45,-168.5,0.04409,0,202.08,1225.96,0.24912,3,1,184.06,367.41,0.52747,2,208.11,-183.35,0.02886,0,216.93,1220.62,0.44366,3,1,199.38,351.88,0.34301,2,192.58,-198.67,0.02346,0,232.25,1205.09,0.63353,3,1,209.75,331.81,0.5486,2,172.51,-209.04,0.02827,0,242.62,1185.02,0.42313,3,1,211.93,310.07,0.78221,2,150.77,-211.22,0.04586,0,244.8,1163.28,0.17192,3,1,232.11,270.84,0.95943,2,111.54,-231.4,0.03276,0,264.98,1124.05,0.00781,2,1,232.65,237.89,0.95294,2,78.59,-231.94,0.04706,2,1,239.23,208.99,0.95464,2,49.69,-238.51,0.04536,3,1,253.6,179.82,0.82719,2,20.52,-252.89,0.02099,0,286.47,1033.03,0.15182,3,1,254.05,160.15,0.82476,2,0.85,-253.34,0.02009,0,286.92,1013.37,0.15515,2,1,265.51,149.87,0.673,0,298.38,1003.09,0.327,2,1,268.69,131.09,0.58245,0,301.56,984.31,0.41755,2,1,267.52,92.85,0.4273,0,300.39,946.07,0.5727,3,1,245.19,70.31,0.49276,2,-88.99,-244.47,0.01451,0,278.06,923.52,0.49272,3,1,223.47,55.02,0.50698,2,-104.28,-222.76,0.04413,0,256.34,908.24,0.44888,3,1,194.64,28.55,0.32986,2,-130.75,-193.93,0.05386,0,227.51,881.77,0.61628,2,2,-164.98,-156.24,0.01711,0,189.82,847.53,0.98289,1,0,220.65,691.75,1,1,0,220.01,548.5,1,1,0,217.91,545.02,1,1,0,233.97,508.74,1,1,0,234.14,361.75,1,1,0,249.77,304.88,1,1,0,247.96,217.87,1,1,0,242.01,177.32,1,1,0,219.88,133.1,1,1,0,218.67,138.08,1,1,0,213.47,98.8,1,1,0,210.32,90.08,1,1,0,224.38,72.47,1,1,0,215.35,60.16,1,1,0,219.91,11.19,1,1,0,214.15,-3.26,1,1,0,181.33,-39.55,1,1,0,156.31,-50.15,1,1,0,99.6,-51.73,1,1,0,53.8,-40.14,1,1,0,44.83,-31.89,1,1,0,45.95,-19.86,1,1,0,50.84,-8.54,1,1,0,61.03,39.44,1,1,0,74,50.93,1,1,0,115.6,65.67,1,1,0,119.23,70.67,1,1,0,118.14,103.42,1,1,0,141.82,112.92,1,1,0,150.18,137.31,1,1,0,141.63,147.46,1,1,0,135.84,182.33,1,1,0,140.74,221.28,1,1,0,125.54,286.2,1,1,0,125.51,345.05,1,1,0,110.23,417.78,1,1,0,106.04,442.13,1,1,0,104.33,471.71,1,1,0,100.16,491.38,1,1,0,102.51,524.37,1,1,0,90.67,548.05,1,1,0,80.96,579.12,1,1,0,60.35,619.44,1,1,0,51.33,634.43,1,1,0,13.52,500.93,1,1,0,5.59,495.52,1,1,0,23.29,432.06,1,1,0,27.12,311.48,1,1,0,24.74,268.12,1,1,0,29.66,224.93,1,1,0,19.72,193.63,1,1,0,-1.22,172.15,1,1,0,11.46,171.14,1,1,0,16.59,161.63,1,1,0,18.27,139.49,1,1,0,10.17,92.2,1,1,0,5.1,90.71,1,1,0,-57.65,88.85,1,1,0,-57.23,93.04,1,1,0,-91.8,80.12,1,1,0,-136.12,79.8,1,1,0,-182.48,85.68,1,1,0,-203.19,97.17,1,1,0,-210.05,116.41,1,1,0,-197.76,147.77,1,1,0,-183.84,154.1,1,1,0,-163.13,153.03,1,1,0,-145.66,146.06,1,1,0,-139.74,144.64,1,1,0,-99.43,168.66,1,1,0,-97.38,184.89,1,1,0,-91.88,187.48,1,1,0,-82.02,190.21,1,1,0,-88.77,207.25,1,1,0,-70.94,229.73,1,1,0,-78.42,248.24,1,1,0,-79.96,336.5,1,1,0,-77.14,348.72,1,1,0,-79.66,453.09,1,1,0,-83.29,460.17,1,1,0,-87.9,524.77,1,2,1,-126.55,-272.65,0.15489,0,-93.68,580.56,0.84511,3,1,-124.89,-227.97,0.57803,2,-387.27,125.61,0.03546,0,-92.02,625.25,0.38651,3,1,-146.82,-211.24,0.92257,2,-370.54,147.53,0.06809,0,-113.95,641.97,0.00934,2,1,-169.41,-187.34,0.9,2,-346.64,170.13,0.1,2,1,-175.41,-197.04,0.90457,2,-356.34,176.12,0.09543,2,1,-181.94,-103.77,0.9,2,-263.07,182.65,0.1,2,1,-179.7,-71.58,0.9,2,-230.88,180.41,0.1,2,1,-186.29,85.46,0.92258,2,-73.84,187.01,0.07742,2,1,-178.33,107.89,0.90705,2,-51.41,179.04,0.09295,2,1,-177.3,107.46,0.90508,2,-51.84,178.01,0.09492,2,1,-177.01,134.54,0.90443,2,-24.76,177.72,0.09557,2,1,-184.38,155.06,0.91895,2,-4.24,185.1,0.08105,2,1,-191.06,180.04,0.93179,2,20.74,191.78,0.06821,2,1,-183.02,222.66,0.91927,2,63.36,183.73,0.08073,2,1,-184.06,245.9,0.92855,2,86.6,184.77,0.07145,3,1,-190.87,262.99,0.92475,2,103.69,191.58,0.05124,0,-158,1116.2,0.02402,3,1,-191.75,284.55,0.74629,2,125.25,192.46,0.04927,0,-158.88,1137.76,0.20444,2,1,-186.04,357.67,0.96272,2,198.37,186.75,0.03728,2,1,-176.72,383.64,0.96732,2,224.34,177.43,0.03268,3,1,-140.16,411.7,0.94699,2,252.4,140.87,0.04441,3,-150.09,7.91,0.0086,3,1,-100.69,417.36,0.88741,2,258.06,101.4,0.05196,3,-110.62,13.57,0.06064,3,1,-93.56,422.9,0.87924,2,263.6,94.27,0.04077,3,-103.49,19.11,0.07999,3,1,-71.26,422.26,0.84571,2,262.96,71.98,0.0329,3,-81.19,18.46,0.12139,3,1,-65.43,424.92,0.83736,2,265.62,66.14,0.0248,3,-75.36,21.12,0.13784,2,1,-66.2,442.97,0.83353,3,-76.13,39.18,0.16647,2,1,-64.56,444.13,0.82992,3,-74.48,40.33,0.17008,2,1,-89.37,489.72,0.81348,3,-99.3,85.93,0.18652,2,1,-92.43,518.76,0.8134,3,-102.36,114.96,0.1866,2,1,-88.19,538.7,0.80274,3,-98.12,134.91,0.19726,2,1,-93.41,562.75,0.81377,3,-103.34,158.96,0.18623,2,1,-93.21,584.35,0.8126,3,-103.14,180.55,0.1874,2,1,-100.84,592.71,0.82787,3,-110.77,188.91,0.17213,2,1,-115.01,595.43,0.85583,3,-124.94,191.64,0.14417,2,1,-117.97,600.75,0.86293,3,-127.9,196.95,0.13707,2,1,-111.92,633.85,0.87377,3,-121.85,230.05,0.12623,2,1,-94.42,649.21,0.86282,3,-104.35,245.42,0.13718,2,1,-97.62,665.02,0.88617,3,-107.55,261.23,0.11383,2,1,-79.3,673.52,0.87287,3,-89.23,269.72,0.12713,2,1,-50.01,673.84,0.84427,3,-59.93,270.05,0.15573,2,1,-118.22,252.25,0.83509,2,92.95,118.94,0.16491,2,1,-49.3,226.51,0.8,2,67.21,50.01,0.2,2,1,69.25,263.27,0.8,2,103.97,-68.54,0.2,2,1,-47.81,434.29,0.83048,3,-57.74,30.5,0.16952,3,1,-20.26,432.64,0.81841,2,273.34,20.98,0.00499,3,-30.19,28.85,0.1766,3,1,-82.26,539.77,0.6272,3,-92.19,135.97,0.1568,5,-91.06,-51.49,0.216,3,1,-74.43,545.71,0.2944,3,-84.36,141.91,0.0736,5,-96.68,-43.42,0.632,3,1,-63.09,545.71,0.3392,3,-73.02,141.91,0.0848,5,-96.22,-32.09,0.576,3,1,-57.96,540.58,0.6528,3,-67.89,136.78,0.1632,5,-90.88,-27.18,0.184,2,1,-62.55,535.99,0.8,3,-72.48,132.19,0.2,2,1,-74.97,535.45,0.8,3,-84.9,131.65,0.2,3,1,-30.65,539.76,0.6912,4,-89.18,-76.41,0.13599,3,-40.58,135.96,0.1728,3,1,-24.33,546.19,0.3904,4,-96.07,-69.97,0.512,3,-34.26,142.4,0.0976,3,1,-13.74,547.05,0.27521,4,-97.25,-58.94,0.65599,3,-23.67,143.26,0.0688,3,1,0.92,544.85,0.4736,4,-95.34,-43.56,0.408,3,-9.01,141.05,0.1184,3,1,10.33,541.1,0.736,4,-91.68,-33.63,0.08,3,0.4,137.31,0.184,2,1,0.78,537.48,0.8,3,-9.15,133.68,0.2,2,1,-24.05,536.96,0.8,3,-33.98,133.16,0.2,2,1,-14.04,535.72,0.8,3,-23.96,131.92,0.2,3,1,-32.77,549.47,0.5056,4,-99.27,-78.88,0.368,3,-42.7,145.68,0.1264,3,1,-12.12,555.05,0.5056,4,-105.65,-57.46,0.368,3,-22.05,151.26,0.1264,3,1,2.76,556.17,0.5056,4,-107.22,-41.94,0.368,3,-7.17,152.37,0.1264,3,1,-61.52,551.17,0.4288,3,-71.45,147.38,0.1072,5,-101.61,-30.3,0.464,3,1,-78.21,563.53,0.4288,3,-88.14,159.74,0.1072,5,-114.64,-46.47,0.464,3,1,-84.39,560.23,0.4288,3,-94.32,156.44,0.1072,5,-111.6,-52.78,0.464],"hull":154,"edges":[0,306,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,306,280,314,314,316,316,24,318,320,320,322,322,324,324,326,326,328,328,318,330,332,332,334,334,336,336,338,338,340,342,330,340,344,344,342,346,348,348,350,352,354,354,356],"width":806,"height":1658},"block 3/d-bl3-fear":{"type":"mesh","uvs":[0.5657,0.04162,0.60301,0.08503,0.58153,0.09289,0.56712,0.09087,0.56238,0.15158,0.53365,0.17412,0.54579,0.18644,0.67223,0.20273,0.68547,0.2588,0.68454,0.31716,0.67372,0.5584,0.61587,0.56261,0.60073,0.65726,0.59391,0.67235,0.59703,0.78162,0.58832,0.79929,0.6094,0.81083,0.62654,0.83372,0.66202,0.84473,0.73287,0.83927,0.75554,0.86097,0.74528,0.87531,0.67486,0.88749,0.52112,0.87784,0.48863,0.87788,0.47673,0.83098,0.48024,0.82405,0.46841,0.80056,0.4701,0.70911,0.48496,0.64552,0.4908,0.64515,0.44,0.56694,0.42104,0.57691,0.3801,0.62528,0.37948,0.6622,0.3483,0.73778,0.35227,0.74373,0.333,0.86356,0.36148,0.8628,0.36102,0.89262,0.42686,0.90415,0.45492,0.95268,0.38167,0.96192,0.29421,0.96026,0.22991,0.92109,0.24456,0.87092,0.20133,0.80915,0.20713,0.74584,0.22242,0.72434,0.22211,0.7118,0.22201,0.66058,0.23014,0.62491,0.23789,0.60842,0.23469,0.53448,0.26442,0.45523,0.2668,0.43664,0.1377,0.38342,0.13549,0.35352,0.16501,0.31772,0.16857,0.29704,0.21209,0.23276,0.23038,0.22344,0.36568,0.18839,0.40741,0.16629,0.34165,0.12706,0.37768,0.05658,0.44569,0.03653,0.45878,0.18014,0.47891,0.18296,0.51104,0.1839,0.51491,0.14378,0.51226,0.09358,0.45834,0.13935,0.5468,0.14138,0.42912,0.11981,0.44439,0.12039,0.46324,0.11639,0.47758,0.1158,0.48846,0.11793,0.49351,0.12103,0.48674,0.12271,0.47718,0.12336,0.4639,0.12297,0.52136,0.1218,0.52644,0.11855,0.53472,0.11587,0.5456,0.11686,0.55155,0.1194,0.55475,0.12229,0.55083,0.12307,0.53718,0.12399,0.52717,0.12321,0.44796,0.11093,0.48575,0.1119,0.49967,0.10928,0.52723,0.11052,0.54285,0.1101,0.55337,0.10886,0.50427,0.29197,0.61195,0.28842,0.35827,0.28398],"triangles":[93,76,92,82,76,77,77,76,93,77,93,78,85,95,96,84,95,85,90,85,86,85,96,86,17,18,22,21,22,18,17,26,16,16,26,15,15,27,14,23,25,17,43,39,42,42,39,40,23,24,25,45,39,44,37,46,36,14,27,28,35,47,48,49,50,34,28,13,14,51,52,33,52,53,32,34,51,33,13,28,30,28,29,30,12,30,11,33,52,32,32,53,31,10,11,9,31,54,55,55,11,31,30,31,11,31,53,54,13,30,12,50,51,34,47,35,36,34,35,49,35,48,49,36,46,47,39,45,37,39,37,38,25,26,17,45,46,37,26,27,15,43,44,39,42,40,41,23,17,22,21,18,19,21,19,20,8,6,7,8,99,6,9,99,8,98,6,99,55,100,98,55,58,100,68,98,100,55,57,58,59,60,100,60,61,100,67,100,62,68,100,67,62,63,67,69,68,5,70,67,72,4,70,73,72,63,74,4,73,88,70,79,83,90,84,85,83,84,91,90,91,84,86,96,97,3,97,96,3,96,71,71,0,3,80,79,70,80,78,79,71,95,94,72,81,80,72,82,81,72,74,75,75,76,82,64,65,74,92,65,66,74,65,92,66,71,92,75,92,76,71,93,92,75,74,92,78,81,77,79,78,94,78,93,94,94,93,71,71,66,0,72,75,82,78,80,81,81,82,77,84,83,94,94,83,79,84,94,95,96,95,71,73,89,88,73,91,90,70,83,91,73,90,89,90,86,89,89,87,88,89,86,87,87,97,88,3,4,88,87,86,97,3,88,97,2,3,1,3,0,1,80,70,72,73,70,91,68,70,5,68,67,70,63,72,67,4,5,70,63,64,74,98,68,69,69,5,6,100,61,62,100,58,59,98,69,6,99,9,98,9,55,98,55,56,57,11,55,9],"vertices":[2,1,26.48,668.43,0.9183,3,16.56,264.63,0.0817,2,1,56.55,596.45,0.90516,3,46.63,192.65,0.09484,2,1,39.25,583.42,0.859,3,29.32,179.63,0.141,2,1,27.63,586.76,0.83063,3,17.7,182.97,0.16937,2,1,23.81,486.11,0.80063,3,13.89,82.31,0.19937,2,1,0.65,448.74,0.81962,3,-9.28,44.94,0.18038,3,1,10.44,428.32,0.86833,2,269.02,-9.73,0.00763,3,0.51,24.52,0.12404,2,1,112.35,401.3,0.936,2,242,-111.64,0.064,2,1,123.02,308.34,0.84589,2,149.04,-122.31,0.15411,2,1,122.27,211.58,0.90637,2,52.28,-121.56,0.09363,3,1,113.55,-188.4,0.19749,0,146.42,664.81,0.79532,2,-347.7,-112.84,0.00719,2,1,66.92,-195.38,0.25855,0,99.79,657.83,0.74145,1,0,87.59,500.91,1,1,0,82.1,475.89,1,1,0,84.61,294.71,1,1,0,77.58,265.41,1,1,0,94.58,246.29,1,1,0,108.39,208.34,1,1,0,136.99,190.09,1,1,0,194.09,199.13,1,1,0,212.37,163.15,1,1,0,204.1,139.38,1,1,0,147.34,119.19,1,1,0,23.42,135.17,1,1,0,-2.76,135.11,1,1,0,-12.35,212.87,1,1,0,-9.53,224.37,1,1,0,-19.06,263.32,1,1,0,-17.7,414.94,1,1,0,-5.72,520.37,1,1,0,-1.01,520.98,1,1,0,-41.96,650.65,1,1,0,-57.24,634.12,1,1,0,-90.24,553.93,1,1,0,-90.74,492.72,1,1,0,-115.87,367.4,1,1,0,-112.67,357.55,1,1,0,-128.2,158.87,1,1,0,-105.25,160.12,1,1,0,-105.62,110.67,1,1,0,-52.55,91.56,1,1,0,-29.93,11.11,1,1,0,-88.97,-4.23,1,1,0,-159.46,-1.48,1,1,0,-211.29,63.47,1,1,0,-199.48,146.65,1,1,0,-234.32,249.07,1,1,0,-229.65,354.03,1,1,0,-217.32,389.69,1,1,0,-217.57,410.48,1,1,0,-217.66,495.39,1,1,0,-211.11,554.54,1,1,0,-204.86,581.88,1,1,0,-207.43,704.48,1,3,1,-216.34,-17.34,0.35305,0,-183.47,835.87,0.62608,2,-176.64,217.06,0.02087,3,1,-214.43,13.48,0.57893,0,-181.56,866.7,0.36237,2,-145.82,215.14,0.0587,2,1,-318.48,101.72,0.985,2,-57.58,319.2,0.015,2,1,-320.26,151.3,0.96431,2,-8,320.97,0.03569,2,1,-296.47,210.66,0.93719,2,51.36,297.18,0.06281,2,1,-293.6,244.94,0.95088,2,85.64,294.32,0.04912,2,1,-258.52,351.51,0.97757,2,192.21,259.23,0.02243,2,1,-243.78,366.96,0.97481,2,207.66,244.5,0.02519,3,1,-134.73,425.08,0.94846,2,265.78,135.44,0.03275,3,-144.66,21.28,0.01879,2,1,-101.09,461.72,0.86865,3,-111.02,57.92,0.13135,2,1,-154.1,526.77,0.89399,3,-164.02,122.98,0.10601,2,1,-125.06,643.62,0.87204,3,-134.99,239.83,0.12796,2,1,-70.24,676.86,0.87665,3,-80.17,273.06,0.12335,3,1,-59.69,438.76,0.82936,2,279.46,60.4,0.00696,3,-69.62,34.97,0.16367,3,1,-43.46,434.08,0.83142,2,274.78,44.18,0.00434,3,-53.39,30.29,0.16424,3,1,-17.57,432.52,0.8378,2,273.22,18.28,0.00282,3,-27.5,28.73,0.15938,2,1,-14.45,499.04,0.8,3,-24.38,95.24,0.2,2,1,-16.59,582.27,0.8,3,-26.52,178.48,0.2,2,1,-60.04,506.38,0.8,3,-69.97,102.59,0.2,2,1,11.26,503.02,0.8,3,1.33,99.22,0.2,2,1,-83.59,538.79,0.8,3,-93.52,135,0.2,3,1,-71.29,537.83,0.736,3,-81.22,134.03,0.184,5,-88.68,-40.61,0.08,3,1,-56.1,544.46,0.256,3,-66.02,140.67,0.064,5,-94.68,-25.15,0.68,3,1,-44.54,545.42,0.2048,3,-54.47,141.63,0.0512,5,-95.17,-13.57,0.744,3,1,-35.77,541.89,0.4608,3,-45.69,138.1,0.1152,5,-91.29,-4.95,0.424,2,1,-31.7,536.76,0.8,3,-41.63,132.96,0.2,2,1,-37.16,533.98,0.8,3,-47.08,130.18,0.2,2,1,-44.86,532.91,0.8,3,-54.79,129.11,0.2,2,1,-55.56,533.55,0.8,3,-65.49,129.75,0.2,3,1,-9.25,535.49,0.6784,4,-85.29,-53.93,0.152,3,-19.18,131.69,0.1696,3,1,-5.16,540.87,0.448,4,-91.02,-49.8,0.44,3,-15.08,137.08,0.112,3,1,1.51,545.32,0.2048,4,-95.85,-42.95,0.74399,3,-8.42,141.52,0.0512,3,1,10.29,543.68,0.28799,4,-94.37,-33.74,0.64002,3,0.36,139.88,0.072,3,1,15.08,539.47,0.53122,4,-90.1,-28.62,0.33598,3,5.16,135.67,0.1328,3,1,17.66,534.67,0.7424,4,-85.16,-25.8,0.072,3,7.73,130.87,0.1856,2,1,14.5,533.38,0.8,3,4.57,129.59,0.2,2,1,3.5,531.86,0.8,3,-6.43,128.07,0.2,2,1,-4.57,533.15,0.8,3,-14.5,129.35,0.2,3,1,-68.41,553.5,0.5376,3,-78.34,149.71,0.1344,5,-104.22,-37.09,0.328,3,1,-37.96,551.9,0.5376,3,-47.89,148.1,0.1344,5,-101.37,-6.73,0.328,3,1,-26.74,556.25,0.5376,3,-36.66,152.46,0.1344,5,-105.26,4.66,0.328,3,1,-4.52,554.19,0.544,4,-104.96,-49.49,0.32,3,-14.45,150.4,0.136,3,1,8.07,554.88,0.544,4,-106.01,-36.35,0.32,3,-1.86,151.08,0.136,3,1,16.54,556.94,0.54418,4,-108.39,-27.56,0.32,3,6.62,153.14,0.13582,2,1,-23.02,253.35,0.8,2,94.05,23.74,0.2,2,1,63.77,259.23,0.79954,2,99.93,-63.05,0.20046,2,1,-140.7,266.59,0.84991,2,107.29,141.42,0.15009],"hull":67,"edges":[0,132,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,126,134,134,136,136,138,138,10,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,150,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,166,184,186,186,188,190,192,192,194],"width":806,"height":1658},"block 3/drake surprise right":{"type":"mesh","uvs":[0.56781,0.03905,0.60301,0.08503,0.58153,0.09289,0.56712,0.09087,0.56885,0.14115,0.53365,0.17412,0.54579,0.18644,0.67223,0.20273,0.75917,0.22297,0.92891,0.31231,0.9516,0.37205,0.67803,0.40614,0.68222,0.65564,0.6754,0.67073,0.67851,0.78001,0.68248,0.79465,0.69088,0.80921,0.70802,0.8321,0.56724,0.87602,0.81435,0.83765,0.80714,0.88815,0.75173,0.88994,0.65878,0.8953,0.53967,0.88747,0.48863,0.87788,0.47673,0.83098,0.48024,0.82405,0.46841,0.80056,0.4701,0.70911,0.48496,0.64552,0.4908,0.64515,0.44,0.56694,0.42104,0.57691,0.3801,0.62528,0.37948,0.6622,0.3483,0.73778,0.35227,0.74373,0.333,0.86356,0.36148,0.8628,0.36102,0.89262,0.42686,0.90415,0.45492,0.95268,0.38167,0.96192,0.29421,0.96026,0.1611,0.95872,0.0962,0.91901,0.14328,0.81229,0.12757,0.7448,0.14287,0.71493,0.14698,0.71329,0.14688,0.66207,0.15501,0.6264,0.16276,0.60991,0.15956,0.53597,0.26442,0.45523,0.2668,0.43664,0.1377,0.38342,0.13549,0.35352,0.16501,0.31772,0.16857,0.29704,0.21209,0.23276,0.23038,0.22344,0.36568,0.18839,0.40741,0.16629,0.34165,0.12706,0.37768,0.05658,0.44306,0.03218,0.45878,0.18014,0.47891,0.18296,0.51104,0.1839,0.51491,0.14378,0.51226,0.09358,0.45834,0.13935,0.5468,0.14138,0.42955,0.11702,0.44481,0.1176,0.46367,0.1136,0.478,0.11302,0.48889,0.11515,0.49393,0.11825,0.48716,0.11993,0.4776,0.12057,0.46433,0.12018,0.5238,0.11897,0.52888,0.11573,0.53716,0.11305,0.54805,0.11403,0.554,0.11657,0.55719,0.11947,0.55327,0.12024,0.53963,0.12116,0.52961,0.12039,0.44776,0.1086,0.48555,0.10957,0.49698,0.1102,0.52499,0.10885,0.53943,0.10554,0.55217,0.10336,0.50427,0.29197,0.61195,0.28842,0.35827,0.28398],"triangles":[93,76,92,77,76,93,77,93,78,82,76,77,85,95,96,85,96,86,84,95,85,90,85,86,11,9,10,55,11,54,31,54,11,32,53,54,31,32,54,52,53,32,33,52,32,12,30,31,12,31,11,33,51,52,34,51,33,50,51,34,13,30,12,49,50,34,35,49,34,28,29,30,13,28,30,28,13,14,47,48,36,49,36,48,35,36,49,46,47,36,14,27,28,15,27,14,26,15,16,15,26,27,37,46,36,18,26,16,18,16,17,25,26,18,24,25,18,23,24,18,18,19,22,20,21,19,39,37,38,21,22,19,23,18,22,45,46,37,44,45,37,37,43,44,39,43,37,42,39,40,42,40,41,43,39,42,0,71,66,3,0,1,2,3,1,3,71,0,65,66,71,97,71,3,96,71,97,92,65,71,95,71,96,93,92,71,71,94,93,95,94,71,3,88,97,86,96,97,78,93,94,88,87,97,86,97,87,74,65,92,75,74,92,75,92,76,79,78,94,83,94,95,83,95,84,79,94,83,88,3,4,78,81,77,80,78,79,81,82,77,75,76,82,89,86,87,89,87,88,90,91,84,83,84,91,78,80,81,90,86,89,90,84,85,64,65,74,72,75,82,72,82,81,89,88,4,73,90,89,73,89,4,70,79,83,70,83,91,80,79,70,73,70,91,73,91,90,63,64,74,72,63,74,72,74,75,5,70,73,5,73,4,70,67,72,63,72,67,72,81,80,80,70,72,68,67,70,68,70,5,69,68,5,69,5,6,100,61,62,60,61,100,99,6,7,99,7,8,98,68,69,98,69,6,98,6,99,59,60,100,62,63,67,67,100,62,68,100,67,68,98,100,55,56,57,9,11,99,9,99,8,100,58,59,55,58,100,55,57,58,55,100,98,98,99,11,11,55,98],"vertices":[2,1,28.18,672.68,0.9183,3,18.26,268.88,0.0817,2,1,56.55,596.45,0.90516,3,46.63,192.65,0.09484,2,1,39.25,583.42,0.859,3,29.32,179.63,0.141,2,1,27.63,586.76,0.83063,3,17.7,182.97,0.16937,2,1,29.02,503.41,0.80063,3,19.09,99.61,0.19937,2,1,0.65,448.74,0.81962,3,-9.28,44.94,0.18038,3,1,10.44,428.32,0.86833,2,269.02,-9.73,0.00763,3,0.51,24.52,0.12404,2,1,112.35,401.3,0.936,2,242,-111.64,0.064,2,1,182.42,367.74,0.84589,2,208.44,-181.71,0.15411,2,1,319.24,219.62,0.90637,2,60.32,-318.52,0.09363,3,1,337.52,120.57,0.19749,0,370.39,973.78,0.79532,2,-38.73,-336.81,0.00719,2,1,117.03,64.05,0.25855,0,149.9,917.26,0.74145,1,0,153.27,503.59,1,1,0,147.77,478.57,1,1,0,150.28,297.39,1,1,0,153.48,273.11,1,1,0,160.25,248.97,1,1,0,174.07,211.02,1,1,0,60.59,138.2,1,1,0,259.77,201.81,1,1,0,253.96,118.1,1,1,0,209.29,115.12,1,1,0,134.38,106.23,1,1,0,38.38,119.22,1,1,0,-2.76,135.11,1,1,0,-12.35,212.87,1,1,0,-9.53,224.37,1,1,0,-19.06,263.32,1,1,0,-17.7,414.94,1,1,0,-5.72,520.37,1,1,0,-1.01,520.98,1,1,0,-41.96,650.65,1,1,0,-57.24,634.12,1,1,0,-90.24,553.93,1,1,0,-90.74,492.72,1,1,0,-115.87,367.4,1,1,0,-112.67,357.55,1,1,0,-128.2,158.87,1,1,0,-105.25,160.12,1,1,0,-105.62,110.67,1,1,0,-52.55,91.56,1,1,0,-29.93,11.11,1,1,0,-88.97,-4.23,1,1,0,-159.46,-1.48,1,1,0,-266.75,1.09,1,1,0,-319.06,66.93,1,1,0,-281.11,243.87,1,1,0,-293.77,355.77,1,1,0,-281.45,405.28,1,1,0,-278.13,408.01,1,1,0,-278.21,492.92,1,1,0,-271.66,552.07,1,1,0,-265.41,579.41,1,1,0,-267.99,702.01,1,3,1,-216.34,-17.34,0.35305,0,-183.47,835.87,0.62608,2,-176.64,217.06,0.02087,3,1,-214.43,13.48,0.57893,0,-181.56,866.7,0.36237,2,-145.82,215.14,0.0587,2,1,-318.48,101.72,0.985,2,-57.58,319.2,0.015,2,1,-320.26,151.3,0.96431,2,-8,320.97,0.03569,2,1,-296.47,210.66,0.93719,2,51.36,297.18,0.06281,2,1,-293.6,244.94,0.95088,2,85.64,294.32,0.04912,2,1,-258.52,351.51,0.97757,2,192.21,259.23,0.02243,2,1,-243.78,366.96,0.97481,2,207.66,244.5,0.02519,3,1,-134.73,425.08,0.94846,2,265.78,135.44,0.03275,3,-144.66,21.28,0.01879,2,1,-101.09,461.72,0.86865,3,-111.02,57.92,0.13135,2,1,-154.1,526.77,0.89399,3,-164.02,122.98,0.10601,2,1,-125.06,643.62,0.87204,3,-134.99,239.83,0.12796,2,1,-72.36,684.08,0.87665,3,-82.29,280.29,0.12335,3,1,-59.69,438.76,0.82936,2,279.46,60.4,0.00696,3,-69.62,34.97,0.16367,3,1,-43.46,434.08,0.83142,2,274.78,44.18,0.00434,3,-53.39,30.29,0.16424,3,1,-17.57,432.52,0.8378,2,273.22,18.28,0.00282,3,-27.5,28.73,0.15938,2,1,-14.45,499.04,0.8,3,-24.38,95.24,0.2,2,1,-16.59,582.27,0.8,3,-26.52,178.48,0.2,2,1,-60.04,506.38,0.8,3,-69.97,102.59,0.2,2,1,11.26,503.02,0.8,3,1.33,99.22,0.2,2,1,-83.25,543.41,0.8,3,-93.18,139.61,0.2,3,1,-70.95,542.44,0.736,3,-80.88,138.65,0.184,5,-93.27,-40.08,0.08,3,1,-55.75,549.08,0.256,3,-65.68,145.28,0.064,5,-99.28,-24.62,0.68,3,1,-44.2,550.04,0.2048,3,-54.13,146.25,0.0512,5,-99.77,-13.04,0.744,3,1,-35.42,546.51,0.4608,3,-45.35,142.72,0.1152,5,-95.89,-4.42,0.424,2,1,-31.36,541.37,0.8,3,-41.29,137.58,0.2,2,1,-36.81,538.59,0.8,3,-46.74,134.8,0.2,2,1,-44.52,537.52,0.8,3,-54.45,133.73,0.2,2,1,-55.22,538.16,0.8,3,-65.15,134.37,0.2,3,1,-7.28,540.17,0.6784,4,-90.24,-52,0.152,3,-17.21,136.38,0.1696,3,1,-3.19,545.55,0.448,4,-95.97,-47.87,0.44,3,-13.12,141.76,0.112,3,1,3.48,550,0.2048,4,-100.79,-41.02,0.74399,3,-6.45,146.2,0.0512,3,1,12.26,548.36,0.28799,4,-99.31,-31.81,0.64002,3,2.33,144.57,0.072,3,1,17.05,544.15,0.53122,4,-95.04,-26.68,0.33598,3,7.13,140.35,0.1328,3,1,19.63,539.35,0.7424,4,-90.1,-23.87,0.072,3,9.7,135.56,0.1856,2,1,16.47,538.06,0.8,3,6.54,134.27,0.2,2,1,5.47,536.54,0.8,3,-4.46,132.75,0.2,2,1,-2.6,537.83,0.8,3,-12.53,134.04,0.2,3,1,-68.57,557.37,0.5376,3,-78.5,153.57,0.1344,5,-108.09,-37.09,0.328,3,1,-38.12,555.76,0.5376,3,-48.04,151.97,0.1344,5,-105.24,-6.73,0.328,3,1,-28.9,554.71,0.5376,3,-38.83,150.92,0.1344,5,-103.82,2.44,0.328,3,1,-6.32,556.95,0.544,4,-107.79,-51.45,0.32,3,-16.25,153.15,0.136,3,1,5.31,562.44,0.544,4,-113.83,-39.44,0.32,3,-4.62,158.64,0.136,3,1,15.58,566.06,0.54418,4,-117.89,-28.81,0.32,3,5.66,162.26,0.13582,2,1,-23.02,253.35,0.8,2,94.05,23.74,0.2,2,1,63.77,259.23,0.79954,2,99.93,-63.05,0.20046,2,1,-140.7,266.59,0.84991,2,107.29,141.42,0.15009],"hull":67,"edges":[0,132,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,126,134,134,136,136,138,138,10,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,150,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,166,184,186,186,188,190,192,192,194],"width":806,"height":1658},"block 3/s-b3-fear lighter":{"type":"mesh","uvs":[0.50999,0.06964,0.57259,0.06968,0.59864,0.07173,0.61184,0.07548,0.61957,0.08598,0.61843,0.08346,0.63802,0.09513,0.6443,0.10363,0.64946,0.11702,0.65,0.13139,0.65358,0.13278,0.66085,0.14688,0.66035,0.15116,0.64169,0.17176,0.6334,0.17323,0.60409,0.19564,0.62044,0.19962,0.92179,0.2072,0.92779,0.39131,0.72167,0.46324,0.70783,0.46574,0.71866,0.50192,0.69608,0.50705,0.70984,0.59136,0.7127,0.62134,0.71321,0.64853,0.70553,0.70104,0.70361,0.74165,0.69888,0.74765,0.69911,0.77656,0.6967,0.78049,0.6835,0.84287,0.68597,0.87564,0.68966,0.88426,0.72248,0.90011,0.74086,0.90547,0.78273,0.91407,0.79324,0.91981,0.79985,0.93402,0.7987,0.93854,0.73088,0.94234,0.68815,0.93934,0.65043,0.93585,0.60768,0.92561,0.55863,0.91688,0.54015,0.90924,0.53818,0.88766,0.53281,0.88612,0.55546,0.71645,0.55804,0.71619,0.56345,0.66703,0.56605,0.66547,0.55081,0.63975,0.52105,0.56115,0.50566,0.56759,0.49625,0.58941,0.50246,0.58745,0.48637,0.61385,0.47853,0.62971,0.45671,0.69646,0.455,0.71799,0.43566,0.75935,0.42334,0.79645,0.42385,0.80758,0.41654,0.82277,0.40982,0.85101,0.40884,0.88285,0.39591,0.89062,0.39318,0.90795,0.38906,0.91229,0.37581,0.91821,0.34872,0.92235,0.34555,0.9244,0.33131,0.93209,0.25612,0.94141,0.23375,0.94145,0.18328,0.9344,0.17727,0.93068,0.18642,0.91719,0.22824,0.90558,0.23312,0.90359,0.26404,0.88931,0.26694,0.88633,0.25444,0.88121,0.26926,0.87916,0.26923,0.87091,0.27522,0.86708,0.27599,0.85977,0.29556,0.75858,0.30976,0.68879,0.31712,0.66098,0.32494,0.64626,0.32118,0.63328,0.32528,0.60894,0.32597,0.56638,0.32199,0.56104,0.31178,0.56148,0.30726,0.52791,0.30675,0.41096,0.28161,0.26981,0.15064,0.21075,0.12501,0.11113,0.14759,0.08553,0.34069,0.08937,0.36768,0.07776,0.4528,0.06714,0.49377,0.21748,0.5203,0.21947,0.54867,0.21814,0.56057,0.2166,0.58208,0.20466,0.3861,0.29118,0.63268,0.29566,0.51686,0.33535,0.50292,0.1409,0.58306,0.14443,0.52259,0.16905,0.53332,0.20406,0.51446,0.1112,0.47059,0.15264,0.48062,0.15039,0.50061,0.14938,0.50635,0.15202,0.50765,0.15497,0.49798,0.15556,0.48239,0.15556,0.55926,0.15306,0.55293,0.15765,0.55882,0.15801,0.56999,0.16023,0.57963,0.15969,0.58783,0.15707,0.59226,0.15537,0.58361,0.15423,0.571,0.15294],"triangles":[53,54,95,54,55,94,57,93,55,57,55,56,58,93,57,92,93,58,52,23,24,53,23,52,91,92,58,52,24,25,51,52,25,59,91,58,90,91,59,89,90,59,26,51,25,60,89,59,26,50,51,26,49,50,27,49,26,28,49,27,88,89,60,61,88,60,29,30,49,29,49,28,62,88,61,63,64,88,63,88,62,30,48,49,64,87,88,65,87,64,84,85,86,65,86,87,65,67,86,67,84,86,48,30,47,46,47,31,30,31,47,82,83,84,32,46,31,65,66,67,82,84,67,71,82,67,46,44,45,33,46,32,67,68,70,46,43,44,68,69,70,71,81,82,67,70,71,72,81,71,33,43,46,42,43,33,73,81,72,80,81,73,76,77,78,34,42,33,38,40,37,41,42,34,41,34,35,74,80,73,79,80,74,75,78,79,75,76,78,79,74,75,40,41,35,40,35,36,40,36,37,39,40,38,115,134,126,126,127,122,128,127,126,130,134,133,134,128,126,129,134,130,129,128,134,116,123,127,128,116,127,129,116,128,6,4,5,118,0,1,104,105,118,118,105,0,118,1,4,2,4,1,3,4,2,4,7,118,7,4,6,115,7,8,115,8,9,7,115,118,114,118,115,119,118,114,121,120,114,118,119,104,119,103,104,11,9,10,114,126,122,121,114,122,119,114,120,114,115,126,132,133,115,134,115,133,127,123,122,9,132,115,124,120,121,124,121,122,124,122,123,125,120,124,119,120,125,131,133,132,130,133,131,132,12,13,9,12,132,9,11,12,14,132,13,14,131,132,14,130,131,15,130,14,117,116,110,15,129,130,110,129,15,110,116,129,103,101,102,100,103,119,100,101,103,109,117,110,116,106,125,124,123,116,116,125,124,106,116,117,108,117,109,107,106,117,108,107,117,99,100,119,106,111,99,99,119,106,106,119,125,111,106,107,112,16,17,113,111,107,110,15,16,109,110,16,112,109,16,112,17,18,98,99,111,98,111,113,19,112,18,19,113,112,19,20,113,22,20,21,20,97,98,108,109,112,107,108,112,113,107,112,98,113,20,20,95,97,20,53,95,22,53,20,96,97,95,54,94,95,53,22,23,93,94,55],"vertices":[2,1,-0.15,572.52,0.73,3,-10.08,168.73,0.27,2,1,50.74,572.45,0.73,3,40.81,168.66,0.27,2,1,71.92,569,0.73,3,62,165.21,0.27,2,1,82.66,562.7,0.73,3,72.73,158.9,0.27,2,1,88.94,545.02,0.73,3,79.02,141.22,0.27,2,1,88.01,549.27,0.73,3,78.08,145.48,0.27,2,1,103.94,529.62,0.73,3,94.01,125.83,0.27,2,1,109.04,515.31,0.73,3,99.11,111.52,0.27,2,1,113.24,492.79,0.73,3,103.32,88.99,0.27,2,1,113.68,468.59,0.82,3,103.75,64.8,0.18,2,1,116.61,466.29,0.82,3,106.68,62.5,0.18,2,1,122.52,442.56,0.73,3,112.59,38.77,0.27,2,1,122.15,435.44,0.73,3,112.22,31.64,0.27,2,1,106.98,400.76,0.74262,3,97.05,-3.04,0.25738,2,1,100.17,398.14,0.71775,3,90.25,-5.65,0.28225,2,1,76.35,360.47,0.84296,3,66.43,-43.32,0.15704,3,1,89.65,353.77,0.94713,2,194.47,-88.94,0.01306,3,79.72,-50.02,0.03981,3,1,334.65,341.01,0.94823,2,181.71,-333.93,0.02724,3,324.72,-62.78,0.02453,3,1,339.52,31.15,0.94921,2,-128.15,-338.81,0.03981,3,329.59,-372.64,0.01098,2,1,171.95,-89.91,0.95,2,-249.21,-171.24,0.05,2,1,160.69,-94.11,0.95,2,-253.41,-159.98,0.05,1,1,169.5,-155,1,1,1,151.14,-163.63,1,2,1,162.33,-305.53,0.44961,0,195.2,547.69,0.55039,2,1,164.65,-355.99,0.07046,0,197.52,497.23,0.92954,1,0,197.94,451.46,1,1,0,191.7,363.1,1,1,0,190.13,294.74,1,1,0,186.29,284.65,1,1,0,186.47,235.99,1,1,0,184.51,229.38,1,1,0,173.78,124.38,1,1,0,175.79,69.23,1,1,0,178.8,54.72,1,1,0,205.48,28.05,1,1,0,220.42,19.03,1,1,0,254.46,4.56,1,1,0,263,-5.1,1,1,0,268.37,-29.01,1,1,0,267.44,-36.62,1,1,0,212.3,-43.02,1,1,0,177.57,-37.97,1,1,0,146.9,-32.1,1,1,0,112.15,-14.86,1,1,0,72.27,-0.16,1,1,0,57.24,12.69,1,1,0,55.64,49.01,1,1,0,51.27,51.61,1,1,0,69.69,337.16,1,1,0,71.78,337.6,1,1,0,76.18,420.33,1,1,0,78.29,422.96,1,1,0,65.91,466.24,1,2,1,8.84,-254.69,0.35744,0,41.71,598.52,0.64256,2,1,-3.67,-265.53,0.10854,0,29.2,587.68,0.89146,1,0,21.55,550.96,1,1,0,26.6,554.26,1,1,0,13.52,509.84,1,1,0,7.15,483.14,1,1,0,-10.59,370.79,1,1,0,-11.99,334.56,1,1,0,-27.71,264.95,1,1,0,-37.72,202.51,1,1,0,-37.31,183.78,1,1,0,-43.25,158.21,1,1,0,-48.71,110.7,1,1,0,-49.52,57.1,1,1,0,-60.02,44.02,1,1,0,-62.24,14.87,1,1,0,-65.59,7.56,1,1,0,-76.37,-2.41,1,1,0,-98.39,-9.38,1,1,0,-100.97,-12.82,1,1,0,-112.54,-25.77,1,1,0,-173.67,-41.45,1,1,0,-191.86,-41.52,1,1,0,-232.89,-29.66,1,1,0,-237.78,-23.4,1,1,0,-230.34,-0.69,1,1,0,-196.34,18.84,1,1,0,-192.38,22.2,1,1,0,-167.24,46.23,1,1,0,-164.88,51.24,1,1,0,-175.04,59.86,1,1,0,-162.99,63.31,1,1,0,-163.01,77.2,1,1,0,-158.15,83.64,1,1,0,-157.52,95.94,1,1,0,-141.61,266.25,1,1,0,-130.06,383.7,1,1,0,-124.09,430.51,1,2,1,-150.59,-397.93,0.04128,0,-117.72,455.28,0.95872,3,1,-153.65,-376.09,0.28647,3,-163.58,-779.88,0,0,-120.78,477.12,0.71353,3,1,-150.31,-335.11,0.66657,3,-160.24,-738.91,0,0,-117.44,518.1,0.33343,2,1,-149.75,-263.49,1,3,-159.68,-667.28,0,3,1,-153,-254.51,0.98637,2,-413.81,153.71,0.01363,3,-162.92,-658.3,0,3,1,-161.3,-255.24,0.98073,2,-414.54,162.01,0.01927,3,-171.23,-659.03,0,3,1,-164.97,-198.74,0.94551,2,-358.04,165.68,0.05449,3,-174.9,-602.54,0,2,1,-165.38,-1.92,0.95,2,-161.22,166.09,0.05,2,1,-185.82,235.63,0.92214,2,76.33,186.53,0.07786,2,1,-292.3,335.04,0.91733,2,175.74,293.01,0.08267,2,1,-313.13,502.69,0.91396,2,343.39,313.85,0.08604,2,1,-294.78,545.78,0.9086,2,386.48,295.49,0.0914,2,1,-137.79,539.32,0.96642,3,-147.72,135.52,0.03358,2,1,-115.85,558.86,0.80688,3,-125.77,155.07,0.19312,2,1,-46.64,576.72,0.73,3,-56.57,172.93,0.27,2,1,-13.34,323.71,0.74718,3,-23.27,-80.09,0.25282,2,1,8.24,320.36,0.74498,3,-1.69,-83.43,0.25502,2,1,31.3,322.59,0.75269,3,21.37,-81.2,0.24731,2,1,40.97,325.19,0.76016,3,31.04,-78.6,0.23984,2,1,58.46,345.28,0.73747,3,48.53,-58.51,0.26253,2,1,-100.87,199.66,0.84548,2,40.36,101.59,0.15452,2,1,99.6,192.13,0.82779,2,32.83,-98.89,0.17221,2,1,5.43,125.32,0.85974,2,-33.98,-4.72,0.14026,2,1,-5.89,452.6,0.57756,3,-15.82,48.8,0.42244,2,1,59.26,446.65,0.57342,3,49.33,42.86,0.42658,2,1,10.09,405.21,0.46059,3,0.16,1.42,0.53941,2,1,18.82,346.29,0.64636,3,8.89,-57.5,0.35364,2,1,3.48,502.58,0.51907,3,-6.45,98.78,0.48093,2,1,-32.18,432.84,0.6077,3,-42.11,29.05,0.3923,3,1,-24.03,437.22,0.36347,3,-33.95,33.42,0.28855,5,15.37,2.45,0.34798,3,1,-7.72,438.25,0.35211,3,-17.65,34.45,0.28553,5,15.01,18.78,0.36235,3,1,-3.22,434.51,0.44438,3,-13.15,30.71,0.34671,5,18.92,23.12,0.2089,2,1,-2.04,428.91,0.54543,3,-11.97,25.11,0.45457,2,1,-9.92,427.92,0.58554,3,-19.84,24.13,0.41446,2,1,-22.59,427.92,0.61032,3,-32.51,24.13,0.38968,3,1,39.98,431.94,0.25532,3,30.05,28.14,0.34997,4,23.05,0.82,0.3947,3,1,34.76,424.41,0.42947,3,24.83,20.62,0.46895,4,30.71,-4.2,0.10157,3,1,39.51,423.88,0.46975,3,29.58,20.09,0.49486,4,31.11,0.56,0.03539,2,1,48.63,420.07,0.5023,3,38.71,16.27,0.4977,2,1,56.49,421.02,0.50555,3,46.56,17.23,0.49445,3,1,63.15,425.42,0.48645,3,53.22,21.63,0.46798,4,28.97,24.15,0.04556,3,1,66.78,428.32,0.45149,3,56.85,24.52,0.41221,4,25.98,27.7,0.1363,3,1,59.67,431.55,0.33416,3,49.74,27.75,0.35808,4,22.93,20.51,0.30776,3,1,49.47,431.82,0.24658,3,39.54,28.02,0.33574,4,22.92,10.31,0.41769],"hull":106,"edges":[0,210,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,204,206,190,192,194,192,212,214,214,216,216,218,218,220,220,30,238,240,240,242,242,244,244,246,246,248,248,250,250,238,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,252,196,198,194,196,32,34,202,204,34,36,36,38,208,210,206,208,198,200,200,202],"width":813,"height":1683},"block 3/s-b3-fear lighter2":{"type":"mesh","path":"block 3/s-b3-lighter","uvs":[0.52577,0.06165,0.58837,0.0617,0.61442,0.06375,0.62762,0.06749,0.63536,0.078,0.63422,0.07547,0.6538,0.08714,0.66008,0.09565,0.66525,0.10903,0.66577,0.12342,0.66921,0.12493,0.66085,0.14688,0.66035,0.15116,0.64169,0.17176,0.6334,0.17323,0.60409,0.19564,0.62044,0.19962,0.81549,0.21112,0.87807,0.39229,0.89159,0.43845,0.89722,0.46488,0.87075,0.50236,0.86587,0.52971,0.81768,0.58923,0.82054,0.61921,0.82105,0.6464,0.81337,0.69891,0.81145,0.73953,0.80672,0.74552,0.80695,0.77443,0.80454,0.77836,0.79134,0.84075,0.79381,0.87352,0.7975,0.88214,0.83032,0.89798,0.8487,0.90335,0.89057,0.91194,0.90108,0.91768,0.85875,0.94156,0.7987,0.94436,0.73088,0.94234,0.68815,0.93934,0.65043,0.93585,0.60768,0.92561,0.40863,0.9422,0.25612,0.94141,0.23375,0.94145,0.18328,0.9344,0.17727,0.93068,0.18642,0.91719,0.22824,0.90558,0.23312,0.90359,0.26404,0.88931,0.26694,0.88633,0.25444,0.88121,0.26926,0.87916,0.26923,0.87091,0.27522,0.86708,0.27599,0.85977,0.29556,0.75858,0.30976,0.68879,0.31712,0.66098,0.32494,0.64626,0.32118,0.63328,0.32528,0.60894,0.32597,0.56638,0.32199,0.56104,0.31178,0.56148,0.30726,0.52791,0.25422,0.42899,0.11644,0.37431,0.15064,0.21075,0.2629,0.19621,0.33993,0.19412,0.38588,0.17109,0.39151,0.13668,0.4528,0.06714,0.49757,0.21013,0.52411,0.21212,0.55248,0.21079,0.56438,0.20924,0.58588,0.19731,0.40842,0.30244,0.655,0.30691,0.53918,0.34661,0.50216,0.13778,0.55494,0.14002,0.52259,0.16905,0.53713,0.19671,0.51446,0.1112,0.47173,0.14548,0.48176,0.14321,0.5018,0.14255,0.50736,0.1447,0.50877,0.14779,0.49912,0.1484,0.48353,0.1484,0.56063,0.14622,0.55405,0.15047,0.56,0.1509,0.57113,0.15307,0.58077,0.15253,0.589,0.14987,0.59341,0.1482,0.58464,0.14677,0.57203,0.14548],"triangles":[64,23,24,62,63,64,62,64,24,62,24,25,26,62,25,26,61,62,26,60,61,26,28,60,27,28,26,59,60,28,30,59,28,29,30,28,31,59,30,43,58,59,31,43,59,58,44,57,55,56,57,53,54,55,31,32,43,42,43,32,44,55,57,44,53,55,47,48,49,32,41,42,33,41,32,40,41,33,45,51,52,50,51,45,46,49,50,46,47,49,50,45,46,38,35,36,38,36,37,44,58,43,52,53,44,45,52,44,34,40,33,39,40,34,39,34,35,39,35,38,97,86,105,99,98,97,101,105,104,105,99,97,100,105,101,100,99,105,87,94,98,99,87,98,100,87,99,6,4,5,89,76,0,75,76,89,75,89,90,1,89,0,7,86,89,85,89,86,1,3,89,2,3,1,4,89,3,89,85,91,93,92,85,4,7,89,92,91,85,86,93,85,91,90,89,105,86,104,6,7,4,8,86,7,8,104,86,9,104,8,9,103,104,11,9,10,94,93,86,11,103,9,95,96,91,90,91,96,92,95,91,95,92,93,95,93,94,102,104,103,98,94,86,98,86,97,12,103,11,101,104,102,74,75,90,13,103,12,14,103,13,102,103,14,14,101,102,15,101,14,88,87,81,81,101,15,100,101,81,81,87,100,80,88,81,96,87,74,95,94,87,87,96,95,77,87,88,79,88,80,78,77,88,79,78,88,73,74,77,96,74,90,87,77,74,82,73,77,82,77,78,83,16,17,78,83,82,84,82,83,81,15,16,80,81,16,80,16,83,83,17,18,71,82,70,82,69,70,72,73,82,72,82,71,84,18,19,18,84,83,21,19,20,84,68,69,84,69,82,79,80,83,83,78,79,19,21,84,21,68,84,22,68,21,23,66,68,67,68,66,23,65,66,68,22,23,64,65,23],"vertices":[2,1,12.68,585.97,0.73,3,2.75,182.17,0.27,2,1,63.57,585.89,0.73,3,53.65,182.1,0.27,2,1,84.76,582.44,0.73,3,74.83,178.65,0.27,2,1,95.49,576.14,0.73,3,85.56,172.34,0.27,2,1,101.77,558.46,0.73,3,91.85,154.67,0.27,2,1,100.84,562.71,0.73,3,90.92,158.92,0.27,2,1,116.77,543.07,0.73,3,106.84,139.27,0.27,2,1,121.87,528.76,0.73,3,111.95,124.96,0.27,2,1,126.07,506.23,0.73,3,116.15,102.44,0.27,2,1,126.51,482.03,0.82,3,116.59,78.24,0.18,2,1,129.44,479.74,0.82,3,119.51,75.94,0.18,2,1,122.52,442.56,0.73,3,112.59,38.77,0.27,2,1,122.15,435.44,0.73,3,112.22,31.64,0.27,2,1,106.98,400.76,0.74262,3,97.05,-3.04,0.25738,2,1,100.17,398.14,0.71775,3,90.25,-5.65,0.28225,2,1,76.35,360.47,0.84296,3,66.43,-43.32,0.15704,3,1,89.65,353.77,0.94713,2,194.47,-88.94,0.01306,3,79.72,-50.02,0.03981,3,1,248.22,334.41,0.94823,2,175.11,-247.51,0.02724,3,238.29,-69.38,0.02453,3,1,299.1,29.5,0.94921,2,-129.8,-298.39,0.03981,3,289.17,-374.29,0.01098,2,1,310.09,-48.18,0.95,2,-207.48,-309.38,0.05,2,1,314.67,-92.67,0.95,2,-251.97,-313.95,0.05,1,1,293.15,-155.74,1,1,1,289.18,-201.78,1,2,1,250,-301.95,0.44961,0,282.87,551.26,0.55039,2,1,252.33,-352.41,0.07046,0,285.2,500.8,0.92954,1,0,285.62,455.04,1,1,0,279.37,366.68,1,1,0,277.81,298.32,1,1,0,273.96,288.23,1,1,0,274.15,239.56,1,1,0,272.19,232.96,1,1,0,261.46,127.96,1,1,0,263.46,72.81,1,1,0,266.47,58.3,1,1,0,293.15,31.63,1,1,0,308.1,22.6,1,1,0,342.14,8.14,1,1,0,350.68,-1.52,1,1,0,316.27,-41.71,1,1,0,267.44,-46.42,1,1,0,212.3,-43.02,1,1,0,177.57,-37.97,1,1,0,146.9,-32.1,1,1,0,112.15,-14.86,1,1,0,-49.69,-42.79,1,1,0,-173.67,-41.45,1,1,0,-191.86,-41.52,1,1,0,-232.89,-29.66,1,1,0,-237.78,-23.4,1,1,0,-230.34,-0.69,1,1,0,-196.34,18.84,1,1,0,-192.38,22.2,1,1,0,-167.24,46.23,1,1,0,-164.88,51.24,1,1,0,-175.04,59.86,1,1,0,-162.99,63.31,1,1,0,-163.01,77.2,1,1,0,-158.15,83.64,1,1,0,-157.52,95.94,1,1,0,-141.61,266.25,1,1,0,-130.06,383.7,1,1,0,-124.09,430.51,1,2,1,-150.59,-397.93,0.04128,0,-117.72,455.28,0.95872,3,1,-153.65,-376.09,0.28647,3,-163.58,-779.88,0,0,-120.78,477.12,0.71353,3,1,-150.31,-335.11,0.66657,3,-160.24,-738.91,0,0,-117.44,518.1,0.33343,2,1,-149.75,-263.49,1,3,-159.68,-667.28,0,3,1,-153,-254.51,0.98637,2,-413.81,153.71,0.01363,3,-162.92,-658.3,0,3,1,-161.3,-255.24,0.98073,2,-414.54,162.01,0.01927,3,-171.23,-659.03,0,3,1,-164.97,-198.74,0.94551,2,-358.04,165.68,0.05449,3,-174.9,-602.54,0,2,1,-208.09,-32.27,0.95,2,-191.57,208.81,0.05,2,1,-320.1,59.76,0.92214,2,-99.54,320.81,0.07786,2,1,-292.3,335.04,0.91733,2,175.74,293.01,0.08267,2,1,-201.04,359.5,0.91396,2,200.2,201.75,0.08604,2,1,-138.41,363.03,0.9086,2,203.73,139.12,0.0914,2,1,-101.05,401.78,0.96642,3,-110.98,-2.01,0.03358,2,1,-96.47,459.7,0.80688,3,-106.4,55.91,0.19312,2,1,-46.64,576.72,0.73,3,-56.57,172.93,0.27,2,1,-10.25,336.08,0.74718,3,-20.17,-67.71,0.25282,2,1,11.33,332.74,0.74498,3,1.4,-71.06,0.25502,2,1,34.39,334.97,0.75269,3,24.47,-68.83,0.24731,2,1,44.07,337.57,0.76016,3,34.14,-66.22,0.23984,2,1,61.55,357.66,0.73747,3,51.62,-46.13,0.26253,2,1,-82.73,180.73,0.84548,2,21.43,83.44,0.15452,2,1,117.75,173.2,0.82779,2,13.9,-117.04,0.17221,2,1,23.58,106.39,0.85974,2,-52.91,-22.87,0.14026,2,1,-6.51,457.85,0.57756,3,-16.44,54.06,0.42244,2,1,36.39,454.07,0.57342,3,26.47,50.27,0.42658,2,1,10.09,405.21,0.46059,3,0.16,1.42,0.53941,2,1,21.91,358.67,0.64636,3,11.99,-45.13,0.35364,2,1,3.48,502.58,0.51907,3,-6.45,98.78,0.48093,2,1,-31.25,444.89,0.6077,3,-41.18,41.1,0.3923,3,1,-23.1,449.27,0.36347,3,-33.03,45.48,0.28855,5,3.36,3.87,0.34798,3,1,-6.79,450.3,0.35211,3,-16.72,46.5,0.28553,5,3,20.2,0.36235,3,1,-2.3,446.56,0.44438,3,-12.23,42.77,0.34671,5,6.92,24.54,0.2089,2,1,-1.12,440.96,0.54543,3,-11.05,37.16,0.45457,2,1,-8.99,439.97,0.58554,3,-18.92,36.18,0.41446,2,1,-21.66,439.97,0.61032,3,-31.59,36.18,0.38968,3,1,40.91,443.99,0.25532,3,30.98,40.19,0.34997,4,10.44,1.47,0.3947,3,1,35.69,436.46,0.42947,3,25.76,32.67,0.46895,4,18.09,-3.56,0.10157,3,1,40.44,435.93,0.46975,3,30.51,32.14,0.49486,4,18.5,1.2,0.03539,2,1,49.56,432.12,0.5023,3,39.63,28.32,0.4977,2,1,57.42,433.07,0.50555,3,47.49,29.28,0.49445,3,1,64.08,437.47,0.48645,3,54.15,33.68,0.46798,4,16.35,24.8,0.04556,3,1,67.7,440.37,0.45149,3,57.78,36.57,0.41221,4,13.37,28.35,0.1363,3,1,60.59,443.6,0.33416,3,50.67,39.8,0.35808,4,10.32,21.16,0.30776,3,1,50.39,443.87,0.24658,3,40.47,40.08,0.33574,4,10.31,10.96,0.41769],"hull":77,"edges":[0,152,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,146,148,132,134,136,134,154,156,156,158,158,160,160,162,162,30,180,182,182,184,184,186,186,188,188,190,190,192,192,180,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,194,138,140,136,138,32,34,144,146,34,36,36,38,150,152,148,150,140,142,142,144,86,88,88,90],"width":813,"height":1683},"block 3/s-b3-to-torch":{"type":"mesh","uvs":[0.59355,0.06032,0.65615,0.06036,0.68221,0.06241,0.69541,0.06615,0.70314,0.07666,0.70242,0.07396,0.72158,0.08586,0.72786,0.09431,0.73303,0.10769,0.73348,0.12215,0.73546,0.12497,0.72855,0.14561,0.72804,0.1499,0.70938,0.1705,0.70123,0.17185,0.67191,0.19426,0.68823,0.19828,0.81549,0.21112,1,0.18757,1,0.37722,0.89722,0.46488,0.87075,0.50236,0.86587,0.52971,0.81768,0.58923,0.82054,0.61921,0.82105,0.6464,0.81337,0.69891,0.81145,0.73953,0.80672,0.74552,0.80695,0.77443,0.80454,0.77836,0.79134,0.84075,0.79381,0.87352,0.7975,0.88214,0.83032,0.89798,0.8487,0.90335,0.89057,0.91194,0.90108,0.91768,0.85875,0.94156,0.7987,0.94436,0.73088,0.94234,0.68815,0.93934,0.65043,0.93585,0.60768,0.92561,0.40863,0.9422,0.25612,0.94141,0.23375,0.94145,0.18328,0.9344,0.17727,0.93068,0.18642,0.91719,0.22824,0.90558,0.23312,0.90359,0.26404,0.88931,0.26694,0.88633,0.25444,0.88121,0.26926,0.87916,0.26923,0.87091,0.27522,0.86708,0.27599,0.85977,0.29556,0.75858,0.30976,0.68879,0.31712,0.66098,0.32494,0.64626,0.32118,0.63328,0.32528,0.60894,0.32597,0.56638,0.32199,0.56104,0.31178,0.56148,0.30726,0.52791,0.25422,0.42899,0.01222,0.17837,0.03515,0.01481,0.22065,0.06831,0.3755,0.19341,0.42145,0.17039,0.42708,0.13597,0.48837,0.06644,0.55798,0.20894,0.58452,0.21092,0.61289,0.2096,0.62479,0.20805,0.64468,0.1969,0.46633,0.2943,0.71291,0.29877,0.59709,0.33847,0.56249,0.13586,0.58313,0.16853,0.58685,0.19433,0.5748,0.10927,0.53208,0.14354,0.53943,0.14092,0.55866,0.14044,0.56707,0.14236,0.56906,0.14584,0.55946,0.14647,0.54388,0.14647,0.6182,0.14348,0.63554,0.14326,0.65295,0.14611,0.6403,0.14921,0.61701,0.14861,0.60785,0.14746,0.61619,0.139],"triangles":[91,90,85,39,35,38,39,34,35,39,40,34,34,40,33,45,52,44,52,53,44,44,58,43,38,36,37,38,35,36,50,45,46,46,47,49,46,49,50,50,51,45,45,51,52,40,41,33,33,41,32,32,41,42,47,48,49,44,53,55,44,55,57,42,43,32,31,32,43,53,54,55,55,56,57,58,44,57,31,43,59,43,58,59,31,59,30,29,30,28,30,59,28,59,60,28,27,28,26,26,28,60,26,60,61,26,61,62,26,62,25,62,24,25,62,64,24,62,63,64,64,23,24,64,65,23,68,22,23,23,65,66,67,68,66,23,66,68,22,68,21,21,68,84,21,84,20,83,78,79,79,80,83,84,69,82,84,68,69,20,84,83,20,83,19,69,73,82,69,70,73,83,17,19,17,18,19,80,16,83,80,81,16,81,15,16,84,82,83,78,83,82,83,16,17,82,77,78,82,73,77,77,74,95,95,74,89,73,74,77,79,78,87,78,77,87,79,87,80,77,86,87,86,95,94,94,93,86,86,77,95,80,87,81,99,15,81,99,81,86,99,86,100,100,86,101,81,87,86,15,99,14,14,99,98,73,70,72,70,71,72,13,14,12,12,14,98,74,75,89,86,93,101,12,98,11,99,100,97,100,96,97,99,97,98,100,101,96,96,101,102,95,91,94,94,92,93,94,91,92,89,90,95,95,90,91,10,11,98,102,101,92,101,93,92,9,10,98,89,75,90,96,102,97,8,9,98,98,97,8,8,102,7,6,7,4,4,7,102,97,102,8,91,85,92,92,85,102,88,85,90,4,88,3,2,3,1,1,3,88,85,88,102,102,88,4,1,88,0,76,88,90,76,90,75,88,76,0,6,4,5],"vertices":[2,1,67.79,588.21,0.73,3,57.86,184.42,0.27,2,1,118.68,588.14,0.73,3,108.75,184.35,0.27,2,1,139.86,584.69,0.73,3,129.93,180.9,0.27,2,1,150.6,578.39,0.73,3,140.67,174.59,0.27,2,1,156.88,560.71,0.73,3,146.95,156.92,0.27,2,1,155.95,564.96,0.73,3,146.02,161.17,0.27,2,1,171.88,545.31,0.73,3,161.95,141.52,0.27,2,1,176.98,531,0.73,3,167.05,127.21,0.27,2,1,181.18,508.48,0.73,3,171.25,104.69,0.27,2,1,181.62,484.28,0.82,3,171.69,80.49,0.18,2,1,184.55,481.98,0.82,3,174.62,78.19,0.18,2,1,177.62,444.81,0.73,3,167.7,41.02,0.27,2,1,177.26,437.68,0.73,3,167.33,33.89,0.27,2,1,162.08,403.01,0.74262,3,152.16,-0.79,0.25738,2,1,155.28,400.39,0.71775,3,145.35,-3.4,0.28225,2,1,131.46,362.72,0.84296,3,121.53,-41.08,0.15704,3,1,144.76,356.02,0.94713,2,196.72,-144.04,0.01306,3,134.83,-47.77,0.03981,3,1,248.22,334.41,0.94823,2,175.11,-247.51,0.02724,3,238.29,-69.38,0.02453,3,1,398.23,374.04,0.94921,2,214.74,-397.52,0.03981,3,388.3,-29.75,0.01098,2,1,398.23,54.86,0.95,2,-104.44,-397.52,0.05,2,1,314.67,-92.67,0.95,2,-251.97,-313.95,0.05,1,1,293.15,-155.74,1,1,1,289.18,-201.78,1,2,1,250,-301.95,0.44961,0,282.87,551.26,0.55039,2,1,252.33,-352.41,0.07046,0,285.2,500.8,0.92954,1,0,285.62,455.04,1,1,0,279.37,366.68,1,1,0,277.81,298.32,1,1,0,273.96,288.23,1,1,0,274.15,239.56,1,1,0,272.19,232.96,1,1,0,261.46,127.96,1,1,0,263.46,72.81,1,1,0,266.47,58.3,1,1,0,293.15,31.63,1,1,0,308.1,22.6,1,1,0,342.14,8.14,1,1,0,350.68,-1.52,1,1,0,316.27,-41.71,1,1,0,267.44,-46.42,1,1,0,212.3,-43.02,1,1,0,177.57,-37.97,1,1,0,146.9,-32.1,1,1,0,112.15,-14.86,1,1,0,-49.69,-42.79,1,1,0,-173.67,-41.45,1,1,0,-191.86,-41.52,1,1,0,-232.89,-29.66,1,1,0,-237.78,-23.4,1,1,0,-230.34,-0.69,1,1,0,-196.34,18.84,1,1,0,-192.38,22.2,1,1,0,-167.24,46.23,1,1,0,-164.88,51.24,1,1,0,-175.04,59.86,1,1,0,-162.99,63.31,1,1,0,-163.01,77.2,1,1,0,-158.15,83.64,1,1,0,-157.52,95.94,1,1,0,-141.61,266.25,1,1,0,-130.06,383.7,1,1,0,-124.09,430.51,1,2,1,-150.59,-397.93,0.04128,0,-117.72,455.28,0.95872,3,1,-153.65,-376.09,0.28647,3,-163.58,-779.88,0,0,-120.78,477.12,0.71353,3,1,-150.31,-335.11,0.66657,3,-160.24,-738.91,0,0,-117.44,518.1,0.33343,2,1,-149.75,-263.49,1,3,-159.68,-667.28,0,3,1,-153,-254.51,0.98637,2,-413.81,153.71,0.01363,3,-162.92,-658.3,0,3,1,-161.3,-255.24,0.98073,2,-414.54,162.01,0.01927,3,-171.23,-659.03,0,3,1,-164.97,-198.74,0.94551,2,-358.04,165.68,0.05449,3,-174.9,-602.54,0,2,1,-208.09,-32.27,0.95,2,-191.57,208.81,0.05,2,1,-404.83,389.52,0.92214,2,230.22,405.54,0.07786,2,1,-386.19,664.8,0.91733,2,505.5,386.9,0.08267,2,1,-235.39,574.76,0.91396,2,415.46,236.1,0.08604,2,1,-109.49,364.21,0.9086,2,204.91,110.2,0.0914,2,1,-72.13,402.97,0.96642,3,-82.06,-0.83,0.03358,2,1,-67.55,460.88,0.80688,3,-77.48,57.09,0.19312,2,1,-17.73,577.91,0.73,3,-27.65,174.11,0.27,2,1,38.87,338.09,0.74718,3,28.94,-65.71,0.25282,2,1,60.44,334.74,0.74498,3,50.52,-69.05,0.25502,2,1,83.51,336.97,0.75269,3,73.58,-66.82,0.24731,2,1,93.18,339.58,0.76016,3,83.25,-64.22,0.23984,2,1,109.36,358.37,0.73747,3,99.43,-45.42,0.26253,2,1,-35.65,194.42,0.84548,2,35.12,36.36,0.15452,2,1,164.83,186.89,0.82779,2,27.59,-164.12,0.17221,2,1,70.66,120.08,0.85974,2,-39.22,-69.95,0.14026,3,1,42.55,461.1,0.47129,3,32.62,57.31,0.34472,5,-5.78,69.94,0.184,2,1,59.31,406.09,0.46059,3,49.38,2.3,0.53941,2,1,62.31,362.62,0.64636,3,52.39,-41.18,0.35364,2,1,52.54,505.83,0.51907,3,42.61,102.03,0.48093,3,1,17.81,448.14,0.50074,3,7.88,44.35,0.32325,5,6.16,44.69,0.176,3,1,23.78,453.11,0.3055,3,13.85,49.32,0.24253,5,1.43,50.87,0.45197,3,1,39.47,453.35,0.2991,3,29.54,49.55,0.24255,5,1.84,66.55,0.45835,3,1,46.26,450.51,0.42191,3,36.33,46.72,0.32918,5,4.95,73.22,0.2489,2,1,47.94,444.21,0.54543,3,38.01,40.41,0.45457,2,1,40.07,443.22,0.58554,3,30.14,39.43,0.41446,2,1,27.4,443.22,0.61032,3,17.47,39.43,0.38968,4,1,87.85,448.32,0.36657,3,77.92,44.53,0.19699,4,3.17,49.84,0.37599,5,7.25,114.75,0.06044,4,1,102.01,448.8,0.33846,3,92.08,45.01,0.16436,4,2.29,64.62,0.456,5,7.35,128.92,0.04119,4,1,116.17,444,0.48685,3,106.24,40.21,0.21784,4,6.93,79.55,0.256,5,12.72,142.87,0.03931,3,1,105.85,438.72,0.63749,3,95.92,34.93,0.29968,5,17.57,132.34,0.06283,3,1,86.89,439.68,0.58598,3,76.96,35.89,0.34082,5,15.84,113.44,0.07321,3,1,79.45,441.6,0.58102,3,69.52,37.81,0.35082,5,13.62,106.08,0.06816,4,1,86.24,455.89,0.46451,3,76.31,52.09,0.2604,4,-4.69,47.96,0.216,5,-0.38,113.45,0.05909],"hull":77,"edges":[0,152,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,146,148,132,134,136,134,154,156,156,158,158,160,160,162,162,30,178,180,180,182,182,184,184,186,186,188,188,190,190,178,138,140,136,138,32,34,144,146,34,36,36,38,150,152,148,150,140,142,142,144,86,88,88,90,192,194,194,196,196,198,198,200,200,202,202,192],"width":813,"height":1683},"block 3/s-b3-with-torch":{"type":"mesh","uvs":[0.52577,0.06165,0.58837,0.0617,0.61442,0.06375,0.62762,0.06749,0.63536,0.078,0.63422,0.07547,0.6538,0.08714,0.66008,0.09565,0.66525,0.10903,0.66577,0.12342,0.66921,0.12493,0.66085,0.14688,0.66035,0.15116,0.64169,0.17176,0.6334,0.17323,0.60409,0.19564,0.62044,0.19962,0.81549,0.21112,0.87807,0.39229,0.89159,0.43845,0.89722,0.46488,0.87075,0.50236,0.86587,0.52971,0.81768,0.58923,0.82054,0.61921,0.82105,0.6464,0.81337,0.69891,0.81145,0.73953,0.80672,0.74552,0.80695,0.77443,0.80454,0.77836,0.79134,0.84075,0.79381,0.87352,0.7975,0.88214,0.83032,0.89798,0.8487,0.90335,0.89057,0.91194,0.90108,0.91768,0.85875,0.94156,0.7987,0.94436,0.73088,0.94234,0.68815,0.93934,0.65043,0.93585,0.60768,0.92561,0.40863,0.9422,0.25612,0.94141,0.23375,0.94145,0.18328,0.9344,0.17727,0.93068,0.18642,0.91719,0.22824,0.90558,0.23312,0.90359,0.26404,0.88931,0.26694,0.88633,0.25444,0.88121,0.26926,0.87916,0.26923,0.87091,0.27522,0.86708,0.27599,0.85977,0.29556,0.75858,0.30976,0.68879,0.31712,0.66098,0.32494,0.64626,0.32118,0.63328,0.32528,0.60894,0.32597,0.56638,0.32199,0.56104,0.31178,0.56148,0.30726,0.52791,0.25422,0.42899,0,0.39378,0.15064,0.21075,0.2629,0.19621,0.33993,0.19412,0.38588,0.17109,0.39151,0.13668,0.4062,0.06745,0.49757,0.21013,0.52411,0.21212,0.55248,0.21079,0.56438,0.20924,0.58588,0.19731,0.38463,0.27214,0.65087,0.28872,0.5555,0.35091,0.49165,0.14103,0.55555,0.13673,0.52259,0.16905,0.53713,0.19671,0.51446,0.1112,0.46122,0.14873,0.47124,0.14647,0.4913,0.14586,0.49686,0.14797,0.49828,0.15106,0.4886,0.15165,0.47302,0.15165,0.54689,0.14532,0.5401,0.14692,0.54654,0.1492,0.55714,0.14947,0.56679,0.14897,0.575,0.14634,0.57946,0.14461,0.57276,0.14242,0.55946,0.14273,0.51478,0.29114,0.31368,0.3277,0.03483,0.37856],"triangles":[39,35,38,39,34,35,39,40,34,34,40,33,45,52,44,52,53,44,44,58,43,38,36,37,38,35,36,50,45,46,46,47,49,46,49,50,50,51,45,45,51,52,40,41,33,33,41,32,32,41,42,47,48,49,44,53,55,44,55,57,42,43,32,31,32,43,53,54,55,55,56,57,58,44,57,31,43,59,43,58,59,31,59,30,29,30,28,30,59,28,59,60,28,27,28,26,26,28,60,26,60,61,26,61,62,26,62,25,62,24,25,62,64,24,62,63,64,64,23,24,101,87,100,87,99,100,87,98,99,87,94,98,99,97,100,100,105,101,100,97,105,99,98,97,101,105,104,97,86,105,64,65,23,68,22,23,23,65,66,67,68,66,23,66,68,22,68,21,68,84,21,84,69,107,84,68,69,21,19,20,19,84,18,19,21,84,70,108,69,69,108,107,108,70,71,84,83,18,83,17,18,108,71,107,107,106,84,84,106,83,79,83,106,83,79,80,78,79,106,107,82,106,82,77,106,77,74,96,77,96,87,107,71,82,82,72,73,72,82,71,80,16,83,80,81,16,81,15,16,106,77,78,83,16,17,74,77,73,74,90,96,77,82,73,79,78,88,78,77,88,79,88,80,77,87,88,87,95,94,95,87,96,80,88,81,14,15,81,101,81,88,101,88,87,14,81,101,14,101,102,14,102,103,13,14,12,12,14,103,74,75,90,90,91,96,96,91,95,95,93,94,95,92,93,95,91,92,12,103,11,94,93,98,101,104,102,90,75,91,98,93,85,86,97,98,11,9,10,11,103,9,92,91,85,102,104,103,85,93,92,89,85,91,86,98,85,103,104,9,105,86,104,104,8,9,8,86,7,6,7,4,4,7,86,104,86,8,85,89,86,89,91,75,4,89,3,2,3,1,1,3,89,86,89,4,1,89,0,75,76,89,89,76,0,6,4,5],"vertices":[2,1,12.68,585.97,0.73,3,2.75,182.17,0.27,2,1,63.57,585.89,0.73,3,53.65,182.1,0.27,2,1,84.76,582.44,0.73,3,74.83,178.65,0.27,2,1,95.49,576.14,0.73,3,85.56,172.34,0.27,2,1,101.77,558.46,0.73,3,91.85,154.67,0.27,2,1,100.84,562.71,0.73,3,90.92,158.92,0.27,2,1,116.77,543.07,0.73,3,106.84,139.27,0.27,2,1,121.87,528.76,0.73,3,111.95,124.96,0.27,2,1,126.07,506.23,0.73,3,116.15,102.44,0.27,2,1,126.51,482.03,0.82,3,116.59,78.24,0.18,2,1,129.44,479.74,0.82,3,119.51,75.94,0.18,2,1,122.52,442.56,0.73,3,112.59,38.77,0.27,2,1,122.15,435.44,0.73,3,112.22,31.64,0.27,2,1,106.98,400.76,0.74262,3,97.05,-3.04,0.25738,2,1,100.17,398.14,0.71775,3,90.25,-5.65,0.28225,2,1,76.35,360.47,0.84296,3,66.43,-43.32,0.15704,3,1,89.65,353.77,0.94713,2,194.47,-88.94,0.01306,3,79.72,-50.02,0.03981,3,1,248.22,334.41,0.94823,2,175.11,-247.51,0.02724,3,238.29,-69.38,0.02453,3,1,299.1,29.5,0.94921,2,-129.8,-298.39,0.03981,3,289.17,-374.29,0.01098,2,1,310.09,-48.18,0.95,2,-207.48,-309.38,0.05,2,1,314.67,-92.67,0.95,2,-251.97,-313.95,0.05,1,1,293.15,-155.74,1,1,1,289.18,-201.78,1,2,1,250,-301.95,0.44961,0,282.87,551.26,0.55039,2,1,252.33,-352.41,0.07046,0,285.2,500.8,0.92954,1,0,285.62,455.04,1,1,0,279.37,366.68,1,1,0,277.81,298.32,1,1,0,273.96,288.23,1,1,0,274.15,239.56,1,1,0,272.19,232.96,1,1,0,261.46,127.96,1,1,0,263.46,72.81,1,1,0,266.47,58.3,1,1,0,293.15,31.63,1,1,0,308.1,22.6,1,1,0,342.14,8.14,1,1,0,350.68,-1.52,1,1,0,316.27,-41.71,1,1,0,267.44,-46.42,1,1,0,212.3,-43.02,1,1,0,177.57,-37.97,1,1,0,146.9,-32.1,1,1,0,112.15,-14.86,1,1,0,-49.69,-42.79,1,1,0,-173.67,-41.45,1,1,0,-191.86,-41.52,1,1,0,-232.89,-29.66,1,1,0,-237.78,-23.4,1,1,0,-230.34,-0.69,1,1,0,-196.34,18.84,1,1,0,-192.38,22.2,1,1,0,-167.24,46.23,1,1,0,-164.88,51.24,1,1,0,-175.04,59.86,1,1,0,-162.99,63.31,1,1,0,-163.01,77.2,1,1,0,-158.15,83.64,1,1,0,-157.52,95.94,1,1,0,-141.61,266.25,1,1,0,-130.06,383.7,1,1,0,-124.09,430.51,1,2,1,-150.59,-397.93,0.04128,0,-117.72,455.28,0.95872,3,1,-153.65,-376.09,0.28647,3,-163.58,-779.88,0,0,-120.78,477.12,0.71353,3,1,-150.31,-335.11,0.66657,3,-160.24,-738.91,0,0,-117.44,518.1,0.33343,2,1,-149.75,-263.49,1,3,-159.68,-667.28,0,3,1,-153,-254.51,0.98637,2,-413.81,153.71,0.01363,3,-162.92,-658.3,0,3,1,-161.3,-255.24,0.98073,2,-414.54,162.01,0.01927,3,-171.23,-659.03,0,3,1,-164.97,-198.74,0.94551,2,-358.04,165.68,0.05449,3,-174.9,-602.54,0,2,1,-208.09,-32.27,0.95,2,-191.57,208.81,0.05,2,1,-414.77,27,0.92214,2,-132.3,415.48,0.07786,2,1,-292.3,335.04,0.91733,2,175.74,293.01,0.08267,2,1,-201.04,359.5,0.91396,2,200.2,201.75,0.08604,2,1,-138.41,363.03,0.9086,2,203.73,139.12,0.0914,2,1,-101.05,401.78,0.96642,3,-110.98,-2.01,0.03358,2,1,-96.47,459.7,0.80688,3,-106.4,55.91,0.19312,2,1,-84.53,576.21,0.73,3,-94.46,172.41,0.27,2,1,-10.25,336.08,0.74718,3,-20.17,-67.71,0.25282,2,1,11.33,332.74,0.74498,3,1.4,-71.06,0.25502,2,1,34.39,334.97,0.75269,3,24.47,-68.83,0.24731,2,1,44.07,337.57,0.76016,3,34.14,-66.22,0.23984,2,1,61.55,357.66,0.73747,3,51.62,-46.13,0.26253,2,1,-102.06,231.71,0.84548,2,72.41,102.78,0.15452,2,1,114.39,203.81,0.82779,2,44.51,-113.68,0.17221,2,1,36.85,99.15,0.85974,2,-60.15,-36.14,0.14026,2,1,-15.06,452.38,0.57756,3,-24.99,48.59,0.42244,2,1,36.89,459.61,0.57342,3,26.96,55.82,0.42658,2,1,10.09,405.21,0.46059,3,0.16,1.42,0.53941,2,1,21.91,358.67,0.64636,3,11.99,-45.13,0.35364,2,1,3.48,502.58,0.51907,3,-6.45,98.78,0.48093,2,1,-39.8,439.42,0.6077,3,-49.73,35.63,0.3923,3,1,-31.65,443.8,0.36347,3,-41.58,40,0.28855,5,8.48,-4.9,0.34798,3,1,-15.34,444.83,0.35211,3,-25.27,41.03,0.28553,5,8.12,11.43,0.36235,3,1,-10.85,441.09,0.44438,3,-20.78,37.29,0.34671,5,12.04,15.77,0.2089,2,1,-9.67,435.48,0.54543,3,-19.6,31.69,0.45457,2,1,-17.54,434.5,0.58554,3,-27.47,30.71,0.41446,2,1,-30.21,434.5,0.61032,3,-40.14,30.71,0.38968,3,1,29.62,446.95,0.25532,3,19.7,43.15,0.34997,4,7.64,-10.4,0.3947,3,1,24.33,442.46,0.42947,3,14.4,38.67,0.46895,4,12.13,-15.58,0.10157,3,1,29.46,438.89,0.46975,3,19.53,35.1,0.49486,4,15.7,-10.35,0.03539,2,1,38.2,438.12,0.5023,3,28.27,34.33,0.4977,2,1,46.06,439.07,0.50555,3,36.13,35.28,0.49445,3,1,52.72,443.47,0.48645,3,42.79,39.68,0.46798,4,10.39,12.77,0.04556,3,1,56.34,446.37,0.45149,3,46.42,42.57,0.41221,4,7.4,16.32,0.1363,3,1,50.91,451.42,0.33416,3,40.98,47.63,0.35808,4,2.4,10.83,0.30776,3,1,40.1,449.34,0.24658,3,30.17,45.54,0.33574,4,4.87,0.05,0.41769,2,1,3.75,199.74,0.84237,2,40.44,-3.03,0.15763,2,1,-159.75,138.21,0.88211,2,-21.09,160.46,0.11789,2,1,-386.45,52.61,0.91845,2,-106.69,387.16,0.08155],"hull":77,"edges":[0,152,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,146,148,132,134,136,134,154,156,156,158,158,160,160,162,162,30,180,182,182,184,184,186,186,188,188,190,190,192,192,180,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,194,138,140,136,138,32,34,144,146,34,36,36,38,150,152,148,150,140,142,142,144,86,88,88,90,214,212,214,216],"width":813,"height":1683},"drake compas":{"type":"mesh","path":"JungleScene/drake compas","uvs":[0.51013,0.03638,0.54984,0.04059,0.5741,0.04549,0.56791,0.05525,0.58966,0.0616,0.59855,0.08319,0.5856,0.08658,0.56789,0.09102,0.56879,0.10681,0.56097,0.11784,0.56546,0.1231,0.56712,0.13205,0.56176,0.1509,0.53724,0.17023,0.53819,0.1823,0.53867,0.18327,0.61532,0.19183,0.67395,0.20442,0.69468,0.2138,0.70393,0.23784,0.72689,0.25887,0.72777,0.28435,0.75285,0.31443,0.761,0.33083,0.77662,0.33424,0.81576,0.30384,0.8376,0.30218,0.84429,0.29524,0.87168,0.28871,0.87679,0.2991,0.89299,0.3094,0.90817,0.32885,0.88535,0.34969,0.84071,0.36163,0.80824,0.36369,0.73837,0.37644,0.67064,0.37877,0.67119,0.37333,0.64987,0.34833,0.64641,0.33614,0.63985,0.3345,0.62129,0.31661,0.60749,0.31818,0.59815,0.33781,0.59714,0.35725,0.59987,0.36065,0.61056,0.39507,0.60948,0.41137,0.60552,0.41294,0.6186,0.44207,0.61685,0.4519,0.6072,0.47098,0.61053,0.50002,0.61969,0.55038,0.61682,0.54999,0.6225,0.58927,0.62172,0.61154,0.61862,0.62068,0.6227,0.64289,0.6139,0.66294,0.62075,0.69325,0.62174,0.72545,0.62936,0.74877,0.63098,0.78836,0.62843,0.79527,0.64706,0.81147,0.64846,0.82057,0.66577,0.8288,0.66407,0.8348,0.70168,0.8463,0.71469,0.84939,0.75861,0.84146,0.78086,0.84704,0.78646,0.85008,0.80319,0.86916,0.79633,0.87747,0.75682,0.8853,0.67424,0.88937,0.61848,0.88029,0.62112,0.88232,0.54572,0.88118,0.53716,0.88036,0.52453,0.84935,0.52845,0.83525,0.54235,0.83258,0.51289,0.81716,0.50712,0.79878,0.5041,0.76469,0.49826,0.7096,0.49756,0.66634,0.51229,0.64615,0.5119,0.64502,0.46903,0.59156,0.44307,0.5523,0.43358,0.55202,0.39437,0.58457,0.38059,0.60042,0.35711,0.6191,0.35282,0.62754,0.35278,0.63985,0.34842,0.6529,0.33483,0.68321,0.30178,0.73483,0.30208,0.75246,0.29044,0.77806,0.27482,0.8059,0.2786,0.8211,0.25872,0.85404,0.26095,0.86297,0.28913,0.86888,0.28693,0.88574,0.28655,0.88941,0.33574,0.89883,0.34956,0.90316,0.36575,0.94927,0.30088,0.95862,0.23359,0.95774,0.20489,0.95349,0.1893,0.94551,0.15741,0.92468,0.1676,0.89976,0.16456,0.88343,0.17626,0.87718,0.17596,0.85798,0.17157,0.85366,0.15011,0.8233,0.14639,0.79926,0.1524,0.77401,0.15624,0.76724,0.15535,0.748,0.1831,0.71471,0.1887,0.66558,0.20022,0.63495,0.21764,0.60845,0.22253,0.54399,0.2523,0.4867,0.2723,0.43573,0.15633,0.38749,0.13719,0.37735,0.13607,0.35343,0.17666,0.3028,0.1803,0.29755,0.17872,0.27801,0.2026,0.25554,0.21104,0.23515,0.22858,0.22177,0.34433,0.1912,0.40206,0.18289,0.41002,0.17775,0.40833,0.15767,0.39494,0.14709,0.37145,0.14036,0.35669,0.13143,0.35076,0.12551,0.35093,0.11143,0.37095,0.10374,0.363,0.08542,0.38158,0.05222,0.39519,0.05353,0.41348,0.04433,0.44258,0.03581,0.301,0.29431,0.30846,0.31345,0.32762,0.33234,0.33613,0.34968,0.33879,0.35485,0.33347,0.36805,0.32017,0.38357,0.31058,0.39703,0.31484,0.40168,0.3042,0.40789,0.28823,0.39056,0.27013,0.37167,0.25629,0.36598,0.26162,0.35459,0.26162,0.3489,0.27067,0.34605,0.28876,0.32898,0.29621,0.31992,0.424,0.16657,0.45314,0.1744,0.47384,0.18036,0.50259,0.18111,0.51601,0.18111,0.4501,0.11658,0.46488,0.11444,0.47807,0.11434,0.48626,0.1159,0.48786,0.11881,0.48086,0.12017,0.46588,0.12085,0.4525,0.1192,0.5286,0.1154,0.52724,0.1189,0.53003,0.11999,0.53747,0.12032,0.54604,0.12041,0.55137,0.12014,0.55398,0.11881,0.55472,0.1167,0.54424,0.1148,0.53214,0.11477,0.52815,0.11034,0.53896,0.10771,0.55059,0.10508,0.55649,0.1062,0.49622,0.11344,0.48033,0.11241,0.46379,0.10946,0.44758,0.10922,0.50663,0.23536,0.40245,0.28751,0.59152,0.29051,0.51862,0.14119,0.51453,0.17002,0.45421,0.13771,0.55593,0.13622,0.50175,0.09646],"triangles":[186,208,207,190,185,186,189,186,187,186,207,187,185,208,186,187,207,206,199,200,205,201,203,200,192,202,201,191,184,185,184,208,185,115,113,114,115,112,113,112,115,111,115,116,111,111,116,118,116,117,118,119,120,118,118,120,111,111,122,108,122,111,120,120,121,122,111,108,110,77,70,76,77,69,70,69,77,78,110,108,109,75,76,74,73,70,72,72,70,71,70,73,76,80,78,79,78,80,82,82,80,81,78,82,84,84,82,83,78,68,69,68,84,66,68,78,84,74,76,73,108,123,107,108,122,123,123,124,107,107,124,106,124,125,106,68,66,67,84,65,66,84,64,65,84,85,64,125,105,106,125,126,105,85,86,64,126,127,105,105,127,104,104,127,128,64,86,63,63,86,87,87,62,63,104,128,103,103,129,102,102,129,130,129,103,128,87,61,62,87,88,61,102,130,101,88,60,61,130,131,101,60,89,59,59,89,90,89,60,88,101,131,100,131,132,100,59,90,58,100,132,99,90,91,58,91,57,58,57,91,56,99,132,98,98,132,133,98,133,97,56,91,92,97,133,96,56,92,55,133,134,96,96,134,95,92,54,55,92,93,54,95,134,94,54,93,52,134,135,94,135,136,94,94,136,51,51,136,170,51,170,169,166,51,169,166,169,167,52,93,51,93,94,51,48,166,165,46,48,165,45,165,44,48,51,166,53,54,52,44,165,43,43,165,211,51,48,50,50,48,49,136,137,171,172,171,137,136,171,170,172,137,173,47,48,46,45,46,165,170,168,169,170,171,168,169,168,167,168,171,167,171,172,167,173,137,139,167,172,166,176,166,174,36,37,35,137,138,139,35,24,34,35,23,24,23,35,38,35,37,38,165,166,176,176,177,163,173,174,172,166,172,174,211,210,212,165,176,164,164,176,163,173,139,174,34,24,33,33,24,26,24,25,26,32,33,30,29,26,27,26,30,33,212,43,211,165,164,211,139,175,174,174,175,176,139,140,175,32,30,31,29,30,26,164,163,211,176,175,177,38,39,23,177,175,140,43,212,42,23,39,22,22,39,41,39,40,41,177,178,163,178,162,163,163,162,211,177,140,178,140,141,178,178,161,162,178,141,161,42,212,41,41,21,22,41,212,21,162,161,211,27,28,29,141,142,161,210,181,182,181,210,147,142,143,161,146,211,161,19,212,210,212,20,21,212,19,20,19,17,18,17,19,16,16,19,210,16,210,15,180,181,147,147,148,180,148,179,180,144,145,161,161,143,144,161,145,146,211,146,210,146,147,210,15,183,14,15,210,183,210,182,183,183,13,14,183,182,214,182,181,214,183,214,13,181,180,214,214,180,215,148,149,179,214,215,213,189,213,215,180,179,215,12,213,216,196,216,195,196,197,216,13,213,12,13,214,213,216,213,195,189,215,190,213,189,188,179,149,215,149,150,215,12,216,11,215,150,191,213,194,195,213,188,193,213,193,194,193,188,206,152,155,151,191,150,184,150,151,184,184,155,209,184,151,155,215,191,190,11,216,197,11,197,10,10,198,9,198,10,197,152,153,155,155,153,154,191,185,190,190,186,189,197,196,200,194,201,195,196,195,200,195,201,200,189,187,188,197,200,198,193,192,194,194,192,201,193,206,192,188,187,206,198,199,9,198,200,199,9,199,8,199,205,8,184,209,208,206,202,192,200,204,205,200,203,204,201,202,203,202,206,217,206,207,217,207,208,217,202,217,203,208,209,217,158,217,209,203,217,204,205,7,8,205,204,7,204,217,7,209,155,156,209,156,158,158,159,217,159,160,217,7,217,3,3,217,0,217,160,0,7,3,6,1,3,0,6,4,5,6,3,4,156,157,158,3,1,2],"vertices":[3,0,13.95,1523.78,0.3774,1,-18.92,670.57,0.3626,3,-28.85,266.78,0.26,3,0,45.95,1516.79,0.3774,1,13.08,663.58,0.3626,3,3.15,259.78,0.26,3,0,65.51,1508.68,0.3774,1,32.64,655.47,0.3626,3,22.71,251.68,0.26,3,0,60.52,1492.48,0.3774,1,27.65,639.27,0.3626,3,17.72,235.48,0.26,3,0,78.04,1481.97,0.38347,1,45.17,628.76,0.36843,3,35.24,224.96,0.2481,3,0,85.21,1446.17,0.3774,1,52.34,592.96,0.3626,3,42.41,189.16,0.26,3,0,74.77,1440.55,0.3774,1,41.9,587.34,0.3626,3,31.98,183.54,0.26,3,0,60.5,1433.18,0.3774,1,27.63,579.96,0.3626,3,17.7,176.17,0.26,3,0,61.22,1407,0.3774,1,28.35,553.79,0.3626,3,18.42,149.99,0.26,3,0,54.92,1388.72,0.3774,1,22.05,535.51,0.3626,3,12.12,131.72,0.26,3,0,58.54,1379.99,0.3774,1,25.67,526.78,0.3626,3,15.74,122.98,0.26,3,0,59.88,1365.16,0.3774,1,27.01,511.95,0.3626,3,17.08,108.15,0.26,3,0,55.55,1333.91,0.67183,1,22.68,480.7,0.06817,3,12.76,76.9,0.26,2,0,35.79,1301.85,0.74,3,-7.01,44.84,0.26,2,0,36.56,1281.85,0.74,3,-6.24,24.84,0.26,2,0,36.94,1280.24,0.74,3,-5.85,23.23,0.26,3,0,98.72,1266.05,0.45067,1,65.85,412.83,0.43299,2,253.53,-65.14,0.11634,3,0,145.98,1245.17,0.4437,1,113.11,391.95,0.4263,2,232.65,-112.4,0.13,3,0,162.69,1229.62,0.4437,1,129.82,376.41,0.4263,2,217.11,-129.11,0.13,3,0,170.15,1189.75,0.4437,1,137.28,336.54,0.4263,2,177.24,-136.57,0.13,3,0,188.65,1154.9,0.4437,1,155.78,301.68,0.4263,2,142.38,-155.07,0.13,3,0,189.36,1112.65,0.4437,1,156.49,259.44,0.4263,2,100.14,-155.78,0.13,3,0,209.58,1062.77,0.4437,1,176.71,209.56,0.4263,2,50.26,-175.99,0.13,3,0,216.15,1035.58,0.4437,1,183.28,182.36,0.4263,2,23.06,-182.57,0.13,3,0,228.74,1029.92,0.4437,1,195.87,176.71,0.4263,2,17.41,-195.16,0.13,3,0,260.28,1080.33,0.4437,1,227.41,227.12,0.4263,2,67.82,-226.7,0.13,3,0,277.89,1083.07,0.4437,1,245.02,229.86,0.4263,2,70.56,-244.3,0.13,3,0,283.28,1094.59,0.4437,1,250.41,241.38,0.4263,2,82.08,-249.7,0.13,3,0,305.35,1105.41,0.4437,1,272.48,252.2,0.4263,2,92.9,-271.77,0.13,3,0,309.48,1088.19,0.4437,1,276.61,234.98,0.4263,2,75.68,-275.89,0.13,3,0,322.53,1071.11,0.4437,1,289.66,217.9,0.4263,2,58.6,-288.95,0.13,3,0,334.77,1038.86,0.4437,1,301.9,185.65,0.4263,2,26.35,-301.18,0.13,3,0,316.37,1004.32,0.4437,1,283.5,151.1,0.4263,2,-8.2,-282.79,0.13,3,0,280.4,984.51,0.4437,1,247.53,131.3,0.4263,2,-28,-246.81,0.13,3,0,254.22,981.11,0.4437,1,221.35,127.89,0.4263,2,-31.41,-220.64,0.13,3,0,197.91,959.97,0.4437,1,165.04,106.75,0.4263,2,-52.55,-164.33,0.13,3,0,143.32,956.1,0.4437,1,110.44,102.89,0.4263,2,-56.41,-109.73,0.13,3,0,143.76,965.12,0.4437,1,110.89,111.91,0.4263,2,-47.39,-110.18,0.13,3,0,126.58,1006.56,0.4437,1,93.71,153.35,0.4263,2,-5.95,-92.99,0.13,3,0,123.79,1026.78,0.4437,1,90.92,173.57,0.4263,2,14.27,-90.21,0.13,3,0,118.5,1029.49,0.4437,1,85.63,176.28,0.4263,2,16.98,-84.92,0.13,3,0,103.54,1059.16,0.4437,1,70.67,205.94,0.4263,2,46.64,-69.96,0.13,3,0,92.41,1056.55,0.4437,1,59.54,203.34,0.4263,2,44.04,-58.83,0.13,3,0,84.89,1024.01,0.4437,1,52.02,170.8,0.4263,2,11.5,-51.31,0.13,3,0,84.08,991.77,0.4568,1,51.21,138.56,0.4132,2,-20.74,-50.49,0.13,3,0,86.28,986.14,0.4437,1,53.41,132.93,0.4263,2,-26.37,-52.69,0.13,3,0,94.89,929.06,0.4437,1,62.02,75.85,0.4263,2,-83.45,-61.3,0.13,3,0,94.02,902.04,0.4437,1,61.15,48.83,0.4263,2,-110.47,-60.44,0.13,3,0,90.83,899.44,0.4437,1,57.96,46.23,0.4263,2,-113.07,-57.25,0.13,2,0,101.37,851.15,0.51,1,68.5,-2.06,0.49,2,0,99.96,834.85,0.51,1,67.09,-18.36,0.49,2,0,92.18,803.21,0.51,1,59.31,-50,0.49,2,0,94.87,755.07,0.51,1,62,-98.14,0.49,1,0,102.25,671.56,1,1,0,99.94,672.21,1,1,0,104.51,607.09,1,1,0,103.89,570.16,1,1,0,101.39,555.02,1,1,0,104.68,518.19,1,1,0,97.58,484.94,1,1,0,103.1,434.69,1,1,0,103.9,381.3,1,1,0,110.04,342.63,1,1,0,111.35,277,1,1,0,109.29,265.55,1,1,0,124.31,238.68,1,1,0,125.44,223.6,1,1,0,139.39,209.95,1,1,0,138.02,200,1,1,0,168.33,180.93,1,1,0,178.82,175.8,1,1,0,214.22,188.95,1,1,0,232.15,179.7,1,1,0,236.66,174.67,1,1,0,250.15,143.03,1,1,0,244.62,129.25,1,1,0,212.77,116.27,1,1,0,146.22,109.52,1,1,0,101.28,124.58,1,1,0,103.4,121.22,1,1,0,42.63,123.1,1,1,0,35.73,124.46,1,1,0,25.55,175.87,1,1,0,28.71,199.25,1,1,0,39.91,203.67,1,1,0,16.17,229.24,1,1,0,11.52,259.71,1,1,0,9.08,316.24,1,1,0,4.38,407.58,1,1,0,3.81,479.31,1,1,0,15.68,512.79,1,1,0,15.38,514.65,1,1,0,-19.18,603.29,1,2,0,-40.11,668.39,0.51,1,-72.98,-184.82,0.49,2,0,-47.75,668.84,0.51,1,-80.62,-184.37,0.49,2,0,-79.36,614.88,0.79302,1,-112.23,-238.34,0.20699,1,0,-90.46,588.6,1,1,0,-109.39,557.63,1,1,0,-112.85,543.63,1,1,0,-112.88,523.22,1,1,0,-116.4,501.59,1,1,0,-127.35,451.33,1,1,0,-153.99,365.76,1,1,0,-153.74,336.52,1,1,0,-163.12,294.07,1,1,0,-175.72,247.92,1,1,0,-172.67,222.72,1,1,0,-188.69,168.11,1,1,0,-186.9,153.29,1,1,0,-164.18,143.5,1,1,0,-165.95,115.55,1,1,0,-166.26,109.46,1,1,0,-126.61,93.84,1,1,0,-115.47,86.66,1,1,0,-102.42,10.21,1,1,0,-154.71,-5.29,1,1,0,-208.95,-3.84,1,1,0,-232.07,3.22,1,1,0,-244.64,16.44,1,1,0,-270.35,50.98,1,1,0,-262.14,92.29,1,1,0,-264.58,119.37,1,1,0,-255.16,129.74,1,1,0,-255.39,161.56,1,1,0,-258.93,168.72,1,1,0,-276.23,219.07,1,1,0,-279.23,258.92,1,1,0,-274.39,300.78,1,1,0,-271.29,312.01,1,1,0,-272.01,343.92,1,1,0,-249.64,399.11,1,1,0,-245.12,480.57,1,1,0,-235.84,531.35,1,1,0,-221.8,575.29,1,2,0,-217.86,682.16,0.51,1,-250.73,-171.05,0.49,2,0,-193.87,777.15,0.51,1,-226.74,-76.06,0.49,3,0,-177.74,861.66,0.4437,1,-210.61,8.45,0.4263,2,-150.85,211.33,0.13,3,0,-271.21,941.63,0.66817,1,-304.09,88.42,0.20183,2,-70.88,304.8,0.13,3,0,-286.64,958.45,0.78484,1,-319.51,105.24,0.08516,2,-54.06,320.23,0.13,3,0,-287.55,998.12,0.54393,1,-320.42,144.9,0.32607,2,-14.4,321.13,0.13,3,0,-254.84,1082.06,0.4437,1,-287.71,228.84,0.4263,2,69.54,288.42,0.13,3,0,-251.9,1090.76,0.4437,1,-284.77,237.54,0.4263,2,78.24,285.48,0.13,3,0,-253.18,1123.16,0.45226,1,-286.05,269.95,0.43452,2,110.65,286.76,0.11322,3,0,-233.93,1160.41,0.4437,1,-266.8,307.19,0.4263,2,147.89,267.51,0.13,3,0,-227.12,1194.21,0.47072,1,-259.99,341,0.45226,2,181.7,260.7,0.07701,3,0,-212.98,1216.39,0.48062,1,-245.85,363.18,0.46177,2,203.88,246.56,0.05761,3,0,-119.69,1267.09,0.49096,1,-152.56,413.88,0.47171,2,254.58,153.28,0.03733,3,0,-73.16,1280.87,0.49231,1,-106.03,427.66,0.473,3,-115.96,23.86,0.03469,3,0,-66.74,1289.39,0.44293,1,-99.61,436.18,0.42556,3,-109.54,32.39,0.13151,3,0,-68.11,1322.69,0.3774,1,-100.98,469.47,0.3626,3,-110.91,65.68,0.26,3,0,-78.9,1340.23,0.38078,1,-111.77,487.01,0.36584,3,-121.7,83.22,0.25338,3,0,-97.83,1351.38,0.41027,1,-130.7,498.16,0.39419,3,-140.63,94.37,0.19554,3,0,-109.73,1366.19,0.41667,1,-142.6,512.98,0.40033,3,-152.53,109.19,0.18301,3,0,-114.51,1376,0.41565,1,-147.38,522.79,0.39935,3,-157.31,118.99,0.18499,3,0,-114.37,1399.34,0.39525,1,-147.24,546.13,0.37975,3,-157.17,142.33,0.22501,3,0,-98.23,1412.1,0.3774,1,-131.1,558.89,0.3626,3,-141.03,155.09,0.26,3,0,-104.64,1442.47,0.3774,1,-137.51,589.26,0.3626,3,-147.44,185.46,0.26,3,0,-89.66,1497.51,0.3774,1,-122.54,644.3,0.3626,3,-132.46,240.51,0.26,3,0,-78.7,1495.35,0.3774,1,-111.57,642.14,0.3626,3,-121.5,238.34,0.26,3,0,-63.95,1510.6,0.3774,1,-96.82,657.39,0.3626,3,-106.75,253.6,0.26,3,0,-40.5,1524.73,0.3774,1,-73.37,671.52,0.3626,3,-83.3,267.72,0.26,3,0,-154.61,1096.14,0.4437,1,-187.48,242.93,0.4263,2,83.63,188.19,0.13,3,0,-148.6,1064.39,0.4437,1,-181.48,211.18,0.4263,2,51.88,182.19,0.13,3,0,-133.16,1033.08,0.4437,1,-166.03,179.86,0.4263,2,20.56,166.74,0.13,3,0,-126.3,1004.33,0.4437,1,-159.17,151.12,0.4263,2,-8.18,159.88,0.13,3,0,-124.15,995.75,0.4437,1,-157.02,142.54,0.4263,2,-16.76,157.73,0.13,3,0,-128.44,973.87,0.4437,1,-161.31,120.66,0.4263,2,-38.64,162.02,0.13,3,0,-139.17,948.13,0.4437,1,-172.04,94.92,0.4263,2,-64.38,172.75,0.13,3,0,-146.89,925.83,0.4437,1,-179.76,72.61,0.4263,2,-86.69,180.47,0.13,3,0,-143.46,918.1,0.4437,1,-176.33,64.89,0.4263,2,-94.41,177.04,0.13,3,0,-152.04,907.81,0.4437,1,-184.91,54.59,0.4263,2,-104.71,185.62,0.13,3,0,-164.91,936.55,0.4437,1,-197.78,83.34,0.4263,2,-75.96,198.49,0.13,3,0,-179.49,967.87,0.4437,1,-212.36,114.65,0.4263,2,-44.64,213.08,0.13,3,0,-190.65,977.31,0.4437,1,-223.52,124.09,0.4263,2,-35.21,224.23,0.13,3,0,-186.36,996.18,0.4437,1,-219.23,142.97,0.4263,2,-16.33,219.94,0.13,3,0,-186.36,1005.62,0.4437,1,-219.23,152.41,0.4263,2,-6.89,219.94,0.13,3,0,-179.06,1010.34,0.4437,1,-211.93,157.13,0.4263,2,-2.17,212.65,0.13,3,0,-164.48,1038.65,0.4437,1,-197.35,185.44,0.4263,2,26.14,198.06,0.13,3,0,-158.47,1053.67,0.4437,1,-191.34,200.45,0.4263,2,41.16,192.05,0.13,3,0,-55.48,1307.93,0.3774,1,-88.35,454.71,0.3626,3,-98.28,50.92,0.26,3,0,-31.99,1294.95,0.3774,1,-64.86,441.74,0.3626,3,-74.79,37.94,0.26,3,0,-15.31,1285.06,0.61791,1,-48.18,431.85,0.12209,3,-58.11,28.05,0.26,2,0,7.87,1283.82,0.74,3,-34.93,26.82,0.26,2,0,18.68,1283.82,0.74,3,-24.12,26.82,0.26,4,0,-34.44,1390.81,0.32003,1,-67.31,537.6,0.30748,3,-77.24,133.8,0.22048,5,-88.28,-36.64,0.152,4,0,-22.52,1394.35,0.16304,1,-55.39,541.14,0.15664,3,-65.32,137.35,0.11232,5,-91.34,-24.59,0.568,4,0,-11.9,1394.51,0.16304,1,-44.77,541.3,0.15664,3,-54.7,137.51,0.11232,5,-91.06,-13.97,0.568,4,0,-5.3,1391.94,0.16304,1,-38.17,538.72,0.15664,3,-48.1,134.93,0.11232,5,-88.22,-7.48,0.568,3,0,-4.01,1387.11,0.3774,1,-36.88,533.89,0.3626,3,-46.81,130.1,0.26,3,0,-9.64,1384.85,0.3774,1,-42.51,531.64,0.3626,3,-52.44,127.85,0.26,3,0,-21.72,1383.73,0.3774,1,-54.59,530.51,0.3626,3,-64.52,126.72,0.26,3,0,-32.51,1386.46,0.3774,1,-65.38,533.25,0.3626,3,-75.3,129.46,0.26,4,0,28.83,1392.76,0.22946,1,-4.04,539.54,0.22046,3,-13.96,135.75,0.15808,4,-85.8,-46.5,0.392,4,0,27.73,1386.96,0.36533,1,-5.14,533.75,0.351,3,-15.06,129.95,0.25168,4,-79.98,-47.45,0.03199,3,0,29.98,1385.16,0.3774,1,-2.89,531.95,0.3626,3,-12.81,128.15,0.26,3,0,35.98,1384.61,0.3774,1,3.11,531.4,0.3626,3,-6.81,127.6,0.26,3,0,42.88,1384.46,0.3774,1,10.01,531.25,0.3626,3,0.09,127.45,0.26,3,0,47.18,1384.91,0.3774,1,14.31,531.7,0.3626,3,4.39,127.9,0.26,4,0,49.28,1387.11,0.36532,1,16.41,533.9,0.351,3,6.49,130.1,0.25168,4,-80.68,-25.91,0.032,4,0,49.88,1390.61,0.22946,1,17.01,537.4,0.22046,3,7.09,133.6,0.15808,4,-84.19,-25.4,0.392,4,0,41.43,1393.76,0.22946,1,8.56,540.55,0.22046,3,-1.36,136.75,0.15808,4,-87.13,-33.93,0.392,4,0,31.68,1393.81,0.22946,1,-1.19,540.6,0.22046,3,-11.11,136.8,0.15808,4,-86.93,-43.68,0.392,4,0,28.47,1401.16,0.35023,1,-4.4,547.95,0.33649,3,-14.33,144.15,0.24128,4,-94.19,-47.08,0.072,4,0,37.18,1405.51,0.32305,1,4.31,552.3,0.31038,3,-5.61,148.51,0.22256,4,-98.77,-38.48,0.144,4,0,46.56,1409.87,0.34419,1,13.69,556.66,0.33069,3,3.76,152.86,0.23712,4,-103.37,-29.22,0.088,4,0,51.31,1408.02,0.35928,1,18.44,554.81,0.34519,3,8.51,151.02,0.24752,4,-101.64,-24.42,0.048,4,0,2.73,1396.01,0.34117,1,-30.14,542.8,0.32779,3,-40.07,139,0.23504,5,-91.96,0.71,0.096,4,0,-10.07,1397.73,0.30796,1,-42.94,544.51,0.29588,3,-52.87,140.72,0.21216,5,-94.2,-12.01,0.184,4,0,-23.4,1402.61,0.35023,1,-56.27,549.4,0.33649,3,-66.2,145.6,0.24128,5,-99.62,-25.13,0.072,3,0,-36.47,1403.01,0.3774,1,-69.34,549.79,0.3626,3,-79.27,146,0.26,3,0,11.13,1193.86,0.4437,1,-21.74,340.65,0.4263,2,181.35,22.46,0.13,2,0,-72.84,1107.41,0.87,2,94.89,106.43,0.13,3,0,79.55,1102.43,0.4437,1,46.68,249.22,0.4263,2,89.92,-45.96,0.13,3,0,20.79,1350,0.3774,1,-12.09,496.79,0.3626,3,-22.01,93,0.26,2,0,17.49,1302.21,0.74,3,-25.31,45.2,0.26,3,0,-31.13,1355.77,0.3774,1,-64,502.56,0.3626,3,-73.93,98.77,0.26,3,0,50.86,1358.24,0.3774,1,17.99,505.03,0.3626,3,8.06,101.24,0.26,3,0,7.19,1424.16,0.3774,1,-25.68,570.95,0.3626,3,-35.61,167.16,0.26],"hull":161,"edges":[0,320,0,2,2,4,4,6,6,8,8,10,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,306,306,308,308,310,310,312,312,314,314,316,316,318,318,320,322,324,324,326,326,328,328,330,330,332,332,334,334,336,336,338,338,340,340,342,342,344,344,346,346,348,348,350,350,352,352,354,354,356,356,322,298,358,358,360,360,362,362,364,364,366,366,26,10,12,368,370,370,372,372,374,374,376,376,378,378,380,380,382,382,368,384,386,386,388,388,390,390,392,392,394,394,396,396,398,398,400,400,402,402,384,404,406,406,408,408,410,412,414,414,416,416,418],"width":806,"height":1658},"sally big":{"type":"mesh","path":"JungleScene/sally big","uvs":[0.50221,0.06212,0.54562,0.06255,0.57168,0.0646,0.58488,0.06834,0.59261,0.07885,0.59924,0.08383,0.61105,0.08799,0.61733,0.0965,0.6225,0.10988,0.62304,0.12426,0.62664,0.12562,0.6339,0.13972,0.63346,0.14396,0.61479,0.16456,0.60642,0.16612,0.59144,0.18717,0.59702,0.1982,0.69626,0.21393,0.73253,0.21585,0.75037,0.21984,0.76491,0.22922,0.8262,0.28928,0.85175,0.30607,0.85475,0.31389,0.86503,0.32357,0.87994,0.35296,0.87598,0.36009,0.81628,0.39908,0.79871,0.40975,0.79408,0.41252,0.74883,0.44381,0.74612,0.44493,0.72167,0.46324,0.70783,0.46574,0.71866,0.50192,0.69608,0.50705,0.70984,0.59136,0.7127,0.62134,0.71321,0.64853,0.70553,0.70104,0.70361,0.74165,0.69888,0.74765,0.69911,0.77656,0.6967,0.78049,0.6835,0.84287,0.68597,0.87564,0.68966,0.88426,0.72248,0.90011,0.74086,0.90547,0.78273,0.91407,0.79324,0.91981,0.79985,0.93402,0.7987,0.93854,0.73088,0.94234,0.68815,0.93934,0.65043,0.93585,0.60768,0.92561,0.55863,0.91688,0.54015,0.90924,0.53818,0.88766,0.53281,0.88612,0.55546,0.71645,0.55804,0.71619,0.56345,0.66703,0.56605,0.66547,0.55081,0.63975,0.52105,0.56115,0.50566,0.56759,0.49625,0.58941,0.50246,0.58745,0.48637,0.61385,0.47853,0.62971,0.45671,0.69646,0.455,0.71799,0.43566,0.75935,0.42334,0.79645,0.42385,0.80758,0.41654,0.82277,0.40982,0.85101,0.40884,0.88285,0.39591,0.89062,0.39318,0.90795,0.38906,0.91229,0.37581,0.91821,0.34872,0.92235,0.34555,0.9244,0.33131,0.93209,0.25612,0.94141,0.23375,0.94145,0.18328,0.9344,0.17727,0.93068,0.18642,0.91719,0.22824,0.90558,0.23312,0.90359,0.26404,0.88931,0.26694,0.88633,0.25444,0.88121,0.26926,0.87916,0.26923,0.87091,0.27522,0.86708,0.27599,0.85977,0.29556,0.75858,0.30976,0.68879,0.31712,0.66098,0.32494,0.64626,0.32118,0.63328,0.32528,0.60894,0.32597,0.56638,0.32199,0.56104,0.31178,0.56148,0.29462,0.56221,0.27482,0.55403,0.28986,0.58014,0.28247,0.58427,0.27458,0.58458,0.22035,0.55709,0.20588,0.54439,0.20743,0.53235,0.20723,0.53091,0.20342,0.50574,0.20462,0.49631,0.20634,0.49362,0.20407,0.45893,0.20008,0.41834,0.19855,0.39519,0.20786,0.38489,0.20778,0.34616,0.21011,0.33353,0.19281,0.32777,0.1978,0.32114,0.25469,0.25014,0.27661,0.23079,0.2707,0.2281,0.28537,0.22214,0.30447,0.21887,0.34929,0.20878,0.43012,0.19725,0.44608,0.19148,0.42842,0.16954,0.4197,0.16931,0.4002,0.15018,0.39452,0.13937,0.40085,0.13065,0.40068,0.1262,0.39124,0.11054,0.39171,0.10192,0.39518,0.09772,0.41714,0.08717,0.42636,0.07646,0.4528,0.06714,0.32633,0.35151,0.3373,0.36903,0.33393,0.39838,0.33561,0.42732,0.33561,0.45381,0.32211,0.47827,0.31114,0.4905,0.32464,0.50191,0.33084,0.35871,0.31926,0.35924,0.31193,0.36219,0.29605,0.38559,0.30675,0.41096,0.30322,0.4362,0.28628,0.46996,0.27402,0.4927,0.29559,0.51467,0.30726,0.52791,0.48599,0.20997,0.51253,0.21195,0.54089,0.21063,0.55279,0.20908,0.5743,0.19715,0.69658,0.30988,0.68604,0.41358,0.69658,0.42564,0.72764,0.33721,0.73818,0.34632,0.74928,0.34713,0.76592,0.34418,0.77147,0.34766,0.75261,0.37419,0.44464,0.32266,0.60617,0.32447,0.52017,0.2804,0.45753,0.14048,0.57581,0.1387,0.52259,0.16905,0.52554,0.19655,0.51446,0.1112,0.45817,0.14744,0.47269,0.14591,0.48964,0.14518,0.49221,0.14679,0.49523,0.14978,0.48555,0.15037,0.46997,0.15037,0.54614,0.14276,0.54057,0.14764,0.5457,0.14778,0.55638,0.14927,0.56604,0.1487,0.57424,0.14608,0.57687,0.14467,0.57131,0.14311,0.55741,0.14297],"triangles":[157,66,67,67,68,107,70,106,68,70,68,69,71,106,70,105,106,71,65,36,37,66,36,65,104,105,71,65,37,38,64,65,38,72,104,71,103,104,72,102,103,72,39,64,38,73,102,72,39,63,64,39,62,63,40,62,39,41,62,40,101,102,73,74,101,73,42,43,62,42,62,41,75,101,74,76,77,101,76,101,75,43,61,62,77,100,101,78,100,77,97,98,99,78,99,100,78,80,99,80,97,99,61,43,60,59,60,44,43,44,60,95,96,97,45,59,44,78,79,80,95,97,80,84,95,80,59,57,58,46,59,45,80,81,83,59,56,57,81,82,83,84,94,95,80,83,84,85,94,84,46,56,59,55,56,46,86,94,85,93,94,86,89,90,91,47,55,46,51,53,50,54,55,47,54,47,48,87,93,86,92,93,87,88,91,92,88,89,91,92,87,88,53,54,48,53,48,49,53,49,50,52,53,51,200,205,201,187,199,200,200,199,205,187,198,199,198,193,197,199,198,197,205,199,197,201,205,204,187,194,198,205,197,186,189,0,1,149,0,189,147,148,149,189,147,149,146,144,145,185,143,147,146,147,144,143,144,147,185,142,143,1,2,4,4,2,3,5,189,4,5,7,189,7,5,6,8,189,7,186,8,9,147,189,185,141,142,185,4,189,1,186,189,8,197,189,186,192,185,189,204,205,186,11,203,10,10,203,186,204,186,203,197,192,189,191,185,192,202,204,203,193,192,197,190,185,191,201,204,202,194,193,198,140,141,185,140,185,190,195,191,192,195,192,193,195,193,194,196,190,191,196,191,195,203,12,13,9,10,186,11,12,203,14,202,203,13,14,203,138,139,140,190,138,140,14,201,202,14,200,201,138,187,137,196,138,190,195,194,187,187,172,188,14,187,200,14,15,187,15,172,187,172,15,16,171,188,172,187,196,195,188,137,187,196,187,138,188,168,137,170,188,171,169,168,188,170,169,188,131,132,133,184,169,170,17,20,173,18,20,17,19,20,18,173,20,21,136,168,135,168,136,137,184,182,135,134,135,182,168,184,135,184,168,169,17,171,16,17,184,171,150,127,129,128,129,127,131,133,134,176,173,21,21,179,176,22,179,21,22,23,179,180,179,23,134,130,131,178,177,176,179,178,176,24,180,23,134,182,130,150,130,182,150,129,130,160,126,127,180,24,25,158,150,182,127,150,160,159,150,158,26,180,25,159,160,150,151,158,182,171,172,16,184,17,173,180,181,178,180,178,179,125,126,160,161,125,160,159,158,151,160,159,151,161,160,151,152,161,151,184,170,171,173,183,184,27,180,26,181,180,27,28,181,27,162,161,152,29,181,28,174,176,177,173,174,183,173,176,174,181,174,177,181,177,178,161,123,124,181,29,175,181,175,174,174,153,152,162,152,153,161,162,123,163,162,153,30,175,29,31,175,30,174,154,153,163,153,154,123,162,122,125,161,124,163,122,162,32,175,31,33,175,32,164,122,163,164,163,154,182,184,183,155,164,154,156,164,155,164,121,122,165,164,156,165,121,164,66,157,155,156,155,157,33,154,175,175,154,174,35,33,34,166,165,156,166,156,157,182,152,151,174,182,183,167,166,157,165,120,121,166,119,165,165,119,120,166,118,119,117,118,166,167,111,117,167,117,166,116,117,111,115,116,111,108,167,157,109,111,167,152,182,174,33,66,154,35,66,33,66,155,154,67,108,157,108,109,167,110,111,109,67,107,108,112,114,111,114,115,111,113,114,112,66,35,36,106,107,68],"vertices":[2,1,-6.48,585.17,0.73,3,-16.4,181.38,0.27,2,1,28.82,584.46,0.73,3,18.89,180.67,0.27,2,1,50,581.01,0.73,3,40.07,177.22,0.27,2,1,60.74,574.71,0.73,3,50.81,170.91,0.27,2,1,67.02,557.03,0.73,3,57.09,153.24,0.27,2,1,72.42,548.63,0.73,3,62.49,144.84,0.27,2,1,82.02,541.63,0.73,3,72.09,137.84,0.27,2,1,87.12,527.32,0.73,3,77.19,123.53,0.27,2,1,91.32,504.8,0.73,3,81.39,101.01,0.27,2,1,91.76,480.6,0.82,3,81.83,76.81,0.18,2,1,94.69,478.3,0.82,3,84.76,74.51,0.18,2,1,100.59,454.57,0.73,3,90.67,50.78,0.27,2,1,100.23,447.45,0.73,3,90.3,43.65,0.27,2,1,85.05,412.77,0.74262,3,75.13,8.97,0.25738,2,1,78.25,410.15,0.71775,3,68.32,6.36,0.28225,2,1,66.07,374.72,0.84296,3,56.14,-29.07,0.15704,3,1,70.61,356.15,0.94713,2,196.85,-69.9,0.01306,3,60.68,-47.64,0.03981,2,1,151.29,329.68,0.90619,2,170.38,-150.58,0.09381,2,1,180.77,326.46,0.93638,2,167.16,-180.06,0.06362,2,1,195.28,319.73,0.94271,2,160.44,-194.57,0.05729,2,1,207.1,303.95,0.93065,2,144.65,-206.39,0.06935,2,1,256.93,202.87,0.95,2,43.57,-256.22,0.05,2,1,277.7,174.6,0.95,2,15.31,-276.99,0.05,2,1,280.14,161.46,0.95,2,2.16,-279.43,0.05,2,1,288.5,145.16,0.95,2,-14.14,-287.78,0.05,2,1,300.62,95.69,0.95,2,-63.61,-299.91,0.05,2,1,297.4,83.7,0.95,2,-75.6,-296.69,0.05,2,1,248.87,18.07,0.95,2,-141.23,-248.15,0.05,2,1,234.58,0.12,0.95,2,-159.18,-233.87,0.05,2,1,230.82,-4.54,0.95,2,-163.84,-230.1,0.05,2,1,194.03,-57.21,0.95,2,-216.51,-193.32,0.05,2,1,191.83,-59.09,0.95,2,-218.39,-191.12,0.05,2,1,171.95,-89.91,0.95,2,-249.21,-171.24,0.05,2,1,160.69,-94.11,0.95,2,-253.41,-159.98,0.05,1,1,169.5,-155,1,1,1,151.14,-163.63,1,2,1,162.33,-305.53,0.44961,0,195.2,547.69,0.55039,2,1,164.65,-355.99,0.07046,0,197.52,497.23,0.92954,1,0,197.94,451.46,1,1,0,191.7,363.1,1,1,0,190.13,294.74,1,1,0,186.29,284.65,1,1,0,186.47,235.99,1,1,0,184.51,229.38,1,1,0,173.78,124.38,1,1,0,175.79,69.23,1,1,0,178.8,54.72,1,1,0,205.48,28.05,1,1,0,220.42,19.03,1,1,0,254.46,4.56,1,1,0,263,-5.1,1,1,0,268.37,-29.01,1,1,0,267.44,-36.62,1,1,0,212.3,-43.02,1,1,0,177.57,-37.97,1,1,0,146.9,-32.1,1,1,0,112.15,-14.86,1,1,0,72.27,-0.16,1,1,0,57.24,12.69,1,1,0,55.64,49.01,1,1,0,51.27,51.61,1,1,0,69.69,337.16,1,1,0,71.78,337.6,1,1,0,76.18,420.33,1,1,0,78.29,422.96,1,1,0,65.91,466.24,1,2,1,8.84,-254.69,0.35744,0,41.71,598.52,0.64256,2,1,-3.67,-265.53,0.10854,0,29.2,587.68,0.89146,1,0,21.55,550.96,1,1,0,26.6,554.26,1,1,0,13.52,509.84,1,1,0,7.15,483.14,1,1,0,-10.59,370.79,1,1,0,-11.99,334.56,1,1,0,-27.71,264.95,1,1,0,-37.72,202.51,1,1,0,-37.31,183.78,1,1,0,-43.25,158.21,1,1,0,-48.71,110.7,1,1,0,-49.52,57.1,1,1,0,-60.02,44.02,1,1,0,-62.24,14.87,1,1,0,-65.59,7.56,1,1,0,-76.37,-2.41,1,1,0,-98.39,-9.38,1,1,0,-100.97,-12.82,1,1,0,-112.54,-25.77,1,1,0,-173.67,-41.45,1,1,0,-191.86,-41.52,1,1,0,-232.89,-29.66,1,1,0,-237.78,-23.4,1,1,0,-230.34,-0.69,1,1,0,-196.34,18.84,1,1,0,-192.38,22.2,1,1,0,-167.24,46.23,1,1,0,-164.88,51.24,1,1,0,-175.04,59.86,1,1,0,-162.99,63.31,1,1,0,-163.01,77.2,1,1,0,-158.15,83.64,1,1,0,-157.52,95.94,1,1,0,-141.61,266.25,1,1,0,-130.06,383.7,1,1,0,-124.09,430.51,1,2,1,-150.59,-397.93,0.04128,0,-117.72,455.28,0.95872,3,1,-153.65,-376.09,0.28647,3,-163.58,-779.88,0,0,-120.78,477.12,0.71353,3,1,-150.31,-335.11,0.66657,3,-160.24,-738.91,0,0,-117.44,518.1,0.33343,2,1,-149.75,-263.49,1,3,-159.68,-667.28,0,3,1,-153,-254.51,0.98637,2,-413.81,153.71,0.01363,3,-162.92,-658.3,0,3,1,-161.3,-255.24,0.98073,2,-414.54,162.01,0.01927,3,-171.23,-659.03,0,3,1,-175.25,-256.47,0.9748,2,-415.77,175.96,0.0252,3,-185.17,-660.26,0,3,1,-191.34,-242.71,0.9492,2,-402.01,192.06,0.0508,3,-201.27,-646.51,0,2,1,-179.12,-286.64,1,3,-189.05,-690.43,0,2,1,-185.12,-293.6,1,2,-452.9,185.83,0,1,1,-191.53,-294.13,1,3,1,-235.63,-247.85,0.96168,2,-407.15,236.34,0.03832,3,-245.56,-651.65,0,3,1,-247.39,-226.48,0.94662,2,-385.78,248.1,0.05338,3,-257.32,-630.27,0,3,1,-246.13,-206.22,0.94338,2,-365.52,246.84,0.05662,3,-256.06,-610.01,0,3,1,-246.29,-203.8,0.94279,2,-363.1,247,0.05721,3,-256.22,-607.59,0,2,1,-249.39,-161.44,0.95,2,-320.74,250.1,0.05,2,1,-248.41,-145.56,0.95,2,-304.86,249.12,0.05,2,1,-247.02,-141.04,0.95,2,-300.34,247.73,0.05,2,1,-248.86,-82.65,0.95,2,-241.95,249.58,0.05,2,1,-252.1,-14.34,0.95,2,-173.63,252.81,0.05,2,1,-253.35,24.62,0.95,2,-134.68,254.06,0.05,2,1,-245.78,41.96,0.95,2,-117.34,246.49,0.05,2,1,-245.85,107.13,0.95,2,-52.17,246.56,0.05,2,1,-243.95,128.4,0.95,2,-30.9,244.66,0.05,2,1,-258.01,138.09,0.95,2,-21.21,258.72,0.05,2,1,-253.96,149.24,0.95,2,-10.06,254.67,0.05,2,1,-207.71,268.75,0.95,2,109.45,208.42,0.05,2,1,-189.89,301.31,0.95,2,142.01,190.6,0.05,2,1,-194.69,305.84,0.95,2,146.54,195.41,0.05,2,1,-182.77,315.86,0.95,2,156.56,183.48,0.05,2,1,-167.24,321.36,0.93248,2,162.06,167.95,0.06752,2,1,-130.8,338.35,0.9086,2,179.05,131.51,0.0914,2,1,-65.08,357.75,0.96642,3,-75.01,-46.04,0.03358,2,1,-52.11,367.46,0.75002,3,-62.04,-36.33,0.24998,2,1,-66.46,404.4,0.74936,3,-76.39,0.6,0.25064,2,1,-73.55,404.79,0.79706,3,-83.48,0.99,0.20294,2,1,-89.41,436.98,0.73,3,-99.34,33.18,0.27,2,1,-94.03,455.17,0.73,3,-103.96,51.38,0.27,2,1,-88.88,469.85,0.78184,3,-98.81,66.05,0.21816,2,1,-89.01,477.34,0.80688,3,-98.94,73.54,0.19312,2,1,-96.69,503.69,0.73,3,-106.62,99.89,0.27,2,1,-96.31,518.2,0.73,3,-106.24,114.41,0.27,2,1,-93.48,525.26,0.73,3,-103.41,121.47,0.27,2,1,-75.64,543.02,0.73,3,-85.56,139.23,0.27,2,1,-68.14,561.04,0.73,3,-78.07,157.25,0.27,2,1,-46.64,576.72,0.73,3,-56.57,172.93,0.27,2,1,-149.46,98.14,0.86934,2,-61.16,150.17,0.13066,2,1,-140.54,68.65,0.83684,2,-90.65,141.26,0.16316,2,1,-143.29,19.25,0.92116,2,-140.05,144,0.07884,2,1,-141.92,-29.45,0.95,2,-188.75,142.63,0.05,2,1,-141.92,-74.04,0.95,2,-233.34,142.63,0.05,2,1,-152.89,-115.2,0.95,2,-274.5,153.6,0.05,2,1,-161.81,-135.78,0.95,2,-295.08,162.52,0.05,3,1,-150.83,-154.99,0.93554,2,-314.29,151.55,0.06446,3,-160.76,-558.78,0,2,1,-145.8,86.03,0.85299,2,-73.27,146.51,0.14701,2,1,-155.21,85.13,0.89485,2,-74.17,155.92,0.10515,2,1,-161.17,80.16,0.92214,2,-79.14,161.88,0.07786,2,1,-174.08,40.77,0.95,2,-118.53,174.79,0.05,2,1,-165.38,-1.92,0.95,2,-161.22,166.09,0.05,2,1,-168.25,-44.4,0.95,2,-203.7,168.96,0.05,2,1,-182.03,-101.22,0.95,2,-260.52,182.74,0.05,2,1,-191.99,-139.49,0.95,2,-298.79,192.7,0.05,3,1,-174.45,-176.47,0.93938,2,-335.77,175.16,0.06062,3,-184.38,-580.26,0,3,1,-164.97,-198.74,0.94551,2,-358.04,165.68,0.05449,3,-174.9,-602.54,0,2,1,-19.66,336.36,0.74718,3,-29.59,-67.44,0.25282,2,1,1.91,333.01,0.74498,3,-8.02,-70.79,0.25502,2,1,24.98,335.24,0.75269,3,15.05,-68.55,0.24731,2,1,34.65,337.84,0.76016,3,24.72,-65.95,0.23984,2,1,52.13,357.93,0.73747,3,42.2,-45.86,0.26253,2,1,151.55,168.2,0.87525,2,8.9,-150.84,0.12475,2,1,142.98,-6.33,0.92604,2,-165.63,-142.27,0.07396,2,1,151.55,-26.63,0.94892,2,-185.93,-150.84,0.05108,2,1,176.8,122.2,0.89961,2,-37.1,-176.09,0.10039,2,1,185.37,106.87,0.92017,2,-52.43,-184.66,0.07983,2,1,194.39,105.51,0.94034,2,-53.79,-193.68,0.05966,2,1,207.92,110.48,0.94996,2,-48.82,-207.21,0.05004,2,1,212.43,104.61,0.94996,2,-54.69,-211.72,0.05004,2,1,197.1,59.96,0.94977,2,-99.34,-196.39,0.05023,2,1,-53.28,146.68,0.84548,2,-12.62,53.99,0.15452,2,1,78.05,143.64,0.82779,2,-15.66,-77.34,0.17221,2,1,8.13,217.82,0.85974,2,58.52,-7.42,0.14026,2,1,-42.8,453.29,0.57756,3,-52.72,49.5,0.42244,2,1,53.36,456.3,0.57342,3,43.44,52.51,0.42658,2,1,10.09,405.21,0.46059,3,0.16,1.42,0.53941,2,1,12.5,358.94,0.64636,3,2.57,-44.86,0.35364,2,1,3.48,502.58,0.51907,3,-6.45,98.78,0.48093,2,1,-42.28,441.58,0.6077,3,-52.21,37.78,0.3923,3,1,-30.47,444.16,0.36347,3,-40.4,40.37,0.28855,5,8.17,-3.71,0.34798,3,1,-16.7,445.39,0.35211,3,-26.62,41.6,0.28553,5,7.5,10.11,0.36235,3,1,-14.61,442.68,0.44438,3,-24.53,38.89,0.34671,5,10.29,12.09,0.2089,2,1,-12.15,437.64,0.54543,3,-22.07,33.85,0.45457,2,1,-20.02,436.66,0.58554,3,-29.95,32.86,0.41446,2,1,-32.69,436.66,0.61032,3,-42.61,32.86,0.38968,3,1,29.24,449.46,0.25532,3,19.31,45.67,0.34997,4,4.99,-10.89,0.3947,3,1,24.72,441.25,0.42947,3,14.79,37.46,0.46895,4,13.31,-15.2,0.10157,3,1,28.88,441.01,0.46975,3,18.95,37.22,0.49486,4,13.44,-11.03,0.03539,2,1,37.57,438.51,0.5023,3,27.64,34.72,0.4977,2,1,45.42,439.46,0.50555,3,35.49,35.67,0.49445,3,1,52.09,443.87,0.48645,3,42.16,40.07,0.46798,4,9.99,12.1,0.04556,3,1,54.23,446.25,0.45149,3,44.3,42.45,0.41221,4,7.56,14.18,0.1363,3,1,49.71,448.87,0.33416,3,39.78,45.07,0.35808,4,5.06,9.59,0.30776,3,1,38.4,449.1,0.24658,3,28.47,45.31,0.33574,4,5.11,-1.72,0.41769],"hull":150,"edges":[0,298,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,58,60,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,290,292,292,294,294,296,296,298,56,58,60,62,302,304,304,306,306,308,308,310,310,312,312,314,314,216,300,316,316,302,300,318,318,320,320,322,322,324,324,326,326,328,328,330,330,332,332,334,216,218,218,220,334,218,274,336,336,338,338,340,340,342,342,344,344,30,346,348,348,350,346,352,352,354,354,356,356,358,358,360,360,362,362,350,380,382,382,384,384,386,386,388,388,390,390,392,392,380,394,396,396,398,398,400,400,402,402,404,404,406,406,408,408,410,410,394],"width":813,"height":1683},"sally big2":{"type":"mesh","path":"JungleScene/sally big2","uvs":[0.50221,0.06212,0.54562,0.06255,0.57168,0.0646,0.58488,0.06834,0.59261,0.07885,0.59924,0.08383,0.61105,0.08799,0.61733,0.0965,0.6225,0.10988,0.62304,0.12426,0.62664,0.12562,0.6339,0.13972,0.63346,0.14396,0.61479,0.16456,0.60642,0.16612,0.59144,0.18717,0.59702,0.1982,0.69626,0.21393,0.73253,0.21585,0.75037,0.21984,0.76491,0.22922,0.8262,0.28928,0.85175,0.30607,0.85475,0.31389,0.86503,0.32357,0.87994,0.35296,0.87598,0.36009,0.81628,0.39908,0.79871,0.40975,0.79408,0.41252,0.74883,0.44381,0.74612,0.44493,0.72167,0.46324,0.70783,0.46574,0.71866,0.50192,0.69608,0.50705,0.70984,0.59136,0.7127,0.62134,0.71321,0.64853,0.70553,0.70104,0.70361,0.74165,0.69888,0.74765,0.69911,0.77656,0.6967,0.78049,0.6835,0.84287,0.68597,0.87564,0.68966,0.88426,0.72248,0.90011,0.74086,0.90547,0.78273,0.91407,0.79324,0.91981,0.79985,0.93402,0.7987,0.93854,0.73088,0.94234,0.68815,0.93934,0.65043,0.93585,0.60768,0.92561,0.55863,0.91688,0.54015,0.90924,0.53818,0.88766,0.53281,0.88612,0.55546,0.71645,0.55804,0.71619,0.56345,0.66703,0.56605,0.66547,0.55081,0.63975,0.52105,0.56115,0.50566,0.56759,0.49625,0.58941,0.50246,0.58745,0.48637,0.61385,0.47853,0.62971,0.45671,0.69646,0.455,0.71799,0.43566,0.75935,0.42334,0.79645,0.42385,0.80758,0.41654,0.82277,0.40982,0.85101,0.40884,0.88285,0.39591,0.89062,0.39318,0.90795,0.38906,0.91229,0.37581,0.91821,0.34872,0.92235,0.34555,0.9244,0.33131,0.93209,0.25612,0.94141,0.23375,0.94145,0.18328,0.9344,0.17727,0.93068,0.18642,0.91719,0.22824,0.90558,0.23312,0.90359,0.26404,0.88931,0.26694,0.88633,0.25444,0.88121,0.26926,0.87916,0.26923,0.87091,0.27522,0.86708,0.27599,0.85977,0.29556,0.75858,0.30976,0.68879,0.31712,0.66098,0.32494,0.64626,0.32118,0.63328,0.32528,0.60894,0.32597,0.56638,0.32199,0.56104,0.31178,0.56148,0.29462,0.56221,0.27482,0.55403,0.28986,0.58014,0.28247,0.58427,0.27458,0.58458,0.22035,0.55709,0.20588,0.54439,0.20743,0.53235,0.20723,0.53091,0.20342,0.50574,0.20462,0.49631,0.20634,0.49362,0.20407,0.45893,0.20008,0.41834,0.19855,0.39519,0.20786,0.38489,0.20778,0.34616,0.21011,0.33353,0.19281,0.32777,0.1978,0.32114,0.25469,0.25014,0.27661,0.23079,0.2707,0.2281,0.28537,0.22214,0.30447,0.21887,0.34929,0.20878,0.43012,0.19725,0.44608,0.19148,0.42842,0.16954,0.4197,0.16931,0.4002,0.15018,0.39452,0.13937,0.40085,0.13065,0.40068,0.1262,0.39124,0.11054,0.39171,0.10192,0.39518,0.09772,0.41714,0.08717,0.42636,0.07646,0.4528,0.06714,0.32633,0.35151,0.3373,0.36903,0.33393,0.39838,0.33561,0.42732,0.33561,0.45381,0.32211,0.47827,0.31114,0.4905,0.32464,0.50191,0.33084,0.35871,0.31926,0.35924,0.31193,0.36219,0.29605,0.38559,0.30675,0.41096,0.30322,0.4362,0.28628,0.46996,0.27402,0.4927,0.29559,0.51467,0.30726,0.52791,0.48599,0.20997,0.51253,0.21195,0.54089,0.21063,0.55279,0.20908,0.5743,0.19715,0.69658,0.30988,0.68604,0.41358,0.69658,0.42564,0.72764,0.33721,0.73818,0.34632,0.74928,0.34713,0.76592,0.34418,0.77147,0.34766,0.75261,0.37419,0.44464,0.32266,0.60617,0.32447,0.52017,0.2804,0.45753,0.14048,0.57581,0.1387,0.52259,0.16905,0.52554,0.19655,0.51446,0.1112,0.45817,0.14744,0.47269,0.14388,0.48836,0.14283,0.49378,0.14645,0.49523,0.14978,0.48555,0.15037,0.46997,0.15037,0.54651,0.14212,0.54057,0.14764,0.5457,0.14778,0.55638,0.14927,0.56604,0.1487,0.57424,0.14608,0.57687,0.14467,0.56897,0.1416,0.55741,0.14126],"triangles":[157,66,67,67,68,107,70,106,68,70,68,69,71,106,70,105,106,71,65,36,37,66,36,65,104,105,71,65,37,38,64,65,38,72,104,71,103,104,72,102,103,72,39,64,38,73,102,72,39,63,64,39,62,63,40,62,39,41,62,40,101,102,73,74,101,73,42,43,62,42,62,41,75,101,74,76,77,101,76,101,75,43,61,62,77,100,101,78,100,77,97,98,99,78,99,100,78,80,99,80,97,99,61,43,60,59,60,44,43,44,60,95,96,97,45,59,44,78,79,80,95,97,80,84,95,80,59,57,58,46,59,45,80,81,83,59,56,57,81,82,83,84,94,95,80,83,84,85,94,84,46,56,59,55,56,46,86,94,85,93,94,86,89,90,91,47,55,46,51,53,50,54,55,47,54,47,48,87,93,86,92,93,87,88,91,92,88,89,91,92,87,88,53,54,48,53,48,49,53,49,50,52,53,51,205,197,189,198,193,197,199,198,197,201,205,204,200,197,205,200,205,201,199,197,200,187,194,198,187,198,199,187,199,200,189,0,1,149,0,189,147,148,149,189,147,149,146,144,145,185,143,147,146,147,144,143,144,147,185,142,143,1,2,4,4,2,3,5,189,4,5,7,189,7,5,6,8,189,7,186,8,9,147,189,185,141,142,185,4,189,1,186,189,8,205,189,186,189,192,185,204,205,186,197,192,189,191,185,192,11,203,10,10,203,186,204,186,203,202,204,203,193,192,197,190,185,191,201,204,202,194,193,198,140,141,185,140,185,190,195,191,192,195,192,193,195,193,194,196,190,191,196,191,195,203,12,13,9,10,186,11,12,203,14,202,203,13,14,203,138,139,140,190,138,140,14,201,202,14,200,201,138,187,137,196,138,190,195,194,187,187,172,188,14,187,200,14,15,187,15,172,187,172,15,16,171,188,172,187,196,195,188,137,187,196,187,138,188,168,137,170,188,171,169,168,188,170,169,188,131,132,133,184,169,170,17,20,173,18,20,17,19,20,18,173,20,21,136,168,135,168,136,137,184,182,135,134,135,182,168,184,135,184,168,169,17,171,16,17,184,171,150,127,129,128,129,127,131,133,134,176,173,21,21,179,176,22,179,21,22,23,179,180,179,23,134,130,131,178,177,176,179,178,176,24,180,23,134,182,130,150,130,182,150,129,130,160,126,127,180,24,25,158,150,182,127,150,160,159,150,158,26,180,25,159,160,150,151,158,182,171,172,16,184,17,173,180,181,178,180,178,179,125,126,160,161,125,160,159,158,151,160,159,151,161,160,151,152,161,151,184,170,171,173,183,184,27,180,26,181,180,27,28,181,27,162,161,152,29,181,28,174,176,177,173,174,183,173,176,174,181,174,177,181,177,178,161,123,124,181,29,175,181,175,174,174,153,152,162,152,153,161,162,123,163,162,153,30,175,29,31,175,30,174,154,153,163,153,154,123,162,122,125,161,124,163,122,162,32,175,31,33,175,32,164,122,163,164,163,154,182,184,183,155,164,154,156,164,155,164,121,122,165,164,156,165,121,164,66,157,155,156,155,157,33,154,175,175,154,174,35,33,34,166,165,156,166,156,157,182,152,151,174,182,183,167,166,157,165,120,121,166,119,165,165,119,120,166,118,119,117,118,166,167,111,117,167,117,166,116,117,111,115,116,111,108,167,157,109,111,167,152,182,174,33,66,154,35,66,33,66,155,154,67,108,157,108,109,167,110,111,109,67,107,108,112,114,111,114,115,111,113,114,112,66,35,36,106,107,68],"vertices":[2,1,-6.48,585.17,0.73,3,-16.4,181.38,0.27,2,1,28.82,584.46,0.73,3,18.89,180.67,0.27,2,1,50,581.01,0.73,3,40.07,177.22,0.27,2,1,60.74,574.71,0.73,3,50.81,170.91,0.27,2,1,67.02,557.03,0.73,3,57.09,153.24,0.27,2,1,72.42,548.63,0.73,3,62.49,144.84,0.27,2,1,82.02,541.63,0.73,3,72.09,137.84,0.27,2,1,87.12,527.32,0.73,3,77.19,123.53,0.27,2,1,91.32,504.8,0.73,3,81.39,101.01,0.27,2,1,91.76,480.6,0.82,3,81.83,76.81,0.18,2,1,94.69,478.3,0.82,3,84.76,74.51,0.18,2,1,100.59,454.57,0.73,3,90.67,50.78,0.27,2,1,100.23,447.45,0.73,3,90.3,43.65,0.27,2,1,85.05,412.77,0.74262,3,75.13,8.97,0.25738,2,1,78.25,410.15,0.71775,3,68.32,6.36,0.28225,2,1,66.07,374.72,0.84296,3,56.14,-29.07,0.15704,3,1,70.61,356.15,0.94713,2,196.85,-69.9,0.01306,3,60.68,-47.64,0.03981,2,1,151.29,329.68,0.90619,2,170.38,-150.58,0.09381,2,1,180.77,326.46,0.93638,2,167.16,-180.06,0.06362,2,1,195.28,319.73,0.94271,2,160.44,-194.57,0.05729,2,1,207.1,303.95,0.93065,2,144.65,-206.39,0.06935,2,1,256.93,202.87,0.95,2,43.57,-256.22,0.05,2,1,277.7,174.6,0.95,2,15.31,-276.99,0.05,2,1,280.14,161.46,0.95,2,2.16,-279.43,0.05,2,1,288.5,145.16,0.95,2,-14.14,-287.78,0.05,2,1,300.62,95.69,0.95,2,-63.61,-299.91,0.05,2,1,297.4,83.7,0.95,2,-75.6,-296.69,0.05,2,1,248.87,18.07,0.95,2,-141.23,-248.15,0.05,2,1,234.58,0.12,0.95,2,-159.18,-233.87,0.05,2,1,230.82,-4.54,0.95,2,-163.84,-230.1,0.05,2,1,194.03,-57.21,0.95,2,-216.51,-193.32,0.05,2,1,191.83,-59.09,0.95,2,-218.39,-191.12,0.05,2,1,171.95,-89.91,0.95,2,-249.21,-171.24,0.05,2,1,160.69,-94.11,0.95,2,-253.41,-159.98,0.05,1,1,169.5,-155,1,1,1,151.14,-163.63,1,2,1,162.33,-305.53,0.44961,0,195.2,547.69,0.55039,2,1,164.65,-355.99,0.07046,0,197.52,497.23,0.92954,1,0,197.94,451.46,1,1,0,191.7,363.1,1,1,0,190.13,294.74,1,1,0,186.29,284.65,1,1,0,186.47,235.99,1,1,0,184.51,229.38,1,1,0,173.78,124.38,1,1,0,175.79,69.23,1,1,0,178.8,54.72,1,1,0,205.48,28.05,1,1,0,220.42,19.03,1,1,0,254.46,4.56,1,1,0,263,-5.1,1,1,0,268.37,-29.01,1,1,0,267.44,-36.62,1,1,0,212.3,-43.02,1,1,0,177.57,-37.97,1,1,0,146.9,-32.1,1,1,0,112.15,-14.86,1,1,0,72.27,-0.16,1,1,0,57.24,12.69,1,1,0,55.64,49.01,1,1,0,51.27,51.61,1,1,0,69.69,337.16,1,1,0,71.78,337.6,1,1,0,76.18,420.33,1,1,0,78.29,422.96,1,1,0,65.91,466.24,1,2,1,8.84,-254.69,0.35744,0,41.71,598.52,0.64256,2,1,-3.67,-265.53,0.10854,0,29.2,587.68,0.89146,1,0,21.55,550.96,1,1,0,26.6,554.26,1,1,0,13.52,509.84,1,1,0,7.15,483.14,1,1,0,-10.59,370.79,1,1,0,-11.99,334.56,1,1,0,-27.71,264.95,1,1,0,-37.72,202.51,1,1,0,-37.31,183.78,1,1,0,-43.25,158.21,1,1,0,-48.71,110.7,1,1,0,-49.52,57.1,1,1,0,-60.02,44.02,1,1,0,-62.24,14.87,1,1,0,-65.59,7.56,1,1,0,-76.37,-2.41,1,1,0,-98.39,-9.38,1,1,0,-100.97,-12.82,1,1,0,-112.54,-25.77,1,1,0,-173.67,-41.45,1,1,0,-191.86,-41.52,1,1,0,-232.89,-29.66,1,1,0,-237.78,-23.4,1,1,0,-230.34,-0.69,1,1,0,-196.34,18.84,1,1,0,-192.38,22.2,1,1,0,-167.24,46.23,1,1,0,-164.88,51.24,1,1,0,-175.04,59.86,1,1,0,-162.99,63.31,1,1,0,-163.01,77.2,1,1,0,-158.15,83.64,1,1,0,-157.52,95.94,1,1,0,-141.61,266.25,1,1,0,-130.06,383.7,1,1,0,-124.09,430.51,1,2,1,-150.59,-397.93,0.04128,0,-117.72,455.28,0.95872,3,1,-153.65,-376.09,0.28647,3,-163.58,-779.88,0,0,-120.78,477.12,0.71353,3,1,-150.31,-335.11,0.66657,3,-160.24,-738.91,0,0,-117.44,518.1,0.33343,2,1,-149.75,-263.49,1,3,-159.68,-667.28,0,3,1,-153,-254.51,0.98637,2,-413.81,153.71,0.01363,3,-162.92,-658.3,0,3,1,-161.3,-255.24,0.98073,2,-414.54,162.01,0.01927,3,-171.23,-659.03,0,3,1,-175.25,-256.47,0.9748,2,-415.77,175.96,0.0252,3,-185.17,-660.26,0,3,1,-191.34,-242.71,0.9492,2,-402.01,192.06,0.0508,3,-201.27,-646.51,0,2,1,-179.12,-286.64,1,3,-189.05,-690.43,0,2,1,-185.12,-293.6,1,2,-452.9,185.83,0,1,1,-191.53,-294.13,1,3,1,-235.63,-247.85,0.96168,2,-407.15,236.34,0.03832,3,-245.56,-651.65,0,3,1,-247.39,-226.48,0.94662,2,-385.78,248.1,0.05338,3,-257.32,-630.27,0,3,1,-246.13,-206.22,0.94338,2,-365.52,246.84,0.05662,3,-256.06,-610.01,0,3,1,-246.29,-203.8,0.94279,2,-363.1,247,0.05721,3,-256.22,-607.59,0,2,1,-249.39,-161.44,0.95,2,-320.74,250.1,0.05,2,1,-248.41,-145.56,0.95,2,-304.86,249.12,0.05,2,1,-247.02,-141.04,0.95,2,-300.34,247.73,0.05,2,1,-248.86,-82.65,0.95,2,-241.95,249.58,0.05,2,1,-252.1,-14.34,0.95,2,-173.63,252.81,0.05,2,1,-253.35,24.62,0.95,2,-134.68,254.06,0.05,2,1,-245.78,41.96,0.95,2,-117.34,246.49,0.05,2,1,-245.85,107.13,0.95,2,-52.17,246.56,0.05,2,1,-243.95,128.4,0.95,2,-30.9,244.66,0.05,2,1,-258.01,138.09,0.95,2,-21.21,258.72,0.05,2,1,-253.96,149.24,0.95,2,-10.06,254.67,0.05,2,1,-207.71,268.75,0.95,2,109.45,208.42,0.05,2,1,-189.89,301.31,0.95,2,142.01,190.6,0.05,2,1,-194.69,305.84,0.95,2,146.54,195.41,0.05,2,1,-182.77,315.86,0.95,2,156.56,183.48,0.05,2,1,-167.24,321.36,0.93248,2,162.06,167.95,0.06752,2,1,-130.8,338.35,0.9086,2,179.05,131.51,0.0914,2,1,-65.08,357.75,0.96642,3,-75.01,-46.04,0.03358,2,1,-52.11,367.46,0.75002,3,-62.04,-36.33,0.24998,2,1,-66.46,404.4,0.74936,3,-76.39,0.6,0.25064,2,1,-73.55,404.79,0.79706,3,-83.48,0.99,0.20294,2,1,-89.41,436.98,0.73,3,-99.34,33.18,0.27,2,1,-94.03,455.17,0.73,3,-103.96,51.38,0.27,2,1,-88.88,469.85,0.78184,3,-98.81,66.05,0.21816,2,1,-89.01,477.34,0.80688,3,-98.94,73.54,0.19312,2,1,-96.69,503.69,0.73,3,-106.62,99.89,0.27,2,1,-96.31,518.2,0.73,3,-106.24,114.41,0.27,2,1,-93.48,525.26,0.73,3,-103.41,121.47,0.27,2,1,-75.64,543.02,0.73,3,-85.56,139.23,0.27,2,1,-68.14,561.04,0.73,3,-78.07,157.25,0.27,2,1,-46.64,576.72,0.73,3,-56.57,172.93,0.27,2,1,-149.46,98.14,0.86934,2,-61.16,150.17,0.13066,2,1,-140.54,68.65,0.83684,2,-90.65,141.26,0.16316,2,1,-143.29,19.25,0.92116,2,-140.05,144,0.07884,2,1,-141.92,-29.45,0.95,2,-188.75,142.63,0.05,2,1,-141.92,-74.04,0.95,2,-233.34,142.63,0.05,2,1,-152.89,-115.2,0.95,2,-274.5,153.6,0.05,2,1,-161.81,-135.78,0.95,2,-295.08,162.52,0.05,3,1,-150.83,-154.99,0.93554,2,-314.29,151.55,0.06446,3,-160.76,-558.78,0,2,1,-145.8,86.03,0.85299,2,-73.27,146.51,0.14701,2,1,-155.21,85.13,0.89485,2,-74.17,155.92,0.10515,2,1,-161.17,80.16,0.92214,2,-79.14,161.88,0.07786,2,1,-174.08,40.77,0.95,2,-118.53,174.79,0.05,2,1,-165.38,-1.92,0.95,2,-161.22,166.09,0.05,2,1,-168.25,-44.4,0.95,2,-203.7,168.96,0.05,2,1,-182.03,-101.22,0.95,2,-260.52,182.74,0.05,2,1,-191.99,-139.49,0.95,2,-298.79,192.7,0.05,3,1,-174.45,-176.47,0.93938,2,-335.77,175.16,0.06062,3,-184.38,-580.26,0,3,1,-164.97,-198.74,0.94551,2,-358.04,165.68,0.05449,3,-174.9,-602.54,0,2,1,-19.66,336.36,0.74718,3,-29.59,-67.44,0.25282,2,1,1.91,333.01,0.74498,3,-8.02,-70.79,0.25502,2,1,24.98,335.24,0.75269,3,15.05,-68.55,0.24731,2,1,34.65,337.84,0.76016,3,24.72,-65.95,0.23984,2,1,52.13,357.93,0.73747,3,42.2,-45.86,0.26253,2,1,151.55,168.2,0.87525,2,8.9,-150.84,0.12475,2,1,142.98,-6.33,0.92604,2,-165.63,-142.27,0.07396,2,1,151.55,-26.63,0.94892,2,-185.93,-150.84,0.05108,2,1,176.8,122.2,0.89961,2,-37.1,-176.09,0.10039,2,1,185.37,106.87,0.92017,2,-52.43,-184.66,0.07983,2,1,194.39,105.51,0.94034,2,-53.79,-193.68,0.05966,2,1,207.92,110.48,0.94996,2,-48.82,-207.21,0.05004,2,1,212.43,104.61,0.94996,2,-54.69,-211.72,0.05004,2,1,197.1,59.96,0.94977,2,-99.34,-196.39,0.05023,2,1,-53.28,146.68,0.84548,2,-12.62,53.99,0.15452,2,1,78.05,143.64,0.82779,2,-15.66,-77.34,0.17221,2,1,8.13,217.82,0.85974,2,58.52,-7.42,0.14026,2,1,-42.8,453.29,0.57756,3,-52.72,49.5,0.42244,2,1,53.36,456.3,0.57342,3,43.44,52.51,0.42658,2,1,10.09,405.21,0.46059,3,0.16,1.42,0.53941,2,1,12.5,358.94,0.64636,3,2.57,-44.86,0.35364,2,1,3.48,502.58,0.51907,3,-6.45,98.78,0.48093,2,1,-42.28,441.58,0.6077,3,-52.21,37.78,0.3923,3,1,-30.47,447.76,0.36347,3,-40.4,43.97,0.28855,5,4.57,-3.56,0.34798,3,1,-17.74,449.39,0.35211,3,-27.66,45.6,0.28553,5,3.46,9.23,0.36235,3,1,-13.33,443.24,0.44438,3,-23.25,39.45,0.34671,5,9.78,13.39,0.2089,2,1,-12.15,437.64,0.54543,3,-22.07,33.85,0.45457,2,1,-20.02,436.66,0.58554,3,-29.95,32.86,0.41446,2,1,-32.69,436.66,0.61032,3,-42.61,32.86,0.38968,3,1,29.54,450.55,0.25532,3,19.62,46.75,0.34997,4,3.89,-10.61,0.3947,3,1,24.72,441.25,0.42947,3,14.79,37.46,0.46895,4,13.31,-15.2,0.10157,3,1,28.88,441.01,0.46975,3,18.95,37.22,0.49486,4,13.44,-11.03,0.03539,2,1,37.57,438.51,0.5023,3,27.64,34.72,0.4977,2,1,45.42,439.46,0.50555,3,35.49,35.67,0.49445,3,1,52.09,443.87,0.48645,3,42.16,40.07,0.46798,4,9.99,12.1,0.04556,3,1,54.23,446.25,0.45149,3,44.3,42.45,0.41221,4,7.56,14.18,0.1363,3,1,47.8,451.25,0.33416,3,37.87,47.45,0.35808,4,2.73,7.63,0.30776,3,1,38.4,451.82,0.24658,3,28.47,48.03,0.33574,4,2.39,-1.79,0.41769],"hull":150,"edges":[0,298,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,58,60,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,290,292,292,294,294,296,296,298,56,58,60,62,302,304,304,306,306,308,308,310,310,312,312,314,314,216,300,316,316,302,300,318,318,320,320,322,322,324,324,326,326,328,328,330,330,332,332,334,216,218,218,220,334,218,274,336,336,338,338,340,340,342,342,344,344,30,346,348,348,350,346,352,352,354,354,356,356,358,358,360,360,362,362,350,380,382,382,384,384,386,386,388,388,390,390,392,392,380,394,396,396,398,398,400,400,402,402,404,404,406,406,408,408,410,410,394],"width":813,"height":1683},"sally big3":{"type":"mesh","path":"JungleScene/sally big3","uvs":[0.50221,0.06212,0.54562,0.06255,0.57168,0.0646,0.58488,0.06834,0.59261,0.07885,0.59924,0.08383,0.61105,0.08799,0.61733,0.0965,0.6225,0.10988,0.62304,0.12426,0.62664,0.12562,0.6339,0.13972,0.63346,0.14396,0.61479,0.16456,0.60642,0.16612,0.59144,0.18717,0.59702,0.1982,0.69626,0.21393,0.73253,0.21585,0.75037,0.21984,0.76491,0.22922,0.8262,0.28928,0.85175,0.30607,0.85475,0.31389,0.86503,0.32357,0.87994,0.35296,0.87598,0.36009,0.81628,0.39908,0.79871,0.40975,0.79408,0.41252,0.74883,0.44381,0.74612,0.44493,0.72167,0.46324,0.70783,0.46574,0.71866,0.50192,0.69608,0.50705,0.70984,0.59136,0.7127,0.62134,0.71321,0.64853,0.70553,0.70104,0.70361,0.74165,0.69888,0.74765,0.69911,0.77656,0.6967,0.78049,0.6835,0.84287,0.68597,0.87564,0.68966,0.88426,0.72248,0.90011,0.74086,0.90547,0.78273,0.91407,0.79324,0.91981,0.79985,0.93402,0.7987,0.93854,0.73088,0.94234,0.68815,0.93934,0.65043,0.93585,0.60768,0.92561,0.55863,0.91688,0.54015,0.90924,0.53818,0.88766,0.53281,0.88612,0.55546,0.71645,0.55804,0.71619,0.56345,0.66703,0.56605,0.66547,0.55081,0.63975,0.52105,0.56115,0.50566,0.56759,0.49625,0.58941,0.50246,0.58745,0.48637,0.61385,0.47853,0.62971,0.45671,0.69646,0.455,0.71799,0.43566,0.75935,0.42334,0.79645,0.42385,0.80758,0.41654,0.82277,0.40982,0.85101,0.40884,0.88285,0.39591,0.89062,0.39318,0.90795,0.38906,0.91229,0.37581,0.91821,0.34872,0.92235,0.34555,0.9244,0.33131,0.93209,0.25612,0.94141,0.23375,0.94145,0.18328,0.9344,0.17727,0.93068,0.18642,0.91719,0.22824,0.90558,0.23312,0.90359,0.26404,0.88931,0.26694,0.88633,0.25444,0.88121,0.26926,0.87916,0.26923,0.87091,0.27522,0.86708,0.27599,0.85977,0.29556,0.75858,0.30976,0.68879,0.31712,0.66098,0.32494,0.64626,0.32118,0.63328,0.32528,0.60894,0.32597,0.56638,0.32199,0.56104,0.31178,0.56148,0.29462,0.56221,0.27482,0.55403,0.28986,0.58014,0.28247,0.58427,0.27458,0.58458,0.22035,0.55709,0.20588,0.54439,0.20743,0.53235,0.20723,0.53091,0.20342,0.50574,0.20462,0.49631,0.20634,0.49362,0.20407,0.45893,0.20008,0.41834,0.19855,0.39519,0.20786,0.38489,0.20778,0.34616,0.21011,0.33353,0.19281,0.32777,0.1978,0.32114,0.25469,0.25014,0.27661,0.23079,0.2707,0.2281,0.28537,0.22214,0.30447,0.21887,0.34929,0.20878,0.43012,0.19725,0.44608,0.19148,0.42842,0.16954,0.4197,0.16931,0.4002,0.15018,0.39452,0.13937,0.40085,0.13065,0.40068,0.1262,0.39124,0.11054,0.39171,0.10192,0.39518,0.09772,0.41714,0.08717,0.42636,0.07646,0.4528,0.06714,0.32633,0.35151,0.3373,0.36903,0.33393,0.39838,0.33561,0.42732,0.33561,0.45381,0.32211,0.47827,0.31114,0.4905,0.32464,0.50191,0.33084,0.35871,0.31926,0.35924,0.31193,0.36219,0.29605,0.38559,0.30675,0.41096,0.30322,0.4362,0.28628,0.46996,0.27402,0.4927,0.29559,0.51467,0.30726,0.52791,0.48599,0.20997,0.51253,0.21195,0.54089,0.21063,0.55279,0.20908,0.5743,0.19715,0.69658,0.30988,0.68604,0.41358,0.69658,0.42564,0.72764,0.33721,0.73818,0.34632,0.74928,0.34713,0.76592,0.34418,0.77147,0.34766,0.75261,0.37419,0.44464,0.32266,0.60617,0.32447,0.52017,0.2804,0.45753,0.14048,0.57581,0.1387,0.52259,0.16905,0.52554,0.19655,0.51446,0.1112,0.45817,0.14744,0.4682,0.14497,0.48825,0.14424,0.49378,0.14645,0.49523,0.14978,0.48555,0.15037,0.46997,0.15037,0.54574,0.14222,0.53932,0.14669,0.54516,0.147,0.55638,0.14927,0.56604,0.1487,0.57424,0.14608,0.5787,0.14437,0.56995,0.14241,0.55741,0.14214],"triangles":[157,66,67,67,68,107,70,106,68,70,68,69,71,106,70,105,106,71,65,36,37,66,36,65,104,105,71,65,37,38,64,65,38,72,104,71,103,104,72,102,103,72,39,64,38,73,102,72,39,63,64,39,62,63,40,62,39,41,62,40,101,102,73,74,101,73,42,43,62,42,62,41,75,101,74,76,77,101,76,101,75,43,61,62,77,100,101,78,100,77,97,98,99,78,99,100,78,80,99,80,97,99,61,43,60,59,60,44,43,44,60,95,96,97,45,59,44,78,79,80,95,97,80,84,95,80,59,57,58,46,59,45,80,81,83,59,56,57,81,82,83,84,94,95,80,83,84,85,94,84,46,56,59,55,56,46,86,94,85,93,94,86,89,90,91,47,55,46,51,53,50,54,55,47,54,47,48,87,93,86,92,93,87,88,91,92,88,89,91,92,87,88,53,54,48,53,48,49,53,49,50,52,53,51,205,197,189,198,193,197,199,198,197,201,205,204,205,199,197,200,205,201,200,199,205,187,194,198,187,198,199,187,199,200,189,0,1,149,0,189,147,148,149,189,147,149,146,144,145,185,143,147,146,147,144,143,144,147,185,142,143,1,2,4,4,2,3,5,189,4,5,7,189,7,5,6,8,189,7,186,8,9,147,189,185,141,142,185,4,189,1,186,189,8,205,189,186,189,192,185,204,205,186,11,203,10,197,192,189,10,203,186,204,186,203,191,185,192,202,204,203,193,192,197,190,185,191,201,204,202,194,193,198,140,141,185,140,185,190,195,191,192,195,192,193,195,193,194,196,191,195,190,191,196,203,12,13,9,10,186,11,12,203,14,203,13,202,203,14,138,139,140,190,138,140,14,201,202,14,200,201,138,187,137,196,138,190,195,194,187,187,172,188,14,187,200,14,15,187,15,172,187,172,15,16,171,188,172,187,196,195,188,137,187,196,187,138,188,168,137,170,188,171,169,168,188,170,169,188,131,132,133,184,169,170,17,20,173,18,20,17,19,20,18,173,20,21,136,168,135,168,136,137,184,182,135,134,135,182,168,184,135,184,168,169,17,171,16,17,184,171,150,127,129,128,129,127,131,133,134,176,173,21,21,179,176,22,179,21,22,23,179,180,179,23,134,130,131,178,177,176,179,178,176,24,180,23,134,182,130,150,130,182,150,129,130,160,126,127,180,24,25,158,150,182,127,150,160,159,150,158,26,180,25,159,160,150,151,158,182,171,172,16,184,17,173,180,181,178,180,178,179,125,126,160,161,125,160,159,158,151,160,159,151,161,160,151,152,161,151,184,170,171,173,183,184,27,180,26,181,180,27,28,181,27,162,161,152,29,181,28,174,176,177,173,174,183,173,176,174,181,174,177,181,177,178,161,123,124,181,29,175,181,175,174,174,153,152,162,152,153,161,162,123,163,162,153,30,175,29,31,175,30,174,154,153,163,153,154,123,162,122,125,161,124,163,122,162,32,175,31,33,175,32,164,122,163,164,163,154,182,184,183,155,164,154,156,164,155,164,121,122,165,164,156,165,121,164,66,157,155,156,155,157,33,154,175,175,154,174,35,33,34,166,165,156,166,156,157,182,152,151,174,182,183,167,166,157,165,120,121,166,119,165,165,119,120,166,118,119,117,118,166,167,111,117,167,117,166,116,117,111,115,116,111,108,167,157,109,111,167,152,182,174,33,66,154,35,66,33,66,155,154,67,108,157,108,109,167,110,111,109,67,107,108,112,114,111,114,115,111,113,114,112,66,35,36,106,107,68],"vertices":[2,1,-6.48,585.17,0.73,3,-16.4,181.38,0.27,2,1,28.82,584.46,0.73,3,18.89,180.67,0.27,2,1,50,581.01,0.73,3,40.07,177.22,0.27,2,1,60.74,574.71,0.73,3,50.81,170.91,0.27,2,1,67.02,557.03,0.73,3,57.09,153.24,0.27,2,1,72.42,548.63,0.73,3,62.49,144.84,0.27,2,1,82.02,541.63,0.73,3,72.09,137.84,0.27,2,1,87.12,527.32,0.73,3,77.19,123.53,0.27,2,1,91.32,504.8,0.73,3,81.39,101.01,0.27,2,1,91.76,480.6,0.82,3,81.83,76.81,0.18,2,1,94.69,478.3,0.82,3,84.76,74.51,0.18,2,1,100.59,454.57,0.73,3,90.67,50.78,0.27,2,1,100.23,447.45,0.73,3,90.3,43.65,0.27,2,1,85.05,412.77,0.74262,3,75.13,8.97,0.25738,2,1,78.25,410.15,0.71775,3,68.32,6.36,0.28225,2,1,66.07,374.72,0.84296,3,56.14,-29.07,0.15704,3,1,70.61,356.15,0.94713,2,196.85,-69.9,0.01306,3,60.68,-47.64,0.03981,2,1,151.29,329.68,0.90619,2,170.38,-150.58,0.09381,2,1,180.77,326.46,0.93638,2,167.16,-180.06,0.06362,2,1,195.28,319.73,0.94271,2,160.44,-194.57,0.05729,2,1,207.1,303.95,0.93065,2,144.65,-206.39,0.06935,2,1,256.93,202.87,0.95,2,43.57,-256.22,0.05,2,1,277.7,174.6,0.95,2,15.31,-276.99,0.05,2,1,280.14,161.46,0.95,2,2.16,-279.43,0.05,2,1,288.5,145.16,0.95,2,-14.14,-287.78,0.05,2,1,300.62,95.69,0.95,2,-63.61,-299.91,0.05,2,1,297.4,83.7,0.95,2,-75.6,-296.69,0.05,2,1,248.87,18.07,0.95,2,-141.23,-248.15,0.05,2,1,234.58,0.12,0.95,2,-159.18,-233.87,0.05,2,1,230.82,-4.54,0.95,2,-163.84,-230.1,0.05,2,1,194.03,-57.21,0.95,2,-216.51,-193.32,0.05,2,1,191.83,-59.09,0.95,2,-218.39,-191.12,0.05,2,1,171.95,-89.91,0.95,2,-249.21,-171.24,0.05,2,1,160.69,-94.11,0.95,2,-253.41,-159.98,0.05,1,1,169.5,-155,1,1,1,151.14,-163.63,1,2,1,162.33,-305.53,0.44961,0,195.2,547.69,0.55039,2,1,164.65,-355.99,0.07046,0,197.52,497.23,0.92954,1,0,197.94,451.46,1,1,0,191.7,363.1,1,1,0,190.13,294.74,1,1,0,186.29,284.65,1,1,0,186.47,235.99,1,1,0,184.51,229.38,1,1,0,173.78,124.38,1,1,0,175.79,69.23,1,1,0,178.8,54.72,1,1,0,205.48,28.05,1,1,0,220.42,19.03,1,1,0,254.46,4.56,1,1,0,263,-5.1,1,1,0,268.37,-29.01,1,1,0,267.44,-36.62,1,1,0,212.3,-43.02,1,1,0,177.57,-37.97,1,1,0,146.9,-32.1,1,1,0,112.15,-14.86,1,1,0,72.27,-0.16,1,1,0,57.24,12.69,1,1,0,55.64,49.01,1,1,0,51.27,51.61,1,1,0,69.69,337.16,1,1,0,71.78,337.6,1,1,0,76.18,420.33,1,1,0,78.29,422.96,1,1,0,65.91,466.24,1,2,1,8.84,-254.69,0.35744,0,41.71,598.52,0.64256,2,1,-3.67,-265.53,0.10854,0,29.2,587.68,0.89146,1,0,21.55,550.96,1,1,0,26.6,554.26,1,1,0,13.52,509.84,1,1,0,7.15,483.14,1,1,0,-10.59,370.79,1,1,0,-11.99,334.56,1,1,0,-27.71,264.95,1,1,0,-37.72,202.51,1,1,0,-37.31,183.78,1,1,0,-43.25,158.21,1,1,0,-48.71,110.7,1,1,0,-49.52,57.1,1,1,0,-60.02,44.02,1,1,0,-62.24,14.87,1,1,0,-65.59,7.56,1,1,0,-76.37,-2.41,1,1,0,-98.39,-9.38,1,1,0,-100.97,-12.82,1,1,0,-112.54,-25.77,1,1,0,-173.67,-41.45,1,1,0,-191.86,-41.52,1,1,0,-232.89,-29.66,1,1,0,-237.78,-23.4,1,1,0,-230.34,-0.69,1,1,0,-196.34,18.84,1,1,0,-192.38,22.2,1,1,0,-167.24,46.23,1,1,0,-164.88,51.24,1,1,0,-175.04,59.86,1,1,0,-162.99,63.31,1,1,0,-163.01,77.2,1,1,0,-158.15,83.64,1,1,0,-157.52,95.94,1,1,0,-141.61,266.25,1,1,0,-130.06,383.7,1,1,0,-124.09,430.51,1,2,1,-150.59,-397.93,0.04128,0,-117.72,455.28,0.95872,3,1,-153.65,-376.09,0.28647,3,-163.58,-779.88,0,0,-120.78,477.12,0.71353,3,1,-150.31,-335.11,0.66657,3,-160.24,-738.91,0,0,-117.44,518.1,0.33343,2,1,-149.75,-263.49,1,3,-159.68,-667.28,0,3,1,-153,-254.51,0.98637,2,-413.81,153.71,0.01363,3,-162.92,-658.3,0,3,1,-161.3,-255.24,0.98073,2,-414.54,162.01,0.01927,3,-171.23,-659.03,0,3,1,-175.25,-256.47,0.9748,2,-415.77,175.96,0.0252,3,-185.17,-660.26,0,3,1,-191.34,-242.71,0.9492,2,-402.01,192.06,0.0508,3,-201.27,-646.51,0,2,1,-179.12,-286.64,1,3,-189.05,-690.43,0,2,1,-185.12,-293.6,1,2,-452.9,185.83,0,1,1,-191.53,-294.13,1,3,1,-235.63,-247.85,0.96168,2,-407.15,236.34,0.03832,3,-245.56,-651.65,0,3,1,-247.39,-226.48,0.94662,2,-385.78,248.1,0.05338,3,-257.32,-630.27,0,3,1,-246.13,-206.22,0.94338,2,-365.52,246.84,0.05662,3,-256.06,-610.01,0,3,1,-246.29,-203.8,0.94279,2,-363.1,247,0.05721,3,-256.22,-607.59,0,2,1,-249.39,-161.44,0.95,2,-320.74,250.1,0.05,2,1,-248.41,-145.56,0.95,2,-304.86,249.12,0.05,2,1,-247.02,-141.04,0.95,2,-300.34,247.73,0.05,2,1,-248.86,-82.65,0.95,2,-241.95,249.58,0.05,2,1,-252.1,-14.34,0.95,2,-173.63,252.81,0.05,2,1,-253.35,24.62,0.95,2,-134.68,254.06,0.05,2,1,-245.78,41.96,0.95,2,-117.34,246.49,0.05,2,1,-245.85,107.13,0.95,2,-52.17,246.56,0.05,2,1,-243.95,128.4,0.95,2,-30.9,244.66,0.05,2,1,-258.01,138.09,0.95,2,-21.21,258.72,0.05,2,1,-253.96,149.24,0.95,2,-10.06,254.67,0.05,2,1,-207.71,268.75,0.95,2,109.45,208.42,0.05,2,1,-189.89,301.31,0.95,2,142.01,190.6,0.05,2,1,-194.69,305.84,0.95,2,146.54,195.41,0.05,2,1,-182.77,315.86,0.95,2,156.56,183.48,0.05,2,1,-167.24,321.36,0.93248,2,162.06,167.95,0.06752,2,1,-130.8,338.35,0.9086,2,179.05,131.51,0.0914,2,1,-65.08,357.75,0.96642,3,-75.01,-46.04,0.03358,2,1,-52.11,367.46,0.75002,3,-62.04,-36.33,0.24998,2,1,-66.46,404.4,0.74936,3,-76.39,0.6,0.25064,2,1,-73.55,404.79,0.79706,3,-83.48,0.99,0.20294,2,1,-89.41,436.98,0.73,3,-99.34,33.18,0.27,2,1,-94.03,455.17,0.73,3,-103.96,51.38,0.27,2,1,-88.88,469.85,0.78184,3,-98.81,66.05,0.21816,2,1,-89.01,477.34,0.80688,3,-98.94,73.54,0.19312,2,1,-96.69,503.69,0.73,3,-106.62,99.89,0.27,2,1,-96.31,518.2,0.73,3,-106.24,114.41,0.27,2,1,-93.48,525.26,0.73,3,-103.41,121.47,0.27,2,1,-75.64,543.02,0.73,3,-85.56,139.23,0.27,2,1,-68.14,561.04,0.73,3,-78.07,157.25,0.27,2,1,-46.64,576.72,0.73,3,-56.57,172.93,0.27,2,1,-149.46,98.14,0.86934,2,-61.16,150.17,0.13066,2,1,-140.54,68.65,0.83684,2,-90.65,141.26,0.16316,2,1,-143.29,19.25,0.92116,2,-140.05,144,0.07884,2,1,-141.92,-29.45,0.95,2,-188.75,142.63,0.05,2,1,-141.92,-74.04,0.95,2,-233.34,142.63,0.05,2,1,-152.89,-115.2,0.95,2,-274.5,153.6,0.05,2,1,-161.81,-135.78,0.95,2,-295.08,162.52,0.05,3,1,-150.83,-154.99,0.93554,2,-314.29,151.55,0.06446,3,-160.76,-558.78,0,2,1,-145.8,86.03,0.85299,2,-73.27,146.51,0.14701,2,1,-155.21,85.13,0.89485,2,-74.17,155.92,0.10515,2,1,-161.17,80.16,0.92214,2,-79.14,161.88,0.07786,2,1,-174.08,40.77,0.95,2,-118.53,174.79,0.05,2,1,-165.38,-1.92,0.95,2,-161.22,166.09,0.05,2,1,-168.25,-44.4,0.95,2,-203.7,168.96,0.05,2,1,-182.03,-101.22,0.95,2,-260.52,182.74,0.05,2,1,-191.99,-139.49,0.95,2,-298.79,192.7,0.05,3,1,-174.45,-176.47,0.93938,2,-335.77,175.16,0.06062,3,-184.38,-580.26,0,3,1,-164.97,-198.74,0.94551,2,-358.04,165.68,0.05449,3,-174.9,-602.54,0,2,1,-19.66,336.36,0.74718,3,-29.59,-67.44,0.25282,2,1,1.91,333.01,0.74498,3,-8.02,-70.79,0.25502,2,1,24.98,335.24,0.75269,3,15.05,-68.55,0.24731,2,1,34.65,337.84,0.76016,3,24.72,-65.95,0.23984,2,1,52.13,357.93,0.73747,3,42.2,-45.86,0.26253,2,1,151.55,168.2,0.87525,2,8.9,-150.84,0.12475,2,1,142.98,-6.33,0.92604,2,-165.63,-142.27,0.07396,2,1,151.55,-26.63,0.94892,2,-185.93,-150.84,0.05108,2,1,176.8,122.2,0.89961,2,-37.1,-176.09,0.10039,2,1,185.37,106.87,0.92017,2,-52.43,-184.66,0.07983,2,1,194.39,105.51,0.94034,2,-53.79,-193.68,0.05966,2,1,207.92,110.48,0.94996,2,-48.82,-207.21,0.05004,2,1,212.43,104.61,0.94996,2,-54.69,-211.72,0.05004,2,1,197.1,59.96,0.94977,2,-99.34,-196.39,0.05023,2,1,-53.28,146.68,0.84548,2,-12.62,53.99,0.15452,2,1,78.05,143.64,0.82779,2,-15.66,-77.34,0.17221,2,1,8.13,217.82,0.85974,2,58.52,-7.42,0.14026,2,1,-42.8,453.29,0.57756,3,-52.72,49.5,0.42244,2,1,53.36,456.3,0.57342,3,43.44,52.51,0.42658,2,1,10.09,405.21,0.46059,3,0.16,1.42,0.53941,2,1,12.5,358.94,0.64636,3,2.57,-44.86,0.35364,2,1,3.48,502.58,0.51907,3,-6.45,98.78,0.48093,2,1,-42.28,441.58,0.6077,3,-52.21,37.78,0.3923,3,1,-34.13,445.95,0.36347,3,-44.06,42.16,0.28855,5,6.23,-7.29,0.34798,3,1,-17.82,446.98,0.35211,3,-27.75,43.19,0.28553,5,5.86,9.05,0.36235,3,1,-13.33,443.24,0.44438,3,-23.25,39.45,0.34671,5,9.78,13.39,0.2089,2,1,-12.15,437.64,0.54543,3,-22.07,33.85,0.45457,2,1,-20.02,436.66,0.58554,3,-29.95,32.86,0.41446,2,1,-32.69,436.66,0.61032,3,-42.61,32.86,0.38968,3,1,28.91,450.38,0.25532,3,18.99,46.59,0.34997,4,4.08,-11.23,0.3947,3,1,23.69,442.86,0.42947,3,13.77,39.06,0.46895,4,11.73,-16.26,0.10157,3,1,28.44,442.33,0.46975,3,18.51,38.53,0.49486,4,12.14,-11.5,0.03539,2,1,37.57,438.51,0.5023,3,27.64,34.72,0.4977,2,1,45.42,439.46,0.50555,3,35.49,35.67,0.49445,3,1,52.09,443.87,0.48645,3,42.16,40.07,0.46798,4,9.99,12.1,0.04556,3,1,55.71,446.76,0.45149,3,45.78,42.97,0.41221,4,7.01,15.65,0.1363,3,1,48.6,449.99,0.33416,3,38.67,46.2,0.35808,4,3.96,8.46,0.30776,3,1,38.4,450.26,0.24658,3,28.47,46.47,0.33574,4,3.95,-1.75,0.41769],"hull":150,"edges":[0,298,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,58,60,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,290,292,292,294,294,296,296,298,56,58,60,62,302,304,304,306,306,308,308,310,310,312,312,314,314,216,300,316,316,302,300,318,318,320,320,322,322,324,324,326,326,328,328,330,330,332,332,334,216,218,218,220,334,218,274,336,336,338,338,340,340,342,342,344,344,30,346,348,348,350,346,352,352,354,354,356,356,358,358,360,360,362,362,350,380,382,382,384,384,386,386,388,388,390,390,392,392,380,394,396,396,398,398,400,400,402,402,404,404,406,406,408,408,410,410,394],"width":813,"height":1683}},"CaveScene/eyes 10-03":{"CaveScene/eyes 10-03":{"type":"mesh","uvs":[0.96479,0.34042,0.97535,0.38865,0.98199,0.47075,0.97259,0.55626,0.95994,0.57693,0.59646,0.76133,0.47413,0.78904,0.05331,0.46376,0.02903,0.4445,0.01676,0.35705,0.0327,0.29187,0.05041,0.27011,0.17513,0.21076,0.82283,0.42808,0.84274,0.33955,0.86189,0.32995,0.87281,0.36698,0.87861,0.42743,0.93981,0.48037,0.94878,0.36849,0.94305,0.53111,0.87407,0.49594,0.86642,0.56013,0.85358,0.58435,0.8315,0.51265,0.57446,0.57999,0.58705,0.49616,0.60297,0.50631,0.61408,0.60118,0.61851,0.65293,0.60856,0.73143,0.5836,0.76094,0.57271,0.68796,0.50916,0.61534,0.50182,0.51335,0.48303,0.48159,0.45982,0.54798,0.44245,0.59693,0.4589,0.72157,0.4838,0.78133,0.50025,0.75605,0.50737,0.69637,0.14036,0.34196,0.15649,0.24167,0.18756,0.23654,0.19695,0.27228,0.1916,0.33853,0.17689,0.39415,0.15735,0.40195,0.0639,0.29772,0.07191,0.3404,0.0675,0.39704],"triangles":[35,44,12,44,35,45,49,11,43,46,44,45,12,0,15,50,49,43,12,15,14,42,50,43,19,16,15,0,19,15,47,12,44,47,44,46,43,12,47,51,49,50,48,43,47,42,43,48,17,16,19,35,12,14,8,9,10,7,11,49,7,49,51,10,11,7,8,10,7,18,17,19,14,26,35,21,16,17,14,27,26,13,27,14,24,13,14,34,35,26,20,18,19,36,45,35,3,0,1,3,1,2,21,22,15,21,15,16,4,19,0,4,0,3,20,19,4,25,34,26,23,14,15,23,15,22,24,14,23,37,45,36,28,27,13,33,34,25,29,28,13,32,33,25,41,34,33,38,37,36,30,27,28,30,28,29,40,35,34,40,34,41,31,25,26,32,25,31,5,31,26,27,5,26,30,5,27,24,30,29,24,29,13,30,24,23,5,30,23,21,17,18,21,18,20,22,21,20,4,22,20,23,22,4,5,23,4,39,35,40,6,36,35,6,38,36,35,39,6,46,45,37,38,46,37,47,46,38,6,48,47,6,47,38,51,50,42,48,51,42,7,51,48,7,48,6,41,33,32,40,41,32,31,40,32,39,40,31,6,39,31,5,6,31,12,43,11],"vertices":[2,8,38.82,132.02,0.256,0,951.88,1319.42,0.744,2,8,49.17,154.44,0.184,0,973.71,1307.88,0.816,2,8,67.78,169.05,0.056,0,987.31,1288.52,0.944,1,0,967.53,1268.74,1,1,0,941.16,1264.21,1,1,0,184.67,1229.82,1,1,0,-69.84,1226.28,1,1,0,-944.21,1312.5,1,1,0,-994.67,1317.58,1,2,6,18.34,-196.78,0.112,0,-1019.95,1338.34,0.888,2,6,3.47,-163.44,0.456,0,-986.61,1353.2,0.544,2,6,-1.19,-126.55,0.56,0,-949.72,1357.86,0.44,2,6,-12.08,133.02,0.528,0,-690.15,1368.75,0.472,2,8,71.69,-162.14,0.048,0,656.38,1302.33,0.952,2,8,49.26,-121.63,0.256,0,698.03,1322.56,0.744,2,8,45.35,-81.92,0.264,0,737.9,1324.34,0.736,2,8,53.05,-58.87,0.168,0,760.51,1315.42,0.832,2,8,66.67,-46.22,0.056,0,772.41,1301.14,0.944,2,8,73.7,81.48,0.04,0,899.55,1287.28,0.96,2,8,46.77,99.02,0.2,0,918.5,1313.24,0.8,1,0,906.15,1275.33,1,1,0,762.77,1285.22,1,1,0,746.7,1270.39,1,1,0,719.92,1265.03,1,1,0,674.19,1282.34,1,2,7,67.14,74.91,0.23999,0,139.41,1272.77,0.76001,2,7,48.02,101.44,0.424,0,165.8,1292.08,0.576,2,7,51.01,134.52,0.40001,0,198.9,1289.32,0.59999,2,7,73.63,157.21,0.2,0,221.75,1266.86,0.8,2,7,85.91,166.2,0.104,0,230.82,1254.65,0.896,2,7,103.89,145.17,0.016,0,209.92,1236.52,0.984,1,0,157.93,1230.22,1,2,7,92.33,70.79,0.064,0,135.46,1247.55,0.936,2,7,72.88,-61.06,0.264,0,3.48,1266.07,0.736,2,7,48.75,-75.87,0.432,0,-11.5,1290.1,0.568,2,7,40.59,-114.82,0.488,0,-50.5,1297.98,0.512,2,7,55.22,-163.37,0.37601,0,-98.95,1283.01,0.62399,2,7,66,-199.71,0.28,0,-135.21,1271.98,0.72,2,7,95.78,-166.03,0.09601,0,-101.33,1242.43,0.90399,2,7,110.73,-114.52,0.008,0,-49.71,1227.85,0.992,2,7,105.45,-80.21,0.04799,0,-15.44,1233.37,0.95201,2,7,91.77,-65.14,0.13601,0,-0.46,1247.16,0.86399,1,0,-762.83,1338.89,1,2,6,-5.29,94.16,0.416,0,-729.01,1361.96,0.584,2,6,-5.75,158.79,0.344,0,-664.38,1362.42,0.656,1,0,-644.95,1353.83,1,1,0,-656.25,1338.46,1,1,0,-686.99,1325.81,1,1,0,-727.67,1324.45,1,2,6,5.59,-98.57,0.352,0,-921.74,1351.08,0.648,2,6,15.77,-82.03,0.144,0,-905.2,1340.9,0.856,2,6,28.91,-91.36,0.024,0,-914.53,1327.76,0.976],"hull":13,"edges":[26,28,28,30,30,32,32,34,36,38,38,0,0,2,2,4,4,6,6,8,8,40,40,36,34,42,42,44,44,46,46,48,48,26,50,52,52,54,54,56,56,58,58,60,60,10,10,62,62,64,64,50,66,68,68,70,70,72,72,74,74,76,76,12,12,78,78,80,80,82,82,66,84,86,86,24,24,88,88,90,90,92,92,94,94,96,96,84,18,20,20,22,22,98,98,100,100,102,102,14,14,16,16,18,22,24,12,14,24,0,8,10,10,12],"width":3112,"height":350}}}}],"animations":{"1":{"slots":{"CaveScene/eyes 10-03":{"attachment":[{"name":null}]}},"bones":{"sally big3":{"translate":[{},{"time":1,"y":92.46,"curve":0.616,"c3":0.75},{"time":2}]},"sally big4":{"translate":[{},{"time":1.5,"x":-10.01,"y":29.58},{"time":2}],"shear":[{},{"time":1,"x":5.16},{"time":2}]},"sally big":{"scale":[{},{"time":1,"y":1.01},{"time":2}]},"sally big6":{"translate":[{"y":2.33,"curve":"stepped"},{"time":0.8333,"y":2.33},{"time":1,"x":-2.18,"y":-13.49},{"time":1.1667},{"time":2,"y":2.33}]},"sally big2":{"translate":[{"y":2.33,"curve":"stepped"},{"time":0.8333,"y":2.33},{"time":1,"x":-2.18,"y":-13.49},{"time":1.1667},{"time":2,"y":2.33}]}}},"2":{"slots":{"CaveScene/eyes 10-03":{"attachment":[{"name":"CaveScene/eyes 10-03"}]},"sally big":{"attachment":[{"name":null}]}},"bones":{"CaveScene/eyes 10-4":{"translate":[{"curve":"stepped"},{"time":2.1667},{"time":2.3333,"y":-206.19},{"time":2.5,"curve":"stepped"},{"time":3}]},"CaveScene/eyes 10-03":{"translate":[{"curve":"stepped"},{"time":0.1667},{"time":0.3333,"y":-81.6},{"time":0.5,"curve":"stepped"},{"time":2.1667},{"time":2.3333,"y":-81.6},{"time":2.5,"curve":"stepped"},{"time":3}]},"CaveScene/eyes 10-3":{"translate":[{"curve":"stepped"},{"time":1},{"time":1.1667,"y":-145.63},{"time":1.3333,"curve":"stepped"},{"time":3}]}},"deform":{"default":{"CaveScene/eyes 10-03":{"CaveScene/eyes 10-03":[{}]},"sally big":{"block 3/s-b3-with-torch":[{}]}}}}}}');
;// CONCATENATED MODULE: ./assets/spine/smileDrake/skeleton.png
var skeleton_namespaceObject = __webpack_require__.p + "assets/spine/smileDrake/skeleton.png";
;// CONCATENATED MODULE: ./assets/spine/smileDrake/skeleton.atlas
var skeleton_atlas_namespaceObject = "\nIdle all.png\nsize: 512,512\nformat: RGBA8888\nfilter: Linear,Linear\nrepeat: none\nJungleScene/drake smile right\n  rotate: false\n  xy: 2, 2\n  size: 202, 415\n  orig: 202, 415\n  offset: 0, 0\n  index: -1\n";
;// CONCATENATED MODULE: ./assets/spine/smileDrake/skeleton.json
var spine_smileDrake_skeleton_namespaceObject = JSON.parse('{"skeleton":{"hash":"VMIMMVt1gJ+gwN/Vfl9yc39M5vo","spine":"3.8.75","x":-972.66,"y":-25.56,"width":2007.26,"height":1530.02,"images":"./sally/","audio":""},"bones":[{"name":"root","x":47.29,"y":-20.27,"color":"f23c3cff"},{"name":"sally big","parent":"root","x":32.87,"y":853.21,"color":"f23c3cff"},{"name":"sally big3","parent":"sally big","rotation":90,"x":0.71,"y":159.3,"color":"f23c3cff"},{"name":"sally big4","parent":"sally big","x":9.93,"y":403.79,"color":"f23c3cff"},{"name":"sally big2","parent":"sally big","length":50,"rotation":-91.47,"x":40.25,"y":452.58,"scaleX":0.9569,"scaleY":0.9569,"color":"f23c3cff"},{"name":"sally big6","parent":"sally big","length":50,"rotation":-87.66,"x":-27.1,"y":450.88,"color":"f23c3cff"},{"name":"CaveScene/eyes 10-03","parent":"root","length":98.9,"rotation":-90,"x":-823.17,"y":1356.67,"color":"f23c3cff"},{"name":"CaveScene/eyes 10-3","parent":"root","length":110.62,"rotation":-89.6,"x":64.02,"y":1339.38,"color":"f23c3cff"},{"name":"CaveScene/eyes 10-4","parent":"root","length":144.91,"rotation":-93.07,"x":822.13,"y":1365.24,"color":"f23c3cff"}],"slots":[{"name":"sally big","bone":"sally big6","attachment":"drake smile right"},{"name":"CaveScene/eyes 10-03","bone":"CaveScene/eyes 10-4"}],"skins":[{"name":"default","attachments":{"sally big":{"drake smile right":{"type":"mesh","path":"JungleScene/drake smile right","uvs":[0.51013,0.03638,0.54984,0.04059,0.5741,0.04549,0.56791,0.05525,0.58966,0.0616,0.59855,0.08319,0.5856,0.08658,0.56789,0.09102,0.56879,0.10681,0.56097,0.11784,0.56546,0.1231,0.56712,0.13205,0.56176,0.1509,0.53724,0.17023,0.53819,0.1823,0.53867,0.18327,0.61532,0.19183,0.67395,0.20442,0.69468,0.2138,0.70393,0.23784,0.72689,0.25887,0.72777,0.28435,0.75285,0.31443,0.761,0.33083,0.77662,0.33424,0.81576,0.30384,0.8376,0.30218,0.84429,0.29524,0.87168,0.28871,0.87679,0.2991,0.89299,0.3094,0.90817,0.32885,0.88535,0.34969,0.84071,0.36163,0.80824,0.36369,0.73837,0.37644,0.67064,0.37877,0.67119,0.37333,0.64987,0.34833,0.64641,0.33614,0.63985,0.3345,0.62129,0.31661,0.60749,0.31818,0.59815,0.33781,0.59714,0.35725,0.59987,0.36065,0.61056,0.39507,0.60948,0.41137,0.60552,0.41294,0.6186,0.44207,0.61685,0.4519,0.6072,0.47098,0.61053,0.50002,0.61969,0.55038,0.61682,0.54999,0.6225,0.58927,0.62172,0.61154,0.61862,0.62068,0.6227,0.64289,0.6139,0.66294,0.62075,0.69325,0.62174,0.72545,0.62936,0.74877,0.63098,0.78836,0.62843,0.79527,0.64706,0.81147,0.64846,0.82057,0.66577,0.8288,0.66407,0.8348,0.70168,0.8463,0.71469,0.84939,0.75861,0.84146,0.78086,0.84704,0.78646,0.85008,0.80319,0.86916,0.79633,0.87747,0.75682,0.8853,0.67424,0.88937,0.61848,0.88029,0.62112,0.88232,0.54572,0.88118,0.53716,0.88036,0.52453,0.84935,0.52845,0.83525,0.54235,0.83258,0.51289,0.81716,0.50712,0.79878,0.5041,0.76469,0.49826,0.7096,0.49756,0.66634,0.51229,0.64615,0.5119,0.64502,0.46903,0.59156,0.44307,0.5523,0.43358,0.55202,0.39437,0.58457,0.38059,0.60042,0.35711,0.6191,0.35282,0.62754,0.35278,0.63985,0.34842,0.6529,0.33483,0.68321,0.30178,0.73483,0.30208,0.75246,0.29044,0.77806,0.27482,0.8059,0.2786,0.8211,0.25872,0.85404,0.26095,0.86297,0.28913,0.86888,0.28693,0.88574,0.28655,0.88941,0.33574,0.89883,0.34956,0.90316,0.36575,0.94927,0.30088,0.95862,0.23359,0.95774,0.20489,0.95349,0.1893,0.94551,0.15741,0.92468,0.1676,0.89976,0.16456,0.88343,0.17626,0.87718,0.17596,0.85798,0.17157,0.85366,0.15011,0.8233,0.14639,0.79926,0.1524,0.77401,0.15624,0.76724,0.15535,0.748,0.1831,0.71471,0.1887,0.66558,0.20022,0.63495,0.21764,0.60845,0.22253,0.54399,0.2523,0.4867,0.2723,0.43573,0.15633,0.38749,0.13719,0.37735,0.13607,0.35343,0.17666,0.3028,0.1803,0.29755,0.17872,0.27801,0.2026,0.25554,0.21104,0.23515,0.22858,0.22177,0.34433,0.1912,0.40206,0.18289,0.41002,0.17775,0.40833,0.15767,0.39494,0.14709,0.37145,0.14036,0.35669,0.13143,0.35076,0.12551,0.35093,0.11143,0.37095,0.10374,0.363,0.08542,0.38158,0.05222,0.39519,0.05353,0.41348,0.04433,0.44258,0.03581,0.301,0.29431,0.30846,0.31345,0.32762,0.33234,0.33613,0.34968,0.33879,0.35485,0.33347,0.36805,0.32017,0.38357,0.31058,0.39703,0.31484,0.40168,0.3042,0.40789,0.28823,0.39056,0.27013,0.37167,0.25629,0.36598,0.26162,0.35459,0.26162,0.3489,0.27067,0.34605,0.28876,0.32898,0.29621,0.31992,0.424,0.16657,0.45314,0.1744,0.47384,0.18036,0.50259,0.18111,0.51601,0.18111,0.4501,0.11658,0.46488,0.11444,0.47807,0.11434,0.48626,0.1159,0.48786,0.11881,0.48086,0.12017,0.46588,0.12085,0.4525,0.1192,0.5286,0.1154,0.52724,0.1189,0.53003,0.11999,0.53747,0.12032,0.54604,0.12041,0.55137,0.12014,0.55398,0.11881,0.55472,0.1167,0.54424,0.1148,0.53214,0.11477,0.52815,0.11034,0.53896,0.10771,0.55059,0.10508,0.55649,0.1062,0.49622,0.11344,0.48033,0.11241,0.46379,0.10946,0.44758,0.10922,0.50663,0.23536,0.40245,0.28751,0.59152,0.29051,0.51862,0.14119,0.51453,0.17002,0.45421,0.13771,0.55593,0.13622,0.50175,0.09646],"triangles":[186,208,207,190,185,186,189,186,187,186,207,187,185,208,186,187,207,206,199,200,205,201,203,200,192,202,201,191,184,185,184,208,185,115,113,114,115,112,113,112,115,111,115,116,111,111,116,118,116,117,118,119,120,118,118,120,111,111,122,108,122,111,120,120,121,122,111,108,110,77,70,76,77,69,70,69,77,78,110,108,109,75,76,74,73,70,72,72,70,71,70,73,76,80,78,79,78,80,82,82,80,81,78,82,84,84,82,83,78,68,69,68,84,66,68,78,84,74,76,73,108,123,107,108,122,123,123,124,107,107,124,106,124,125,106,68,66,67,84,65,66,84,64,65,84,85,64,125,105,106,125,126,105,85,86,64,126,127,105,105,127,104,104,127,128,64,86,63,63,86,87,87,62,63,104,128,103,103,129,102,102,129,130,129,103,128,87,61,62,87,88,61,102,130,101,88,60,61,130,131,101,60,89,59,59,89,90,89,60,88,101,131,100,131,132,100,59,90,58,100,132,99,90,91,58,91,57,58,57,91,56,99,132,98,98,132,133,98,133,97,56,91,92,97,133,96,56,92,55,133,134,96,96,134,95,92,54,55,92,93,54,95,134,94,54,93,52,134,135,94,135,136,94,94,136,51,51,136,170,51,170,169,166,51,169,166,169,167,52,93,51,93,94,51,48,166,165,46,48,165,45,165,44,48,51,166,53,54,52,44,165,43,43,165,211,51,48,50,50,48,49,136,137,171,172,171,137,136,171,170,172,137,173,47,48,46,45,46,165,170,168,169,170,171,168,169,168,167,168,171,167,171,172,167,173,137,139,167,172,166,176,166,174,36,37,35,137,138,139,35,24,34,35,23,24,23,35,38,35,37,38,165,166,176,176,177,163,173,174,172,166,172,174,211,210,212,165,176,164,164,176,163,173,139,174,34,24,33,33,24,26,24,25,26,32,33,30,29,26,27,26,30,33,212,43,211,165,164,211,139,175,174,174,175,176,139,140,175,32,30,31,29,30,26,164,163,211,176,175,177,38,39,23,177,175,140,43,212,42,23,39,22,22,39,41,39,40,41,177,178,163,178,162,163,163,162,211,177,140,178,140,141,178,178,161,162,178,141,161,42,212,41,41,21,22,41,212,21,162,161,211,27,28,29,141,142,161,210,181,182,181,210,147,142,143,161,146,211,161,19,212,210,212,20,21,212,19,20,19,17,18,17,19,16,16,19,210,16,210,15,180,181,147,147,148,180,148,179,180,144,145,161,161,143,144,161,145,146,211,146,210,146,147,210,15,183,14,15,210,183,210,182,183,183,13,14,183,182,214,182,181,214,183,214,13,181,180,214,214,180,215,148,149,179,214,215,213,189,213,215,180,179,215,12,213,216,196,216,195,196,197,216,13,213,12,13,214,213,216,213,195,189,215,190,213,189,188,179,149,215,149,150,215,12,216,11,215,150,191,213,194,195,213,188,193,213,193,194,193,188,206,152,155,151,191,150,184,150,151,184,184,155,209,184,151,155,215,191,190,11,216,197,11,197,10,10,198,9,198,10,197,152,153,155,155,153,154,191,185,190,190,186,189,197,196,200,194,201,195,196,195,200,195,201,200,189,187,188,197,200,198,193,192,194,194,192,201,193,206,192,188,187,206,198,199,9,198,200,199,9,199,8,199,205,8,184,209,208,206,202,192,200,204,205,200,203,204,201,202,203,202,206,217,206,207,217,207,208,217,202,217,203,208,209,217,158,217,209,203,217,204,205,7,8,205,204,7,204,217,7,209,155,156,209,156,158,158,159,217,159,160,217,7,217,3,3,217,0,217,160,0,7,3,6,1,3,0,6,4,5,6,3,4,156,157,158,3,1,2],"vertices":[3,0,13.95,1523.78,0.3774,1,-18.92,670.57,0.3626,3,-28.85,266.78,0.26,3,0,45.95,1516.79,0.3774,1,13.08,663.58,0.3626,3,3.15,259.78,0.26,3,0,65.51,1508.68,0.3774,1,32.64,655.47,0.3626,3,22.71,251.68,0.26,3,0,60.52,1492.48,0.3774,1,27.65,639.27,0.3626,3,17.72,235.48,0.26,3,0,78.04,1481.97,0.38347,1,45.17,628.76,0.36843,3,35.24,224.96,0.2481,3,0,85.21,1446.17,0.3774,1,52.34,592.96,0.3626,3,42.41,189.16,0.26,3,0,74.77,1440.55,0.3774,1,41.9,587.34,0.3626,3,31.98,183.54,0.26,3,0,60.5,1433.18,0.3774,1,27.63,579.96,0.3626,3,17.7,176.17,0.26,3,0,61.22,1407,0.3774,1,28.35,553.79,0.3626,3,18.42,149.99,0.26,3,0,54.92,1388.72,0.3774,1,22.05,535.51,0.3626,3,12.12,131.72,0.26,3,0,58.54,1379.99,0.3774,1,25.67,526.78,0.3626,3,15.74,122.98,0.26,3,0,57.77,1350.64,0.3774,1,24.9,497.43,0.3626,3,14.97,93.63,0.26,3,0,55.55,1333.91,0.67183,1,22.68,480.7,0.06817,3,12.76,76.9,0.26,2,0,35.79,1301.85,0.74,3,-7.01,44.84,0.26,2,0,36.56,1281.85,0.74,3,-6.24,24.84,0.26,2,0,36.94,1280.24,0.74,3,-5.85,23.23,0.26,3,0,98.72,1266.05,0.45067,1,65.85,412.83,0.43299,2,253.53,-65.14,0.11634,3,0,145.98,1245.17,0.4437,1,113.11,391.95,0.4263,2,232.65,-112.4,0.13,3,0,162.69,1229.62,0.4437,1,129.82,376.41,0.4263,2,217.11,-129.11,0.13,3,0,170.15,1189.75,0.4437,1,137.28,336.54,0.4263,2,177.24,-136.57,0.13,3,0,188.65,1154.9,0.4437,1,155.78,301.68,0.4263,2,142.38,-155.07,0.13,3,0,189.36,1112.65,0.4437,1,156.49,259.44,0.4263,2,100.14,-155.78,0.13,3,0,209.58,1062.77,0.4437,1,176.71,209.56,0.4263,2,50.26,-175.99,0.13,3,0,216.15,1035.58,0.4437,1,183.28,182.36,0.4263,2,23.06,-182.57,0.13,3,0,228.74,1029.92,0.4437,1,195.87,176.71,0.4263,2,17.41,-195.16,0.13,3,0,260.28,1080.33,0.4437,1,227.41,227.12,0.4263,2,67.82,-226.7,0.13,3,0,277.89,1083.07,0.4437,1,245.02,229.86,0.4263,2,70.56,-244.3,0.13,3,0,283.28,1094.59,0.4437,1,250.41,241.38,0.4263,2,82.08,-249.7,0.13,3,0,305.35,1105.41,0.4437,1,272.48,252.2,0.4263,2,92.9,-271.77,0.13,3,0,309.48,1088.19,0.4437,1,276.61,234.98,0.4263,2,75.68,-275.89,0.13,3,0,322.53,1071.11,0.4437,1,289.66,217.9,0.4263,2,58.6,-288.95,0.13,3,0,334.77,1038.86,0.4437,1,301.9,185.65,0.4263,2,26.35,-301.18,0.13,3,0,316.37,1004.32,0.4437,1,283.5,151.1,0.4263,2,-8.2,-282.79,0.13,3,0,280.4,984.51,0.4437,1,247.53,131.3,0.4263,2,-28,-246.81,0.13,3,0,254.22,981.11,0.4437,1,221.35,127.89,0.4263,2,-31.41,-220.64,0.13,3,0,197.91,959.97,0.4437,1,165.04,106.75,0.4263,2,-52.55,-164.33,0.13,3,0,143.32,956.1,0.4437,1,110.44,102.89,0.4263,2,-56.41,-109.73,0.13,3,0,143.76,965.12,0.4437,1,110.89,111.91,0.4263,2,-47.39,-110.18,0.13,3,0,126.58,1006.56,0.4437,1,93.71,153.35,0.4263,2,-5.95,-92.99,0.13,3,0,123.79,1026.78,0.4437,1,90.92,173.57,0.4263,2,14.27,-90.21,0.13,3,0,118.5,1029.49,0.4437,1,85.63,176.28,0.4263,2,16.98,-84.92,0.13,3,0,103.54,1059.16,0.4437,1,70.67,205.94,0.4263,2,46.64,-69.96,0.13,3,0,92.41,1056.55,0.4437,1,59.54,203.34,0.4263,2,44.04,-58.83,0.13,3,0,84.89,1024.01,0.4437,1,52.02,170.8,0.4263,2,11.5,-51.31,0.13,3,0,84.08,991.77,0.4568,1,51.21,138.56,0.4132,2,-20.74,-50.49,0.13,3,0,86.28,986.14,0.4437,1,53.41,132.93,0.4263,2,-26.37,-52.69,0.13,3,0,94.89,929.06,0.4437,1,62.02,75.85,0.4263,2,-83.45,-61.3,0.13,3,0,94.02,902.04,0.4437,1,61.15,48.83,0.4263,2,-110.47,-60.44,0.13,3,0,90.83,899.44,0.4437,1,57.96,46.23,0.4263,2,-113.07,-57.25,0.13,2,0,101.37,851.15,0.51,1,68.5,-2.06,0.49,2,0,99.96,834.85,0.51,1,67.09,-18.36,0.49,2,0,92.18,803.21,0.51,1,59.31,-50,0.49,2,0,94.87,755.07,0.51,1,62,-98.14,0.49,1,0,102.25,671.56,1,1,0,99.94,672.21,1,1,0,104.51,607.09,1,1,0,103.89,570.16,1,1,0,101.39,555.02,1,1,0,104.68,518.19,1,1,0,97.58,484.94,1,1,0,103.1,434.69,1,1,0,103.9,381.3,1,1,0,110.04,342.63,1,1,0,111.35,277,1,1,0,109.29,265.55,1,1,0,124.31,238.68,1,1,0,125.44,223.6,1,1,0,139.39,209.95,1,1,0,138.02,200,1,1,0,168.33,180.93,1,1,0,178.82,175.8,1,1,0,214.22,188.95,1,1,0,232.15,179.7,1,1,0,236.66,174.67,1,1,0,250.15,143.03,1,1,0,244.62,129.25,1,1,0,212.77,116.27,1,1,0,146.22,109.52,1,1,0,101.28,124.58,1,1,0,103.4,121.22,1,1,0,42.63,123.1,1,1,0,35.73,124.46,1,1,0,25.55,175.87,1,1,0,28.71,199.25,1,1,0,39.91,203.67,1,1,0,16.17,229.24,1,1,0,11.52,259.71,1,1,0,9.08,316.24,1,1,0,4.38,407.58,1,1,0,3.81,479.31,1,1,0,15.68,512.79,1,1,0,15.38,514.65,1,1,0,-19.18,603.29,1,2,0,-40.11,668.39,0.51,1,-72.98,-184.82,0.49,2,0,-47.75,668.84,0.51,1,-80.62,-184.37,0.49,2,0,-79.36,614.88,0.79302,1,-112.23,-238.34,0.20699,1,0,-90.46,588.6,1,1,0,-109.39,557.63,1,1,0,-112.85,543.63,1,1,0,-112.88,523.22,1,1,0,-116.4,501.59,1,1,0,-127.35,451.33,1,1,0,-153.99,365.76,1,1,0,-153.74,336.52,1,1,0,-163.12,294.07,1,1,0,-175.72,247.92,1,1,0,-172.67,222.72,1,1,0,-188.69,168.11,1,1,0,-186.9,153.29,1,1,0,-164.18,143.5,1,1,0,-165.95,115.55,1,1,0,-166.26,109.46,1,1,0,-126.61,93.84,1,1,0,-115.47,86.66,1,1,0,-102.42,10.21,1,1,0,-154.71,-5.29,1,1,0,-208.95,-3.84,1,1,0,-232.07,3.22,1,1,0,-244.64,16.44,1,1,0,-270.35,50.98,1,1,0,-262.14,92.29,1,1,0,-264.58,119.37,1,1,0,-255.16,129.74,1,1,0,-255.39,161.56,1,1,0,-258.93,168.72,1,1,0,-276.23,219.07,1,1,0,-279.23,258.92,1,1,0,-274.39,300.78,1,1,0,-271.29,312.01,1,1,0,-272.01,343.92,1,1,0,-249.64,399.11,1,1,0,-245.12,480.57,1,1,0,-235.84,531.35,1,1,0,-221.8,575.29,1,2,0,-217.86,682.16,0.51,1,-250.73,-171.05,0.49,2,0,-193.87,777.15,0.51,1,-226.74,-76.06,0.49,3,0,-177.74,861.66,0.4437,1,-210.61,8.45,0.4263,2,-150.85,211.33,0.13,3,0,-271.21,941.63,0.66817,1,-304.09,88.42,0.20183,2,-70.88,304.8,0.13,3,0,-286.64,958.45,0.78484,1,-319.51,105.24,0.08516,2,-54.06,320.23,0.13,3,0,-287.55,998.12,0.54393,1,-320.42,144.9,0.32607,2,-14.4,321.13,0.13,3,0,-254.84,1082.06,0.4437,1,-287.71,228.84,0.4263,2,69.54,288.42,0.13,3,0,-251.9,1090.76,0.4437,1,-284.77,237.54,0.4263,2,78.24,285.48,0.13,3,0,-253.18,1123.16,0.45226,1,-286.05,269.95,0.43452,2,110.65,286.76,0.11322,3,0,-233.93,1160.41,0.4437,1,-266.8,307.19,0.4263,2,147.89,267.51,0.13,3,0,-227.12,1194.21,0.47072,1,-259.99,341,0.45226,2,181.7,260.7,0.07701,3,0,-212.98,1216.39,0.48062,1,-245.85,363.18,0.46177,2,203.88,246.56,0.05761,3,0,-119.69,1267.09,0.49096,1,-152.56,413.88,0.47171,2,254.58,153.28,0.03733,3,0,-73.16,1280.87,0.49231,1,-106.03,427.66,0.473,3,-115.96,23.86,0.03469,3,0,-66.74,1289.39,0.44293,1,-99.61,436.18,0.42556,3,-109.54,32.39,0.13151,3,0,-68.11,1322.69,0.3774,1,-100.98,469.47,0.3626,3,-110.91,65.68,0.26,3,0,-78.9,1340.23,0.38078,1,-111.77,487.01,0.36584,3,-121.7,83.22,0.25338,3,0,-97.83,1351.38,0.41027,1,-130.7,498.16,0.39419,3,-140.63,94.37,0.19554,3,0,-109.73,1366.19,0.41667,1,-142.6,512.98,0.40033,3,-152.53,109.19,0.18301,3,0,-114.51,1376,0.41565,1,-147.38,522.79,0.39935,3,-157.31,118.99,0.18499,3,0,-114.37,1399.34,0.39525,1,-147.24,546.13,0.37975,3,-157.17,142.33,0.22501,3,0,-98.23,1412.1,0.3774,1,-131.1,558.89,0.3626,3,-141.03,155.09,0.26,3,0,-104.64,1442.47,0.3774,1,-137.51,589.26,0.3626,3,-147.44,185.46,0.26,3,0,-89.66,1497.51,0.3774,1,-122.54,644.3,0.3626,3,-132.46,240.51,0.26,3,0,-78.7,1495.35,0.3774,1,-111.57,642.14,0.3626,3,-121.5,238.34,0.26,3,0,-63.95,1510.6,0.3774,1,-96.82,657.39,0.3626,3,-106.75,253.6,0.26,3,0,-40.5,1524.73,0.3774,1,-73.37,671.52,0.3626,3,-83.3,267.72,0.26,3,0,-154.61,1096.14,0.4437,1,-187.48,242.93,0.4263,2,83.63,188.19,0.13,3,0,-148.6,1064.39,0.4437,1,-181.48,211.18,0.4263,2,51.88,182.19,0.13,3,0,-133.16,1033.08,0.4437,1,-166.03,179.86,0.4263,2,20.56,166.74,0.13,3,0,-126.3,1004.33,0.4437,1,-159.17,151.12,0.4263,2,-8.18,159.88,0.13,3,0,-124.15,995.75,0.4437,1,-157.02,142.54,0.4263,2,-16.76,157.73,0.13,3,0,-128.44,973.87,0.4437,1,-161.31,120.66,0.4263,2,-38.64,162.02,0.13,3,0,-139.17,948.13,0.4437,1,-172.04,94.92,0.4263,2,-64.38,172.75,0.13,3,0,-146.89,925.83,0.4437,1,-179.76,72.61,0.4263,2,-86.69,180.47,0.13,3,0,-143.46,918.1,0.4437,1,-176.33,64.89,0.4263,2,-94.41,177.04,0.13,3,0,-152.04,907.81,0.4437,1,-184.91,54.59,0.4263,2,-104.71,185.62,0.13,3,0,-164.91,936.55,0.4437,1,-197.78,83.34,0.4263,2,-75.96,198.49,0.13,3,0,-179.49,967.87,0.4437,1,-212.36,114.65,0.4263,2,-44.64,213.08,0.13,3,0,-190.65,977.31,0.4437,1,-223.52,124.09,0.4263,2,-35.21,224.23,0.13,3,0,-186.36,996.18,0.4437,1,-219.23,142.97,0.4263,2,-16.33,219.94,0.13,3,0,-186.36,1005.62,0.4437,1,-219.23,152.41,0.4263,2,-6.89,219.94,0.13,3,0,-179.06,1010.34,0.4437,1,-211.93,157.13,0.4263,2,-2.17,212.65,0.13,3,0,-164.48,1038.65,0.4437,1,-197.35,185.44,0.4263,2,26.14,198.06,0.13,3,0,-158.47,1053.67,0.4437,1,-191.34,200.45,0.4263,2,41.16,192.05,0.13,3,0,-55.48,1307.93,0.3774,1,-88.35,454.71,0.3626,3,-98.28,50.92,0.26,3,0,-31.99,1294.95,0.3774,1,-64.86,441.74,0.3626,3,-74.79,37.94,0.26,3,0,-15.31,1285.06,0.61791,1,-48.18,431.85,0.12209,3,-58.11,28.05,0.26,2,0,7.87,1283.82,0.74,3,-34.93,26.82,0.26,2,0,18.68,1283.82,0.74,3,-24.12,26.82,0.26,4,0,-34.44,1390.81,0.32003,1,-67.31,537.6,0.30748,3,-77.24,133.8,0.22048,5,-88.28,-36.64,0.152,4,0,-22.52,1394.35,0.16304,1,-55.39,541.14,0.15664,3,-65.32,137.35,0.11232,5,-91.34,-24.59,0.568,4,0,-11.9,1394.51,0.16304,1,-44.77,541.3,0.15664,3,-54.7,137.51,0.11232,5,-91.06,-13.97,0.568,4,0,-5.3,1391.94,0.16304,1,-38.17,538.72,0.15664,3,-48.1,134.93,0.11232,5,-88.22,-7.48,0.568,3,0,-4.01,1387.11,0.3774,1,-36.88,533.89,0.3626,3,-46.81,130.1,0.26,3,0,-9.64,1384.85,0.3774,1,-42.51,531.64,0.3626,3,-52.44,127.85,0.26,3,0,-21.72,1383.73,0.3774,1,-54.59,530.51,0.3626,3,-64.52,126.72,0.26,3,0,-32.51,1386.46,0.3774,1,-65.38,533.25,0.3626,3,-75.3,129.46,0.26,4,0,28.83,1392.76,0.22946,1,-4.04,539.54,0.22046,3,-13.96,135.75,0.15808,4,-85.8,-46.5,0.392,4,0,27.73,1386.96,0.36533,1,-5.14,533.75,0.351,3,-15.06,129.95,0.25168,4,-79.98,-47.45,0.03199,3,0,29.98,1385.16,0.3774,1,-2.89,531.95,0.3626,3,-12.81,128.15,0.26,3,0,35.98,1384.61,0.3774,1,3.11,531.4,0.3626,3,-6.81,127.6,0.26,3,0,42.88,1384.46,0.3774,1,10.01,531.25,0.3626,3,0.09,127.45,0.26,3,0,47.18,1384.91,0.3774,1,14.31,531.7,0.3626,3,4.39,127.9,0.26,4,0,49.28,1387.11,0.36532,1,16.41,533.9,0.351,3,6.49,130.1,0.25168,4,-80.68,-25.91,0.032,4,0,49.88,1390.61,0.22946,1,17.01,537.4,0.22046,3,7.09,133.6,0.15808,4,-84.19,-25.4,0.392,4,0,41.43,1393.76,0.22946,1,8.56,540.55,0.22046,3,-1.36,136.75,0.15808,4,-87.13,-33.93,0.392,4,0,31.68,1393.81,0.22946,1,-1.19,540.6,0.22046,3,-11.11,136.8,0.15808,4,-86.93,-43.68,0.392,4,0,28.47,1401.16,0.35023,1,-4.4,547.95,0.33649,3,-14.33,144.15,0.24128,4,-94.19,-47.08,0.072,4,0,37.18,1405.51,0.32305,1,4.31,552.3,0.31038,3,-5.61,148.51,0.22256,4,-98.77,-38.48,0.144,4,0,46.56,1409.87,0.34419,1,13.69,556.66,0.33069,3,3.76,152.86,0.23712,4,-103.37,-29.22,0.088,4,0,51.31,1408.02,0.35928,1,18.44,554.81,0.34519,3,8.51,151.02,0.24752,4,-101.64,-24.42,0.048,4,0,2.73,1396.01,0.34117,1,-30.14,542.8,0.32779,3,-40.07,139,0.23504,5,-91.96,0.71,0.096,4,0,-10.07,1397.73,0.30796,1,-42.94,544.51,0.29588,3,-52.87,140.72,0.21216,5,-94.2,-12.01,0.184,4,0,-23.4,1402.61,0.35023,1,-56.27,549.4,0.33649,3,-66.2,145.6,0.24128,5,-99.62,-25.13,0.072,3,0,-36.47,1403.01,0.3774,1,-69.34,549.79,0.3626,3,-79.27,146,0.26,3,0,11.13,1193.86,0.4437,1,-21.74,340.65,0.4263,2,181.35,22.46,0.13,2,0,-72.84,1107.41,0.87,2,94.89,106.43,0.13,3,0,79.55,1102.43,0.4437,1,46.68,249.22,0.4263,2,89.92,-45.96,0.13,3,0,20.79,1350,0.3774,1,-12.09,496.79,0.3626,3,-22.01,93,0.26,2,0,17.49,1302.21,0.74,3,-25.31,45.2,0.26,3,0,-31.13,1355.77,0.3774,1,-64,502.56,0.3626,3,-73.93,98.77,0.26,3,0,50.86,1358.24,0.3774,1,17.99,505.03,0.3626,3,8.06,101.24,0.26,3,0,7.19,1424.16,0.3774,1,-25.68,570.95,0.3626,3,-35.61,167.16,0.26],"hull":161,"edges":[0,320,0,2,2,4,4,6,6,8,8,10,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,306,306,308,308,310,310,312,312,314,314,316,316,318,318,320,322,324,324,326,326,328,328,330,330,332,332,334,334,336,336,338,338,340,340,342,342,344,344,346,346,348,348,350,350,352,352,354,354,356,356,322,298,358,358,360,360,362,362,364,364,366,366,26,10,12,368,370,370,372,372,374,374,376,376,378,378,380,380,382,382,368,384,386,386,388,388,390,390,392,392,394,394,396,396,398,398,400,400,402,402,384,404,406,406,408,408,410,412,414,414,416,416,418],"width":806,"height":1658}}}}],"animations":{"1":{"slots":{"CaveScene/eyes 10-03":{"attachment":[{"name":null}]}},"bones":{"sally big3":{"translate":[{},{"time":1,"y":92.46,"curve":0.616,"c3":0.75},{"time":2}]},"sally big4":{"translate":[{},{"time":1.5,"x":-10.01,"y":29.58},{"time":2}],"shear":[{},{"time":1,"x":5.16},{"time":2}]},"sally big":{"scale":[{},{"time":1,"y":1.01},{"time":2}]},"sally big6":{"translate":[{"y":2.33,"curve":"stepped"},{"time":0.8333,"y":2.33},{"time":1,"x":-2.18,"y":-13.49},{"time":1.1667},{"time":2,"y":2.33}]},"sally big2":{"translate":[{"y":2.33,"curve":"stepped"},{"time":0.8333,"y":2.33},{"time":1,"x":-2.18,"y":-13.49},{"time":1.1667},{"time":2,"y":2.33}]}}}}}');
;// CONCATENATED MODULE: ./assets/spine/lizard/skeleton.png
var lizard_skeleton_namespaceObject = __webpack_require__.p + "assets/spine/lizard/skeleton.png";
;// CONCATENATED MODULE: ./assets/spine/lizard/skeleton.atlas
var lizard_skeleton_atlas_namespaceObject = "\r\nskeleton.png\r\nsize: 932,340\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\nLizard\r\n  rotate: false\r\n  xy: 2, 2\r\n  size: 928, 336\r\n  orig: 928, 336\r\n  offset: 0, 0\r\n  index: -1\r\n";
;// CONCATENATED MODULE: ./assets/spine/lizard/skeleton.json
var assets_spine_lizard_skeleton_namespaceObject = JSON.parse('{"skeleton":{"hash":"Lu6d4tO9+9ErTJFCdMOh3OthViU","spine":"3.8.7","x":-347.35,"y":-108.58,"width":876.39,"height":286.17,"images":"","audio":""},"bones":[{"name":"root"},{"name":"Lizard","parent":"root","x":27.37,"y":40.75},{"name":"Lizard3","parent":"Lizard","length":31.79,"rotation":89.01,"x":-96.32,"y":0.09},{"name":"Lizard6","parent":"Lizard3","length":47.42,"rotation":109.07,"x":12.5,"y":166.02},{"name":"Lizard7","parent":"Lizard","x":-355.47,"y":70.19},{"name":"Lizard5","parent":"Lizard7","length":6.5,"rotation":2.66,"x":42.72,"y":10.24},{"name":"Lizard8","parent":"Lizard7","length":6.95,"rotation":177.51,"x":68.84,"y":11.3}],"slots":[{"name":"Lizard","bone":"Lizard5","attachment":"Lizard"}],"skins":[{"name":"default","attachments":{"Lizard":{"Lizard":{"type":"mesh","uvs":[0.20039,0.13062,0.24535,0.19509,0.27256,0.22739,0.38478,0.31851,0.43661,0.34587,0.45813,0.35111,0.48928,0.34675,0.53217,0.32841,0.56751,0.30461,0.62617,0.24332,0.67224,0.20702,0.72661,0.18335,0.77256,0.18374,0.77749,0.18558,0.82313,0.22386,0.89664,0.331,0.96159,0.46326,0.97946,0.51052,0.98006,0.51116,0.97706,0.52429,0.96637,0.51986,0.9046,0.4283,0.89426,0.41824,0.85816,0.38468,0.84303,0.37401,0.7971,0.34957,0.75813,0.34692,0.71727,0.36708,0.70139,0.38007,0.66988,0.4176,0.66521,0.42521,0.6412,0.47051,0.63596,0.56232,0.66798,0.53972,0.68265,0.62221,0.6885,0.6447,0.76531,0.64582,0.77462,0.64974,0.77396,0.6648,0.74644,0.68031,0.76791,0.71679,0.7722,0.74144,0.7446,0.72137,0.7446,0.73506,0.74494,0.78,0.73072,0.74931,0.71974,0.7292,0.70041,0.71163,0.69321,0.70851,0.66409,0.69752,0.62739,0.71544,0.62883,0.67604,0.61995,0.64066,0.59147,0.67311,0.58454,0.68261,0.57671,0.68194,0.57858,0.63017,0.56927,0.5995,0.48837,0.68386,0.40874,0.70775,0.35558,0.71143,0.26363,0.67912,0.27301,0.71563,0.29515,0.78586,0.29596,0.81984,0.2871,0.82426,0.26412,0.82978,0.21406,0.8556,0.20967,0.85821,0.18726,0.87717,0.17309,0.89972,0.16595,0.91743,0.15733,0.95798,0.15301,0.9589,0.1527,0.93997,0.15439,0.90883,0.14894,0.88688,0.12384,0.88707,0.11861,0.88931,0.12434,0.84957,0.12479,0.85862,0.11902,0.7236,0.11123,0.71763,0.09112,0.71747,0.09197,0.70388,0.11923,0.67902,0.09584,0.64779,0.09502,0.62983,0.15824,0.64845,0.14787,0.57579,0.08891,0.53483,0.07634,0.49366,0.05407,0.43264,0.04066,0.37675,0.03568,0.31998,0.03712,0.23943,0.04636,0.2092,0.07983,0.16005,0.12875,0.11984,0.16182,0.10719,0.11434,0.23793,0.1063,0.248,0.103,0.26383,0.10355,0.28447,0.10789,0.30019,0.11542,0.30628,0.12194,0.29959,0.12648,0.26298,0.12243,0.24746,0.12603,0.28562,0.08668,0.29999,0.10237,0.29747,0.10842,0.31007,0.11689,0.31419,0.12883,0.30961,0.13107,0.30205,0.128,0.29128,0.05556,0.26796,0.12991,0.45685,0.1486,0.19328,0.16053,0.3679,0.27344,0.3492,0.29555,0.60533,0.40255,0.46347,0.2267,0.43359,0.24656,0.46859,0.25205,0.52692,0.2512,0.62959],"triangles":[106,108,109,109,108,107,106,104,103,104,111,103,101,108,102,108,101,100,103,110,102,108,103,102,102,97,101,101,97,100,110,111,112,112,105,113,73,74,72,72,74,71,74,75,71,71,75,70,75,76,70,70,76,69,80,77,78,77,80,76,80,78,79,88,69,76,68,69,88,76,81,88,67,68,88,76,80,81,67,61,66,67,127,61,124,126,127,127,67,88,127,88,124,88,81,85,65,66,63,66,61,62,65,63,64,63,66,62,45,43,44,43,45,42,42,40,41,42,45,46,42,46,39,81,82,85,42,39,40,39,46,47,83,84,82,82,84,85,50,51,49,39,47,35,61,122,60,59,60,123,49,35,48,47,48,35,58,123,5,5,123,4,60,122,123,123,58,59,51,32,49,49,34,35,34,32,33,34,49,32,58,6,57,6,7,57,58,5,6,53,54,56,54,55,56,39,36,38,39,35,36,61,127,122,88,85,87,51,52,32,53,56,52,38,36,37,88,89,124,87,85,86,52,56,32,56,57,32,127,126,122,126,124,125,126,121,122,122,3,123,122,121,3,7,8,57,32,57,31,90,118,89,89,120,124,89,118,120,31,57,8,90,91,118,126,125,121,19,17,18,19,20,17,21,16,20,20,16,17,118,112,113,118,91,112,91,110,112,91,92,110,8,9,31,31,9,30,125,124,121,123,3,4,113,114,118,120,114,115,120,118,114,121,1,2,121,124,1,124,120,1,110,93,117,110,92,93,22,15,21,16,21,15,30,9,29,22,23,15,29,10,28,29,9,10,15,23,14,28,10,27,93,94,117,25,14,24,23,24,14,115,119,120,120,0,1,0,119,99,0,120,119,27,11,26,27,10,11,25,26,13,26,12,13,25,13,14,121,2,3,26,11,12,94,95,117,113,106,114,113,105,106,111,104,112,112,104,105,106,116,114,114,116,115,105,104,106,119,115,107,103,111,110,106,103,108,106,109,116,97,102,110,109,107,116,115,116,107,95,96,117,110,117,97,117,96,97,107,108,119,108,100,119,100,98,119,100,97,98,119,98,99],"vertices":[3,1,-221.87,128.96,0.82533,2,126.69,127.76,0.01746,4,133.61,58.77,0.15721,3,1,-180.15,107.3,0.7812,2,105.75,85.67,0.07,4,175.33,37.11,0.1488,3,1,-154.89,96.45,0.79836,2,95.34,60.23,0.07,4,200.58,26.26,0.13164,3,1,-50.76,65.83,0.85875,2,66.52,-44.42,0.14,6,-237.03,5.37,0.00125,2,1,-2.66,56.64,0.86734,2,58.16,-92.67,0.13266,2,1,17.31,54.88,0.88952,2,56.74,-112.67,0.11048,2,1,46.21,56.35,0.94734,2,58.71,-141.54,0.05266,1,1,86.02,62.51,1,1,1,118.81,70.5,1,1,1,173.25,91.1,1,1,1,216.01,103.3,1,1,1,266.46,111.25,1,1,1,309.1,111.12,1,1,1,313.68,110.5,1,1,1,356.03,97.64,1,1,1,424.24,61.64,1,1,1,484.52,17.2,1,1,1,501.1,1.32,1,1,1,501.67,1.1,1,1,1,498.88,-3.31,1,1,1,488.96,-1.82,1,1,1,431.63,28.95,1,1,1,422.04,32.33,1,1,1,388.54,43.6,1,1,1,374.5,47.19,1,1,1,331.88,55.4,1,1,1,295.71,56.29,1,1,1,257.79,49.52,1,1,1,243.06,45.15,1,1,1,213.81,32.54,1,1,1,209.48,29.98,1,1,1,187.2,14.76,1,1,1,182.34,-16.09,1,1,1,212.05,-8.49,1,1,1,225.66,-36.21,1,1,1,231.1,-43.77,1,1,1,302.37,-44.14,1,1,1,311.02,-45.46,1,1,1,310.4,-50.52,1,1,1,284.86,-55.73,1,1,1,304.79,-67.99,1,1,1,308.77,-76.27,1,1,1,283.15,-69.53,1,1,1,283.15,-74.13,1,1,1,283.47,-89.23,1,1,1,270.27,-78.91,1,1,1,260.08,-72.16,1,1,1,242.15,-66.25,1,1,1,235.46,-65.2,1,1,1,208.44,-61.51,1,1,1,174.38,-67.53,1,1,1,175.72,-54.3,1,1,1,167.48,-42.41,1,1,1,141.05,-53.31,1,1,1,134.62,-56.5,1,1,1,127.35,-56.28,1,1,1,129.09,-38.88,1,1,1,120.45,-28.58,1,2,1,45.37,-56.92,0.96164,2,-54.56,-142.65,0.03836,2,1,-28.52,-64.95,0.88459,2,-63.86,-68.9,0.11541,2,1,-77.85,-66.19,0.86217,2,-65.95,-19.6,0.13783,2,1,-163.18,-55.33,0.99545,2,-56.57,65.9,0.00455,1,1,-154.48,-67.6,1,1,1,-133.94,-91.2,1,1,1,-133.18,-102.61,1,1,1,-141.4,-104.1,1,1,1,-162.73,-105.95,1,1,1,-209.19,-114.63,1,1,1,-213.26,-115.5,1,1,1,-234.06,-121.87,1,1,1,-247.21,-129.45,1,1,1,-253.83,-135.4,1,1,1,-261.84,-149.03,1,1,1,-265.84,-149.34,1,1,1,-266.13,-142.98,1,1,1,-264.56,-132.51,1,1,1,-269.62,-125.14,1,1,1,-292.91,-125.2,1,1,1,-297.76,-125.95,1,1,1,-292.45,-112.6,1,1,1,-292.03,-115.64,1,1,1,-297.38,-70.27,1,1,1,-304.61,-68.27,1,1,1,-323.27,-68.22,1,1,1,-322.48,-63.65,1,1,1,-297.19,-55.3,1,1,1,-318.89,-44.8,1,2,1,-319.65,-38.77,0.98921,3,71.55,33.68,0.01079,1,1,-260.99,-45.02,1,3,1,-270.62,-20.61,0.78013,3,19.29,31.64,0.08,4,84.86,-90.8,0.13987,3,1,-325.33,-6.85,0.80015,3,67.03,1.57,0.08,4,30.15,-77.04,0.11985,3,1,-336.99,6.98,0.77622,3,73.83,-15.2,0.08,4,18.48,-63.21,0.14378,2,1,-357.65,27.49,0.84,4,-2.18,-42.71,0.16,2,1,-370.11,46.27,0.84,4,-14.63,-23.93,0.16,2,1,-374.73,65.34,0.84,4,-19.25,-4.85,0.16,2,1,-373.38,92.41,0.84,4,-17.91,22.21,0.16,2,1,-364.82,102.56,0.84,4,-9.34,32.37,0.16,2,1,-333.75,119.08,0.84,4,21.72,48.88,0.16,2,1,-288.36,132.59,0.84,4,67.12,62.39,0.16,2,1,-257.66,136.84,0.84,4,97.81,66.64,0.16,3,1,-301.72,92.91,0.35273,4,53.75,22.71,0.13527,5,13.05,11.88,0.512,3,1,-309.19,89.52,0.1152,4,46.28,19.33,0.0448,5,5.43,8.85,0.84,3,1,-312.25,84.21,0.0864,4,43.23,14.01,0.0336,5,2.13,3.68,0.88,3,1,-311.74,77.27,0.1152,4,43.74,7.08,0.0448,5,2.32,-3.27,0.84,3,1,-307.71,71.99,0.21888,4,47.76,1.79,0.08512,5,6.09,-8.74,0.696,2,1,-300.72,69.94,0.504,4,54.75,-0.25,0.496,3,1,-294.67,72.19,0.39744,4,60.8,2,0.15456,6,6.93,9.61,0.448,3,1,-290.46,84.49,0.36288,4,65.02,14.3,0.14112,6,3.26,-2.86,0.496,3,1,-294.21,89.71,0.43776,4,61.26,19.51,0.17024,6,7.24,-7.91,0.392,3,1,-290.87,76.88,0.31104,4,64.6,6.69,0.12096,6,3.34,4.76,0.568,2,1,-327.39,72.06,0.504,4,28.08,1.86,0.496,2,1,-312.84,72.91,0.488,4,42.63,2.71,0.512,2,1,-307.22,68.67,0.488,4,48.26,-1.52,0.512,2,1,-299.36,67.28,0.48,4,56.11,-2.91,0.52,2,1,-288.28,68.82,0.488,4,67.2,-1.37,0.512,2,1,-286.2,71.37,0.568,4,69.28,1.17,0.432,2,1,-289.05,74.98,0.528,4,66.43,4.79,0.472,2,1,-356.28,82.82,0.70748,4,-0.8,12.63,0.29252,3,1,-287.28,19.35,0.65425,3,22.73,-11.52,0.16,4,68.2,-50.84,0.18575,2,1,-269.93,107.91,0.77882,4,85.54,37.72,0.22118,3,1,-258.86,49.24,0.71572,3,-13.56,-31.11,0.08,4,96.61,-20.95,0.20428,4,1,-154.09,55.52,0.82841,2,54.43,58.72,0.07936,4,201.39,-14.67,0.09218,6,-133.56,20.19,0.00004,5,1,-133.56,-30.54,0.84821,2,-31.27,36.71,0.10777,3,-107.91,83.62,0.02124,4,221.91,-100.73,0.02278,6,-157.8,105.27,0.00001,3,1,-34.26,17.13,0.85942,2,18.1,-61.75,0.14,6,-254.93,53.34,0.00058,3,1,-197.45,27.17,0.88055,4,158.02,-43.02,0.11943,6,-91.46,50.4,0.00003,4,1,-179.03,15.41,0.89872,3,-78.95,25.83,0.0057,4,176.44,-54.78,0.09556,6,-110.38,61.34,0.00002,4,1,-173.93,-4.19,0.9265,3,-77.71,46.04,0.00455,4,181.54,-74.38,0.06893,6,-116.32,80.7,0.00002,5,1,-174.72,-38.69,0.96924,2,-40.12,77.72,0.00827,3,-66.25,78.59,0.00139,4,180.76,-108.88,0.02109,6,-117.03,115.2,0.00001],"hull":100,"edges":[0,198,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,92,92,94,94,96,96,98,98,100,100,102,102,104,104,106,106,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,200,202,202,204,204,206,206,208,208,210,210,212,214,216,216,200,212,218,218,214,206,220,220,222,222,224,224,226,226,228,228,230,230,232,232,214,248,250,250,252,252,254,254,122],"width":928,"height":336}}}}],"animations":{"animation":{"bones":{"Lizard5":{"translate":[{"curve":"stepped"},{"time":0.6667},{"time":0.8333,"x":19.62},{"time":1,"curve":"stepped"},{"time":2}],"scale":[{"curve":"stepped"},{"time":0.6},{"time":0.8333,"x":0.184,"y":0.184},{"time":1.0667,"curve":"stepped"},{"time":2}]},"Lizard8":{"translate":[{"curve":"stepped"},{"time":0.6667},{"time":0.8333,"x":-13.72},{"time":1,"curve":"stepped"},{"time":2}],"scale":[{"curve":"stepped"},{"time":0.6},{"time":0.8333,"x":0.184,"y":0.184},{"time":1.0667,"curve":"stepped"},{"time":2}]},"Lizard7":{"translate":[{},{"time":1,"x":-4.85,"y":10.91},{"time":2}]},"Lizard3":{"translate":[{"curve":"stepped"},{"time":2}],"scale":[{},{"time":1,"x":1.811,"y":1.811},{"time":2}]},"Lizard":{"translate":[{}],"shear":[{},{"time":1,"y":-2.4},{"time":2}]}}}}}');
;// CONCATENATED MODULE: ./js/SpineScript/index.js






// All






const atlasDataAll = {
  atlas: Idle_all_atlas_namespaceObject,
  textures: {
    'Idle all.webp': Idle_all_namespaceObject,
    'Idle all2.webp': Idle_all2_namespaceObject,
    'Idle all3.webp': Idle_all3_namespaceObject,
    'Idle all4.webp': Idle_all3_namespaceObject
  }
};
// smile drake compas



// lizard




//

const loadSpineJson = (dataURI, dataJson, atlas) => {
  const baseTexture = new BaseTexture.from(dataURI);
  textures.push(baseTexture);
  const spineTextureAtlas = new TextureAtlas(atlas, (line, callback) => {
    callback(baseTexture);
  });
  const spineAtlasAttachmentLoader = new AtlasAttachmentLoader(spineTextureAtlas);
  const spineSkeletonJson = new SkeletonJson(spineAtlasAttachmentLoader);
  const spineData = spineSkeletonJson.readSkeletonData(dataJson);
  return spineData;
};
const loadSpineJson2 = (dataJson, dataAtlas) => {
  const spineTextureAtlas = new TextureAtlas();
  spineTextureAtlas.addSpineAtlas(dataAtlas.atlas, (name, callback) => {
    const baseTexture = new BaseTexture.from(dataAtlas.textures[name]);
    textures.push(baseTexture);
    callback(baseTexture);
  });
  const spineAtlasAttachmentLoader = new AtlasAttachmentLoader(spineTextureAtlas);
  const spineSkeletonJson = new SkeletonJson(spineAtlasAttachmentLoader);
  const spineData = spineSkeletonJson.readSkeletonData(dataJson);
  return spineData;
};

//

let isLoad = false;

/** @type { BaseTexture[] } */
const textures = [];
/** @type { Application[] } */
const apps = [];
const ticker = new ApplicationTicker();
ticker.add(() => apps.forEach(app => app.render())).start();
textures.forEach(texture => {
  /** @type { HTMLImageElement } */
  const source = texture.resource.source;
  const isLoaded = source.complete;
  if (!isLoaded) {
    const prevOnLoad = source.onload;
    source.onload = () => {
      prevOnLoad && prevOnLoad();
      tryStart();
    };
  }
});
const tryStart = () => {
  const notLoadedTexture = textures.find(texture => {
    /** @type { HTMLImageElement } */
    const source = texture.resource.source;
    const isLoaded = source.complete && source.naturalHeight !== 0;
    return !isLoaded;
  });
  if (!notLoadedTexture) {
    isLoad = true;
  }
};
const create = _ref => {
  let {
    app,
    spineDate,
    animName,
    idCon,
    w = 800,
    h = 800,
    posX = 250,
    posY = 500,
    scale = 0.3,
    animLoop = true,
    gameScene = false,
    flip,
    delay
  } = _ref;
  const spine = new Spine(spineDate);
  if (gameScene) hideGameInterface();
  spine.stateData.defaultMix = 0.25;
  spine.position.set(posX, posY);
  spine.scale.set(scale);
  if (flip) spine.scale.x = -scale;
  spine.state.setAnimation(0, animName, animLoop);
  app.stage.addChild(spine);
  let container = document.querySelector(idCon);
  setTimeout(() => container.appendChild(app.view), delay);
  if (gameScene && spine.state && spine.state.data) showGameInterface();
  apps.push(app);
  return {
    spine,
    app
  };
};
function clearApp(app) {
  app.stage.removeChildren();
}
function createApp(_ref2) {
  let {
    idCon,
    w = 800,
    h = 800
  } = _ref2;
  const app = new Application(w, h);
  let container = document.querySelector(idCon);
  container.appendChild(app.view);
  apps.push(app);
  return app;
}
function addSpineToApp(_ref3) {
  let {
    app,
    spineDate,
    animName,
    posX = 250,
    posY = 500,
    scale = 0.3,
    animLoop = true,
    gameScene,
    flip,
    randomStart,
    removeDelay
  } = _ref3;
  const spine = new Spine(spineDate);
  if (gameScene) hideGameInterface();
  spine.stateData.defaultMix = 0.25;
  spine.position.set(posX, posY);
  spine.scale.set(scale);
  if (flip) spine.scale.x = -scale;
  if (!randomStart) {
    spine.state.setAnimation(0, animName, animLoop);
  } else {
    spine.state.setAnimation(0, animName, false);
    spine.state.update(0);
    spine.skeleton.updateWorldTransform();
    let randomDelay = 3500 * Math.random();
    setTimeout(() => {
      spine.state.setAnimation(0, animName, true);
    }, randomDelay);
  }
  app.stage.addChild(spine);
  if (removeDelay) {
    setTimeout(() => {
      app.stage.removeChild(spine);
    }, removeDelay);
  }
  if (gameScene && spine.state && spine.state.data) showGameInterface();
  return spine;
}
function SpineScript_DestroyRenderer(app) {
  const index = apps.indexOf(app);
  if (index !== -1) {
    apps.splice(index, 1);
  }
  app.renderer.destroy();
}
function showGameInterface() {
  let gameInterface = document.querySelector('.gameInterface');
  gameInterface.classList.add('show');
}
function hideGameInterface() {
  let gameInterface = document.querySelector('.gameInterface');
  if (gameInterface.classList.contains('show')) gameInterface.classList.remove('show');
}
const spineAll = loadSpineJson2(spine_all_Idle_all_namespaceObject, atlasDataAll);
const spineLizard = loadSpineJson(lizard_skeleton_namespaceObject, assets_spine_lizard_skeleton_namespaceObject, lizard_skeleton_atlas_namespaceObject);
const spineSmileDrake = loadSpineJson(skeleton_namespaceObject, spine_smileDrake_skeleton_namespaceObject, skeleton_atlas_namespaceObject);
const allSpine = [{
  name: 'Lizard',
  spine: spineLizard,
  sceneStart: [1, 22],
  sceneEnd: [2, 23]
}, {
  name: 'all',
  spine: spineAll,
  sceneStart: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 24, 31, 34],
  sceneEnd: [15]
}, {
  name: 'smileDrake',
  spine: spineSmileDrake,
  sceneStart: [9],
  sceneEnd: []
}];

;// CONCATENATED MODULE: ./js/spinesSettings.js
const spinesDescription = [{
  name: 'all',
  individualScenesSetting: {
    3: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 485,
          posY: 1000,
          scale: 0.5
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'BeachScene/Drake no BG'
        }
      }]
    },
    4: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 680,
          posY: 820,
          scale: 0.55
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'BeachScene/Sulli no BG'
        }
      }]
    },
    5: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 345,
          posY: 840,
          scale: 0.5
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'BeachScene/Helena no bg'
        }
      }]
    },
    6: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 645,
          posY: 800,
          scale: 0.53
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'BeachScene/Sulli sit 2'
        }
      }]
    },
    7: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 520,
          posY: 1010,
          scale: 0.5
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'drake compas'
        }
      }]
    },
    8: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 520,
          posY: 740,
          scale: 0.33,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'JungleScene/Helen'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 85,
          posY: 700,
          scale: 0.37,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'sally big'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 890,
          posY: 710,
          scale: 0.36,
          flip: true,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'drake compas'
        }
      }]
    },
    9: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 497,
          posY: 715,
          scale: 0.29,
          randomStart: true,
          delay: 12000
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'JungleScene/Helen-sit-smile'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 85,
          posY: 700,
          scale: 0.36,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'sally big'
        },
        ChangeAttachment: [{
          slotName: 'sally big',
          attachmentName: 'sally big2',
          delay: 3000
        }, {
          slotName: 'sally big',
          attachmentName: 'sally big3',
          delay: 12000
        }]
      }
      // {
      //     spineSetting: {
      //         animName: '1',
      //         posX: 890,
      //         posY: 710,
      //         scale: 0.34,
      //         flip: true,
      //         randomStart: true,
      //         removeDelay: 12000,
      //     },
      //     attachment: {
      //         slotName: 'sally big',
      //         attachmentName: 'drake compas',
      //     },
      //     ChangeAttachment: [
      //         {
      //             slotName: 'sally big',
      //             attachmentName: 'block 3/drake surprise right',
      //             delay: 3000
      //         },
      //         // {
      //         //     slotName: 'sally big',
      //         //     attachmentName: 'drake smile right',
      //         //     delay: 12000
      //         // }
      //     ]
      // },
      ]
    },

    10: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '2',
          posX: 620,
          posY: 1010,
          scale: 0.5
        }
      }]
    },
    11: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 360,
          posY: 770,
          scale: 0.37,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'block 3/s-b3-fear lighter'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 200,
          posY: 780,
          scale: 0.36,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'block 3/d-bl3-fear'
        }
      }]
    },
    12: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 350,
          posY: 760,
          scale: 0.37,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'block 3/s-b3-fear lighter2'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 735,
          posY: 780,
          scale: 0.36,
          randomStart: true,
          flip: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'block 3/d-bl3-fear'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 1060,
          posY: 745,
          scale: 0.345,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'JungleScene/Helen'
        }
      }]
    },
    13: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 605,
          posY: 990,
          scale: 0.48
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'block 3/s-b3-to-torch'
        }
      }]
    },
    14: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 625,
          posY: 990,
          scale: 0.48
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'block 3/s-b3-with-torch'
        }
      }]
    },
    17: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 625,
          posY: 490,
          scale: 0.48
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'CaveScene/s-b3-after statue'
        }
      }]
    },
    18: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 160,
          posY: 990,
          scale: 0.48,
          flip: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'sally big'
        }
      }]
    },
    19: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 220,
          posY: 1060,
          scale: 0.53,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'CaveScene/d-bl3-statue stand'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 1060,
          posY: 1085,
          scale: 0.6,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'CaveScene/H-b3-statue stand'
        }
      }]
    },
    20: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 220,
          posY: 1060,
          scale: 0.53,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'CaveScene/d-bl3-statue stand'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 1060,
          posY: 1085,
          scale: 0.6,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'CaveScene/H-b3-statue stand'
        }
      }]
    },
    21: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 1060,
          posY: 1085,
          scale: 0.6,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'CaveScene/H-b3-statue stand'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 220,
          posY: 1060,
          scale: 0.53,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'block 3/d-bl3-fear'
        }
      }]
    },
    24: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 620,
          posY: 2180,
          scale: 1.4
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'CaveScene/d-bl3-fear TF'
        }
      }]
    },
    31: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 690,
          posY: 995,
          scale: 0.5,
          flip: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'CaveScene/s-b3-after sex'
        }
      }]
    },
    34: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: '1',
          posX: 600,
          posY: 1050,
          scale: 0.48,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'Helen TF dressed 1'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 260,
          posY: 990,
          scale: 0.475,
          randomStart: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'sally big3'
        }
      }, {
        spineSetting: {
          animName: '1',
          posX: 1020,
          posY: 1050,
          scale: 0.51,
          randomStart: true,
          flip: true
        },
        attachment: {
          slotName: 'sally big',
          attachmentName: 'CaveScene/d-bl3-statue stand'
        }
      }]
    }
  }
},
// {
//     name: 'smileDrake',
//     setting: {
//         animName: '1',
//         posX: 605,
//         posY: 725,
//         scale: 0.34,
//         flip:true,
//         randomStart: true,
//         delay:12000,
//     }
// },
{
  name: 'Torch',
  setting: {
    animName: '1',
    w: 1366,
    h: 768,
    posY: 1000,
    posX: 595,
    scale: 0.49,
    animLoop: true
  }
}, {
  name: 'H-transform',
  setting: {
    animName: 'animation',
    w: 1366,
    h: 768,
    posY: 150,
    posX: 400,
    scale: 0.425,
    animLoop: false
  }
}, {
  name: 'Sucking',
  setting: {
    animName: '1',
    w: 1366,
    h: 768,
    posY: 0,
    posX: 0,
    scale: 0.356,
    animLoop: true,
    gameScene: true
  }
}, {
  name: 'BoobJob',
  setting: {
    animName: '1',
    w: 1366,
    h: 768,
    posY: -50,
    posX: 250,
    scale: 0.33,
    animLoop: true,
    gameScene: true
  }
}, {
  name: 'DoggyStyle',
  setting: {
    animName: '1',
    w: 1366,
    h: 768,
    posY: 740,
    posX: 50,
    scale: 0.35,
    animLoop: true,
    gameScene: true
  }
}, {
  name: 'Wallslam',
  setting: {
    animName: '1',
    w: 1366,
    h: 768,
    posY: -30,
    posX: -130,
    scale: 0.41,
    animLoop: true,
    gameScene: true
  }
}, {
  name: 'End',
  individualScenesSetting: {
    30: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: 'animation',
          posY: 460,
          posX: 755,
          scale: 0.75,
          animLoop: true
        },
        attachment: {
          slotName: 'shoot cum 19-04 sprites with shadow',
          attachmentName: 'shoot cum 19-04 sprites with shadow'
        }
      }]
    },
    32: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: 'animation',
          posY: 460,
          posX: 755,
          scale: 0.75,
          animLoop: true
        },
        attachment: {
          slotName: 'shoot cum 19-04 sprites with shadow',
          attachmentName: 'shoot cum 19-04 sprites with shadow'
        }
      }]
    },
    33: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: 'animation',
          posY: 460,
          posX: 755,
          scale: 0.75,
          animLoop: true
        },
        attachment: {
          slotName: 'shoot cum 19-04 sprites with shadow',
          attachmentName: 'shoot cum 19-04 sprites with shadow2'
        }
      }]
    }
  }
}, {
  name: 'Lizard',
  individualScenesSetting: {
    1: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: 'animation',
          posY: 465,
          posX: 800,
          scale: 0.35,
          animLoop: true
        }
      }]
    },
    22: {
      w: 1366,
      h: 768,
      spineSettings: [{
        spineSetting: {
          animName: 'animation',
          posY: 465,
          posX: 800,
          scale: 0.8,
          animLoop: true
        }
      }]
    }
  }
}
// {
// 	name: 'Lizard2',
// 	setting: {
// 		animName: 'animation',
// 		w: 1920,
// 		h: 1080,
// 		posY: 665,
// 		posX: 1100,
// 		scale: 1,
// 		animLoop: true,
// 	},
// },
];
;// CONCATENATED MODULE: ./js/spineManager.js


let addedSpine = [];
let nowScene, app;
const spineManager = {
  checkScene,
  changeAnimation
};
function createSpineApp() {
  app = createApp({
    w: 1366,
    h: 768,
    idCon: `#spines .spines__box`
  });
}
createSpineApp();
function checkScene(nowSceneId) {
  nowScene = nowSceneId;
  if (nowScene === 'clear') return clearApp(app);
  allSpine.forEach(spine => {
    if (spine.sceneEnd.includes(nowScene)) {
      clearApp(app);
    } else if (spine.sceneStart.includes(nowScene)) {
      generateSpine(spine);
    }
  });
}
function generateSpine(spine) {
  let description = spinesDescription.find(setting => setting.name === spine.name);
  if (description?.setting) {
    baseSettingSpine(spine, description);
  } else if (description?.individualScenesSetting) {
    individualSettingSpine(spine, description);
  }
}
function baseSettingSpine(spine, description) {
  clearApp(app);
  let spineAnim = createSpine(spine, description.setting);
  addedSpine.push({
    name: spine.name,
    spine: spineAnim
  });
}
function individualSettingSpine(spine, description) {
  let settings = description.individualScenesSetting[nowScene],
    spineArray = [];
  clearApp(app);
  settings.spineSettings.forEach(settingsForSpine => {
    let attachment = settingsForSpine.attachment;
    let delayCrete = settingsForSpine.spineSetting.delay;
    let addedSpine;
    if (delayCrete) {
      setTimeout(() => {
        addSpine(spine, addedSpine, settingsForSpine, attachment);
      }, delayCrete);
    } else {
      addSpine(spine, addedSpine, settingsForSpine, attachment);
    }
  });
  addedSpine.push({
    name: spine.name,
    spine: {
      app,
      spine: spineArray
    }
  });
}
function addSpine(spine, addedSpine, spineSetting, attachment) {
  console.log(spineSetting.spineSetting);
  addedSpine = addSpineToApp({
    app,
    spineDate: spine.spine,
    ...spineSetting.spineSetting
  });
  let ChangeAttachmentArr = spineSetting.ChangeAttachment;
  if (attachment) {
    addedSpine.skeleton.setAttachment(attachment.slotName, attachment.attachmentName);
  }
  if (ChangeAttachmentArr) {
    changeAttachment(ChangeAttachmentArr, addedSpine);
  }
}
function changeAttachment(ChangeAttachmentSettings, addedSpine) {
  ChangeAttachmentSettings.forEach(settting => {
    setTimeout(() => {
      addedSpine.skeleton.setAttachment(settting.slotName, settting.attachmentName);
    }, settting.delay);
  });
}
function createSpine(spine, setting) {
  return create({
    app,
    spineDate: spine.spine,
    idCon: `#spines .spines__box`,
    ...setting
  });
}
function deleteSpine(spineName) {
  addedSpine.forEach((spineObj, i) => {
    if (spineObj.name === spineName) {
      clearSpine(spineObj, i);
    }
  });
}
function clearSpine(spineObj, i) {
  let spine = spineObj.spine.spine,
    app = spineObj.spine.app;
  addedSpine.splice(i, 1);
  if (Array.isArray(spine)) {
    spine.forEach(spine => {
      destroySpine(spine);
    });
  } else {
    destroySpine(spine);
  }
  app.view.remove();
  DestroyRenderer(app);
}
function destroySpine(spine) {
  spine.destroy({
    texture: false,
    baseTexture: false,
    children: true
  });
}
function createContainer(spineName) {
  let spineScene = document.querySelector(`.scene__spine${nowScene}`);
  let container = document.createElement('div');
  container.id = spineName;
  container.classList.add('spine__box');
  spineScene.appendChild(container);
}
function changeAnimation(spineName, animationName) {
  let loop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  addedSpine.forEach(spineObj => {
    if (spineObj.name === spineName && animationName === '4') {
      spineObj.spine.spine.state.setAnimation(0, animationName, false);
      spineObj.spine.spine.state.addListener({
        complete: e => {
          if (e.animation.name === '4') {
            spineObj.spine.spine.state.setAnimation(0, '5', true);
          }
        }
      });
      return;
    }
    if (spineObj.name === spineName && animationName !== '4') {
      spineObj.spine.spine.state.setAnimation(0, animationName, loop);
      console.log(spineObj.spine.spine.state.tracks[0].animationEnd);
    }
  });
}

;// CONCATENATED MODULE: ./js/gameMechanics.js



let _ = (/* unused pure expression or super */ null && (undefined));
let spineAnimInfo = [{
  scene: 26,
  name: 'Sucking'
}, {
  scene: 27,
  name: 'BoobJob'
}, {
  scene: 28,
  name: 'DoggyStyle'
}, {
  scene: 29,
  name: 'Wallslam'
}];
let timersSpacePlay = [],
  timeoutsSpace = [];
let soundForScene = {
  26: {
    1: [{
      audioName: 'churn2',
      isLoop: true
    }],
    2: [{
      audioName: 'Suckles_02',
      isLoop: true
    }],
    3: [{
      audioName: 'Sucking Faster_02',
      isLoop: true,
      startTime: 1.17,
      endTime: 2,
      delay: 300
    }],
    4: [{
      audioName: 'Sucking gags_06',
      isLoop: true,
      duration: 1700
    }, {
      audioName: 'end',
      startTime: 1,
      endTime: 2,
      isLoop: true,
      duration: 2000,
      delay: 1700
    }]
  },
  27: {
    1: [{
      audioName: 'churn1',
      isLoop: true
    }],
    2: [{
      audioName: 'wetfuck4',
      spacePlay: 2166.7,
      spaceDelay: 200
    }],
    3: [{
      audioName: 'wetfuck1',
      spacePlay: 1000,
      spaceDelay: 200
    }],
    4: [{
      audioName: 'wetfuck1',
      spacePlay: 1000,
      spaceDelay: 200,
      spaceDuration: 1700
    }, {
      audioName: 'end',
      startTime: 1,
      endTime: 2,
      isLoop: true,
      duration: 2000,
      delay: 2000
    }]
  },
  28: {
    1: [{
      audioName: 'churn2',
      isLoop: true
    }, {
      audioName: '3-1стон',
      volume: 0.4,
      spacePlay: 2000,
      spaceDelay: 700
    }],
    2: [{
      audioName: 'wetfuck6',
      spacePlay: 2000,
      spaceDelay: 400
    }, {
      audioName: ['3-2-1стон', '3-2-2стон'],
      volume: 0.4,
      spacePlay: 2000,
      spaceDelay: 700
    }],
    3: [{
      audioName: 'wetfuck4',
      spacePlay: 1000
    }, {
      audioName: ['3-3-1стон', '3-3-2стон'],
      volume: 0.4,
      spacePlay: 1000,
      spaceDelay: 200
    }],
    4: [{
      audioName: 'wetfuck4'
    }, {
      audioName: 'end',
      startTime: 1,
      endTime: 2,
      isLoop: true,
      duration: 2000,
      delay: 1300
    }]
  },
  29: {
    1: [{
      audioName: 'churn2',
      spacePlay: 2000,
      spaceDelay: 800
    }, {
      audioName: '4-1стон',
      volume: 0.4,
      spacePlay: 2000,
      spaceDelay: 800
    }],
    2: [{
      audioName: 'wetfuck5',
      spacePlay: 2000,
      spaceDelay: 700
    }, {
      audioName: ['4-2-1стон', '4-2-2стон'],
      volume: 0.4,
      spacePlay: 2000,
      spaceDelay: 700
    }],
    3: [{
      audioName: 'wetfuck1',
      spacePlay: 1000,
      spaceDelay: 200
    }, {
      audioName: ['3-3-1стон', '3-3-2стон'],
      volume: 0.4,
      spacePlay: 1000,
      spaceDelay: 200
    }],
    4: [{
      audioName: 'wetfuck1',
      spacePlay: 1000,
      spaceDelay: 200,
      spaceDuration: 1500
    }, {
      audioName: 'end',
      startTime: 1,
      endTime: 2,
      isLoop: true,
      duration: 2000,
      delay: 1700
    }]
  }
};
let progress, gameMode, unlockStage, timer, scene, setedAnim;
let progressBar = document.querySelector('#progress-game');
let btns = Array.from(document.querySelectorAll('.gameBtn'));
function initGameMechanics(sceneId) {
  scene = sceneId;
  progress = 0;
  gameMode = unlockStage = setedAnim = '1';
  setSoundForGameMode();
  setActiveBtn();
  disabledBtns();
  listenBtn();
  updateProgressIfCan();
}
function updateProgressIfCan() {
  if (gameMode == 'autoplay') {
    clearInterval(timer);
    timer = setInterval(increaseProgress, 400);
    autoplay();
    return;
  }
  if (gameMode == '4') {
    clearInterval(timer);
    return;
  }
  if (gameMode == unlockStage) {
    clearInterval(timer);
    timer = setInterval(increaseProgress, 400);
  } else {
    clearInterval(timer);
  }
}
function increaseProgress() {
  progress += 1.05;
  progressBar.style.height = progress + '%';
  checkStage();
  updateProgressIfCan();
}
function checkStage() {
  if (progress >= 100 && progress > 66) {
    btns[3].disabled = false;
    unlockStage = 4;
  } else if (progress >= 66 && progress > 33) {
    unlockStage = 3;
    btns[2].disabled = false;
  } else if (progress >= 33) {
    unlockStage = 2;
    btns[1].disabled = false;
  }
  setActiveBtn();
}
function autoplay() {
  if (unlockStage == 4) {
    sceneEnd();
  } else if (progress >= 66 && progress > 33 && setedAnim != '3') {
    setedAnim = '3';
    setSoundForGameMode(3);
    setAnim(setedAnim);
  } else if (progress >= 33 && progress < 66 && setedAnim != '2') {
    setedAnim = '2';
    setSoundForGameMode(2);
    setAnim(setedAnim);
  }
}
function setAnim(animName) {
  let notEnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  spineAnimInfo.forEach(anim => {
    if (anim.scene == scene) {
      spineManager.changeAnimation(anim.name, animName, notEnd);
    }
  });
}
function updateStage(mode) {
  if (mode == '4') {
    sceneEnd();
    return;
  }
  if (gameMode != mode) {
    gameMode = mode;
    setActiveBtn();
    if (gameMode != 'autoplay') {
      setSoundForGameMode();
      setAnim(gameMode);
    }
    updateProgressIfCan();
  }
}
function listenBtn() {
  btns.forEach(btn => {
    btn.addEventListener('click', () => {
      updateStage(btn.dataset.mode);
    });
  });
}
function disabledBtns() {
  btns.forEach(btn => {
    if (btn.dataset.mode != '1' && btn.dataset.mode != 'autoplay') {
      btn.disabled = true;
    } else {
      btn.disabled = false;
    }
  });
}
function disabledAllBtns() {
  btns.forEach(btn => btn.disabled = true);
}
function sceneEnd() {
  clearInterval(timer);
  setAnim('4', false);
  setSoundForGameMode(4);
  setTimeout(() => {
    change_btns.showBtn();
  }, 2000);
  disabledAllBtns();
}
function setActiveBtn() {
  btns.forEach(btn => {
    if (btn.dataset.mode == gameMode && !btn.classList.contains('active')) {
      btn.classList.add('active');
    } else if (btn.dataset.mode != gameMode && btn.classList.contains('active')) {
      btn.classList.remove('active');
    }
  });
}
function setSoundForGameMode(mode) {
  if (timeoutsSpace.length) clearTimeoutSpaces();
  if (timersSpacePlay.length) clearTimers();
  let needSounds = soundForScene[scene];
  let audioArrSetting = needSounds[mode || gameMode];
  Object.values(needSounds).forEach(audioSettingArr => {
    audioSettingArr.forEach(audioSetting => {
      if (Array.isArray(audioSetting.audioName)) {
        audioSetting.audioName.forEach(audioName => sound.pauseAudio({
          audioName
        }));
      } else {
        sound.pauseAudio({
          audioName: audioSetting.audioName
        });
      }
    });
  });
  audioArrSetting.forEach(audioSetting => {
    if (Array.isArray(audioSetting.audioName)) {
      playGameAudio(audioSetting, true);
    } else {
      playGameAudio(audioSetting);
    }
  });
  function playGameAudio(audioSetting) {
    let random = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let prevAudioName;
    let timeout = setTimeout(() => {
      if (audioSetting.spacePlay) {
        let randomAudioName = getRandomAudioName(audioSetting.audioName);
        random ? sound.playAudio({
          ...audioSetting,
          audioName: randomAudioName
        }) : sound.playAudio(audioSetting);
        prevAudioName = randomAudioName;
        let timer = setInterval(() => {
          let randomAudioName = getRandomAudioName(audioSetting.audioName, prevAudioName);
          random ? sound.playAudio({
            ...audioSetting,
            audioName: randomAudioName
          }) : sound.playAudio(audioSetting);
          prevAudioName = randomAudioName;
        }, audioSetting.spacePlay);
        timersSpacePlay.push(timer);
      } else {
        sound.playAudio(audioSetting);
      }
    }, audioSetting.spaceDelay);
    timeoutsSpace.push(timeout);
    if (audioSetting.spaceDuration) spaceDuration(audioSetting.spaceDuration);
  }
  function spaceDuration(duration) {
    setTimeout(() => {
      clearTimeoutSpaces();
      clearTimers();
    }, duration);
  }
  function clearTimeoutSpaces() {
    timeoutsSpace.forEach(timeout => {
      clearTimeout(timeout);
    });
    timeoutsSpace = [];
  }
  function clearTimers() {
    timersSpacePlay.forEach(timer => {
      clearInterval(timer);
    });
    timersSpacePlay = [];
  }
  function getRandomAudioName(audioNamesArr, prevAudioName) {
    let audioName = audioNamesArr[randomInteger(0, audioNamesArr.length - 1)];
    if (audioName === prevAudioName) return getRandomAudioName(audioNamesArr, prevAudioName);
    return audioName;
  }
  function randomInteger(min, max) {
    // получить случайное число от (min-0.5) до (max+0.5)
    let rand = min - 0.5 + Math.random() * (max - min + 1);
    return Math.round(rand);
  }
}

;// CONCATENATED MODULE: ./js/editFunctions.js
function editFunctions_hideGameInterface() {
  let gameInterface = document.querySelector('.gameInterface');
  gameInterface.classList.remove('show');
}
function removeScene(id) {
  let delEl = document.querySelector(`#scene${id}`);
  let container = document.querySelector('#container');
  if (delEl) container.removeChild(delEl);
}
function removeScenes(count) {
  if (!count) return;
  for (let i = 1; i < count; i++) {
    let delEl = document.querySelector(`#scene${i}`);
    let container = document.querySelector('#container');
    if (delEl) container.removeChild(delEl);
  }
}
function hideTalkEl() {
  let talkElement = document.querySelector('.talk');
  talkElement.classList.remove('talking');
}
function animScene(selector) {
  document.querySelector(selector).classList.add('anim');
}
function changeClassImgBox(target, imgObj) {
  target.closest('.characters-scene__item').classList.add(imgObj.changeClass);
}
function changeImg(imgChangeSettingArr) {
  imgChangeSettingArr.forEach(setting => {
    let target = document.querySelector(`.${setting.target} img`);
    for (let i = 1; i < Object.keys(setting).length; i++) {
      let imgObj = setting[`img${i}`];
      setTimeout(() => {
        target.src = imgObj.src;
        target.addEventListener('load', () => {
          if (imgObj.changeClass) {
            changeClassImgBox(target, imgObj);
          }
        });
      }, imgObj.delay);
    }
  });
}
function fade(time, fast) {
  let fadeEl = document.querySelector('#fade');
  let fastFadeEl = document.querySelector('#fastFade');
  let usingEl = fast ? fastFadeEl : fadeEl;
  usingEl.classList.add('show');
  hideTalkEl();
  setTimeout(() => {
    usingEl.classList.remove('show');
  }, time);
}
function shake(_ref) {
  let {
    delay,
    transition
  } = _ref;
  const onSpineEl = document.querySelector('#onSpine');
  const spineEl = document.querySelector('.spines__box');
  [onSpineEl, spineEl].forEach(el => {
    setTimeout(() => addShakeClass(el), delay);
  });
  function addShakeClass(el) {
    el.classList.add('shaking');
    setTimeout(() => removeShakeClass(el), transition);
  }
  function removeShakeClass(el) {
    el.classList.remove('shaking');
  }
}

;// CONCATENATED MODULE: ./js/endScreen.js

const endScreen = {
    showEndScreen,
    hideEndScreen
  },
  endScreenEl = document.querySelector("#EndScreen"),
  watermarkEl = document.querySelector(".watermark");
function showEndScreen() {
  endScreenEl.classList.add("show");
  watermarkEl.classList.add("hide");
  if (sound.isPausedAudio('вступление')) {
    sound.playAudio({
      audioName: 'вступление',
      volume: 0.2,
      isLoop: true
    });
  }
}
function hideEndScreen() {
  endScreenEl.classList.remove("show");
  watermarkEl.classList.remove("hide");
}

;// CONCATENATED MODULE: ./js/play-btn.js


const playInit = () => {
  const playBtn = document.querySelector('.preloader__play');
  function play() {
    playStartSound();
    showWarnBtn();
    hidePreloader();
  }
  function hidePreloader() {
    let preloader = document.querySelector('#preloader');
    preloader.classList.add('hide');
  }
  function playStartSound() {
    sound.playAudio({
      audioName: 'вступление',
      volume: 0.2,
      isLoop: true
    });
  }
  playBtn.addEventListener('click', play, {
    once: true
  });
};
/* harmony default export */ var play_btn = (playInit);
;// CONCATENATED MODULE: ./js/main.js
// styles


// Scene create

// resolution

// sound

//fullscreen

// Preloader

// Typed

// Warning

// SceneSetting

// spine

// initGameMechanics

// button

// all scene count

// edit scene functions





//Main script
sound_soundAction();
js_fullscreen();
screenResolution();
SceneCreater(preloader);
Warning(gameInit);
play_btn();
let main_nowScene = 1,
  talkIndex = 0;
let nowTalk = getDialog(main_nowScene, talkIndex);
let nowSetting = sceneSettings[main_nowScene - 1];
let modifyScene = nowSetting.modifyScene;
let soundScene = nowSetting.sound;
let isGameScene = nowSetting.gameScene;
let isReplayPose = false;
function gameInit() {
  checkOnSpineScene(main_nowScene);
  removeScenes(main_nowScene); //для тестов
  spineManager.checkScene(main_nowScene);
  change_btns.clickCallback(changeScene);
  fade(1000, true);
  setSetting();
}
function setSound(soundSceneSetting) {
  let playSoundsArr = soundSceneSetting.play;
  let pauseSoundsArr = soundSceneSetting.pause;
  if (soundSceneSetting.chain) {
    playChainSounds(playSoundsArr, 0, soundSceneSetting.nextScene);
    return;
  }
  if (playSoundsArr) playSounds(playSoundsArr);
  if (pauseSoundsArr) pauseSounds(pauseSoundsArr);
}
function playChainSounds(soundArr) {
  let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let next = arguments.length > 2 ? arguments[2] : undefined;
  if (!soundArr[index]) {
    if (next) {
      updateSettings();
      updateScene();
      talk_updateer(nowTalk, ...getSettingForThisTalk(main_nowScene, talkIndex));
      setSetting();
    }
    return;
  }
  let audio = sound.playAudio(soundArr[index]);
  audio.addEventListener('ended', () => {
    playChainSounds(soundArr, index + 1, next);
  });
}
function setSoundTalk(soundTalk) {
  if (soundTalk) setSound(soundTalk);
}
function changeScene() {
  talkIndex++;
  nowTalk = getDialog(main_nowScene, talkIndex);
  let soundTalk = getSoundForThisTalk(main_nowScene, talkIndex);
  setSoundTalk(soundTalk);
  if (nowTalk !== undefined) {
    talk_updateer(nowTalk, ...getSettingForThisTalk(main_nowScene, talkIndex));
  } else {
    // change scene

    if (sceneCount === main_nowScene + 1) {
      endScreen.showEndScreen();
      change_btns.hideBtn();
      main_nowScene = 'end';
      pauseSoundAtEnd();
      hideTalkEl();
      spineManager.checkScene(main_nowScene);
      return;
    } else if (isReplayPose) {
      endScreen.showEndScreen();
      editFunctions_hideGameInterface();
      change_btns.hideBtn();
      main_nowScene = 'end';
      spineManager.checkScene(main_nowScene);
      return;
    }
    updateSettings();
    if (isGameScene) {
      change_btns.hideBtn();
      hideTalkEl();
      setTimeout(() => {
        updateScene();
        initGameMechanics(main_nowScene);
      }, nowSetting.gameDelayUpdate);
      if (nowSetting.gameFade) fade(nowSetting.gameFade);
    } else if (modifyScene) {
      addModifyAndUpdateScene(modifyScene);
      change_btns.hideBtn();
      hideTalkEl();
    } else {
      updateScene();
      talk_updateer(nowTalk, ...getSettingForThisTalk(main_nowScene, talkIndex));
    }
    if (soundScene) setSound(soundScene);
  }
  if (nowTalk && !getDialog(main_nowScene, talkIndex + 1)) {
    if (modifyScene?.btnEnd) change_btns.changeBtn(modifyScene.btnEnd);
  }
}
function updateScene() {
  checkOnSpineScene(main_nowScene + 1);
  removeScene(main_nowScene);
  main_nowScene++;
  spineManager.checkScene(main_nowScene);
  talkIndex = 0;
  nowTalk = getDialog(main_nowScene, talkIndex);
}
function setSetting() {
  if (modifyScene) modify(modifyScene);
  if (soundScene) setSound(soundScene);
  if (isGameScene) {
    change_btns.hideBtn();
    initGameMechanics(main_nowScene);
  }
}
function updateSettings() {
  nowSetting = sceneSettings[main_nowScene];
  isGameScene = nowSetting.gameScene;
  modifyScene = nowSetting.modifyScene;
  soundScene = nowSetting.sound;
}
function addModifyAndUpdateScene(modifyObj) {
  if (modifyScene.delayUpdate) {
    setTimeout(() => {
      updateScene();
    }, modifyScene.delayUpdate);
  } else {
    updateScene();
  }
  modify(modifyObj);
}
function modify(modifyObj) {
  if (modifyObj.fadeStart) {
    change_btns.hideBtn();
    fade(modifyObj.fadeStart);
  }
  if (modifyObj.anim) {
    modifyObj.anim.forEach(className => {
      animScene(className);
    });
  }
  if (modifyObj.imgChange) {
    changeImg(modifyObj.imgChange);
  }
  if (modifyObj.next) {
    if (modifyObj.fadeNext) {
      setTimeout(() => {
        fade(modifyObj.fadeNext);
      }, modifyObj.delayNext - modifyObj.fadeNext);
    }
    setTimeout(() => {
      updateScene();
      let btn = sceneSettings[main_nowScene - 1]?.modifyScene?.btn;
      if (btn) {
        change_btns.changeBtn(btn);
      }
      talk_updateer(nowTalk, ...getSettingForThisTalk(main_nowScene, talkIndex));
    }, modifyObj.delayNext);
  } else {
    setTimeout(() => {
      talk_updateer(nowTalk, ...getSettingForThisTalk(main_nowScene, talkIndex));
    }, modifyScene.delayTalk);
  }
  if (modifyObj.btn && !modifyObj.next) {
    change_btns.changeBtn(modifyObj.btn);
  }
  if (modifyObj.gameEnd) {
    editFunctions_hideGameInterface();
  }
  if (modifyObj.shake) shake(modifyObj.shake);
}
function getDialog(idScene, indexTalk) {
  return dialog[idScene - 1][indexTalk];
}
function getSettingForThisTalk(idScene, indexTalk) {
  let talkBabelSetting = sceneSettings[idScene - 1][`talk${indexTalk + 1}`];
  return talkBabelSetting ? [talkBabelSetting.top, talkBabelSetting.left, talkBabelSetting.type] : [];
}
function getSoundForThisTalk(idScene, indexTalk) {
  let getSoundSetting;
  getSoundSetting = sceneSettings[idScene - 1][`talk${indexTalk + 1}`]?.sound;
  return getSoundSetting;
}
function playSounds(audioPlaySettingArr) {
  audioPlaySettingArr.forEach(audioSetting => sound.playAudio(audioSetting));
}
function pauseSounds(audioPauseSettingArr) {
  audioPauseSettingArr.forEach(audioSetting => sound.pauseAudio(audioSetting));
}
function pauseSoundAtEnd() {}
}();
/******/ })()
;